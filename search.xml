<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ArchLinux + DDE 安装教程</title>
    <url>/posts/4bf5e477/</url>
    <content><![CDATA[<p><strong>简述：</strong>　本博客主要对安装 <code>ArchLinux</code> 过程中的步骤的知识补充：告诉你教程里面的都是一些什么东西，和它们的一些入门理解；总的而言，侧重： <strong>是什么？</strong>  &amp;&amp;  <strong>怎么做？</strong>  &amp;&amp; <code>ArchLinux</code> + <code>DDE</code> (深度桌面环境) 的安装教程.</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200729_155032_10.jpg" width="90%"/ loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p><code>ArchLinux</code> 久仰大名，一直都想安装试一下水，看 <code>WiKi</code> 教程有点一言难尽，对新手不是很友好（难道大家对新手的定义不一样？？？）看网上教程和 WiKi 都是需要耐心的，<code>ArchLnux</code> 的第一次安装是都要经过一些坑的。</p>
<br>

<h2 id="文章受众："><a href="#文章受众：" class="headerlink" title="文章受众："></a>文章受众：</h2><ul>
<li>想要安装 <code>ArchLinux</code> 的萌新，或者是第一次安装 <code>ArchLinux</code> 寻找教程的人</li>
<li>想了解安装过程中， 挂载 <code>mount</code>、<code>chroot</code> 、格式化、分区表等知识（知道是什么，和简单的怎么使用）</li>
<li>在 <code>ArchLinux</code> 中如何安装 <code>DDE</code> （深度桌面环境）的人</li>
<li>在虚拟机 <code>VMware</code> 或者实体机 安装 <code>ArchLinux</code> 的人</li>
<li>对我的文章感兴趣的人</li>
<li>与本文邂逅的你</li>
</ul>
<br>

<h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><ul>
<li>安装 <code>ArchLinux</code> 必须联网;</li>
<li><code>mount</code> 挂载是将 硬盘里分区 挂载到 <strong>live 环境</strong></li>
<li><code>chroot</code> 是在 <strong>live 环境</strong> 和 <strong>安装到磁盘的系统</strong> 之间切换</li>
<li>设置了分区表之后, 还需要格式化</li>
<li>没有网络,需要安装 <code>NetworkManager</code> 和 执行 <code>dhcpcd</code></li>
<li>安装 DDE 时候不需要 修改配置文件 <code>/etc/lightdm/lightdm.conf</code> 和 <code>.xinitrc</code></li>
<li>磁盘的分区表有两种方式 <code>uefi + gpt + efi</code> 或 <code>legacy + mbr</code> </li>
<li>安装启动器有三种情况：<code>grub(bios 启动)</code> 或 <code>grub + efibootmgr ==&gt; (EFI 启动)</code> 或 <code>额外安装一个 os-prober ==&gt; (多系统)</code></li>
</ul>
<br>

<h2 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h2><h3 id="大概流程："><a href="#大概流程：" class="headerlink" title="大概流程："></a>大概流程：</h3><p>先来一个简单点的， 在 <code>VMware</code> 里面安装 <code>ArchLinux</code>， 其步骤顺序如下：</p>
<ol>
<li>清空一个 <strong>磁盘</strong></li>
<li>对 <strong>磁盘</strong> 设置 <strong>分区表</strong> </li>
<li>对 <strong>子分区</strong> 选择适合的  <strong>TYPE</strong>；</li>
<li>选用各自的 <strong>文件类型</strong> 格式化  <strong>子分区</strong> ；</li>
<li>下载 <code>archLinu_xxxxx.iso</code> 镜像</li>
<li>设置第一启动项</li>
<li>开机自动进入 <strong>live 环境</strong> </li>
<li>将 <strong>磁盘</strong> 挂载</li>
<li>换源</li>
<li>安装 <strong>基本包</strong>（含内核等）</li>
<li>配置 <code>fstab</code> 后，<code>chroot</code> 切换操作权</li>
<li>安装 <strong>必须软件包</strong>  ，设置 <code>Locale</code></li>
<li>设置 <code>root</code> 密码，和新建一个用户</li>
<li>安装 <code>Intel-ucode</code>（非 <code>Intel</code> CPU 跳过）</li>
<li>安装引导 <code>grub</code> </li>
<li>退出和重启系统</li>
<li>开启 <code>NetworkManager</code> 服务自动联网</li>
<li>安装桌面环境 <code>DDE</code></li>
<li>详细的个性化配置</li>
<li>享受 <code>ArchLinux</code> 的快乐</li>
</ol>
<br>

<h3 id="详细流程："><a href="#详细流程：" class="headerlink" title="详细流程："></a>详细流程：</h3><h4 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h4><p><code>win10 </code> 、<code>VMware 15 Pro</code>、<code>Intel(R) Core(TM) i5-10210U</code></p>
<br>

<h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像:"></a>下载镜像:</h4><p>下载 <code>ArchLinux</code> <a href="https://www.archlinux.org/download/">官网</a> 的镜像点下载   <code>archlinux-2020.07.01-x86_64.iso</code> ，其内核是 <code>5.x</code> 版本</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20200730134551084.png" width="80%"/ loading="lazy">

<br>

<h4 id="在-VMware-里面新建系统"><a href="#在-VMware-里面新建系统" class="headerlink" title="在 VMware 里面新建系统:"></a>在 <code>VMware</code> 里面新建系统:</h4><p><strong>注意如下三点：</strong></p>
<ul>
<li><p>选择自定义(高级)，因为 <code>VM</code> 对 <code>ArchLinux</code> 没有直接支持； 选择 <code>Linux(L)</code>   时候选择选用 <code>Linux 5.x</code> 的内核版本</p>
  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200730173637.png" width="40%"/ loading="lazy">
</li>
<li><p>挂载 <code>ios</code> 镜像</p>
  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200730173716.png" width="50%"/ loading="lazy">
</li>
<li><p>设置为 <code>EFI</code> 方式启动</p>
  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20200730133901341.png" width="50%"/ loading="lazy"></li>
</ul>
 <br>

<p>启动虚拟机，默认选择第一个：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20200730135432879.png" width="50%"/ loading="lazy">

<br>

<p>等待一阵如下跳动</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20200730135447732.png" width="50%"/ loading="lazy">

<br>

<p>进入到  <strong>live 环境</strong> （此是内存条里面，加载的刚才的 ios 镜像系统），<em>注意此时 root 用户是 红色</em><br> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20200730135836279.png" width="30%"/ loading="lazy"></p>
<br>

<h4 id="检查磁盘状态-lsblk"><a href="#检查磁盘状态-lsblk" class="headerlink" title="检查磁盘状态 lsblk:"></a>检查磁盘状态 <code>lsblk</code>:</h4><p>查看磁盘状态 <code>lsblk</code>； 其中 <code>sda</code> 是我们清空一个硬盘（SSD | HDD | 只是已有系统中的硬盘中划分出来的一段 50G 空白区域）（后文统称 <strong>磁盘</strong>）</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20200730140019922.png" width="40%"/ loading="lazy">

<br>

<h4 id="选择分区表-cfdisk"><a href="#选择分区表-cfdisk" class="headerlink" title="选择分区表 cfdisk:"></a>选择分区表 <code>cfdisk</code>:</h4><p>对 <strong>磁盘</strong> 设置 <strong>分区表</strong>，使用 <code>cfdisk</code> ；</p>
<p>然后选择 分区表的方式，通常有两种：</p>
<ul>
<li><p><strong>uefi + gpt + efi：</strong> 推荐，比较适合 ssd 等大型新型磁盘 管理 </p>
</li>
<li><p><strong>legacy + mbr：</strong> 以前老式 win7 的机械硬盘管理方式</p>
<br></li>
</ul>
<p>这里我们选用 <code>uefi + gpt + efi</code> 方式，特点是磁盘必须至少分成两个分区，其中一个用来给 efi 使用；</p>
<p>输入  <code>cfdisk</code> 后，将系统分成两个分区，其中 EFI 分区只要 512 M 大小即可；</p>
 <br>

<h4 id="选择分区"><a href="#选择分区" class="headerlink" title="选择分区:"></a>选择分区:</h4><p>对已有分区表的一整块、未格式化的 <strong>磁盘</strong>，进行分区后得到2个 <strong>子分区</strong>，且对每一个 <strong>子分区</strong> 选择适合的  <strong>TYPE</strong>；</p>
<p>输入以下命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cfdisk</span>
<span class="token comment"># 选择底部 gpt ，回车</span>
<span class="token comment"># 选择 NEW ，回车，输入 512M，类型选择 EFI SYstem 格式</span>
<span class="token comment"># 选择 NEW ，回车，剩下的 49.5G，类型选择 默认 Linux filesystem 格式</span>
<span class="token comment"># 选择 Write ， 输入 yes，回车 表示写入保存</span>
<span class="token comment"># 选择 Quit ，推出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20200730140329031.png" width="50%"/ loading="lazy">

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20200730140633080.png" width="50%"/ loading="lazy">

<br>

<h4 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区:"></a>格式化分区:</h4><p>再对有各自的 <strong>TYPE</strong> 的 <strong>子分区</strong>  选用不同的 <strong>文件类型</strong> 来进行格式化；</p>
<pre class="line-numbers language-none"><code class="language-none">mkfs.fat -F32 &#x2F;dev&#x2F;sda1
mkfs.ext4 &#x2F;dev&#x2F;sda2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20200730141453710.png" width="50%"/ loading="lazy">
<br>

<h4 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区:"></a>挂载分区:</h4><p>挂载分区，这里是将 <strong>物理磁盘的实际分区</strong> 挂载到 <strong>live 环境</strong> 的 <strong>&#x2F;mnt</strong> 目录下 </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /mnt/boot/EFI
<span class="token function">mount</span> /dev/sda2 /mnt
<span class="token function">mount</span> /dev/sda1 /mnt/boot/EFI<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="换国内Arch-的源"><a href="#换国内Arch-的源" class="headerlink" title="换国内Arch 的源:"></a>换国内<code>Arch</code> 的源:</h4><p>编辑 <code>/etc/pacman.d/mirrorlist</code>， 在文件的最顶端添加：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将下面源添加到 mirrorlist 的最顶部， 外国语和中科大的源</span>
Server <span class="token operator">=</span> https://mirrors.bfsu.edu.cn/archlinux/<span class="token variable">$repo</span>/os/<span class="token variable">$arch</span>
Server <span class="token operator">=</span> https://mirrors.ustc.edu.cn/archlinux/<span class="token variable">$repo</span>/os/<span class="token variable">$arch</span>

<span class="token comment"># 更新软件包缓存：</span>
<span class="token function">sudo</span> pacman <span class="token parameter variable">-Syy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="安装基本包"><a href="#安装基本包" class="headerlink" title="安装基本包:"></a>安装基本包:</h4><p>必须联网下载过程;</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacstrap /mnt base base-devel linux linux-firmware dhcpcd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>

<h4 id="配置-Fstab"><a href="#配置-Fstab" class="headerlink" title="配置 Fstab:"></a>配置 Fstab:</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成自动挂载分区的fstab文件，执行以下命令：</span>
genfstab <span class="token parameter variable">-L</span> /mnt <span class="token operator">>></span> /mnt/etc/fstab

<span class="token comment"># 输出生成的文件来检查是否正确</span>
<span class="token function">cat</span> /mnt/etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>若是看到  <code>/dev/sda2</code> 挂载到 <code>/</code> ； <code>/dev/sda1</code> 挂载到 <code>/boot/EFI</code> ，则 OK</p>
<br>

<h4 id="执行-chroot"><a href="#执行-chroot" class="headerlink" title="执行 chroot :"></a>执行 chroot :</h4><p>执行 chroot 将系统的执行权限切换到已经安装好的硬盘系统里面（之前都是在 内存运行 的挂载 iso 的 live 环境 里面执行的），执行如下命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">arch-chroot /mnt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20200730151933945.png" width="20%"/ loading="lazy">

<br>

<h4 id="安装软件必须的软件包"><a href="#安装软件必须的软件包" class="headerlink" title="安装软件必须的软件包:"></a>安装软件必须的软件包:</h4><p><code>networkmanager</code> 自动联网的， 不安装的话，你就知道有多坑了</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-S</span> <span class="token function">vim</span> dialog wpa_supplicant ntfs-3g networkmanager netctl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>

<h4 id="设置-Locale"><a href="#设置-Locale" class="headerlink" title="设置 Locale:"></a>设置 Locale:</h4><p>设置我们使用的语言选项，执行如下命令来编辑<code>/etc/locale.gen</code>文件；</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/locale.gen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在文件中找到<code>zh_CN.UTF-8 UTF-8</code>、 <code>en_US.UTF-8 UTF-8</code>这两行，去掉行首的 # 号，保存并退出。然后执 </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">locale-gen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>打开（不存在时会创建）<code>/etc/locale.conf</code>文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/locale.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在文件的第一行加入以下内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>保存并退出。</p>
<br>

<h4 id="设置-root-密码"><a href="#设置-root-密码" class="headerlink" title="设置 root 密码:"></a>设置 root 密码:</h4><p>执行如下，</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">passwd</span>

<span class="token comment"># 输入两次相同的密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户:"></a>创建新用户:</h4><p>执行如下命令，很坑的的一点，如果安装深度环境 DDE 的话，必须要新建用户</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> <span class="token parameter variable">-m</span> <span class="token parameter variable">-G</span> wheel <span class="token parameter variable">-s</span> /bin/bash <span class="token function">free</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><code>-m：创建用户主目录（/home/[用户名]）</code></li>
<li><code>-G：用户要加入的附加组列表；此处</code>将用户加到<code>wheel</code>组中，之后可以给这个组执行<code>sudo</code>命令的权限</li>
<li><code>-s：</code>指定了用户默认登录shell的路径，此处设置为bash的路径&#96;&#96;</li>
</ul>
<p>设置密码：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">passwd</span> <span class="token function">free</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后输入两次密码即可。提权， 修改 &#x2F;etc&#x2F;sudoers文件，删除wheel组前面的注释（#）即可：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## Uncomment to allow members of group wheel to execute any command</span>
%wheel <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br>

<h4 id="安装-grub"><a href="#安装-grub" class="headerlink" title="安装 grub :"></a>安装 grub :</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># EFI 启动方式, 需安装 grub 和 efibootmgr</span>
pacman <span class="token parameter variable">-S</span> grub efibootmgr


<span class="token comment"># 然后，还需要将其安装到EFI分区当中：</span>
grub-install <span class="token parameter variable">--recheck</span> /dev/   <span class="token comment"># 注意：此处的 /dev/sda 后没有数字</span>

<span class="token comment"># 生成一个grub的配置文件</span>
<span class="token function">grub-mkconfig</span> <span class="token parameter variable">-o</span> /boot/grub/grub.cfg
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="重启系统"><a href="#重启系统" class="headerlink" title="重启系统:"></a>重启系统:</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">exit</span>
<span class="token function">umount</span> <span class="token parameter variable">-R</span> /mnt
<span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<BR>

<h4 id="启动网络服务"><a href="#启动网络服务" class="headerlink" title="启动网络服务,:"></a>启动网络服务,:</h4><p>执行以下命令:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ip</span> addr  <span class="token comment"># 查看ip 是否获取正确</span>
dhcpcd   <span class="token comment"># 自动开启网络</span>


<span class="token comment"># 设置网络工具开机自启</span>
systemctl <span class="token builtin class-name">enable</span> NetworkManager
systemctl <span class="token builtin class-name">enable</span> dhcpcd

<span class="token function">ping</span> baidu.com   <span class="token comment"># 检测是否有网络</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体:"></a>安装字体:</h4><p>不安装的后果就是, 所有的中文都是乱码 xx 符号</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-S</span> wqy-microhei ttf-liberation ttf-dejavu ttf-roboto ttf-droid adobe-source-han-sans-otc-fonts adobe-source-han-serif-otc-fonts adobe-source-code-pro-fonts adobe-source-sans-pro-fonts adobe-source-serif-pro-fonts noto-fonts noto-fonts-extra noto-fonts-emoji ttf-fira-code<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>

<h4 id="安装-DDE-深度桌面环境"><a href="#安装-DDE-深度桌面环境" class="headerlink" title="安装 DDE 深度桌面环境:"></a>安装 DDE 深度桌面环境:</h4><p>安装 DDE 的深坑,是不需要修改配置文件的 <code>/etc/lightdm/lightdm.conf</code>；之前网上凡是能够查询到的, 教程都说要修改, <code>ArchLinux</code> 的 wiki也说要修改, 于是乎，问了问 deepin 的研发，这里面这一步，后面被某一个脚本给做了此操作。所以现在实际是不需要修改的。只需要安装下面 4 个包， 然后设置一个开机自启即可，其余的不用做。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> xorg xorg-server deepin deepin-extra

systemctl <span class="token builtin class-name">enable</span> lightdm  <span class="token comment"># 设置开机自启</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<ul>
<li><p><code>xorg:</code>  所有的桌面环境安装之前都必备的</p>
</li>
<li><p><code>deepin:</code>  所有基础组件</p>
</li>
<li><p><code>deepin-extra:</code>  一些额外的应用程序来提供一个更完整的桌面环境</p>
</li>
</ul>
<br>

<h4 id="重启系统-1"><a href="#重启系统-1" class="headerlink" title="重启系统:"></a>重启系统:</h4><p>重启系统,可以看到如下:</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/ArchLinux-2020-07-29-15-49-10.png" width="90%"/ loading="lazy">

<br>

<h4 id="安装-VM-tools-可选"><a href="#安装-VM-tools-可选" class="headerlink" title="安装 VM-tools(可选)"></a>安装 VM-tools(可选)</h4><p>安装 VM-tools 有两个选择,一个是开源的 <code>Open-VM-Tools</code> , 一个是官方的 <code>VMware Tools</code>,  任选其一即可,若是实体机安装,则没有必要.</p>
<p><a href="%5Bhttps://wiki.archlinux.org/index.php/VMware_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)/Installing_Arch_as_a_guest_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#Open-VM-Tools%5D(https://wiki.archlinux.org/index.php/VMware_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)/Installing_Arch_as_a_guest_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#Open-VM-Tools)">VMware (简体中文)&#x2F;Installing Arch as a guest (简体中文) </a></p>
<br>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h3><ul>
<li><a href="https://www.viseator.com/2017/05/17/arch_install/">以官方Wiki的方式安装ArchLinux</a> </li>
<li><a href="https://blog.yoitsu.moe/arch-linux/installing_arch_linux_for_complete_newbies.html">给 GNU&#x2F;Linux 萌新的 Arch Linux 安装指南 rev.B</a></li>
<li><a href="https://www.cnblogs.com/freerqy/p/8502838.html">在VMWare上安装Arch Linux</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/141067184">ArchLinux安装（Deepin v20桌面环境）</a></li>
</ul>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
        <tag>DDE</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 实现智能指针：shared_ptr 和 unique_ptr</title>
    <url>/posts/9ec225d6/</url>
    <content><![CDATA[<p><strong>简  述:</strong> C++11 智能指针的深入分析，和动手实现简版的智能指针 <code>std::shared_ptr</code> 、<code>std::unique_ptr</code></p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>实现原理提前需要理解 <strong>特殊成员函数</strong>、<code>std::exchange() C++14</code>、<code>std::swap()</code>、 <code>std::move()</code>、<code>constexpr</code>、<code>explicit</code>、<code>noexcept</code> 等，若是遗忘可参考此文</p>
<ul>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/128367884">C++ 类的六个特殊成员函数</a></li>
<li><a href="">C++ 11&#x2F;14&#x2F;17 的新特性  占位</a></li>
</ul>
<br>

<p>最后，Demo 实现或许不够十分完美和严谨，但对于其理解智能指针的原理和面试手写实现时候，足够。若有纰漏，请指正。</p>
<br>

<h2 id="std-shared-ptr"><a href="#std-shared-ptr" class="headerlink" title="std::shared_ptr"></a>std::shared_ptr</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul>
<li><p><code>shared_ptr</code> 的原理： 通过<strong>引用计数</strong>的方式来实现多个 shared_ptr 对象之间<strong>共享</strong>资源。</p>
</li>
<li><p>通过引用计数和模板来实现 shared_ptr；构造函数定义的时候，要初始化其指针、引用计数、和 mutex</p>
</li>
<li><p>“copy assignment constructor” 除了校验是否相等、是否为空的时候、拷贝时要先释放旧资源，旧的引用计数 -1，赋值后再指向对新的资源的引用计数 +1</p>
</li>
<li><p>释放资源时，要<strong>先校验是否存在，及计数为 0</strong> 才释放；</p>
</li>
</ul>
<br>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>　　💻  <code>win10 22H2</code>  📎 <code>Visual Studio 2019</code> 📎 <code>C++11</code> 见 <a href="https://github.com/XMuli/QtExamples/blob/master/Studio/Studio/SharedPtr.h">SharedPtr.h</a></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*******************************************************************
 * Copyright (c) 2022~-023 XMuli  All rights reserved.
 * Description: C++ 实现一个核心的 shared_ptr 智能指针模板类
 ******************************************************************/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">SharedPtr</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">SharedPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_ptr</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_refCount</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_pMutex</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"default constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function">SharedPtr</span><span class="token punctuation">(</span>T<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_ptr</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_refCount</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_pMutex</span><span class="token punctuation">(</span><span class="token keyword">new</span> mutex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no default constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token function">SharedPtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> SharedPtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>  <span class="token comment">// 其 _refCount 可以通过另外一个指针来修改，指向的是同一个地址</span>
        <span class="token operator">:</span> <span class="token function">_ptr</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>_ptr<span class="token punctuation">)</span>
        <span class="token punctuation">,</span> <span class="token function">_refCount</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>_refCount<span class="token punctuation">)</span>
        <span class="token punctuation">,</span> <span class="token function">_pMutex</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>_pMutex<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token function">addRefCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    SharedPtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> SharedPtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy assignment constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>obj <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>_ptr <span class="token operator">!=</span> obj<span class="token punctuation">.</span>_ptr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 先释放旧的资源</span>

                _ptr <span class="token operator">=</span> obj<span class="token punctuation">.</span>_ptr<span class="token punctuation">;</span>
                _refCount <span class="token operator">=</span> obj<span class="token punctuation">.</span>_refCount<span class="token punctuation">;</span>
                _pMutex <span class="token operator">=</span> obj<span class="token punctuation">.</span>_pMutex<span class="token punctuation">;</span>

                <span class="token function">addRefCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 再技计数 +1</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//SharedPtr(SharedPtr&lt;T>&amp;&amp; obj) noexcept;</span>
    <span class="token comment">//SharedPtr&lt;T>&amp; operator=(SharedPtr&lt;T>&amp;&amp; obj)noexcept;</span>

    <span class="token operator">~</span><span class="token function">SharedPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"destructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    T<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token operator">*</span>_ptr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    T<span class="token operator">*</span> <span class="token keyword">operator</span><span class="token operator">-></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _ptr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

    <span class="token keyword">int</span> <span class="token function">useCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token operator">*</span>_refCount<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    T<span class="token operator">*</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _ptr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">addRefCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"addRefCount"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        _pMutex<span class="token operator">-></span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">++</span><span class="token operator">*</span>_refCount<span class="token punctuation">;</span>
        _pMutex<span class="token operator">-></span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"release"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">bool</span> bDelMutex <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        _pMutex<span class="token operator">-></span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>_ptr <span class="token operator">&amp;&amp;</span> <span class="token operator">--</span><span class="token operator">*</span>_refCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 先校验是否存在，及计数为 0 才释放</span>
            <span class="token keyword">delete</span> _ptr<span class="token punctuation">;</span>
            <span class="token keyword">delete</span> _refCount<span class="token punctuation">;</span>
            _ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
            _refCount <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>

            bDelMutex <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        _pMutex<span class="token operator">-></span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bDelMutex<span class="token punctuation">)</span>
            <span class="token keyword">delete</span> _pMutex<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">private</span><span class="token operator">:</span>                  <span class="token comment">// 需在构造函数中初始化</span>
    T<span class="token operator">*</span> _ptr<span class="token punctuation">;</span>              <span class="token comment">// 指向管理资源的指针</span>
    <span class="token keyword">int</span><span class="token operator">*</span> _refCount<span class="token punctuation">;</span>       <span class="token comment">// 引用计数</span>
    mutex<span class="token operator">*</span> _pMutex<span class="token punctuation">;</span>       <span class="token comment">// 计数自增非原子操作，加锁解决多线程</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    SharedPtr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sp1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    SharedPtr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sp2</span><span class="token punctuation">(</span>sp1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>sp2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
                                                                <span class="token comment">//sp1 与 sp2 在管理这部分资源，引用计数为 2</span>
    cout <span class="token operator">&lt;&lt;</span> sp1<span class="token punctuation">.</span><span class="token function">useCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>		<span class="token comment">//2	 20</span>
    cout <span class="token operator">&lt;&lt;</span> sp2<span class="token punctuation">.</span><span class="token function">useCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>		<span class="token comment">//2	 20</span>
                                                                  
    SharedPtr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sp3</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              
    sp2 <span class="token operator">=</span> sp3<span class="token punctuation">;</span>		                                            <span class="token comment">//sp3 赋值给它，释放管理的旧资源，引用计数-1，   </span>
    cout <span class="token operator">&lt;&lt;</span> sp1<span class="token punctuation">.</span><span class="token function">useCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment">//1	 20</span>
    cout <span class="token operator">&lt;&lt;</span> sp2<span class="token punctuation">.</span><span class="token function">useCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment">//2	 30</span>
    cout <span class="token operator">&lt;&lt;</span> sp3<span class="token punctuation">.</span><span class="token function">useCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment">//2	 30</span>
                                                                  
    sp1 <span class="token operator">=</span> sp3<span class="token punctuation">;</span>                                                    
    cout <span class="token operator">&lt;&lt;</span> sp1<span class="token punctuation">.</span><span class="token function">useCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment">//3	 30</span>
    cout <span class="token operator">&lt;&lt;</span> sp2<span class="token punctuation">.</span><span class="token function">useCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment">//3	 30</span>
    cout <span class="token operator">&lt;&lt;</span> sp3<span class="token punctuation">.</span><span class="token function">useCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment">//3	 30</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello World!\n"</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*****************************打印结果*******************************
no default constructor
copy constructor
addRefCount
2  *ptr:20
2  *ptr:20
no default constructor
copy assignment constructor
release
addRefCount
1  *ptr:20
2  *ptr:30
2  *ptr:30
copy assignment constructor
release
addRefCount
3  *ptr:30
3  *ptr:30
3  *ptr:30
Hello World!
destructor
release
destructor
release
destructor
release
 ******************************************************************/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p><strong>Note:</strong> </p>
<ul>
<li><p>mutex 实现了引用计数是线程安全的。但智能指针管理的对象存放在<strong>堆</strong>上，两个线程中同时去访问，会导致线程安全问题。</p>
</li>
<li><p>书写测试时，若使用默认构造函数, 成员变量 _ptr、_refCount、_pMutex 在 release() 中容易崩溃；推荐带参的构造函数，完美运行测试</p>
</li>
</ul>
<br>

<h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><ul>
<li><a href="https://juejin.cn/post/7111726931301072910#heading-8">C++ 智能指针与底层实现剖析</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1688444">面试题：简单实现一个shared_ptr智能指针</a></li>
<li><a href="https://blog.csdn.net/Z_Stand/article/details/98512756">C++智能指针: shared_ptr 实现详解</a></li>
</ul>
<br>

<h2 id="std-unique-ptr"><a href="#std-unique-ptr" class="headerlink" title="std::unique_ptr"></a>std::unique_ptr</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><ul>
<li><code>unique_ptr</code>的设计思路非常的粗暴：<strong>防拷贝</strong>，也就是<strong>不让拷贝和赋值</strong>。</li>
<li>unique_ptr <strong>唯一</strong> 拥有其所指对象，同一时刻只能有一个unique_ptr 指向给定对象（通过禁止拷贝语义、只有移动语义来实现</li>
</ul>
<br>

<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>　　💻  <code>win10 22H2</code> 📎  <code>Visual Studio 2019</code> 📎 <code>C++11</code> 见 <a href="https://github.com/XMuli/QtExamples/blob/master/Studio/Studio/UniquePtr.h">UniquePtr.h</a></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*******************************************************************
 * Copyright (c) 2022~2023 XMuli  All rights reserved.
 * Description: C++ 实现一个核心的 unique_ptr 智能指针模板类；
 ******************************************************************/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">UniquePtr</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">constexpr</span> <span class="token function">UniquePtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_ptr</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"default constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">explicit</span>  <span class="token function">UniquePtr</span><span class="token punctuation">(</span>T<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_ptr</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no default constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token function">UniquePtr</span><span class="token punctuation">(</span>UniquePtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> 
		<span class="token operator">:</span> <span class="token function">_ptr</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>_ptr<span class="token punctuation">)</span> 
	<span class="token punctuation">&#123;</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"move constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
		obj<span class="token punctuation">.</span>_ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	UniquePtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>UniquePtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">)</span> <span class="token keyword">noexcept</span>
	<span class="token punctuation">&#123;</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"move assignment constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>obj <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>_ptr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                _ptr <span class="token operator">=</span> obj<span class="token punctuation">.</span>_ptr<span class="token punctuation">;</span>
                obj<span class="token punctuation">.</span>_ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">UniquePtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> UniquePtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> obj<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>		<span class="token comment">// C++11 delete 禁止方式，C++98 用 private 来隐藏</span>
    UniquePtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> UniquePtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> obj<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

	<span class="token operator">~</span><span class="token function">UniquePtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"destructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>_ptr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">delete</span> _ptr<span class="token punctuation">;</span>
			_ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	T<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token operator">*</span>_ptr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	T<span class="token operator">*</span> <span class="token keyword">operator</span><span class="token operator">-></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _ptr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	T<span class="token operator">*</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _ptr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

	T<span class="token operator">*</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// return std::exchange(_ptr, nullptr); // C++14</span>
	<span class="token punctuation">&#123;</span>
		T<span class="token operator">*</span> temp <span class="token operator">=</span> _ptr<span class="token punctuation">;</span>
        _ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> temp<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span>T<span class="token operator">*</span> ptr<span class="token punctuation">)</span>		<span class="token comment">// std::exchange(_ptr, ptr); // C++14</span>
	<span class="token punctuation">&#123;</span>
		_ptr <span class="token operator">=</span> ptr<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>UniquePtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>_ptr<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
	T<span class="token operator">*</span> _ptr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	UniquePtr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">up1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"up1:"</span> <span class="token operator">&lt;&lt;</span> up1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>up1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	UniquePtr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">up2</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>up1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 控制权变更</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"up1:"</span> <span class="token operator">&lt;&lt;</span> up1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>		        <span class="token comment">// nullptr, 此时 up1 已无控制权</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"up2:"</span> <span class="token operator">&lt;&lt;</span> up2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>up2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	
	UniquePtr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">up3</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	UniquePtr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">up4</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"up3:"</span> <span class="token operator">&lt;&lt;</span> up3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>up3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"up4:"</span> <span class="token operator">&lt;&lt;</span> up4<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>up4 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	up3 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>up2<span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">// 控制权变更</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"up3:"</span> <span class="token operator">&lt;&lt;</span> up3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>up3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"up4:"</span> <span class="token operator">&lt;&lt;</span> up4<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>up4 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	up3<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>up4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"up3:"</span> <span class="token operator">&lt;&lt;</span> up3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>up3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"up4:"</span> <span class="token operator">&lt;&lt;</span> up4<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>up4 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	
	up3<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"up3:"</span> <span class="token operator">&lt;&lt;</span> up3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello World!\n"</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*****************************打印结果*******************************
no default constructor
up1:0086DEB8  *ptr:10
move constructor
up1:00000000
up2:0086DEB8  *ptr:10
no default constructor
no default constructor
up3:008656D0  *ptr:30
up4:00865700  *ptr:40
move assignment constructor
up3:0086DEB8  *ptr:10
up4:00865700  *ptr:40
up3:00865700  *ptr:40
up4:0086DEB8  *ptr:10
up3:00000000
Hello World!
destructor
destructor
destructor
destructor
 ******************************************************************/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="reference-1"><a href="#reference-1" class="headerlink" title="reference"></a>reference</h3><ul>
<li><a href="https://juejin.cn/post/7122641980315680782#heading-1">二、C++实现unique_ptr</a></li>
<li><a href="https://www.jianshu.com/p/77c2988be336">面试官的动机——实现智能指针1：unique_ptr</a></li>
<li><a href="https://juejin.cn/post/7099967913594978341">C++进阶：智能指针之unique_ptr</a></li>
</ul>
<br>

<h2 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> 【Studio】</p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序二 经验</category>
        <category>专栏 - QtExamples系列</category>
      </categories>
      <tags>
        <tag>C++11/17/20</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 标志位使用：校验、添加、删除</title>
    <url>/posts/65a4931a/</url>
    <content><![CDATA[<p><strong>简  述:</strong> 使用 <code>C++ / Qt</code> 偶尔会遇到需要设置一些属性，在此记录一番，方便下次时候。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// C++ 标志位</span>
flages <span class="token operator">&amp;</span> WS_POPUP                         <span class="token comment">// 检查一个标志位</span>
flages <span class="token operator">|=</span> WS_POPUP                        <span class="token comment">// 设置一个标志位</span>
flages <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>WS_POPUP <span class="token operator">|</span> WS_SYSMENU<span class="token punctuation">)</span>        <span class="token comment">// 除去多个标志位</span>
    
<span class="token comment">// QT 标志位, 除了上面之外，还可用此函数</span>
<span class="token function">setWindowFlags</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>FramelessWindowHint<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 开启此属性 </span>
<span class="token function">setWindowFlags</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>FramelessWindowHint<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 关闭此属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<span id="more"></span>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>
]]></content>
      <categories>
        <category>学习 - C/C++ 序二 经验</category>
      </categories>
      <tags>
        <tag>工程经验</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 深入虚函数表</title>
    <url>/posts/138731f9/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　对于 <code>C++</code> 中的多次继承后，其中含有虚函数的时候，探究一下其中的虚函数表；以及其变量在内存中的分布情况。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>Win10 2004 </code> 📎 <code>VS2015 x86模式</code> </p>
<br>

<h3 id="虚函数表验证："><a href="#虚函数表验证：" class="headerlink" title="虚函数表验证："></a>虚函数表验证：</h3><p>对于任意的一个类，若是其中有虚函数 <code>virtual</code> 的话，就会有一个虚函数指针，负责其自己的虚函数表。代码就是最好的讲解，上代码：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// vtableptr.cpp : 定义控制台应用程序的入口点。</span>
<span class="token comment">//</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdafx.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">vfunc1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A::vfunc1()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">vfunc2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A::vfunc2()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">void</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A::func1()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A::func2()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

	<span class="token comment">//private:</span>
	<span class="token keyword">int</span> m_data1 <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> m_data2 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">vfunc1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B::vfunc1()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B::func2()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

	<span class="token comment">//private:</span>
	<span class="token keyword">int</span> m_data3 <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">vfunc1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"C::vfunc1()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"C::func2()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

	<span class="token comment">//private:</span>
	<span class="token keyword">int</span> m_data4 <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	A a<span class="token punctuation">;</span>
	B b<span class="token punctuation">;</span>
	C c<span class="token punctuation">;</span>

	a<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	a<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	b<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	b<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	c<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	c<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"   "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"    "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>然后运行如下：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200805010044.png" width="50%"/ loading="lazy">

 



<p>查看一下内存地址分析：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200804_235949.png" width="100%"/ loading="lazy">

 



<p>将其用表格图形化分析一波，可以看到，对于重写的基类的虚函数的派生类，其维护的虚函数表，就是基类未被重写的虚函数地址加上自己的（已经重写）虚函数。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200805_002523.png" width="100%"/ loading="lazy">

<br>

<h3 id="类中成员的空间位置："><a href="#类中成员的空间位置：" class="headerlink" title="类中成员的空间位置："></a>类中成员的空间位置：</h3><p>在来一个类，由下图份的内存位置分析可知，静态成员和静态变量、以及成员函数也是是单独放在其它地方的</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CTest</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token function">CTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">m_chData</span><span class="token punctuation">(</span>‘\<span class="token number">0</span>’<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">m_nData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">mem_fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
        <span class="token keyword">char</span> m_chData<span class="token punctuation">;</span>
        <span class="token keyword">int</span> m_nData<span class="token punctuation">;</span>
        <span class="token keyword">static</span> <span class="token keyword">char</span> s_chData<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> CTest<span class="token double-colon punctuation">::</span>s_chData<span class="token operator">=</span>’\<span class="token number">0</span>’<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200805010235.png" width="80%"/ loading="lazy">

<br>

<p>通过上面来两个例子，我觉着已经很清晰了，不再需要怎么说。而关于一个程序在内存中的布局，可以参考之前的一片文章 <a href="https://blog.csdn.net/qq_33154343/article/details/105029261">运行程序所分配的地址空间</a> </p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序一 技法</category>
        <category>学习 - 底层兼架构</category>
      </categories>
      <tags>
        <tag>虚函数表</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 类的六个特殊成员函数</title>
    <url>/posts/550d6b96/</url>
    <content><![CDATA[<p><strong>简  述:</strong> 分析 C++ Class 的六个特殊成员函数 <sup><a href="https://en.wikipedia.org/wiki/Special_member_functions">wiki</a></sup> ，并且手动实现一番；</p>
<ol>
<li>默认构造函数</li>
<li>析构函数</li>
<li>复制构造函数</li>
<li>复制赋值运算符</li>
<li>移动构造函数</li>
<li>移动赋值运算符</li>
</ol>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>​		特殊成员函数是类（或结构）成员函数，在某些情况下，编译器会自动为你生成。</p>
<ol>
<li><strong>default constructor:</strong> 通常没有参数，但可以具有带默认值的参数。</li>
<li><strong>destructor:</strong> 销毁对象的前一刻执行清理</li>
<li><strong>copy constructor:</strong> 对<font color=#FF0000 face="STFangsong">新建的的对象</font>进行初始化，形参是 <code>const T&amp;</code></li>
<li><strong>copy assignment constructor:</strong> 对<font color=#FF0000 face="STFangsong">已有的对象</font>进行赋值，形参是 <code>const T&amp;</code></li>
<li><strong>move constructor:</strong> 对<font color=#FF0000 face="STFangsong">新建的的对象</font>进行初始化，形参是 <code>T &amp;&amp;</code></li>
<li><strong>move assignment constructor:</strong> 对<font color=#FF0000 face="STFangsong">已有的对象</font>进行赋值，形参是 <code>T &amp;&amp;</code></li>
</ol>
<br>

<ul>
<li><p>move 的函数相对于 copy 的函数没有 <code>const</code></p>
</li>
<li><p>copy 是属完整的再复制拷贝一份；move 是对将亡的右值进行指针互换、节省空间提升效率</p>
</li>
<li><p><strong>”复制 &#x2F; 移动构造函数“</strong> 属于新建对象，无需判断两者是否相等；<strong>”复制 &#x2F; 移动赋值运算符“</strong> 属于已有的对象进行赋值，赋值时需要先判断两者是否相等。</p>
</li>
<li><p>若有深拷贝时，<strong>”复制 &#x2F; 移动赋值运算符“</strong> 除了判断相等、数值是否有效；在拷贝字节前，还要先释放旧资源</p>
</li>
<li><p>只有当类存储了需要释放的系统资源的句柄，或拥有其指向的内存的指针时，你才需要定义自定义 <strong>”析构函数“</strong></p>
</li>
<li><p>三五法则 <sup><a href="https://en.cppreference.com/w/cpp/language/rule_of_three">cppreference.com</a></sup></p>
</li>
</ul>
<br>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>　　💻  <code>win10 22H2</code> 📎  <code>Visual Studio 2019</code> 📎 <code>C++17</code> 见   <a href="https://github.com/XMuli/QtExamples/blob/master/Studio/Studio/SpecialMembers.h">SpecialMembers.h</a></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*******************************************************************
 * Copyright (c) 2022~2023 XMuli  All rights reserved.
 * Description: C++ 类的六个特殊成员函数
 ******************************************************************/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">A</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">m_ptr</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"default constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">m_ptr</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no-default-val constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">auto</span> n <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            m_ptr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
            std<span class="token double-colon punctuation">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span>m_ptr<span class="token punctuation">,</span> s<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">const</span> A<span class="token operator">&amp;</span> other<span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token function">m_ptr</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>other<span class="token punctuation">.</span>m_ptr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">auto</span> n <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">strlen</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>m_ptr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            m_ptr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
            std<span class="token double-colon punctuation">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span>m_ptr<span class="token punctuation">,</span> other<span class="token punctuation">.</span>m_ptr<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    A<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> A<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy assignment constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>other<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m_ptr<span class="token punctuation">;</span>  <span class="token comment">// Free the existing resource.  重点 !!!</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>other<span class="token punctuation">.</span>m_ptr <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">auto</span> n <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">strlen</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>m_ptr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                m_ptr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
                std<span class="token double-colon punctuation">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span>m_ptr<span class="token punctuation">,</span> other<span class="token punctuation">.</span>m_ptr<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">A</span><span class="token punctuation">(</span>A<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">)</span> <span class="token keyword">noexcept</span>    <span class="token comment">// 行参无 const</span>
        <span class="token operator">:</span> <span class="token function">m_ptr</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"move constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>other<span class="token punctuation">.</span>m_ptr<span class="token punctuation">)</span>
            m_ptr <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>m_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

        other<span class="token punctuation">.</span>m_ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    A<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>A<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 行参无 const</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"move assignment constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>other<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m_ptr<span class="token punctuation">;</span>  <span class="token comment">// Free the existing resource.</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>other<span class="token punctuation">.</span>m_ptr<span class="token punctuation">)</span>
                m_ptr <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>m_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

            other<span class="token punctuation">.</span>m_ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"destructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_ptr<span class="token punctuation">)</span>
            <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m_ptr<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">char</span><span class="token operator">*</span> m_ptr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

A <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    A <span class="token function">t</span><span class="token punctuation">(</span><span class="token string">"A fun()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> t<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    A <span class="token function">a1</span><span class="token punctuation">(</span><span class="token string">"a1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// default constructor</span>
    A <span class="token function">a2</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// copy constructor</span>
    A a3 <span class="token operator">=</span> a1<span class="token punctuation">;</span>                 <span class="token comment">// copy constructor</span>
    a1 <span class="token operator">=</span> a3<span class="token punctuation">;</span>                   <span class="token comment">// copy assignment constructor</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"----------------------------\n\n"</span><span class="token punctuation">;</span>

    <span class="token comment">//fn();                    // function returning a A object</span>
    A a5 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// move constructor</span>
    A a6<span class="token punctuation">;</span>                      <span class="token comment">// default constructor</span>
    a6 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// move assignment constructor</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello World!\n"</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*************************** 运行结果 *******************************
* no-default-val constructor
copy constructor
copy constructor
copy assignment constructor
----------------------------

move constructor
default constructor
move assignment constructor
Hello World!
destructor
destructor
destructor
destructor
destructor
 ******************************************************************/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p>拷贝构造函数是 <code> A a2(a1);</code> 形式，还可以是 <code> A a3 = a1;</code> 这种形式。关键看是新创建对象还是已有的对象赋值。move 的函数赋值，借助 <code>std::move()</code> 将左值转换为右值。</p>
<br>

<h3 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h3><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> 的 【Studio】</p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序二 经验</category>
      </categories>
      <tags>
        <tag>C++11/17/20</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 编译和运行 LibCurl 动态库和静态库</title>
    <url>/posts/cc8e524f/</url>
    <content><![CDATA[<p><strong>简  述:</strong>  </p>
<ul>
<li>C++ Win11 通过源码编译 libcurl 获取其动态库和静态库</li>
<li>C++  链接和使用 libcurl 的静态库和动态库</li>
<li>通过 vcpkg 来编译和链接 libcurl  的库</li>
</ul>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p>　　💻  <code>win11 24H2</code> 📎 <code>Qt 5.15.2</code> 📎  <code>Visual Studio 2022</code> 📎 <code>C++17</code></p>
<br>

<h2 id="下载-CURL-库"><a href="#下载-CURL-库" class="headerlink" title="下载 CURL 库"></a>下载 CURL 库</h2><p>由于 CURL 只提供源码，并不提供编译好的二进制。所以只能自行编译动态库或者静态库。 官方推荐使用静态库，而非动态库；然而负责项目都是使用的动态库，那我们就都编译一番。</p>
<p>在 <a href="https://curl.se/download.html">https://curl.se/download.html</a> 下载最新版本源码压缩包 <a href="https://curl.se/download/curl-8.15.0.zip">curl-8.15.0.zip</a>。</p>
 <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2025/202508292025889.png" width="50%"/ loading="lazy">



<p><strong>准备工作：</strong></p>
<p>解压得到 <code>D:\project\third_dll\curl-8.15.0</code>  文件夹。</p>
<ul>
<li>右键管理员打开 <code>&quot;C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Visual Studio 2022\Visual Studio Tools\VC\x64 Native Tools Command Prompt for VS 2022.lnk&quot;</code> 终端</li>
<li>终端打开进入到 winbuild 文件夹中 <code>D:\project\third_dll\curl-8.15.0\winbuild</code></li>
</ul>
<h2 id="编译动态库-amp-静态库"><a href="#编译动态库-amp-静态库" class="headerlink" title="编译动态库 &amp; 静态库"></a>编译动态库 &amp; 静态库</h2><blockquote>
<p>从 libcurl v8.15.0 开始，**<code>winbuild</code> 构建系统已标记为过时，将在 2025 年 9 月正式废弃**，因此必须显式添加 WINBUILD_ACKNOWLEDGE_DEPRECATED&#x3D;yes 确认才能继续使用该系统编译； 若是没有则会若是遇到报错：fatal error U1050: The user must acknowledge the deprecation warning to continue.</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 编译动态库
nmake /f Makefile.vc <span class="token assign-left variable">mode</span><span class="token operator">=</span>dll <span class="token assign-left variable">VC</span><span class="token operator">=</span><span class="token number">17</span> <span class="token assign-left variable">MACHINE</span><span class="token operator">=</span>x64 <span class="token assign-left variable">DEBUG</span><span class="token operator">=</span>no <span class="token assign-left variable">WINBUILD_ACKNOWLEDGE_DEPRECATED</span><span class="token operator">=</span>yes

// 编译静态库
nmake /f Makefile.vc <span class="token assign-left variable">mode</span><span class="token operator">=</span>static <span class="token assign-left variable">VC</span><span class="token operator">=</span><span class="token number">17</span> <span class="token assign-left variable">MACHINE</span><span class="token operator">=</span>x64 <span class="token assign-left variable">DEBUG</span><span class="token operator">=</span>no <span class="token assign-left variable">WINBUILD_ACKNOWLEDGE_DEPRECATED</span><span class="token operator">=</span>yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>执行对应命令，可以看到很顺畅的编译过程    <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2025/202508292051828.png" width="100%"/ loading="lazy"></p>
<p>看到编译后的目标产物：动态库 <code>libcurl-vc17-x64-release-dll-ipv6-sspi-schannel</code> 和 静态库 <code>libcurl-vc17-x64-release-static-ipv6-sspi-schannel</code> 这两个文件夹   </p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2025/202508292054110.png" width="100%"/ loading="lazy">



<h2 id="C-项目中使用-CURL-库"><a href="#C-项目中使用-CURL-库" class="headerlink" title="C++ 项目中使用 CURL 库"></a>C++ 项目中使用 CURL 库</h2><p>一共有三种方法，前两者为刚才本地编译的方式库链接使用，以及直接通过 vcpkg 进行编译和使用 curl 库。</p>
<ol>
<li>将 <code>libcurl-vc17-x64-release-dll-ipv6-sspi-schannel</code> 改名为 <code>libcurl-dll</code> ,方便使用（名字简短好认即可）;</li>
<li>将 <code>libcurl-vc17-x64-release-static-ipv6-sspi-schannel</code> 改名为 <code>libcurl-static</code>;</li>
<li>再将这个文件夹拷贝到 <code>D:\project\third_dll\UsedCurlDemo\tripartite</code> 文件夹下备用（或者放在其它任意路径）</li>
<li>开始创建 C++ 工程来引用这两个库</li>
</ol>
<h3 id="C-使用-CURL-动态库"><a href="#C-使用-CURL-动态库" class="headerlink" title="C++ 使用 CURL 动态库"></a>C++ 使用 CURL 动态库</h3><p>可以看到生成的<code>动态库</code>目录结构如下：</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2025/202508292103929.png" width="100%"/ loading="lazy">



<p><strong>注意：不需需要添加 CURL_STATICLIB 宏，只需要链接 libcurl.lib 之外，还需要拷贝 libcurl.dll 文件到生成文件夹中。</strong></p>
<ul>
<li><p>创建一个 C++ 空的控制台项目 <code>UsedCurlDemo</code></p>
</li>
<li><p>引入头文件 include 路径，和链接库 lib 的路径</p>
   <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2025/202508292202725.png" width="90%"/ loading="lazy">
</li>
<li><p>在 <code>main.cpp</code> 函数中，输入如下代码</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>                  <span class="token comment">// 不需要使用 #define CURL_STATICLIB 宏</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"curl/curl.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span> <span class="token punctuation">(</span>lib<span class="token punctuation">,</span></span><span class="token string">"libcurl.lib"</span><span class="token expression"><span class="token punctuation">)</span></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    CURL<span class="token operator">*</span> curl<span class="token punctuation">;</span>
    CURLcode res<span class="token punctuation">;</span>
    curl <span class="token operator">=</span> <span class="token function">curl_easy_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>curl<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">curl_easy_setopt</span><span class="token punctuation">(</span>curl<span class="token punctuation">,</span> CURLOPT_URL<span class="token punctuation">,</span> <span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res <span class="token operator">=</span> <span class="token function">curl_easy_perform</span><span class="token punctuation">(</span>curl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">curl_easy_cleanup</span><span class="token punctuation">(</span>curl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"返回状态: "</span> <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>将 <code>libcurl.dll</code> 拷贝进 目标产物的路径，这是运行时所需要的</p>
  <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2025/202508292124751.png" width="80%"/ loading="lazy">
</li>
<li><p>按下按键 <code>Ctrl + F5</code> 在 VS2022 中进行编译和运行，看到终端收到的 baidu 服务器返回结果</p>
  <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2025/202508292126878.png" width="70%"/ loading="lazy"></li>
</ul>
<h3 id="C-使用-CURL-静态库"><a href="#C-使用-CURL-静态库" class="headerlink" title="C++ 使用 CURL 静态库"></a>C++ 使用 CURL 静态库</h3><p>可以看到生成的<code>静态库</code>目录结构如下：<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2025/202508292105587.png" width="100%"/ loading="lazy"></p>
<p>逻辑基本同理参考动态库，只是链接的文件不同；</p>
<p><strong>注意：需要添加 CURL_STATICLIB 宏，且需要链接 libcurl_a.lib 之外，还需要链接一些额外的这些库，否则无法运行。</strong></p>
<ul>
<li><p>再创建一个 C++ 空的控制台项目 <code>UsedCurlStaticDemo</code>， 方便直接放在同一个解决方案下</p>
</li>
<li><p>引入头文件 include 路径，和链接库 lib 的路径</p>
 <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2025/202508292201575.png" width="100%"/ loading="lazy">

 
</li>
<li><p>在 <code>main.cpp</code> 函数中，输入如下代码</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CURL_STATICLIB</span>                 <span class="token comment">// 是需要表示使用静态链接的宏</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUILDING_LIBCURL</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"curl/curl.h"</span></span>

<span class="token comment">// 添加必要的库依赖，且需要链接除了 libcurl_a.lib 之外的这些库，否则无法运行</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span> <span class="token punctuation">(</span>lib<span class="token punctuation">,</span></span><span class="token string">"libcurl_a.lib"</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span> <span class="token punctuation">(</span>lib<span class="token punctuation">,</span></span><span class="token string">"wldap32.lib"</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span> <span class="token punctuation">(</span>lib<span class="token punctuation">,</span></span><span class="token string">"ws2_32.lib"</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span> <span class="token punctuation">(</span>lib<span class="token punctuation">,</span></span><span class="token string">"Crypt32.lib"</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>lib<span class="token punctuation">,</span> </span><span class="token string">"normaliz.lib"</span><span class="token expression"><span class="token punctuation">)</span>   </span><span class="token comment">// 添加以解决 IdnToAscii/IdnToUnicode 错误</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>lib<span class="token punctuation">,</span> </span><span class="token string">"secur32.lib"</span><span class="token expression"><span class="token punctuation">)</span>    </span><span class="token comment">// 添加以解决 InitSecurityInterfaceA 错误</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    CURL<span class="token operator">*</span> curl<span class="token punctuation">;</span>
    CURLcode res<span class="token punctuation">;</span>
    curl <span class="token operator">=</span> <span class="token function">curl_easy_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>curl<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">curl_easy_setopt</span><span class="token punctuation">(</span>curl<span class="token punctuation">,</span> CURLOPT_URL<span class="token punctuation">,</span> <span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res <span class="token operator">=</span> <span class="token function">curl_easy_perform</span><span class="token punctuation">(</span>curl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">curl_easy_cleanup</span><span class="token punctuation">(</span>curl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"返回状态: "</span> <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>按下按键 <code>Ctrl + F5</code> 在 VS2022 中进行编译和运行，看到终端收到的 baidu 服务器返回结果</p>
  <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2025/202508292148519.png" width="80%"/ loading="lazy"></li>
</ul>
<h3 id="C-通过-vcpkg-使用-CURL-库"><a href="#C-通过-vcpkg-使用-CURL-库" class="headerlink" title="C++ 通过 vcpkg 使用 CURL 库"></a>C++ 通过 vcpkg 使用 CURL 库</h3><p>上面两种方法都需要手动配置和编译 LIBCURL 的动态库和静态库的头文件、链接库的文件夹路径；而采用 vcpkg 方法，则不需要这么麻烦，直接通过一次都本机配置好。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 打开 cmd 终端，进入 D:<span class="token punctuation">\</span>project<span class="token punctuation">\</span>third_dll 路径，依次执行如下命令
<span class="token function">git</span> clone https://github.com/microsoft/vcpkg
.<span class="token punctuation">\</span>vcpkg<span class="token punctuation">\</span>bootstrap-vcpkg.bat
.<span class="token punctuation">\</span>vcpkg<span class="token punctuation">\</span>vcpkg <span class="token function">install</span> <span class="token function">curl</span>

<span class="token builtin class-name">cd</span> <span class="token function">vcpkg</span>
.<span class="token punctuation">\</span>vcpkg integrate <span class="token function">install</span>   // 这样项目就能直接引用 <span class="token function">curl</span> 了

❯ <span class="token function">vcpkg</span> <span class="token function">install</span> cpp-httplib openssl    // 还可以安装一些其它常用库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ul>
<li><p>创建一个空的 C++ 控制台项目 <code>vcpkgCurl</code>，</p>
</li>
<li><p>在 main.cpp 中输入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include &lt;iostream>                  // 不需要使用 #define CURL_STATICLIB 宏</span>
<span class="token comment">#include "curl/curl.h"               // 也不需要 #pragma comment (lib,"libcurl.lib")，会自动链接</span>
using namespace std<span class="token punctuation">;</span>

int main<span class="token punctuation">(</span>int argc, char* argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    CURL* <span class="token function">curl</span><span class="token punctuation">;</span>
    CURLcode res<span class="token punctuation">;</span>
    <span class="token function">curl</span> <span class="token operator">=</span> curl_easy_init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>curl<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        curl_easy_setopt<span class="token punctuation">(</span>curl, CURLOPT_URL, <span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res <span class="token operator">=</span> curl_easy_perform<span class="token punctuation">(</span>curl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        curl_easy_cleanup<span class="token punctuation">(</span>curl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    std::cout <span class="token operator">&lt;&lt;</span> <span class="token string">"返回状态: "</span> <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> std::endl<span class="token punctuation">;</span>

    system<span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>按下按键 <code>Ctrl + F5</code> 在 VS2022 中进行编译和运行，看到终端收到的 baidu 服务器返回结果</p>
 <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2025/202508292215402.png" width="100%"/ loading="lazy"></li>
</ul>
<h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h2><p>源码和编译好的二进制下载：<a href="https://github.com/XMuli/NetworkExample">https://github.com/XMuli/NetworkExample</a></p>
<h2 id="其它更多"><a href="#其它更多" class="headerlink" title="其它更多"></a>其它更多</h2><p>上面编译的是libcurl的 dll，使用OpenSSL Dll版本和Zlib Dll版本。如果没有，可以从<a href="http://www.openssl.org/">www.openssl.org</a> 或者<a href="http://www.zlib.net/">http://www.zlib.net/</a> 下载。</p>
]]></content>
      <categories>
        <category>学习 - Windows</category>
        <category>学习 - C/C++ 序三 商业</category>
        <category>专栏 - 项目实战开发</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 设计模式（8大设计原则、23种设计模式）李建忠</title>
    <url>/posts/cb5567e8/</url>
    <content><![CDATA[<p><strong>简  述:</strong>  设计模式，久闻大名。此记录学习 “C++ 设计模式 李建忠” 的札记，核心共 8大设计原则、23中设计模式。后发现 GitHub 也有类似笔记 <a href="https://github.com/liu-jianhao/Cpp-Design-Patterns">Ref1</a> 、<a href="https://github.com/rhyspang/CPP-Design-Patterns">Ref2 相关课件</a>，嘎腰子了哈~</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="重新认识面向对象"><a href="#重新认识面向对象" class="headerlink" title="重新认识面向对象"></a>重新认识面向对象</h2><blockquote>
<p>理解隔离变化</p>
</blockquote>
<ul>
<li>从宏观层面来看，面向对象的构建方式更能适应软件的变化，</li>
<li>能将变化所带来的影响减为最小</li>
</ul>
<blockquote>
<p>各司其职</p>
</blockquote>
<ul>
<li>从微观层面来看，面向对更强调各个类的“责任”</li>
<li>由于需求变化导致的新增天&#x3D;个应该影响原来类型的实现是所谓各负其责</li>
</ul>
<blockquote>
<p>对象是什么？</p>
</blockquote>
<ul>
<li>从语言实现层面来看，对象封装了代码和数据.</li>
<li>从规格层面讲，对象是一系列可被使用的公共接口。</li>
<li>从概念层面讲，对象是某种拥有责任的抽象。</li>
</ul>
<br>

<h2 id="面向对象设计八大原则"><a href="#面向对象设计八大原则" class="headerlink" title="面向对象设计八大原则"></a>面向对象设计八大原则</h2><p><strong>（1）依赖倒置原则（DIP）</strong></p>
<ul>
<li><p>高层模块（稳定）不应该依赖于低层模块（变化），二者都应该依赖于抽象（稳定）。</p>
</li>
<li><p>抽象（稳定）不应该依赖于变化），实现细节应该依赖于抽象（稳定）。</p>
</li>
</ul>
 <br>

<p><strong>（2）开放封闭原则（OCP）</strong></p>
<ul>
<li><p>对扩展开放，对更改封闭。</p>
</li>
<li><p>类模块应该是可扩展的，但是不可修改。</p>
</li>
</ul>
 <br>

<p><strong>（3）单一职责原则（SRP）</strong></p>
<ul>
<li><p>一个类应该仅有一个引起它变化的原因。</p>
</li>
<li><p>变化的方向隐含着类的责任。</p>
</li>
</ul>
 <br>

<p><strong>（4）Liskov 替换原则（LSP）</strong></p>
<ul>
<li><p>子类必须能够替换它们的基类（IS-A）。</p>
</li>
<li><p>继承表达类型抽象。</p>
</li>
</ul>
 <br>

<p><strong>（5）接口隔离原则（ISP）</strong></p>
<ul>
<li><p>不应该强迫客户程序依赖它们不用的方法。</p>
</li>
<li><p>接口应该小而完备。</p>
</li>
</ul>
 <br>

<p><strong>（6）优先使用对象组合，而不是类继承</strong></p>
<ul>
<li><p>类继承通常为“白箱复用”，对象组合通常为“黑箱复用”</p>
</li>
<li><p>继承在某种程度上破坏了封装性，子类父类耦合度高。</p>
</li>
<li><p>而对象组合则只要求被组合的对象具有良好定义的接口，度低。</p>
</li>
</ul>
 <br>

<p><strong>（7）封装变化点</strong></p>
<ul>
<li>使用封装来创建对象之间的分界层，让设计者可以在分界的一侧进行修改，而不会对另一侧产生不良的影响，从而实现层次间的松耦合。</li>
</ul>
 <br>

<p><strong>（8）针对接口编程，而不是针对实现编程</strong></p>
<ul>
<li><p>不将变量类型声明为某个特定的具体类，而是声明为某个接口。</p>
</li>
<li><p>客户程序无需获知对象的具体类型，只需要知道对象所具有的接口。</p>
</li>
<li><p>减少系统中各部分的依赖关系，从而实现“高内聚、松耦合”的类型设计方案。</p>
</li>
</ul>
 <br>

<p><font color=#D0087E size=4 face="幼圆"><strong>面向接口设计</strong></font> </p>
<p><font color=#D0087E size=4 face="幼圆"><strong>产业强盛的标志</strong></font> </p>
<p><font color=#D0087E size=4 face="幼圆"><strong>接口标准化！</strong></font> </p>
<br>

<h2 id="将设计原则提升为设计经验"><a href="#将设计原则提升为设计经验" class="headerlink" title="将设计原则提升为设计经验"></a>将设计原则提升为设计经验</h2><blockquote>
<p><strong>1.设计习语Design Idioms</strong></p>
</blockquote>
<ul>
<li>Design Idioms 描述与特定编程语言相关的低层模式，技巧，惯用法。</li>
</ul>
<blockquote>
<p><strong>2.设计模式 Design Patterns</strong></p>
</blockquote>
<ul>
<li>Design Patterns主要描述的是“类与相互通信的对象之间的组织关系，包括它们的角色、职责、协作方式等方面。</li>
</ul>
<blockquote>
<p><strong>3.架构模式 Architectural Patterns</strong></p>
</blockquote>
<ul>
<li>Architectural Patterns描述系统中与基本结构组织关系密切的高层模式，包括子系统划分，职责，以及如何组织它们之间关系的规则。</li>
</ul>
<br>

<p><font color=#FE7207  size=4 face="幼圆">代码复用： C++ 面向对象是指 编译层面（单位的）；而不是指代码的粘贴复制。 </font> </p>
<br>

<h2 id="重构关键技法"><a href="#重构关键技法" class="headerlink" title="重构关键技法"></a>重构关键技法</h2><p>静态 → 动态</p>
<p>早绑定 → 晚绑定</p>
<p>继承 →  组合</p>
<p>编译时依赖 → 运行时依赖</p>
<p>紧耦合 → 松耦合</p>
<br>

<h2 id="二八原则-实用为主"><a href="#二八原则-实用为主" class="headerlink" title="二八原则 - 实用为主"></a>二八原则 - 实用为主</h2><p>有限的时间，如下几个高频会工程项目中，高频会使用到的，掌握，其余的需要再去翻</p>
<p>里氏替换原则中所说的依赖是指<strong>编译时依赖</strong>；编译时依赖（A ← B）为编译时编译 B 需要 A 先存在。</p>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202212242110271.png" width="80%"/ loading="lazy">



<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202212232058645.png" width="100%"/ loading="lazy">



<h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202212232036934.png" width="100%"/ loading="lazy"></h3><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202212242107912.png" width="100%"/ loading="lazy">



<br>

<h3 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h3><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a></p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
]]></content>
      <categories>
        <category>学习 - 底层兼架构</category>
      </categories>
  </entry>
  <entry>
    <title>C++ 重载(overload)、重写(overrride)、重定义(redefine)总结</title>
    <url>/posts/270f0bf5/</url>
    <content><![CDATA[<p><strong>简介：</strong>  <code>C++</code>重载(<strong>overload</strong>)、重写(<strong>overrride</strong>)、重定义(<strong>redefine</strong>)总结</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p><strong>编程环境：</strong>  <code>deepin 15.11 x64 专业版 </code>    <strong>Kernel：</strong>  <code>x86_64 Linux 4.15.0-30deepin-generic</code></p>
<p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p>
<br>

<h2 id="一、重载（overload）"><a href="#一、重载（overload）" class="headerlink" title="一、重载（overload）"></a>一、重载（overload）</h2><p>指函数名相同，但是它的参数表列个数或顺序，类型不同。但是不能靠返回类型来判断。<br>（1）相同的范围（在同一个作用域中） ；<br>（2）函数名字相同；<br>（3）参数不同；<br>（4）virtual 关键字可有可无。<br>（5）返回值可以不同；</p>
<br>

<h2 id="二、重写（也称为覆盖-override）"><a href="#二、重写（也称为覆盖-override）" class="headerlink" title="二、重写（也称为覆盖 override）"></a>二、重写（也称为覆盖 override）</h2><p>是指派生类重新定义基类的虚函数，特征是：<br>（1）不在同一个作用域（分别位于派生类与基类） ；<br>（2）函数名字相同；<br>（3）参数相同；<br>（4）基类函数必须有 virtual 关键字，不能有 static 。<br>（5）返回值相同（或是协变），否则报错；&lt;—-协变这个概念我也是第一次才知道…</p>
<p>（6）重写函数的访问修饰符可以不同。尽管 virtual 是 private 的，派生类中重写改写为 public,protected 也是可以的</p>
<br>

<h2 id="三、重定义（redefine-也称隐藏）"><a href="#三、重定义（redefine-也称隐藏）" class="headerlink" title="三、重定义（redefine,也称隐藏）"></a>三、重定义（redefine,也称隐藏）</h2><p>（1）不在同一个作用域（分别位于派生类与基类） ；<br>（2）函数名字相同；<br>（3）返回值可以不同；<br>（4）参数不同。此时，不论有无 virtual 关键字，基类的函数将被隐藏（注意别与重载以及覆盖混淆） 。<br>（5）参数相同，但是基类函数没有 virtual关键字。此时，基类的函数被隐藏（注意别与覆盖混淆） 。</p>
<br>

<h3 id="重定义redefine的代码演示"><a href="#重定义redefine的代码演示" class="headerlink" title="重定义redefine的代码演示:"></a>重定义redefine的代码演示:</h3><h4 id="情况一：参数不同"><a href="#情况一：参数不同" class="headerlink" title="情况一：参数不同:"></a>情况一：参数不同:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*重定义（也成隐藏）:
参数不同。此时，不论有无 virtual 关键字，基类的函数将被隐藏（注意别与重载以及覆盖混淆）*/</span>
<span class="token keyword">class</span> <span class="token class-name">My</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">My</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span>QString str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> QString str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MySon</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">My</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MySon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">double</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token comment">//或</span>

<span class="token keyword">class</span> <span class="token class-name">My</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">My</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span>QString str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    virtualvoid <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> QString str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MySon</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">My</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MySon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">double</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token comment">//运行以下代码,会得到一样测试结果 </span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    MySon mySon<span class="token punctuation">;</span>
    mySon<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">5.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//使用时候,会有唯一"智能提示",只有double的版本</span>
    <span class="token comment">//mySon.fun("str");  //尝试调用My::fun(QString), 但是被隐藏,会编译不过</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>运行结果：</strong></p>
<p><strong>编码智能提示时候：只有一个</strong></p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925191404.png"/ loading="lazy">

<p><strong>运行结果：</strong></p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925191439.png"/ loading="lazy">

<br>

<h4 id="情况二：参数相同"><a href="#情况二：参数相同" class="headerlink" title="情况二：参数相同:"></a>情况二：参数相同:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*重定义（也成隐藏）:
参数相同，但是基类函数没有 virtual关键字。此时，基类的函数被隐藏（注意别与覆盖混淆） */</span>
<span class="token keyword">class</span> <span class="token class-name">My</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">My</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span>QString str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> QString str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MySon</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">My</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MySon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>运行效果：</strong></p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925191630.png"/ loading="lazy">

<br>

<p><strong>参考文章:</strong></p>
<p> <a href="https://www.cnblogs.com/tanky_woo/archive/2012/02/08/2343203.html">C++ 重载(overload)、重写(overrride)、重定义(redefine)总结</a></p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序一 技法</category>
      </categories>
  </entry>
  <entry>
    <title>CMake 之 BUILD_SHARED_LIBS 和 CMAKE_BUILD_TYPE 用法教程</title>
    <url>/posts/29f14999/</url>
    <content><![CDATA[<p>**简  述: ** 起源于 <a href="https://github.com/Qt-Widgets/qtacrylicmaterial/pull/2">#2</a> ，发现debug 编译失败，而release 编译成功，根因为默认生成产物和预期不符，故提的一个 PR 。发现与之相关为 CMake 中 <code>CMAKE_BUILD_TYPE</code> 和 <code>BUILD_SHARED_LIBS</code> 的两个变量知识点。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p>　　💻  <code>win10 21H2</code> 📎 <code>Qt 5.12.11</code> 📎  <code>Visual Studio 2019</code> </p>
<br>

<h3 id="BUILD-SHARED-LIBS"><a href="#BUILD-SHARED-LIBS" class="headerlink" title="BUILD_SHARED_LIBS"></a>BUILD_SHARED_LIBS</h3><p>是 add_library() 的一个全局标志，当 add_library() 没有指定 <code>[STATIC | SHARED | MODULE]</code> 是哪一个时，可以决定为生成 <em>动态库</em> 还是 <em>静态库</em>。</p>
<br>

<p><strong>Typical values：</strong></p>
<ul>
<li><code>ON</code>: 让 add_library() 生成 .dll 动态库，对应 SHARED</li>
<li><code>OFF</code>: 让 add_library() 生成 .lib 静态库，对应 STATIC ；<strong>默认值</strong></li>
</ul>
<br>

<p>CMake 代码如下，对应生成产物如图：</p>
<pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">BUILD_SHARED_LIBS</span> <span class="token boolean">ON</span><span class="token punctuation">)</span>                 <span class="token comment"># default is OFF</span>
<span class="token keyword">add_library</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">&#125;</span> <span class="token punctuation">$&#123;</span>SRCS_MAIN<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/20220721125204.png" alt="img" loading="lazy"></p>
<br>

<h3 id="CMAKE-BUILD-TYPE"><a href="#CMAKE-BUILD-TYPE" class="headerlink" title="CMAKE_BUILD_TYPE"></a>CMAKE_BUILD_TYPE</h3><p>指定 <strong>生成产物</strong> 的构建类型。</p>
<p><strong>Typical values：</strong></p>
<ul>
<li><code>Debug</code>：详细调试信息</li>
<li><code>Release</code>：无调试信息</li>
<li><code>RelWithDebInfo</code>：带有调试信息的 Release，依旧可能又略微优化</li>
<li><code>MinSizeRel</code>：没使用过</li>
</ul>
<br>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对于生成 .dll&#x2F;.lib 的项目而言：</p>
<ol>
<li>推荐使用 add_library() 时不指定 STATIC | SHARED，而是由 BUILD_SHARED_LIBS 变量来控制。</li>
<li>同时又通过自定义宏来决定，生成的 .dll 是采用 <code>__declspec(dllexport)</code> 或 <code>__declspec(dllimport)</code>。</li>
</ol>
<p>这部分，以及结合如何使用 .dll 后面单独详细讲解一篇。</p>
<br>

<p><strong>附：</strong> 本篇对应的修改源码在此 <a href="https://github.com/XMuli/AcrylicWindow/blob/master/AcrylicMaterial/CMakeLists.txt">CMakeLists.txt</a></p>
<br>

<h3 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h3><p><a href="https://github.com/XMuli/ExCMake">ExCMake</a></p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴这个系列的 <code>CMake</code> 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - 底层兼架构</category>
      </categories>
  </entry>
  <entry>
    <title>CMake 设置 Target 输出目录和后缀名</title>
    <url>/posts/4af498c8/</url>
    <content><![CDATA[<p>**简  述: **  <code>CMake</code> 设置 <code>Target</code> 输出目录和后缀名</p>
<pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">EXECUTABLE_OUTPUT_PATH</span>                      <span class="token string">"xxx/path"</span><span class="token punctuation">)</span>        		<span class="token comment"># 可执行文件的输出目录</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">LIBRARY_OUTPUT_PATH</span>                         <span class="token string">"xxx/path"</span><span class="token punctuation">)</span>        		<span class="token comment">#    库文件的输出目录</span>

<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG</span>        <span class="token string">"xxx/path"</span><span class="token punctuation">)</span>        		<span class="token comment"># debug   可执行文件的输出目录</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE</span>      <span class="token string">"xxx/path"</span><span class="token punctuation">)</span>        		<span class="token comment"># release 可执行文件的输出目录</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG</span>        <span class="token string">"xxx/path"</span><span class="token punctuation">)</span>       		<span class="token comment"># debug      库文件的输出目录</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE</span>      <span class="token string">"xxx/path"</span><span class="token punctuation">)</span>       		<span class="token comment"># release    库文件的输出目录</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_DEBUG_POSTFIX</span>                         <span class="token string">"xxx/path"</span><span class="token punctuation">)</span>       		<span class="token comment"># debug        库文件的后缀名</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_RELEASE_POSTFIX</span>                       <span class="token string">"xxx/path"</span><span class="token punctuation">)</span>       		<span class="token comment"># release      库文件的后缀名</span>

<span class="token keyword">set_target_properties</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span>TARGET_NAME<span class="token punctuation">&#125;</span> <span class="token namespace">PROPERTIES</span> <span class="token property">DEBUG_POSTFIX</span> <span class="token string">"_d"</span><span class="token punctuation">)</span>     <span class="token comment"># debug      可执行文件的后缀名</span>
<span class="token keyword">set_target_properties</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span>TARGET_NAME<span class="token punctuation">&#125;</span> <span class="token namespace">PROPERTIES</span> <span class="token property">RELEASE_POSTFIX</span> <span class="token string">"_r"</span><span class="token punctuation">)</span>   <span class="token comment"># release   可执行文件的后缀名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>一. <code>set(EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/../bin)</code> </p>
<p>上面的语句能设置可执行文件的输出目录</p>
<p>在 Win + VS 环境下，会自动在你所设置的目录后面扩展一层 <code>&lt;CONFIG&gt;</code> 目录，所以最终生成的 Debug 版本程序会在 <code>$&#123;PROJECT_SOURCE_DIR&#125;/../bin/Debug</code> 目录下，Release 版本程序会在 <code>$&#123;PROJECT_SOURCE_DIR&#125;/../bin/Release</code> 目录下。</p>
<p>在 Linux + GCC 环境下，无论是 Debug 还是 Release，生成的可执行程序会直接放在你所设置的目录下，不会有差异。</p>
 <br>

<p>二. <code>set(LIBRARY_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/../lib)</code> </p>
<p>上面的语句能设置库文件的输出目录</p>
<p>在 Win + VS 环境下，会自动在你所设置的目录后面扩展一层 <code>&lt;CONFIG&gt;</code> 目录，所以最终生成的 Debug 版本库会在 <code>$&#123;PROJECT_SOURCE_DIR&#125;/../lib/Debug</code> 目录下，Release 版本库会在 <code>$&#123;PROJECT_SOURCE_DIR&#125;/../lib/Release</code> 目录下。</p>
<p>在 Linux + GCC 环境下，无论是 Debug 还是 Release，生成的库文件会直接放在你所设置的目录下，不会有差异。</p>
 <br>

<p>三. <code>set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG $&#123;PROJECT_SOURCE_DIR&#125;/../bin)</code>   <code>set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE $&#123;PROJECT_SOURCE_DIR&#125;/../bin)</code> </p>
<p>上面两条语句分别设置了 Debug 版本和 Release 版本可执行文件的输出目录，</p>
<p>一旦设置上面的属性，在任何环境下生成的可执行文件都将直接放在你所设置的目录.</p>
 <br>

<p>四. <code>set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG $&#123;PROJECT_SOURCE_DIR&#125;/../lib)</code>   <code>set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE $&#123;PROJECT_SOURCE_DIR&#125;/../lib)</code> </p>
<p>上面两条语句分别设置了 Debug 版本和 Release 版本库文件的输出目录，</p>
<p>一旦设置上面的属性，在任何环境下生成的库文件都将直接放在你所设置的目录。</p>
 <br>

<p>五. <code>set(CMAKE_DEBUG_POSTFIX &quot;_d&quot;)</code>   <code>set(CMAKE_RELEASE_POSTFIX &quot;_r&quot;)</code> </p>
<p>上面两条语句分别设置了 Debug 版本和 Release 版本下库文件的后缀名。</p>
 <br>

<p>六. <code>set_target_properties($&#123;TARGET_NAME&#125; PROPERTIES DEBUG_POSTFIX &quot;_d&quot;)</code>   <code>set_target_properties($&#123;TARGET_NAME&#125; PROPERTIES RELEASE_POSTFIX &quot;_r&quot;)</code> </p>
<p>上面两条语句分别设置了 Debug 版本和 Release 版本下可执行文件的后缀名。</p>
<br>

<h3 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h3><p><a href="https://github.com/XMuli/ExCMake">ExCMake</a></p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴这个系列的 <code>CMake</code> 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - 底层兼架构</category>
      </categories>
  </entry>
  <entry>
    <title>C语言中的 static变量（全局和局部）、static函数总结</title>
    <url>/posts/cbffd676/</url>
    <content><![CDATA[<p><strong>简介：</strong>  C语言中的 <strong>static</strong>变量（<strong>全局</strong>和<strong>局部</strong>）、<strong>static</strong>函数总结</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​		<strong>详情：</strong>  见简介</p>
<br>

<h2 id="static-变量"><a href="#static-变量" class="headerlink" title="static 变量:"></a>static 变量:</h2><p>静态变量的类型 说明符是static。 静态变量当然是属于静态存储方式，但是属于静态存储方式的量不一定就是静态变量。 例如外部变量虽属于静态 存储方式，但不一定是静态变量，必须由 static加以定义后才能成为静态外部变量，或称静态全局变量。</p>
<h3 id="静态局部变量"><a href="#静态局部变量" class="headerlink" title="静态局部变量:"></a>静态局部变量:</h3><p>静态局部变量属于静态存储方式，它具有以下特点：<br>　　(1)静态局部变量在函数内定义 它的生存期为整个源程序，但是其作用域仍与自动变量相同，只能在定义该变量的函数内使用该变量。退出该函数后， 尽管该变量还继续存在，但不能使用它。<br>　　(2)允许对构造类静态局部量赋初值 例如数组，若未赋以初值，则由系统自动赋以0值。<br>　　(3)对基本类型的静态局部变量若在说明时未赋以初值，则系统自动赋予0值。而对自动变量不赋初值，则其值是不定的。 根据静态局部变量的特点， 可以 看出它是一种生存期为整个源程序的量。虽然离开定义它的函数后不能使用，但如再次调用定义它的函数时，它又可继续使用， 而且保存了前次被调用后留下的 值。 因此，当多次调用一个函数且要求在调用之间保留某些变量的值时，可考虑采用静态局部变量。虽然用全局变量也可以达到上述目的，但全局变量有时会造成 意外的副作用，因此仍以采用局部静态变量为宜。</p>
<h3 id="静态全局变量"><a href="#静态全局变量" class="headerlink" title="静态全局变量:"></a>静态全局变量:</h3><p>　　全局变量(外部变量)的说明之前再冠以static 就构 成了静态的全局变量。全局变量本身就是静态存储方式， 静态全局变量当然也是静态存储方式。 这两者在存储方式上并无不同。这两者的区别虽在于非静态全局 变量的作用域是整个源程序， 当一个源程序由多个源文件组成时，非静态的全局变量在各个源文件中都是有效的。 <font color=#D0087E size=4 face="幼圆">而静态全局变量则限制了其作用域， 即只在 定义该变量的源文件内有效</font>， 在同一源程序的其它源文件中不能使用它。由于静态全局变量的作用域局限于一个源文件内，只能为该源文件内的函数公用， 因此 可以避免在其它源文件中引起错误。从以上分析可以看出， 把局部变量改变为静态变量后是改变了它的存储方式即改变了它的生存期。把全局变量改变为静态变量 后是改变了它的作用域， 限制了它的使用范围。因此static 这个说明符在不同的地方所起的作用是不同的。</p>
<h2 id="static-函数…"><a href="#static-函数…" class="headerlink" title="static 函数…..:"></a>static 函数…..:</h2><p>内部函数和外部函数<br>　　当一个源程序由多个源文件组成时，Ｃ语言根据函数能否被其它源文件中的函数调用，将函数分为内部函数和外部函数。</p>
<h3 id="内部函数（又称静态函数）"><a href="#内部函数（又称静态函数）" class="headerlink" title="内部函数（又称静态函数）:"></a>内部函数（又称静态函数）:</h3><p>　　如果在一个源文件中定义的函数，只能被本文件中的函数调用，而不能被同一程序其它文件中的函数调用，这种函数称为内部函数。<br>　　定义一个内部函数，只需在函数类型前再加一个“static”关键字即可，如下所示：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> 函数类型 函数名<span class="token punctuation">(</span>函数参数表<span class="token punctuation">)</span>
　　<span class="token punctuation">&#123;</span>……<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>　　关键字“static”，译成中文就是“静态的”，所以内部函数又称静态函数。但<font color=#D0087E size=4 face="幼圆">此处“static”的含义不是指存储方式，而是指对函数的作用域仅局限于本文件。</font><br>　　使用内部函数的好处是：不同的人编写不同的函数时，不用担心自己定义的函数，是否会与其它文件中的函数同名，因为同名也没有关系。</p>
<h3 id="外部函数"><a href="#外部函数" class="headerlink" title="外部函数:"></a>外部函数:</h3><p>　　外部函数的定义：在定义函数时，如果没有加关键字“static”，或冠以关键字“extern”，表示此函数是外部函数：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span><span class="token keyword">extern</span><span class="token punctuation">]</span> 函数类型 函数名<span class="token punctuation">(</span>函数参数表<span class="token punctuation">)</span>
　　<span class="token punctuation">&#123;</span>……<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>　　调用外部函数时，需要对其进行说明：<br>　　[extern] 函数类型 函数名(参数类型表)[，函数名2(参数类型表2)……]；</p>
<h4 id="案例-外部函数应用。"><a href="#案例-外部函数应用。" class="headerlink" title="[案例]外部函数应用。"></a>[案例]外部函数应用。</h4><p>　　（1）<strong>文件mainf.c</strong><br>　　main()<br>　　{ extern void input(…),process(…),output(…);<br>　　input(…); process(…); output(…);<br>　　}<br>　　（2）<strong>文件subf1.c</strong><br>　　……<br>　　extern void input(……) &#x2F;<em>定义外部函数</em>&#x2F;<br>　　{……}<br>　　（3）<strong>文件subf2.c</strong><br>　　……<br>　　extern void process(……) &#x2F;<em>定义外部 函数</em>&#x2F;<br>　　{……}<br>　　（4）<strong>文件subf3.c</strong><br>　　……<br>　　extern void output(……) &#x2F;<em>定义外部函数</em>&#x2F;<br>　　{……} </p>
<br>







<p>转载：<a href="https://blog.csdn.net/LK274857347/article/details/61616416">C语言中的 static变量（全局和局部）、static函数总结</a> </p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序一 技法</category>
      </categories>
  </entry>
  <entry>
    <title>DTK 基础教程：自定义控件规范</title>
    <url>/posts/525116e/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　<code>DTK</code> 基础知识，尤其使用 <code>DTK</code> 开发应用软件或者参与维护 <code>DTK</code> 库，此都是一个良好的入门级别的知识；且本文档着重讲解 <strong>“DTK自定义控件”</strong> 的规范。 此处为一个搬运，为了易于搜索和自己做一个记录，收录进自己目录中。</p>
<blockquote>
<p>给 DTK 库加了一个基础知识性的 <a href="https://github.com/linuxdeepin/qt5integration/wiki/DTK-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B">WiKi</a>，里面有一些 DTK 绘画基础知识、绘画原理流程、自定义控件规范、图标的使用。 其由 <a href="https://github.com/zccrs">zccrs</a> 所编写。</p>
</blockquote>
<br>

<span id="more"></span>

<p>[TOC]</p>
<br>

<h2 id="QStyle"><a href="#QStyle" class="headerlink" title="QStyle"></a>QStyle</h2><p>阅读此文档需要点此先熟悉以下类：</p>
<ul>
<li><a href="https://doc.qt.io/qt-5/qstyle.html">QStyle</a></li>
<li><a href="https://doc.qt.io/qt-5/qstyleoption.html">QStyleOption</a></li>
<li><a href="https://doc.qt.io/qt-5/qstylepainter.html">QStylePainter</a></li>
<li><a href="https://doc.qt.io/qt-5/qpalette.html">QPalette</a></li>
</ul>
<br>

<h2 id="DTK-Style"><a href="#DTK-Style" class="headerlink" title="DTK Style"></a>DTK Style</h2><p>DTK Style插件的实现可以划分为两部分：</p>
<ul>
<li>Qt 库的内置控件</li>
<li>DTK 自定义控件</li>
</ul>
<p>本文档着重讲解“DTK自定义控件”的规范。DTK Widget 模块跟控件样式相关的主要有三个类：</p>
<ul>
<li><a href="https://gitlab.deepin.io/dde-v20/dtkwidget/blob/master/src/widgets/dstyle.h">DStyle</a></li>
<li><a href="https://gitlab.deepin.io/dde-v20/dtkwidget/blob/master/src/widgets/dstyleoption.h">DStyleOption</a></li>
<li><a href="https://gitlab.deepin.io/dde-v20/dtkwidget/blob/master/src/widgets/dstyleoption.h">DPalette</a></li>
</ul>
<br>

<h5 id="DStyle"><a href="#DStyle" class="headerlink" title="DStyle"></a>DStyle</h5><p>DStyle 继承于 QCommonStyle，在基类（QStyle）的基础上添加了一些枚举值以及绘制、加工类的函数。Qt 所有内置控件均在 paintEvent 中使用 QStyle 中提供的各种 drawXXX 接口进行绘制，另外，QStyle 中定义了大量的枚举类型，如 QStyle::PrimitiveElement、QStyle::ControlElement、QStyle::SubControl 等，这些枚举类型用于控件的绘制、布局、标志位等抽象接口的定义中。QStyle 满足了 Qt 原生控件自定义风格的需求，同理，DStyle 需要在此基础上满足 DTK 控件自定义风格的需求。</p>
<br>

<h5 id="DStyleOption"><a href="#DStyleOption" class="headerlink" title="DStyleOption"></a>DStyleOption</h5><p>用于扩展 QStyleOption。如 DStyleOptionButton 需要对 QStyleOptionButton 就行扩展，它需要同时继承 DStyleOption 和 QStyleOptionButton。</p>
<br>

<h5 id="DPalette"><a href="#DPalette" class="headerlink" title="DPalette"></a>DPalette</h5><p>控件的行为虽然不同，但是它们的配色有很多共同的地方，在 Qt 的 GUI 模块中，QPalette 类负责管理所有通用型颜色。每一个 QWidget 对象都有对应的 QPalette，当没有使用 QWidget::setPalette 指定控件使用的调色板时，其将跟随 QApplicatioin::palette。</p>
<p>QPalette 中定义了两个枚举类型：</p>
<ul>
<li>ColorGroup 颜色的分组，包含：Disabled、Active（Normal）、Inactive 三个值</li>
<li>ColorRole  颜色的类型，包含：Background、Base、Foreground 等一系列值</li>
</ul>
<p>我们可以把 ColorRole 定义的颜色理解为 c++ 中的基本数据类型（int double等），则控件的设计类似于 c++ 类的设计，一个是封装基本数据类型定义一个类，另一个则是通过对基础颜色的组合创建一个控件。</p>
<p>QPalette 包含十几种常用的颜色，能满足 Qt 所有内置控件的绘制需要。但是 DTK 控件的设计在配色上更加的丰富，QPalette::ColorRole 中定义的基本颜色无法满足需求，因此在 dtkwidget 库中定义了 DPalette 类，并且添加了 DPalette::ColorType 的枚举类型，用于为 DTK 控件添加基本色的定义。<br><br></p>
<h2 id="QStyle-和-QPalette-的关系"><a href="#QStyle-和-QPalette-的关系" class="headerlink" title="QStyle 和 QPalette 的关系"></a>QStyle 和 QPalette 的关系</h2><p>QApplication 会在初始化阶段（当使用 QApplication::setStyle 后也会执行以下步骤）调用 QStyle::standardPalette 获取一个标准的 QPalette 对象，这个对象在各个控件的 paintEvent 中被初始化给 QStyleOption （用于存储绘制控件所需要的所有数据），之后在 QStyle 绘制控件时则从 QStyleOption::palette 中获取定义的各种颜色值。对于 QApplication、QStyleOptin、QWidget 而言，它们只识别 QPalette，因此，DPalette 的初始化目前是放置在 QStyle::polish(QApplication*) 中，由 DPalette 自己管理 QApplication 和 QWidget 对象所对应的 DPalette 数据，在 style 插件的实现中则通过 DPalette::get 静态函数获取调色板对象。 </p>
<br>

<h2 id="DTK-控件设计"><a href="#DTK-控件设计" class="headerlink" title="DTK 控件设计"></a>DTK 控件设计</h2><p>在 DDEV20 的设计中，有以下几个特点。首先先看一张图</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200911155018.png" width="100%"/ loading="lazy">

<p>每个控件分为五个状态：</p>
<ul>
<li>Normal</li>
<li>Hover</li>
<li>Pressed</li>
<li>Disabled</li>
<li>Focus</li>
</ul>
<p>于此相关的是，主窗口层面还分为 Active 和 Inactive 状态，也就是窗口是否被激活的状态。窗口的状态可以和控件状态相互叠加，因此，叠加后的控件状态共有十种组合。不过，在控件中其实不用过于关心窗口的状态，窗口 Active 时控件都是默认样式，Inactive 时则把所有颜色的不透明度降低 40%。同理 Disabled 状态则把所有颜色的不透明度降低 60%。因此，除去这两个特殊状态后，控件中还剩余 Normal Hover Pressed Focus 四个状态需要关心。</p>
<br>

<h5 id="Normal"><a href="#Normal" class="headerlink" title="Normal"></a>Normal</h5><p>控件默认状态，使用 DPalette 的 Normal 组中各个 ColorRole&#x2F;ColorType 的定义即可。</p>
<h4 id="Hover"><a href="#Hover" class="headerlink" title="Hover"></a>Hover</h4><p>控件的 hover 状态可以由 normal 状态经过颜色变换（调色：如提供颜色亮度等），可使用 DStyle::generatedBrush 获取加工后的颜色值。DStyle 定义了 StyleState 用于指定需要加工的目标颜色类型，默认 Normal 可以不进行任何加工。</p>
<h4 id="Pressed"><a href="#Pressed" class="headerlink" title="Pressed"></a>Pressed</h4><p>和 Hover 状态一样，也是由 normal 状态经过颜色变换得到。</p>
<br>

<h2 id="代码流程描述"><a href="#代码流程描述" class="headerlink" title="代码流程描述"></a>代码流程描述</h2><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200911155413.png" width="80%"/ loading="lazy">

<br>

<h2 id="字号使用规范"><a href="#字号使用规范" class="headerlink" title="字号使用规范"></a>字号使用规范</h2><p><a href="https://gitlab.deepin.io/dde-v20/dtkwidget/blob/master/src/widgets/dstyleoption.h#L156">DFontManager</a></p>
<p>字号分为十个等级，T1-T10，默认为 T6 级别，当系统中字号大小改变时，所有级别基于默认级别进行同值增减。例如，T6 当前对应的字号为 16px，在控制中心将字号调整为 20px 后，T1-T10 的字号都将增加 4px。所有的控件设计中均不可直接指定字号大小，如果需要对特定的 QWidget 对象设置字号等级，可以使用 DFontSizeManager::bind 接口绑定到对应的级别。</p>
<br>

<h2 id="如何实现一个全新的控件"><a href="#如何实现一个全新的控件" class="headerlink" title="如何实现一个全新的控件"></a>如何实现一个全新的控件</h2><p>首先为此控件添加需要的枚举值，如 <a href="https://gitlab.deepin.io/dde-v20/dtkwidget/blob/master/src/widgets/dsuggestbutton.h">DSuggestButton</a>，QStyle 中已经包含了 QStyle::CE_PushButton 的定义，这部分不用再进行扩展，查看 QStyleOptionButton，它在 ButtonFeatures 中定义了按钮的一些特性，因此我们需要继承 QStyleOptionButton 进行扩展。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">DStyleOptionButton</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QStyleOptionButton</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">DStyleOption</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">enum</span> <span class="token class-name">ButtonFeature</span> <span class="token punctuation">&#123;</span>
        SuggestButton <span class="token operator">=</span> <span class="token punctuation">(</span>CommandLinkButton <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        WarningButton <span class="token operator">=</span> <span class="token punctuation">(</span>SuggestButton <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>widget<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这是 DStyleOptionButton 的代码实现，添加了两个枚举值 SuggestButton、WarningButton。在 DSuggestButton 的 paintEvent 中将使用这些新加的值绘制自定义的按钮。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">DSuggestButton</span><span class="token double-colon punctuation">::</span><span class="token function">paintEvent</span><span class="token punctuation">(</span>QPaintEvent <span class="token operator">*</span>event<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">Q_UNUSED</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>
    QStylePainter <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    DStyleOptionButton option<span class="token punctuation">;</span>
    option<span class="token punctuation">.</span>features <span class="token operator">|=</span> <span class="token class-name">DStyleOptionButton</span><span class="token double-colon punctuation">::</span><span class="token function">ButtonFeatures</span><span class="token punctuation">(</span>DStyleOptionButton<span class="token double-colon punctuation">::</span>SuggestButton<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">initStyleOption</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>
    option<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token punctuation">.</span><span class="token function">drawControl</span><span class="token punctuation">(</span>QStyle<span class="token double-colon punctuation">::</span>CE_PushButton<span class="token punctuation">,</span> option<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最终，对 QStylePainter::drawControl 的调用将变为对 QStyle::drawControl 的调用。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">XXX</span><span class="token double-colon punctuation">::</span><span class="token function">drawControl</span><span class="token punctuation">(</span>ControlElement element<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> CE_PushButton<span class="token operator">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        QStyleOptionButton <span class="token operator">*</span>opt_button <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_case</span><span class="token generic class-name"><span class="token operator">&lt;</span>QStyleOptionButton<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">if</span> <span class="token punctuation">(</span>opt_button<span class="token operator">-></span>features<span class="token punctuation">.</span><span class="token function">testFlag</span><span class="token punctuation">(</span>DStyleOptionButton<span class="token double-colon punctuation">::</span>SuggestButton<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// draw suggest button</span>
        <span class="token punctuation">&#125;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样即完成了对 DSuggestButton 的绘制。</p>
<br>

<h2 id="如何自绘控件"><a href="#如何自绘控件" class="headerlink" title="如何自绘控件"></a>如何自绘控件</h2><p>有些控件在 Qt 以及 DTK 库中均不存在，在应用程序的开发中需要自己绘制实现，如控制中心个性化模块中的颜色选择控件：</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200911155239.png" width="70%"/ loading="lazy">

<p>paintEvent 代码：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">paintEvent</span><span class="token punctuation">(</span>QPaintEvent <span class="token operator">*</span>event<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QPainter <span class="token function">pa</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStyleOption opt<span class="token punctuation">;</span>
    opt<span class="token punctuation">.</span><span class="token function">initFrom</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> borderWidth <span class="token operator">=</span> <span class="token function">style</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>DStyle<span class="token double-colon punctuation">::</span>PM_FocusBorderWidth<span class="token punctuation">,</span> <span class="token operator">&amp;</span>opt<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> borderSpacing <span class="token operator">=</span> <span class="token function">style</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>DStyle<span class="token double-colon punctuation">::</span>PM_FocusBorderSpacing<span class="token punctuation">,</span> <span class="token operator">&amp;</span>opt<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> QMargins <span class="token function">margins</span><span class="token punctuation">(</span>borderWidth <span class="token operator">+</span> borderSpacing<span class="token punctuation">,</span> borderWidth <span class="token operator">+</span> borderSpacing<span class="token punctuation">,</span> borderWidth <span class="token operator">+</span> borderSpacing<span class="token punctuation">,</span> borderWidth <span class="token operator">+</span> borderSpacing<span class="token punctuation">)</span><span class="token punctuation">;</span>    

    pa<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">marginRemoved</span><span class="token punctuation">(</span>margins<span class="token punctuation">)</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 填充颜色背景</span>
    pa<span class="token punctuation">.</span><span class="token function">setPen</span><span class="token punctuation">(</span><span class="token function">QPen</span><span class="token punctuation">(</span>borderWidth<span class="token punctuation">,</span> opt<span class="token punctuation">.</span>palette<span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置边框的宽度和颜色</span>
    pa<span class="token punctuation">.</span><span class="token function">drawEllipse</span><span class="token punctuation">(</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 绘制选中的边框</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>从例子中可以看出，所有和颜色相关的数据均从 QPalette 中读取，所有和大小相关的数据均从 style 对应的接口中读取。</p>
<br>

<h2 id="如何自定义控件的一些参数"><a href="#如何自定义控件的一些参数" class="headerlink" title="如何自定义控件的一些参数"></a>如何自定义控件的一些参数</h2><p>如更改文本颜色：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QLabel <span class="token function">label</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
QPalette pa <span class="token operator">=</span> label<span class="token punctuation">.</span><span class="token function">palette</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pa<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>QPalette<span class="token double-colon punctuation">::</span>Text<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>
label<span class="token punctuation">.</span><span class="token function">setPalette</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="如何添加图标"><a href="#如何添加图标" class="headerlink" title="如何添加图标"></a>如何添加图标</h2><p>一个完整的应用程序主题需要关注的不仅仅是控件的样式，有时，程序中对图标的使用也需要区分深色还是浅色。在 Qt 库中，查找和使用图标都可以通过 QIcon 完成，为了方便图标自动跟随程序主题，DDE 桌面环境在 Qt platform theme 主题插件中添加了一个内置的图标主题，路径为：<code>&quot;qrc:/icons/deepin/builtin/[light/dark]&quot;</code>，其中，<code>light</code>和<code>dark</code>子目录为可选，它们分别为应用程序提供亮色和暗色图标的存储，如果图标本身为通用型（在任何主题下都可使用），则图标文件直接放置到<code>&quot;qrc:/icons/deepin/builtin&quot;</code>目录即可。</p>
<p>图标分为三种类型：</p>
<ul>
<li>TextType 纯文本性图标，其颜色会跟随画笔的前景色变化（和文字颜色保持一致）。文件放置路径：<code>&quot;qrc:/icons/deepin/builtin/[light/dark]/texts&quot;</code></li>
<li>ActionType 动作型图标，其颜色会在其 Mode 改变时跟随画笔前景色（Normal模式图标颜色不会发生变化）。文件放置路径：<code>&quot;qrc:/icons/deepin/builtin/[light/dark]/actions&quot;</code></li>
<li>IconType 图标型图标，其颜色在任何模式下都不会变化。文件放置路径：<code>&quot;qrc:/icons/deepin/builtin/[light/dark]/icons&quot;</code></li>
</ul>
<p>图标名称规范：</p>
<p>名称前面需要添加能标示当前程序的前缀，例如<code>控制中心</code>的图标文件 dcc_xxx_32px.svg（设计大小为32）每一个都会有 “dcc_” 的前缀，其后跟图标s名称（图标名称单词间使用 “_” 符号链接，且全部使用小写字母），再接着，”_32px” 为图标大小标识，标识此图标默认大小，最后的 “.svg” 为图标文件后缀名。</p>
<p>后记：</p>
<p>qrc 表示是一个 Qt 资源文件，此文件需要应用程序中自行创建。”&#x2F;icons&#x2F;deepin&#x2F;builtin” 为路径的固定前缀，随后的目录则为三种类型主题对应的目录。”actions” 为图标的类型目录，目前支持 “texts”、”actions” 和 “icons” 三种类型，”texts” 和 “actions” 目录用于放置一些工具性图标（一般都比较小，且颜色单一），”icons” 则用于放置一些颜色丰富的图标。</p>
<p>添加图标文件后，在程序中只需要使用 QIcon::fromTheme(“dcc_xxx”) 即可获取当前主题对应的图标对象，”dcc_xxx” 为图标文件名称，<code>不包含图标大小标识和文件后缀名！</code></p>
<br>

<h4 id="此规范仅用于约定应用程序中图标的存储和使用，其它图片资源不可使用此规范！"><a href="#此规范仅用于约定应用程序中图标的存储和使用，其它图片资源不可使用此规范！" class="headerlink" title="此规范仅用于约定应用程序中图标的存储和使用，其它图片资源不可使用此规范！"></a>此规范仅用于约定应用程序中图标的存储和使用，其它图片资源不可使用此规范！</h4><h4 id="icon-demo-zip-示例程序"><a href="#icon-demo-zip-示例程序" class="headerlink" title="icon_demo.zip #示例程序"></a><a href="uploads/407ea902dae4be5564567aae12e25d0d/icon_demo.zip">icon_demo.zip</a> #示例程序</h4><br>

<h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a></p>
<p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 QT &#x2F; DTK 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>DTK</tag>
      </tags>
  </entry>
  <entry>
    <title>DTK常用和测试代码片</title>
    <url>/posts/b59ab8c1/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　<code>DTK</code> 常用和测试代码片，在 <code>deepin 20</code> 或 <code>uos 20</code> 中，全部使用 <code>DTK</code> 开发，其中有一些是经常遇到的定位 <code>bug</code> 和修改的代码片。在此抛转引玉，提交一点开发的贡献</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="开发环境："><a href="#开发环境：" class="headerlink" title="开发环境："></a>开发环境：</h3><p>　　<strong>💻：</strong>  <code>uos 20</code> 📎 <code>deepin 20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p>
<br>

<h3 id="将-dtkwidget-项目注册到系统："><a href="#将-dtkwidget-项目注册到系统：" class="headerlink" title="将 dtkwidget 项目注册到系统："></a>将 dtkwidget 项目注册到系统：</h3><p>这里以 <code>dtkwidget</code> 为例，它在系统的动态库是存放路径为 <code>/usr/lib/x86_64-linux-gnu/</code></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200407_134649.png" width="100%"/ loading="lazy">



<ul>
<li><strong>解答图片：</strong><br>经过测试，系统库和 DTK 项目的生成的 libdtkwidget.so 实际使用的都是 最新的 5.xxx 版本，这里面的是 .so.5.1.0；系统库里面遗留下来的 2.xxx 版本可能是提供给某些没有v20版本的项目使用的。</li>
<li>若是想要代码片生效的话，则将项目生成的 .so 文件替代换掉 系统路径下，若是有新的接口改动，那么对应的头文件也要一起替换掉</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#【命令： 5.1.0 需要替换为实际的最大】</span>
<span class="token comment">#[拷贝二进制文件：]</span>
<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /usr/lib/x86_64-linux-gnu/libdtkwidget.so.5.1.0

<span class="token function">sudo</span> <span class="token function">cp</span>  <span class="token punctuation">..</span>/build-dtkwidget-unknown-Debug/src/libdtkwidget.so.5.1.0 /usr/lib/x86_64-linux-gnu/

<span class="token comment">#[拷贝头文件：]</span>
<span class="token function">sudo</span> <span class="token function">cp</span> /home/muli/project/dtkwidget/src/widgets/dslider.h /usr/include/libdtk-5.1.0/DWidget/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>PS（uos &#x2F; deepin）：</strong></p>
<p>对于 <code>dtkwidget</code> 项目会生成 <code>libdtkwidget.so</code> 动态库；系统存放路径为 <code>/usr/lib/x86_64-linux-gnu/</code> ；</p>
<p>项目 <code>dtkgui</code> 会生成 <code>libdtkgui.so</code> 动态库文件；系统存放路径为 <code>/usr/lib/x86_64-linux-gnu/</code> ；</p>
<p>项目 <code>qt5integration</code> 会生成 <code>libchameleon.so</code> 动态库文件在 <code>./bin/plugins/styles/libchameleon.so  </code> 下 ；<code>/usr/lib/x86_64-linux-gnu/qt5/plugins/styles/</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /usr/lib/x86_64-linux-gnu/qt5/plugins/styles/libchameleon.so
<span class="token function">sudo</span> <span class="token function">cp</span>  ./bin/plugins/styles/libchameleon.so /usr/lib/x86_64-linux-gnu/qt5/plugins/styles/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br>

<h3 id="判断-系统主题是浅色还是暗色："><a href="#判断-系统主题是浅色还是暗色：" class="headerlink" title="判断 系统主题是浅色还是暗色："></a>判断 系统主题是浅色还是暗色：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">DGuiApplicationHelper <span class="token operator">*</span>guiAppHelp <span class="token operator">=</span> <span class="token class-name">DGuiApplicationHelper</span><span class="token double-colon punctuation">::</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>guiAppHelp<span class="token operator">-></span><span class="token function">themeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> DGuiApplicationHelper<span class="token double-colon punctuation">::</span>ColorType<span class="token double-colon punctuation">::</span>DarkType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//暗色主题</span>

<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//浅色主题</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="对某一颜色，在浅-x2F-暗主题对其亮度进行修改："><a href="#对某一颜色，在浅-x2F-暗主题对其亮度进行修改：" class="headerlink" title="对某一颜色，在浅 &#x2F; 暗主题对其亮度进行修改："></a>对某一颜色，在浅 &#x2F; 暗主题对其亮度进行修改：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//DGuiApplicationHelper::toColorType 获取颜色的明亮度，将其转换为主题类型的枚举值。</span>

QColor <span class="token function">lineColor</span><span class="token punctuation">(</span>opt<span class="token operator">-></span>palette<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span>QPalette<span class="token double-colon punctuation">::</span>Base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">DGuiApplicationHelper</span><span class="token double-colon punctuation">::</span><span class="token function">toColorType</span><span class="token punctuation">(</span>lineColor<span class="token punctuation">)</span> <span class="token operator">==</span> DGuiApplicationHelper<span class="token double-colon punctuation">::</span>LightType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//此颜色在浅色主题下，亮度 -10</span>
	lineColor <span class="token operator">=</span> <span class="token class-name">DGuiApplicationHelper</span><span class="token double-colon punctuation">::</span><span class="token function">adjustColor</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//此颜色在暗色色主题下，亮度 +10</span>
	lineColor <span class="token operator">=</span> <span class="token class-name">DGuiApplicationHelper</span><span class="token double-colon punctuation">::</span><span class="token function">adjustColor</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="属性的使用："><a href="#属性的使用：" class="headerlink" title="属性的使用："></a>属性的使用：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">Q_DECLARE_METATYPE</span><span class="token punctuation">(</span>QMargins<span class="token punctuation">)</span>
par<span class="token operator">-></span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"_d_margins"</span><span class="token punctuation">,</span> <span class="token class-name">QVariant</span><span class="token double-colon punctuation">::</span><span class="token function">fromValue</span><span class="token punctuation">(</span>margins<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

QMargins magins <span class="token operator">=</span> par<span class="token operator">-></span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">"_d_margins"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">value</span><span class="token generic class-name"><span class="token operator">&lt;</span>QMargins<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>par<span class="token operator">-></span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">"_d_margins"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	content<span class="token operator">-></span><span class="token function">setContentsMargins</span><span class="token punctuation">(</span><span class="token function">QMargins</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
	content<span class="token operator">-></span><span class="token function">setContentsMargins</span><span class="token punctuation">(</span>magins<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="在-paintEvent-里面获取一个颜色："><a href="#在-paintEvent-里面获取一个颜色：" class="headerlink" title="在 paintEvent() 里面获取一个颜色："></a>在 paintEvent() 里面获取一个颜色：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">SliderStrip</span><span class="token double-colon punctuation">::</span><span class="token function">paintEvent</span><span class="token punctuation">(</span>QPaintEvent <span class="token operator">*</span>event<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">Q_UNUSED</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>
    QPainter <span class="token function">pa</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> dpa <span class="token operator">=</span> <span class="token class-name">DApplicationHelper</span><span class="token double-colon punctuation">::</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">palette</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QPen penLine <span class="token operator">=</span> <span class="token function">QPen</span><span class="token punctuation">(</span>dpa<span class="token punctuation">.</span><span class="token function">textTips</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QPen penNumber <span class="token operator">=</span> <span class="token function">QPen</span><span class="token punctuation">(</span>dpa<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span>DPalette<span class="token double-colon punctuation">::</span>ObviousBackground<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    pa<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>penLine<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="将自定义风格-应用于-其他的软件："><a href="#将自定义风格-应用于-其他的软件：" class="headerlink" title="将自定义风格 应用于 其他的软件："></a>将自定义风格 应用于 其他的软件：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">qtcreator <span class="token parameter variable">-style</span> windows

qtcreator <span class="token parameter variable">-style</span> chameleon<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="打印-QBoxLayout里面的所有元素："><a href="#打印-QBoxLayout里面的所有元素：" class="headerlink" title="打印 QBoxLayout里面的所有元素："></a>打印 QBoxLayout里面的所有元素：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> d<span class="token operator">-></span>hBoxLayout<span class="token operator">-></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    QLayoutItem <span class="token operator">*</span>item <span class="token operator">=</span> <span class="token punctuation">(</span>QLayoutItem <span class="token operator">*</span><span class="token punctuation">)</span>d<span class="token operator">-></span>hBoxLayout<span class="token operator">-></span><span class="token function">itemAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span>item<span class="token operator">-></span><span class="token function">widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="QT判断鼠标是否在某子窗口控件上方："><a href="#QT判断鼠标是否在某子窗口控件上方：" class="headerlink" title="QT判断鼠标是否在某子窗口控件上方："></a>QT判断鼠标是否在某子窗口控件上方：</h3><p>需要注意的是，子窗口获取geometry，是相对于父窗口的相对位置，QCursor::pos()获取的是鼠标绝对位置，要不将父窗口的相对位置进行换算，要不将鼠标的绝对位置进行换算，这里本文采用将鼠标绝对位置换算到控件上，示例代码如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>groupBox<span class="token operator">-></span><span class="token function">geometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token function">mapFromGlobal</span><span class="token punctuation">(</span><span class="token class-name">QCursor</span><span class="token double-colon punctuation">::</span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>

<h3 id="获取项目中的-svg-图片资源："><a href="#获取项目中的-svg-图片资源：" class="headerlink" title="获取项目中的 .svg 图片资源："></a>获取项目中的 .svg 图片资源：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">case</span> SP_DialogResetButton<span class="token operator">:</span>
            icon <span class="token operator">=</span> <span class="token class-name">QIcon</span><span class="token double-colon punctuation">::</span><span class="token function">fromTheme</span><span class="token punctuation">(</span><span class="token function">QLatin1String</span><span class="token punctuation">(</span><span class="token string">"edit-clear"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br>

<h3 id="在-main-cpp-中修改测试代码："><a href="#在-main-cpp-中修改测试代码：" class="headerlink" title="在 main.cpp 中修改测试代码："></a>在 main.cpp 中修改测试代码：</h3><p>在 <code>qt5integration</code> 的  main.cpp 中, 常用测试代码如下:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QApplication></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QFileInfo></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QTextBrowser></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QWidget></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QAction></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMenu></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QList></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QPalette></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QPixmap></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QWidget></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;DLineEdit></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;DPasswordEdit></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;DScrollBar></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;DListView></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QStandardItemModel></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;DStandardItem></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;DDialog></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;DSuggestButton></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;DTitlebar></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;DComboBox></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;DProgressBar></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QTimer></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QDialog></span></span>


DWIDGET_USE_NAMESPACE

<span class="token keyword">class</span> <span class="token class-name">ExWidget</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QWidget</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">ExWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">ExWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">contextMenuEvent</span><span class="token punctuation">(</span>QContextMenuEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"widgetgallery.h"</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">Q_INIT_RESOURCE</span><span class="token punctuation">(</span>styles<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//    qputenv("QT_DEBUG_PLUGINS", "1");</span>
    QStringList paths <span class="token operator">=</span> <span class="token class-name">QApplication</span><span class="token double-colon punctuation">::</span><span class="token function">libraryPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    paths<span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token function">QFileInfo</span><span class="token punctuation">(</span><span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">fromUtf8</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/plugins"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">QApplication</span><span class="token double-colon punctuation">::</span><span class="token function">setLibraryPaths</span><span class="token punctuation">(</span>paths<span class="token punctuation">)</span><span class="token punctuation">;</span>

    QApplication <span class="token function">app</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//    WidgetGallery gallery;</span>
<span class="token comment">//    gallery.show();</span>

<span class="token comment">//    DDialog *dialog = new DDialog("title", "mesg");</span>
<span class="token comment">//    dialog->show();</span>

    ExWidget<span class="token operator">*</span> exWidget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ExWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    exWidget<span class="token operator">-></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> app<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">ExWidget</span><span class="token double-colon punctuation">::</span><span class="token function">ExWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">ExWidget</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">ExWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExWidget</span><span class="token double-colon punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">1100</span><span class="token punctuation">,</span> <span class="token number">720</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token string">"example DTK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//    moveToCenter(this);</span>
    <span class="token function">setContextMenuPolicy</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>DefaultContextMenu<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//DTitlebar Test--------------------------------------------------------------</span>
    DTitlebar<span class="token operator">*</span> titleBar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">DTitlebar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    titleBar<span class="token operator">-></span><span class="token function">setQuitMenuDisabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    titleBar<span class="token operator">-></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">620</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//--------------------------------------------------------------</span>
<span class="token comment">//    QPalette pale = this->palette();</span>
<span class="token comment">//    pale.setBrush(backgroundRole(),</span>
<span class="token comment">//                  Qt::white); //纯白</span>
<span class="token comment">//                  Qt::black); //黑色</span>
<span class="token comment">//                  QPixmap("/home/muli/softFile/netWallPaper/700047.jpg"));</span>
<span class="token comment">//                  QPixmap("/home/muli/softFile/netWallPaper/499786.png"));</span>
<span class="token comment">//                  QPixmap("/home/muli/softFile/netWallPaper/20200326.png"));</span>
<span class="token comment">//                  QPixmap("/home/muli/Desktop/20200327_104540.png"));</span>
<span class="token comment">//    setPalette(pale);</span>


    <span class="token comment">//DListView Test--------------------------------------------------------------</span>
    DListView <span class="token operator">*</span>listview <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">DListView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStandardItemModel <span class="token operator">*</span>model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QStandardItemModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        DStandardItem <span class="token operator">*</span>item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">DStandardItem</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"%1%1%1%1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        model<span class="token operator">-></span><span class="token function">appendRow</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    listview<span class="token operator">-></span><span class="token function">setModel</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>
    listview<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    listview<span class="token operator">-></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    listview<span class="token operator">-></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//DScrollbar Test--------------------------------------------------------------</span>
<span class="token comment">//    DScrollBar * scrollbar = new DScrollBar(this);</span>
<span class="token comment">//    scrollbar->move(50, 50);</span>
<span class="token comment">////    scrollbar->show();</span>

<span class="token comment">//    DScrollBar * scrollbar2 = new DScrollBar(this);</span>
<span class="token comment">//    scrollbar2->setOrientation(Qt::Horizontal);</span>
<span class="token comment">//    scrollbar2->move(200, 50);</span>
<span class="token comment">////    scrollbar2->show();</span>

    <span class="token comment">//DLineEdit Test--------------------------------------------------------------</span>
<span class="token comment">//    DLineEdit* lineEdit = new DLineEdit(this);</span>
<span class="token comment">//    lineEdit->resize(300, 40);</span>
<span class="token comment">//    lineEdit->setEchoMode(QLineEdit::Password);</span>
<span class="token comment">//    lineEdit->move(50, 40);</span>

<span class="token comment">//    DPasswordEdit* passEdit = new DPasswordEdit(this);</span>
<span class="token comment">//    passEdit->resize(300, 40);</span>
<span class="token comment">//    passEdit->move(50, 100);</span>

<span class="token comment">//    QLineEdit* edit = new QLineEdit(this);</span>
<span class="token comment">//    edit->resize(300, 40);</span>
<span class="token comment">//    edit->move(50, 150);</span>
<span class="token comment">//    edit->setEchoMode(QLineEdit::Password);</span>

    <span class="token comment">//DComboBox Test--------------------------------------------------------------</span>
<span class="token comment">//    DComboBox* combobox = new DComboBox(this);</span>
<span class="token comment">//    combobox->resize(300, 40);</span>
<span class="token comment">//    combobox->addItem(QIcon::fromTheme("edit"), "test 01");</span>
<span class="token comment">//    combobox->addItem(QIcon::fromTheme("button_add"), "test 02");</span>
<span class="token comment">//    combobox->addItem(QIcon::fromTheme("edit"), "test 03");</span>
<span class="token comment">//    combobox->addItem(QIcon::fromTheme("edit"), "test 04");</span>
<span class="token comment">//    combobox->move(50, 200);</span>

    <span class="token comment">//DPushButton Test--------------------------------------------------------------</span>
<span class="token comment">//    btn = new DPushButton("this", this);</span>
<span class="token comment">//    btn->resize(300, 50);</span>
<span class="token comment">//    btn->move(50, 50);</span>
<span class="token comment">//    btn->setGeometry(50,05,300,50);</span>

<span class="token comment">//    btn2 = new DPushButton("this a", this);</span>
<span class="token comment">//    btn2->resize(300, 50);</span>
<span class="token comment">//    btn2->move(360, 50);</span>

<span class="token comment">//    frame = new DFrame(this);</span>
<span class="token comment">//    frame->resize(300, 50);</span>
<span class="token comment">//    frame->move(50, 110);</span>
<span class="token comment">////    DStyle::setFrameRadius(frame, 16);</span>
<span class="token comment">//    frame->setStyleSheet("font: bold; font-size:20px; color: rgb(241, 70, 62)");</span>
<span class="token comment">//    frame->setFrameRounded(true);</span>

<span class="token comment">//    qDebug()&lt;&lt;"--01--"&lt;&lt;frame->rect();</span>


<span class="token comment">//DProgressBar Test--------------------------------------------------------------</span>

<span class="token comment">//    int nStar = 50;</span>
<span class="token comment">//    DProgressBar *proBar1 = new DProgressBar(this);</span>
<span class="token comment">//    proBar1->setOrientation(Qt::Horizontal);</span>
<span class="token comment">//    proBar1->move(50, 50);</span>
<span class="token comment">//    proBar1->resize(300, 50);</span>
<span class="token comment">//    proBar1->setRange(0, 100);</span>
<span class="token comment">//    proBar1->setValue(nStar);</span>
<span class="token comment">////    proBar1->setAlignment(Qt::AlignCenter);</span>
<span class="token comment">//    proBar1->show();</span>

<span class="token comment">//    DProgressBar *proBar2 = new DProgressBar(this);</span>
<span class="token comment">//    proBar2->setOrientation(Qt::Vertical);</span>
<span class="token comment">//    proBar2->move(400, 50);</span>
<span class="token comment">//    proBar2->resize(50, 300);</span>
<span class="token comment">//    proBar2->setRange(0, 100);</span>
<span class="token comment">//    proBar2->setValue(nStar);</span>
<span class="token comment">//    proBar2->show();</span>

<span class="token comment">//    DProgressBar *proBar3 = new DProgressBar(this);</span>
<span class="token comment">//    proBar3->setOrientation(Qt::Horizontal);</span>
<span class="token comment">//    proBar3->move(50, 200);</span>
<span class="token comment">//    proBar3->resize(300, 8);</span>
<span class="token comment">//    proBar3->setRange(0, 100);</span>
<span class="token comment">//    proBar3->setValue(nStar);</span>
<span class="token comment">////    proBar3->setAlignment(Qt::AlignCenter);</span>
<span class="token comment">//    proBar3->show();</span>

<span class="token comment">//    DProgressBar *proBar4 = new DProgressBar(this);</span>
<span class="token comment">//    proBar4->setOrientation(Qt::Vertical);</span>
<span class="token comment">//    proBar4->move(500, 50);</span>
<span class="token comment">//    proBar4->resize(8, 300);</span>
<span class="token comment">//    proBar4->setRange(0, 100);</span>
<span class="token comment">//    proBar4->setValue(nStar);</span>
<span class="token comment">//    proBar4->show();</span>


<span class="token comment">//    QTimer *timer = new QTimer(this);</span>
<span class="token comment">//    timer->start();</span>
<span class="token comment">//    timer->setInterval(50);</span>

<span class="token comment">//    connect(timer, &amp;QTimer::timeout, [=]()&#123;</span>
<span class="token comment">//        if (proBar1->value() >= 100)</span>
<span class="token comment">//            proBar1->setValue(0);</span>
<span class="token comment">//        proBar1->setValue(proBar1->value() + 1);</span>

<span class="token comment">//        if (proBar2->value() >= 100)</span>
<span class="token comment">//            proBar2->setValue(0);</span>
<span class="token comment">//        proBar2->setValue(proBar2->value() + 1);</span>

<span class="token comment">//        if (proBar3->value() >= 100)</span>
<span class="token comment">//            proBar3->setValue(0);</span>
<span class="token comment">//        proBar3->setValue(proBar3->value() + 1);</span>

<span class="token comment">//        if (proBar4->value() >= 100)</span>
<span class="token comment">//            proBar4->setValue(0);</span>
<span class="token comment">//        proBar4->setValue(proBar4->value() + 1);</span>
<span class="token comment">//        &#125;);</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExWidget</span><span class="token double-colon punctuation">::</span><span class="token function">contextMenuEvent</span><span class="token punctuation">(</span>QContextMenuEvent <span class="token operator">*</span>event<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">Q_UNUSED</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>

    QMenu<span class="token operator">*</span> menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QMenu</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        QString str <span class="token operator">=</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"act   %1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        menu<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        menu<span class="token operator">-></span><span class="token function">addSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    menu<span class="token operator">-></span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token class-name">QCursor</span><span class="token double-colon punctuation">::</span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p> <a href="https://github.com/xmuli/QtExamples">QtExamples</a></p>
<p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>DTK的历史起源、发展，和简单入门(精华篇)</title>
    <url>/posts/974df8a3/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　 <strong>DTK</strong>（<code>deepin tool kit</code>）全称是 <font color=#D0087E size=4 face="幼圆"><strong>深度工具套件</strong></font>；是基于 <code>Qt5</code> 开发一整套界面美观且实用的 <code>UI</code> 图形库。</p>
<p>本篇主要尽可能多的讲解一下 <code>dtk</code> 的起源于历史，以及项目壮大后的拆分、现在 <code>dtk</code> 项目的组成和基本含义；以及 <code>dtk</code> 的文档从无到有，再到现在的极大丰富历史；最后就是 <code>dtk</code> 的如何快速上手部分。</p>
<p><strong>在<a href="https://xmuli.blog.csdn.net/article/details/106195055">另一篇</a>中讲解 deepin、dde的历史起源与发展(附deepin所有版本的dde截图)，</strong>可以一览其近 10 年的变化。</p>
<p>网上关于它的教程比较少，关于历史的更是基本就没有，在此补一笔。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/IMG_1263.JPG" width="35%"/ loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="一点碎碎念-："><a href="#一点碎碎念-：" class="headerlink" title="一点碎碎念~："></a>一点碎碎念~：</h3><blockquote>
<p>工欲善其事，必先利其器。再知道一点它的演变历史~？</p>
</blockquote>
<blockquote>
<p><strong>本文仅仅无意代表官方文章</strong>，仅讲述 dtk 和 deepin 的演变历史</p>
</blockquote>
<p>本来只是想单写一篇 dtk 的其实起源的，但随着本文知识的丰富、确保时间线的基本准确，请教很多的前辈和大佬们，感谢他们</p>
<p>）请教了 dtk、deepin、develop team 的历史和原源过程中，体会到事物往往不是单一的，且与彼此之间有着千丝万缕联系而又互相独立，各有特色。<font color=#FF0000  size=4 face="幼圆"><strong>本篇的侧重点是 dtk 项目的历史起源、发展过程与现状、现在的理解和如何快速上手；最后附上部分 dtk 相关的资料文档。</strong></font> <strong>而关于 deepin &amp;&amp; dde &amp;&amp; team 的介绍，则单独成立一篇新的<a href="https://xmuli.blog.csdn.net/article/details/106195055">文章</a>。</strong></p>
<br>

<h3 id="背景交代："><a href="#背景交代：" class="headerlink" title="背景交代："></a>背景交代：</h3><p>说来惭愧，初接触 deepin 是由 v15.11 才开始的，一开始埋头着开发 dtk 有许久的一些时间，但对其历史出身来历一直比较模糊，于是乎收集和整理一下现存的所有 dtk 的项目、手册资料，与库的维护者和最初的库的开发者，以及公司有着较深资历前辈们交流，外加上个人和小伙伴们，也都有参与过该库的维护一段时间后，才得以落笔，梳理成此篇文章（欢迎交流与指正）。</p>
<br>

<h3 id="dtk-名称的理解（易混淆）："><a href="#dtk-名称的理解（易混淆）：" class="headerlink" title="dtk 名称的理解（易混淆）："></a>dtk 名称的理解（易混淆）：</h3><ul>
<li>其中有几个容易混淆的名词，<code>dtk</code>， <code>dtkwidget</code>， <code>dtk</code> 项目。</li>
</ul>
<p><font color=#FF0000  size=4 face="幼圆"><strong>下面仅为个人理解，按照当前 2020 上半年的阶段的项目实际情况理解：</strong></font></p>
<p><font color=#FF0000  size=4 face="幼圆"><strong>dtk 含义理解：</strong></font> 是一个泛指，需要灵活的在上下文的语义中理解其含义：</p>
<ol>
<li><strong>dtk 项目(库) 的集合。</strong> （是一堆仓库的集合 &#x3D; dtkwidget + dtkgui + dtkcore + qt5integration…）</li>
<li>偶也指 dtkwidget 这个仓库项目（这个仓库的名称就叫 <a href="https://github.com/linuxdeepin/dtkwidget">dtkwidget</a>）</li>
<li>deepin tool kit 是一个深度工具构建集合。</li>
<li>是能在 deepin(uos) 系统开发应用软件，使用非 Qt 原生的样式控件的集合的开发环境</li>
<li>dtk 也作为构建 deepin 全家桶的基石</li>
</ol>
<p>DTK 目前分为三个模块，dtkcore、dtkgui，dtkwidget，主要功能如下：</p>
<table>
<thead>
<tr>
<th align="center">项目</th>
<th align="center">功能描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">dtkcore</td>
<td align="center">提供应用程序开发中的工具类，如程序日志、文件系统监控、格式转换等工具类</td>
</tr>
<tr>
<td align="center">dtkgui</td>
<td align="center">包含了开发图形用户界面应用程序所需的功能。主要是控制窗口主题这种外观性，调色板等信息。</td>
</tr>
<tr>
<td align="center">dtkwidget</td>
<td align="center">提供各种dtk基础控件，方便开发统一风格的应用。</td>
</tr>
</tbody></table>
<br>

<h3 id="DTK-的历史起源："><a href="#DTK-的历史起源：" class="headerlink" title="DTK 的历史起源："></a>DTK 的历史起源：</h3><h4 id="dtk-项目的历史演变（含名称）："><a href="#dtk-项目的历史演变（含名称）：" class="headerlink" title="dtk 项目的历史演变（含名称）："></a>dtk 项目的历史演变（含名称）：</h4><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518_111136.png" width="100%"/ loading="lazy">

<br>

<ul>
<li>在 2015 年，开发 deepin v15 版本的时候，因为开发控制中心（基于 Qt Widgets），开发的过程中抽象出了 dui 控件库（从控制中心开发起三个月），只有一些通用性的控件，仓库名称为 <code>dui</code> 。</li>
<li>16 年初，随后开发其他项目，dui 中加的东西越来越多，也不仅限于 ui 方面的控件，之后就改名为了 <code>deepin-tool-kit</code> 项目。</li>
<li>17 年底，随后成为了 DDE 桌面环境的底层开发库，封装了桌面组件和上层应用的通用型窗口、控件、工具类，随着项目越来越大，编译也越来越慢，于是拆分为了 <code>dtkcore</code>、<code>dtkwidget</code>、<code>dtkwm</code>（仅三个仓库），旧的 deepin-tool-kit 仓库地址处于废弃状态。</li>
<li>19 年新增加了 dtkgui 模块，废弃了 dtkwm（不可跨平台，强依赖 X11，因此废弃），此后分为 dtkcore、dtkgui、dtkwidget，角色分别对应 Qt core、gui、widgets 模块。</li>
<li>20 年之后，按照如今的理解为，<code>dtk</code> &#x3D; <code>dtkwidget</code> + <code>dtkgui</code> + <code>qt5integration</code> + <code>dtkcore</code> + … 等多个项目的总称呼</li>
</ul>
<br>

<p><font color=#D0087E size=4 face="幼圆"><strong>由于 <code>qt5integratioin</code> 项目一直是独立的，本不算 <code>dtk</code> 项目里的一员，不过实际上是和 <code>dtk</code> 配套的，故本文算到 <code>dtk</code> 框架中。</strong></font></p>
<br>

<h4 id="样式变化："><a href="#样式变化：" class="headerlink" title="样式变化："></a>样式变化：</h4><p>其中随着时间的变化，界面的 UI 样式也发生了比较大的变化，当时 v15 版本的控制中心，还在屏幕右侧，不透明偏向黑色，到后来的成为白色偏透明色，在到现在的一个单独的控制中心（下图依次为 deepin v15 早期版本，和 uos v20 的控制中心）。</p>
<p>而 dtk 是属于绘画自定义皮肤控件的基础核心，然后在它的基础上面做了一次封装， 封装了一系列 Dxxxx 开头的控件（如 DPushButton 等）， 然后再由应用开发的同学们，开发出一款款应用，全部使用 dtk 的控件。那样开发出来的界面，就和系统的风格保持了一致性；而对于 win 系列的软件，也可以使用 wine（deepin-win） 来在 此 linux 上面运行；而对于第三方的应用软件，使用 chameleon style 启动，来保证和系统的风格一致。</p>
<p>下面放图、使用 dtk 库 开发出来的控件或者应用,enen… dtk 的样式就这么好看，这么的棒，这里要多感谢设计师们。<strong>ps：</strong> 设计师们简直就是程序开发之友，尤其是使用绘画控件的时候，可以少修改 50%+ 的代码或者 bug，且他们也非常好沟通~</p>
<ul>
<li>deepin v15 早期不透明黑色效果：</li>
</ul>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200515161731.png" width="100%"/ loading="lazy">



<ul>
<li>uos&#x2F;deepin v20 早期透明磨砂效果：</li>
</ul>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200515_175353.png" width="100%"/ loading="lazy">

<br>

<h4 id="0-gt-1-的诞生-dui："><a href="#0-gt-1-的诞生-dui：" class="headerlink" title="0 -&gt; 1 的诞生 dui："></a>0 -&gt; 1 的诞生 dui：</h4><p>约 2015 年，<strong>起初是创建 dui 项目的，后来才改名为，<a href="https://github.com/linuxdeepin/deepin-tool-kit">deepin-tool-kit</a> ；再后来拆分为为多个库 dtkwidget + qt5integration + 其他；</strong></p>
<br>

<p>早先，且所有的 dtk + deepin 的项目，都是在 github 作为唯一的大本营;由于 0-&gt;1 时代，主要是开发构建 dtk 的体系架构，基本没有什么文档的书写✍️（一个伏笔）</p>
<br>

<p>后来有听到前辈们说，那个时候是的氛围轻松而又欢乐，更多的是一种平等沟通的合作，大家都是开源爱好的志愿者，一起做着自己喜欢的事情。羡煞我也<del>。 向往与憧憬那个年代，以及更早的几年</del></p>
<br>

<h4 id="deepin-tool-kit-是石器时代："><a href="#deepin-tool-kit-是石器时代：" class="headerlink" title="deepin-tool-kit 是石器时代："></a>deepin-tool-kit 是石器时代：</h4><p>deepin-tool-kit 最开始，是既没有文档，且 api 接口不稳定，容易变化，且设计图的 UI 样式也变化较快，导致入门、开发、维护该 dtk 库都很是困难~。<strong>基本是内部开发者靠小伙伴讲解，外部开发靠自行阅读源码</strong> ；听说以至于一些社区的小伙伴都看不下去，主动做了一个<a href="http://deepin.lolimay.cn/">《Deepin开发指南》</a>（地址已失效）</p>
<br>

<h4 id="壮大后拆分-dtk-库："><a href="#壮大后拆分-dtk-库：" class="headerlink" title="壮大后拆分 dtk 库："></a>壮大后拆分 dtk 库：</h4><p>前辈们的开发者一起编写最初的 <code>dtk</code> 库，随着近好几年的变化和发展，后期一定规模了，深思熟虑后，为更好发展，就决定将对 <code>deepin-tool-kit</code> 仓库进行拆分（2017 年左右）： 详见 <a href="https://github.com/linuxdeepin/deepin-tool-kit/issues/8">issues #8</a></p>
<ul>
<li><strong>dtkcore：</strong> 由 dtkbase&#x2F;dtkutil&#x2F;dtksettings 合并进入 </li>
<li><strong>dtkwidget：</strong> 由 dtkwidget&#x2F;dtksettings 构成</li>
<li><strong>dtkwm：</strong> 处理窗口识别库&#x2F;xcb功能， 供截图、录屏、系统监视器使用</li>
<li><strong>qtwebkit：</strong> 封装chroium，提高CEF&#x2F;WebEngine兼容接口</li>
</ul>
<p>昂~ ，为了代码的健壮性发展，与方便后期的可维护性</p>
<br>

<h4 id="dtk-的口口相传时代："><a href="#dtk-的口口相传时代：" class="headerlink" title="dtk 的口口相传时代："></a>dtk 的口口相传时代：</h4><p>随着上一个时代已经过去了，dtk 的主体框架和 api 都趋向于稳定；且有了部分中文文档，（是中文文档！！！ 鸡冻٩(๑&gt;◡&lt;๑)۶！！！）；此时也基本对内部和外部的研发都已经友好了很多。</p>
<br>

<p>此阶段应该是 deepin 15.11 （恩，至今都是一个经典的版本，后来发现该发版本打磨和维护了近 5 年，很棒的一个版本）已经发布了出来了，开始研发 v20 阶段了。</p>
<p>不过此阶段，新的库的维护者学习 dtk 的方法，依旧是口口相传，手把手的教你一行一行的写代码（像一个大哥哥一样<del>）；毕竟使用的最新的接口，还没来得及更新到文档之中，且容易有变化，旧的接口就稳定得多。<strong>此阶段 dtk 的研发就是内部靠口口相传，外部研发靠部分文档+@戳你一下，加双方都看源码，来完成彼此的合作</strong> （有事觉得有和其他开发者一起互动的感觉也很棒</del>） </p>
<br>

<p><strong>这里说一个小的插曲：</strong></p>
<p>当我初次开始接触 dtk 库的维护时候，学习方式也是口口相传。</p>
<p>记得刚来，就来负责 dtk 的开发与维护，初接触的一周，都不知到该如何敲下手，一行都憋不出来；担心自己凉了，然后网上搜了搜 dtk 关键字，我的妈耶，连一个文档都没得，心里下意识的觉着凉透了，想自学都没得门路，此刻只想点一碗伤心凉粉安慰一下自己；</p>
<br>

<p>后那一周，是我的负责人，搬着一个小板凳，坐在我旁边，一行一行的敲着我看的，我才得以快速上手的。后面就想着，一定要尽快的摸清楚 dtk 的绘画自定义皮肤的控件的架构和原理。后面写几篇 dtk 分析，帮助后面小白入门，尽我所能帮助，为它的发展添一块瓦（所幸，在延期了几个月后，将其写出来且发表了🤣🤣）</p>
<br>

<p>至今回忆起来，都感觉有点不好意思，但是那会却又是无可奈何。至今都十分奇怪，为何他的耐心如此只好，大概君子无愠色，就是这种赞誉吧~ （尤其是每天都有很多人找他的情况下，巨忙）；那个时候，也不只是我，还有很多新人也是被手把手的教会 着如何开发 dtk。那会看到，大佬很忙碌，但是又不得不请教他的时候，就觉得很残忍~（尤其是偶尔还打扰周末休息）</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/IMG_1342.JPG" width="35%"/ loading="lazy">

<br>

<h4 id="dtk-的文档时代："><a href="#dtk-的文档时代：" class="headerlink" title="dtk 的文档时代："></a>dtk 的文档时代：</h4><p>约 2019 年末，2020 年初~，deepin 和 team 成长的很多，收获了也很多，和外部一起合力成立一个更大的公司（统信软件），来更好的整合资源与预计前景规划 ~ ；</p>
<br>


<p>随着 uos v20 sp1 和 deepin v20 beta 的先后在今年发布，以及 deepin 也收获了金钱和其他资源的支持，反手就是一个投入更多的财力人力和其他资源来研发新的 v20 版本。以获得更好的回报~，然后良性循环。</p>
<p>咳咳，好像有点跑题了哦~ 不过落实到和 dtk 相关的就是，有一段时间，一群研发们，疯狂熬夜加班，给补充 dtk 文档（验证了伏笔 :dog:），使用 Doxygen 来生成文档（大部分都是中文的哦~）。</p>
<p>有关 dtk 的 api 使用说明，可以参考：<a href="https://linuxdeepin.github.io/dtk/">https://linuxdeepin.github.io/dtk</a> </p>
<p>但不知道为什么会显示上次更新的时间还是 20219-07-10，实际后面有补充很多的~。此阶段外部开发，可以很大一个程度来依靠此文档。且 dtk 的每一个 api 的解释都是写在函数的上面的注释地方。直接使用 IDE 的代码提示 + 源码 api 的注释，可以更加高效的开发。</p>
<p><strong>现阶段就是内部靠： 视频培训 + 手把手带 + Doxygen 文档 + 企业wx群 + 翻看源码 + 组员帮助</strong></p>
<p><strong>外部靠： 回看视频培训 + Doxygen 文档 + 企业wx群@dtk研发来讲解 + 翻看源码 + 组员帮助</strong></p>
<br>

<p><font color=#FF0000 >不过说讲真，dtk 学习，最快最有效的，还是自行翻阅 Qt &amp; dtk 的源码；和自己尝试独立写出一个自绘 dtk 控件皮肤样式来的快。且学习 qt&#x2F; c++ 的人，一般自学能力都真的很强，其中 dtk 的项目都已经在 github 上面同步开源了：<a href="https://github.com/linuxdeepin">linuxdeepin</a>， 其中社区版的分支是和内部的 gitlab 是保持同步的。</font></p>
  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/IMG_5522.JPG" width="35%"/ loading="lazy">

<br>

<h3 id="dtk-库的快速入门："><a href="#dtk-库的快速入门：" class="headerlink" title="dtk 库的快速入门："></a>dtk 库的快速入门：</h3><br>

<h4 id="如今-dtk-项目的构成（2020-05）："><a href="#如今-dtk-项目的构成（2020-05）：" class="headerlink" title="如今 dtk 项目的构成（2020-05）："></a>如今 dtk 项目的构成（2020-05）：</h4><p><font color=#FF0000  size=4 face="幼圆"><strong>目前，dtk 项目的各个仓库之间的关系如下：</strong></font> 现在基本是这个格局了（图片基本准确），说一下个人的 dtk 和它们之间的理解：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200514160359.png" width="100%"/ loading="lazy">

 

<p>实际开发过程中，你是不需要掌握这么多的库的，也不会需要你一个人同时维护这么多的库，且同时有一些库，是很少被改动的。并不是经常需要提交。</p>
<p><strong>这里再次说一下 dtk 的含义：</strong></p>
<blockquote>
<p><strong>dtk &#x3D; dtk项目 &#x3D; 多个仓库集合 &#x3D; dtkwidget + dtkgui + qt5integration + dtkcore + …</strong></p>
</blockquote>
<p><strong>关于 dtk 的库，在外网 github 和内网 gitlab 上面是保持一致的，对应的分支是时刻同步的；</strong> 故从内网或者外网下载学习，都是这么开心和轻松。对于 dtk 的学习使用，主要掌握以下两个仓库 qt5integration 、 dtkwidget 的学习和使用，其中主要是在工作和兴趣开发中的书写代码的主要阵地。</p>
<br>

<h4 id="简述-dtk-的各仓库作用："><a href="#简述-dtk-的各仓库作用：" class="headerlink" title="简述 dtk 的各仓库作用："></a>简述 dtk 的各仓库作用：</h4><p>下面以一种清晰、简陋的理解，全局的概括的讲解 <code>qt5integration</code>、<code>dtkwidget</code>、<code>dtkgui</code>这三个比较常用的仓库（若是第一次接触的话，看完了后，你还记得每一个部分对应的什么麽？😶😶）</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/IMG_0604.JPG" width="20%"/ loading="lazy">

<br>

<h5 id="qt5integration："><a href="#qt5integration：" class="headerlink" title="qt5integration："></a><a href="https://github.com/linuxdeepin/qt5integration">qt5integration：</a></h5><ul>
<li><p><strong>qt5integration 项目结构组成：</strong></p>
<ul>
<li><p>其主要是由如下几个子部分组成</p>
<ul>
<li><p><strong>iconengines:</strong> DIcon 插件相关，方便直接提取项目中 .svg 图片资源，常用如：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">case</span> SP_DialogResetButton<span class="token operator">:</span>
            icon <span class="token operator">=</span> <span class="token class-name">QIcon</span><span class="token double-colon punctuation">::</span><span class="token function">fromTheme</span><span class="token punctuation">(</span><span class="token function">QLatin1String</span><span class="token punctuation">(</span><span class="token string">"edit-clear"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p><strong>imageformats:</strong> 相当于实现 DIcon::fromTheme() 的功能函数</p>
</li>
<li><p><strong>qt5deepintheme-plugin：</strong> 一些基础的图片 svg 资源存储地方，重点为 Resources 文件</p>
</li>
<li><p><strong>styleplugins：</strong> deepin 的自定义 chameleon style 样式插件，基本所有 Dxxxxx 控件，都是在 chameleon.h chameleon.cpp 这两个里面实现的（也是我们最主要修改 code 的地方）</p>
</li>
<li><p><strong>styles：</strong> 测试例子，也是 main.cpp 的函数入口</p>
</li>
</ul>
</li>
<li><p>绘画 dtk 控件的皮肤样式，主要是 chameleon 样式，其中主要的主要效果如下</p>
</li>
</ul>
<p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200514_165236.png" width="35%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/2020-05-14_16-43-35.png" width="62%"/ loading="lazy"></p>
</li>
</ul>
<br>

<h4 id="dtkwidget"><a href="#dtkwidget" class="headerlink" title="dtkwidget:"></a><a href="https://github.com/linuxdeepin/dtkwidget">dtkwidget:</a></h4><ul>
<li><strong>dtkwidget 项目结构组成：</strong><ul>
<li>dtkwidget 其主要是由如下几个子部分组成<ul>
<li><strong>examples:</strong> 里面的 main.cpp 是整个程序的入口，通常在这里测试</li>
<li><strong>src：</strong> dtk 的自定义 Dxxxx 控件，都存放于其下的 widgets 下， 如 <a href="https://github.com/linuxdeepin/dtkwidget/blob/master/src/widgets/darrowbutton.h">darrowbutton.h</a> 、<a href="https://github.com/linuxdeepin/dtkwidget/blob/master/src/widgets/darrowlinedrawer.cpp">darrowlinedrawer.cpp</a>、<a href="https://github.com/linuxdeepin/dtkwidget/blob/master/src/widgets/ddialog.cpp">ddialog.cpp</a>、<a href="https://github.com/linuxdeepin/dtkwidget/blob/master/src/widgets/dslider.cpp">dslider.cpp</a> 这些等（我们也通常在这里直接修改 Dxxx.h 和 Dxxx.cpp 文件），是 dtk 开发的主战场。</li>
<li><strong>tools：</strong> 工具相关、可不管</li>
</ul>
</li>
<li>绘画 dtk 自定义的控件的皮肤样式，其中主要的主要效果如下</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/2020-05-14_17-16-43.png" width="35%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200514171919.png" width="62%"/ loading="lazy"></p>
<br>

<h4 id="dtkgui"><a href="#dtkgui" class="headerlink" title="dtkgui:"></a><a href="https://github.com/linuxdeepin/dtkgui">dtkgui:</a></h4><ul>
<li><p><strong>dtkgui 项目结构组成：</strong></p>
<ul>
<li><p>这个就是前面说的，现在很少需要修改，但是偶尔要会使用的仓库。比如设计师修改了他们的基础颜色的 Color 的 rgb 数值，调整了一下透明度等，他们给的参数，一般都是在这里来实现，将具体的颜色数值与 Qt 子定义的枚举对应起来。</p>
</li>
<li><p>其中主要是修改 src-dguiapplicationhelper.cpp 该文件，一旦修改，所有其值，所有人的效果都会发生改变，谨慎。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/2020-05-14_17-35-37.png" width="100%"/ loading="lazy"></li>
</ul>
</li>
</ul>
<br>

<h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a></p>
<p>欢迎 star 和 fork 这个系列的 qt&#x2F;dtk 学习，附学习由浅入深的目录。</p>
<br>

<h3 id="资料手册-amp-amp-故地址遗迹："><a href="#资料手册-amp-amp-故地址遗迹：" class="headerlink" title="资料手册 &amp;&amp; 故地址遗迹："></a>资料手册 &amp;&amp; 故地址遗迹：</h3><h4 id="资料手册："><a href="#资料手册：" class="headerlink" title="资料手册："></a>资料手册：</h4><ul>
<li><p><a href="xmuli.tech/posts/e7de542e/">Deepin、DTK 文档参考资料集合</a>： 个人整理的一些 DTK 文档资料 (2020-01-05)</p>
</li>
<li><p><a href="https://github.com/linuxdeepin">linuxdeepin</a>: deepin 在 github 的开源地址； 大部分项目均已开源（含完整 dtk），且和内部保持一致，无论是想要学习 dtk 的开发，还是研究一些应用软件的使用，提交 pr，均可以在此 github 这个交友网站找到你的想要的资源</p>
</li>
<li><p><a href="https://linuxdeepin.github.io/dtk/">dtk api 文档</a> ：有关 dtk 的 api 中文使用说明；更多注释，请阅源码注释</p>
</li>
<li><p><a href="https://github.com/xmuli/QtExamples">dtk 重绘控件的原理解析</a>：其中第五章节，为 dtk 的源码架构分析、以及入门和开发，一些理解和实战</p>
</li>
<li><p><a href="https://xmuli.blog.csdn.net/article/details/104987446">DTK重绘自定义需求控件</a>： 从 0 立创造一个非 Qt 原生控件，且自定义其控件皮肤（系列有三篇）</p>
</li>
<li><p><a href="https://xmuli.blog.csdn.net/article/details/106187959">DTK常用和测试代码片</a>：dtk 的一些开发常用、和测试的代码片</p>
</li>
<li><p><a href="https://blog.justforlxz.com/2018/01/12/%E4%BD%BF%E7%94%A8DTK%E5%BC%80%E5%8F%91/">使用 DTK 开发，D 开头的宏和命名空间的使用</a>：（早期）关于 dtk 宏的使用</p>
</li>
<li><p><a href="https://github.com/BLumia/BLumiaGist/tree/master/Misc/DDE">DDE.dot</a> ：dtk 各仓库之间的联系图</p>
</li>
<li><p><a href="https://www.deepin.org/">deepin 官网</a>：官网的发布社区版 deepin，也是一个获取的用户交流论坛</p>
</li>
<li><p><strong>dtk 和 qt 源码 + 注释（最佳）</strong></p>
</li>
</ul>
<h4 id="镜像下载："><a href="#镜像下载：" class="headerlink" title="镜像下载："></a>镜像下载：</h4><ul>
<li><a href="https://www.deepin.org/download/">deepin.org&#x2F;download</a>：deepin v20 的 iso 镜像下载地址（官网）</li>
<li><a href="https://www.chinauos.com/cooperative">chinauos.com&#x2F;cooperative</a>：uos v20 的 iso 镜像官网下载（官网）</li>
<li><a href="https://distrowatch.com/table.php?distribution=deepin">deepin 镜像国际排名</a>： deepin 历史版本（国际排名）。</li>
<li>&amp;&amp;</li>
<li><a href="https://wiki.deepin.org/wiki/Dtk">https://wiki.deepin.org/wiki/Dtk</a></li>
<li><a href="https://hualet.org/blog/2018/09/26/%E5%A6%82%E4%BD%95%E7%BB%99-dtk-%E6%B7%BB%E5%8A%A0%E6%96%87%E6%A1%A3/">如何给 DTK 添加文档</a></li>
<li><a href="https://www.deepin.org/dde/">深度桌面环境</a></li>
<li><a href="https://www.deepin.org/aboutus/">关于 deepin 公司（前身）</a> （官网）</li>
<li><a href="https://www.uniontech.com/about">关于 uos 公司 （如今）</a> 官网）</li>
</ul>
<br>

<h4 id="参考-amp-amp-感谢："><a href="#参考-amp-amp-感谢：" class="headerlink" title="参考 &amp;&amp; 感谢："></a>参考 &amp;&amp; 感谢：</h4><p>在探究 dtk 的历史中，搜寻着一些并不多的网络博客文章，和前辈们、大佬们的沟通，口口相传，文中有使用他们的素材或者博客片段，或者 dtk 的相关介绍、使用技巧链接，表示好感和谢谢 Thanks♪(･ω･)ﾉ <a href="https://github.com/zccrs">zccrs</a>、<a href="https://github.com/shule1987">shule</a>、<a href="https://github.com/hualet">hualet</a>、<a href="https://github.com/BLumia">BLumia</a>、<a href="https://github.com/xmuli">xmuli</a>、<a href="https://github.com/justforlxz">justforlxz</a> …等</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>Deepin / UOS 中配置 DTK 开发环境</title>
    <url>/posts/d614bfcf/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　<font color=#D0087E size=4 face="幼圆"><strong>一句命令来配置 DTK 开发环境。</strong></font>  <strong>注：</strong>  <code>deepin-sdk</code> 和 <code>qtcreator-template-dtk</code> 这两个包默认是在社区版本外网源里面有的，若没有可加源</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deb <span class="token punctuation">[</span>by-hash<span class="token operator">=</span>force<span class="token punctuation">]</span> https://community-packages.deepin.com/deepin/ apricot main contrib non-free<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 官方推荐</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> deepin-sdk qtcreator-template-dtk qtcreator cmake  g++

<span class="token comment"># 个人习惯</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qtcreator cmake  g++ <span class="token function">git</span> deepin-sdk qtcreator-template-dtk gammaray flameshot com.notepadqq.notepadqq tree gitg debhelper devscripts dh-make build-essential

<span class="token comment"># qt5-default 选择合适路径后执行；其默认安装本路径 qt 源码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="简版教程"><a href="#简版教程" class="headerlink" title="简版教程"></a>简版教程</h2><p>更新 2021-02-22，新的 Deepin 系统，配置 dtk 编程相关环境，一个命令即可：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> deepin-sdk qtcreator-template-dtk qtcreator cmake  g++

<span class="token comment"># PS：</span>
libdtk<span class="token punctuation">&#123;</span>core,widget,gui<span class="token punctuation">&#125;</span>-dev 等价于 deepin-sdk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>拆分说明：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">DTK 开发环境：qt5-default qtcreator cmake  g++ <span class="token function">git</span> libdtk<span class="token punctuation">&#123;</span>core,widget,gui<span class="token punctuation">&#125;</span>-dev 
常用软件：gammaray flameshot com.notepadqq.notepadqq tree gitg
自行打包：debhelper devscripts dh-make build-essential<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>在官网下载 <code>uniontechos-desktop-20-professional-1030-fix_amd64</code>  镜像（或找测试小仙女们要一个最新的），常规装系统后，顺利进入到桌面；</p>
<br>

<h2 id="开启开发者模式"><a href="#开启开发者模式" class="headerlink" title="开启开发者模式"></a>开启开发者模式</h2><p>进入 <code>控制中心-通用-开发者模式-进入开发者模式</code>，激活开发者模式成功后，重启系统；</p>
<img src="https://raw.githubusercontent.com/xmuli/xmuliPic/pic/2020/20201231152215.png" width="60%"/ loading="lazy">

<br>

<h2 id="配置DTK-开发环境"><a href="#配置DTK-开发环境" class="headerlink" title="配置DTK 开发环境"></a>配置DTK 开发环境</h2><p><font size="4" color="#FF0000"> 将第二行的 <code>deb-src</code> 的注释解开，更新源（若使用内网源，下载某些软件失败，记得换源）</font>，最后外网镜像默认自带的源如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## Generated by deepin-installer</span>
deb <span class="token punctuation">[</span>by-hash<span class="token operator">=</span>force<span class="token punctuation">]</span> https://professional-packages.chinauos.com/desktop-professional eagle main contrib non-free
deb-src <span class="token punctuation">[</span>by-hash<span class="token operator">=</span>force<span class="token punctuation">]</span> https://professional-packages.chinauos.com/desktop-professional eagle main contrib non-free<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br>

<p>看了一下，默认 <code>gcc</code> &#x3D; 4.8.3，无 <code>g++</code> 、无 <code>cmake</code>、无 <code>git</code>；</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更新源</span>
<span class="token function">sudo</span> <span class="token function">apt</span> update

<span class="token comment"># C++ 开发环境配置好了</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qt5-default qtcreator cmake  g++ <span class="token function">git</span> 

<span class="token comment"># DTK 开发环境配置好了</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libdtkwidget-dev libdtkgui-dev libdtkcore-dev <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><h3 id="验证-C-开发环境-配置是否成功："><a href="#验证-C-开发环境-配置是否成功：" class="headerlink" title="验证 C++ 开发环境 配置是否成功："></a>验证 C++ 开发环境 配置是否成功：</h3><ul>
<li><p>开 <code>QtCreator</code> ，创建一个空的 <code>Qt</code> 空项目，执行运行，发现 <strong>C++ 开发环境</strong>  配置成功。</p>
 <img src="https://raw.githubusercontent.com/xmuli/xmuliPic/pic/2020/20201231172208.png" width="80%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="验证-DTK-开发环境-配置是否成功："><a href="#验证-DTK-开发环境-配置是否成功：" class="headerlink" title="验证 DTK 开发环境 配置是否成功："></a>验证 DTK 开发环境 配置是否成功：</h3><ul>
<li><p>执行 <code>git clone https://github.com/linuxdeepin/dtkcore.git</code>， 下载源码</p>
</li>
<li><p>进入文件夹 <code>dtkcore</code>， 执行 <code>sudo apt build-dep dtkcore</code> 生成依赖</p>
</li>
<li><p>执行 <code>sudo apt policy libdtkcore5</code>，看到<strong>本机显示</strong>  <code>libdtkcore5 为 5.4.0</code></p>
</li>
<li><p>执行 <code>git  checkout 5.4.0</code> 切换分支</p>
</li>
<li><p>用 <code>QtCreator</code> 打开 <code>dtkwidget.pro</code>， 点击编译运行，为 <strong>DTK 开发环境</strong>  配置成功。</p>
 <img src="https://raw.githubusercontent.com/xmuli/xmuliPic/pic/2020/20201231172007.png" width="80%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="验证其它项目"><a href="#验证其它项目" class="headerlink" title="验证其它项目"></a>验证其它项目</h3><p>如验证 <code>dtkwidget</code> 开发项目，因为其依赖于 <code>dtkcore</code> 和 <code>dtkgui</code>，所以推荐配置其对应的 <code>tag</code> 这三者是一致的（一般来说，都是各自最新也不会有什么问题，向下兼容很稳定了）。</p>
<p>且<code>dtkwidget</code> 若是运行在虚拟机，若是内存仅 2G，会编译失败；调整为 &gt;&#x3D; 4G 即可；<font size="4" color="#FF0000"><strong>若是其它项目生成项目依赖，也都是如此。</strong> </font></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> build-dep 项目名  <span class="token comment"># 生成项目依赖</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>比如 <code>dtkwidget</code> 运行后：</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20210105155933.png" width="70%"/ loading="lazy">

<br>

<h2 id="命令配置更新"><a href="#命令配置更新" class="headerlink" title="命令配置更新"></a>命令配置更新</h2><p><code>deepin-sdk</code>： 虚包，相当于安装 libdtkwidget-dev libdtkgui-dev libdtkcore-dev </p>
<p><code>qtcreator-template-dtk</code>： 是一个 QtCreator 的插件；可以直接在 IDE 中创建 DTK 的 应用程序项目（简便和检测 dtk 的开发环境是否安装成功），效果如下</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/企业微信截图_16137284925039.png" width="70%"/ loading="lazy">

<br>

<h2 id="个人习惯"><a href="#个人习惯" class="headerlink" title="个人习惯"></a>个人习惯</h2><p>附上个人习惯的开发环境，可自行决定：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 商店里面安装讯飞输入法、typora、wps（或官网里面的）</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gammaray flameshot com.notepadqq.notepadqq tree gitg

<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token builtin class-name">source</span> qt5-default    // qt源码包，此会安装在当前所处目录下，建议更换目录再执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>同时安装 <code>dde-dock</code> 网速插件:   <a href="https://github.com/xmuli/lfxNet">lfxNet</a> 或  <a href="https://github.com/xmuli/lfxspeed">lfxspeed</a> 。</p>
<br>

<p><strong>附：</strong></p>
<ul>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/106510975">重装uos&#x2F;deepin v20后必安装软件(个人习惯)</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/103733327">安装UOS20，在uos20里面安装QtCreator，配置dtk开发环境</a></li>
</ul>
<br>

<h3 id="系列地址："><a href="#系列地址：" class="headerlink" title="系列地址："></a>系列地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a></p>
<p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 <code>QT / DTK</code> 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>DTK</tag>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin Custom Modify Window Corner Rounding Size</title>
    <url>/posts/3757693a/</url>
    <content><![CDATA[<p><strong>Summary:</strong> Community version of <code>Deepin</code>‘s &#96;Big Round Corners’ Official version of <strong>Small, Medium, Extra Large</strong> is here! . All windows have and taskbar has got <strong>right, small rounded, large rounded (0px, 8px, 18px)</strong>. Attached is a detailed tutorial on how to modify the tutorial steps, and how to modify the rounded corners at any angle.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/qDfvKgq1JP0" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<blockquote>
<p>Translated from the original： <a href="xmuli.tech/posts/cd317ccc/">Deepin 自定义修改窗口圆角大小</a></p>
</blockquote>
<h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface."></a>Preface.</h2><p>Some people want to stick to the big rounded corners, while others want to adjust the small rounded corners and right corners; personal experiences and living environment are different, so the citrus is different, so they have their own perspectives on the idea, and can appreciate each other!</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201022150848.png" width="25%"/ loading="lazy">

<p>The scope of <code>DDE</code> rounding modification is:  **all main window rounding + Dock rounding + Menu rounding  **.</p>
<p>This modification only involves the community <code>Deepin</code> has this feature (belongs to the community customization feature, is also a certain text and the community’s heart love ~ ).</p>
<p><code>UOS</code> version is not enabled by default, of course, if you want to experience it, you can also change the size of the rounded corners by command (these kinds of features, for the time being, are out of the planning. I’m also afraid of being hammered by <code>UOS</code>‘s product managers and developers, and then reported as a <code>bug</code> single by the test ladies).</p>
<blockquote>
<p>Because <code>Deepin</code> and <code>UOS</code> are actually two different forms of a product.</p>
</blockquote>
<br>

<h2 id="Copywriting"><a href="#Copywriting" class="headerlink" title="Copywriting:"></a>Copywriting:</h2><ul>
<li><strong>Chinese text:</strong> <code>window rounded corner&#39;, </code>small’, <code>medium&#39;, </code>large’</li>
<li><strong>English text :</strong> <code>Rounded Corner</code>, <code>small</code>, <code>medium</code>, <code>large</code></li>
</ul>
<p>Large rounded corners (system original style): window &#x3D; 18px; Medium rounded corners: window &#x3D; 8px; Small rounded corners: window &#x3D; 0px; For the internal (button, item background, etc.) rounded corners size, no change. </p>
<p>Well, this is also the design from the design department (she is beautiful too).</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/eb07e579-973e-4a08-aab8-0f8e120dccfc.png" width="25%"/ loading="lazy">

<br>

<h2 id="Modify-rounded-corner-window-ideas"><a href="#Modify-rounded-corner-window-ideas" class="headerlink" title="Modify rounded corner window ideas."></a>Modify rounded corner window ideas.</h2><blockquote>
<ol>
<li>First <code>fork&#39; the official repository to your own repository. To compile the project&#39;s dependencies, run </code>sudo apt build-dep dtkgui<code>, or go to the project root and run </code>dpkg-checkbuilddeps&#96; ;</li>
<li>Modify the code and commit it in the format (important)</li>
<li>After the test meets expectations, the code is submitted and awaits merging.</li>
</ol>
</blockquote>
<p>How this is achieved, modifying the place will involve designing three items in total.</p>
<ul>
<li><a href="https://github.com/linuxdeepin/dtkgui">dtkgui</a>: Modify the basic rounded corner values and add an interface.</li>
<li><a href="https://github.com/linuxdeepin/dde-control-center">ddde-control-center</a>: add control to change the rounded corner value of the software, international translation.</li>
<li><a href="https://github.com/linuxdeepin/dde-dock">ddde-dock</a>: Also change the rounded corner size of the dock in the taskbar in fashion mode.</li>
</ul>
<br>

<h3 id="Modify-dtkgui-code"><a href="#Modify-dtkgui-code" class="headerlink" title="Modify dtkgui code."></a>Modify dtkgui code.</h3><p>Add the corresponding interface first; make sure <code>winID</code> is created (otherwise a default window will be created), and then modify the value of the attribute, otherwise the dock will be grayed out, and the right-click menu will become opaque, which is a serious bug. Submit this modification with the following code.</p>
<p><strong>Change code commit:</strong> </p>
<blockquote>
<ol>
<li><p><a href="https://github.com/linuxdeepin/dtkgui/commit/a3b9836b83f92e308b2af58c148350471119690b">commit  a3b9836b</a>                &#x2F;&#x2F; Add Modify Rounded Interface</p>
</li>
<li><p><a href="https://github.com/linuxdeepin/dtkgui/commit/de1f742edefee47963515acf63721ffb53193a8b">commit de1f742e</a>                 &#x2F;&#x2F; Fix default display as right angle.</p>
</li>
<li><p><a href="https://github.com/linuxdeepin/dtkgui/commit/6ae8f77d42beea9e026444f29944cc06d298b3e6">commit 6ae8f77d</a>                 &#x2F;&#x2F; Fix ToolTip’s rounded corners as 18px unsightly accidental bug</p>
</li>
<li><p><a href="https://github.com/linuxdeepin/dtkgui/commit/ea60f6b0bb40cad111548a8374060f06473f66b1">commit ea60f6b0</a>                 &#x2F;&#x2F; Optimization code</p>
</li>
</ol>
</blockquote>
<br>

<p>After running, replace the new header file and the resulting binary with the system to see the effect</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">☁  dtkgui <span class="token punctuation">[</span>master<span class="token punctuation">]</span> ⚡ <span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /usr/lib/x86_64-linux-gnu/libdtkgui.so.5.2.2
☁  dtkgui <span class="token punctuation">[</span>master<span class="token punctuation">]</span> ⚡ <span class="token function">sudo</span> <span class="token function">cp</span> ~/project/build-dtkgui-unknown-Debug/src/libdtkgui.so.5.2.2 /usr/lib/x86_64-linux-gnu/
☁  dtkgui <span class="token punctuation">[</span>master<span class="token punctuation">]</span> ⚡  <span class="token function">sudo</span> <span class="token function">cp</span> src/dplatformtheme.h /usr/include/libdtk-5.2.2/DGui<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="Modify-de-control-center-code"><a href="#Modify-de-control-center-code" class="headerlink" title="Modify de-control-center code."></a>Modify de-control-center code.</h3><p><strong>Modify code to submit:</strong></p>
<blockquote>
<ol>
<li><a href="https://github.com/linuxdeepin/dde-control-center/commit/a37aae159ab5fb0b8c4cbb8189e81e8ac81f0f43">commit a37aae15</a> &#x2F;&#x2F; add controls Modify the value of the large round angle</li>
<li><a href="https://github.com/linuxdeepin/dde-control-center/commit/b9926d9795cb39d9298d22c295eed90dd437fe11">commit b9926d97</a> &#x2F;&#x2F; Add the right application. International translation</li>
<li><a href="https://github.com/linuxdeepin/dde-control-center/commit/a6ea6be6927efede1ee3b7aac7265adcb62c21a9">commit a6ea6be6</a> &#x2F;&#x2F; fix layout Errors cause other controls to be compressed</li>
</ol>
</blockquote>
<p>Run it directly to see if there are any real-time effects.</p>
<br>

<h3 id="Modify-dode-dock-code"><a href="#Modify-dode-dock-code" class="headerlink" title="Modify dode-dock code."></a>Modify dode-dock code.</h3><p><strong>Change code commit:</strong></p>
<blockquote>
<ol>
<li><a href="https://github.com/linuxdeepin/dde-dock/commit/89cf36abf18a5a0283db739a5b3cd053b1e011f1">commit 89cf36ab</a> &#x2F;&#x2F; Dock taskbar modifying large rounded corners.</li>
<li><a href="https://github.com/linuxdeepin/dde-dock/commit/63953ef5d05a7320ac3bd2d952602038d6b1fb48">commit 63953ef5</a> &#x2F;&#x2F; Fix after logging out of reboot, dock The default display is right angle.</li>
</ol>
</blockquote>
<p>To run the compile and see the effect, you need to download the <code>dconf-editor</code> software, search for <code>watchdog</code>, and disable the <code>dde-dock</code> button, so that you can run the dock generated by the code instead of always displaying the system’s own taskbar dock.</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201020202526.png" width="50%"/ loading="lazy">



<br>

<h3 id="Post-optimization"><a href="#Post-optimization" class="headerlink" title="Post-optimization."></a>Post-optimization.</h3><p>Suddenly, a defect was reported by the upstairs test lady.</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/407bef0d-99f4-412e-a10b-7cd0729351b2.gif" width="40%"/ loading="lazy">

<p>Since we only set this value in front end, every time we “logout, restart, turn off effects and then turn them back on”, we lose the value <code>&quot;DTK/windowRadius&quot; QVariant(int, 8)</code>, which results in big rounded corners.</p>
<p>In the next stage, an assignment will be added to this value in a back-end piece to fix this flaw.</p>
<br>

<h2 id="Customize-the-fillet-size"><a href="#Customize-the-fillet-size" class="headerlink" title="Customize the fillet size."></a>Customize the fillet size.</h2><h3 id="Mode-1"><a href="#Mode-1" class="headerlink" title="Mode 1."></a>Mode 1.</h3><p>Changes to “Control Center - Personalization - Rounded Window “** (available only for <code>Deepin</code>) via Interface Adjustment. Only right angle<code> (0px</code>), small rounded corner (<code>8px</code>), and large rounded corner (18px) are adjustable.</p>
<p><br> ** Adjustable in three levels.</p>
<h3 id="Mode-2"><a href="#Mode-2" class="headerlink" title="Mode 2."></a>Mode 2.</h3><p>Execute the command by commanding Terminal Adjustment, where the specific parameter <code>8</code> can be replaced with any number of angles, and takes effect for both <code>Deepin</code> and <code>UOS</code>.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Manual adjustment of terminal values "DTK/windowRadius" QVariant(int, 8)</span>
/usr/lib/x86_64-linux-gnu/libdtk-5.2.2/DGui/bin/deepin-gui-settings <span class="token parameter variable">--set</span> <span class="token string">"DTK/WindowRadius"</span> <span class="token parameter variable">-i</span> <span class="token number">8</span>  // Rounding value setting
/usr/lib/x86_64-linux-gnu/libdtk-5.2.2/DGui/bin/deepin-gui-settings    // View Fillet Values<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>PS: If there is no such program running in this path, you need to execute the： <code>sudo apt install libdtkgui5-bin</code></p>
</blockquote>
<br>

<h2 id="End-result"><a href="#End-result" class="headerlink" title="End result."></a>End result.</h2><p>No picture. No picture. Say a  🔨： </p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201022145645.png" width="20%"/ loading="lazy">



<p>Let’s start with the final realization.</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/截图录屏_dde-desktop_20201015211555.png" width="90%"/ loading="lazy">

<br>

<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/截图录屏_dde-desktop_20201015211629.png" width="90%"/ loading="lazy">

<br>

<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/截图录屏_dde-desktop_20201015211822.png" width="90%"/ loading="lazy">

<br>

<p>#Breakdown summary~.</p>
<p>This time the function is very small, but it is the community users have always wanted the function, submit a lot this time. The first is to be tested by the test lady, the second is to adhere to a commit to do only one thing. Third, to participate in the community to contribute to the partners, a submission demonstration, showing how to submit from <code>github</code> <code>pr</code> and then be merged into the main code flow. Fourthly, share your own details and happiness.</p>
<p>For any piece of software, I personally feel that it should be to uphold the ** “people-oriented “** point of view. ** a product should have temperature **, in some details of the place with the care of the user, rather than knowledge of a cold device. Not a little emotion, although the need to be able to use, but do not use the discarded, and then never thought of. Life is short, have to do a little interesting things. Always do my best to add a thought in it. I’m not sure how much I’ll be able to do.</p>
<br>

<h2 id="Participate-together-in-contributing-to"><a href="#Participate-together-in-contributing-to" class="headerlink" title="Participate together in contributing to."></a>Participate together in contributing to.</h2><p>If you are interested, you can also add some new features to it and merge it directly into the upstream Deepin mainline code. The source code can be downloaded directly from <a href="https://github.com/linuxdeepin">linuxdeepin</a> and is synchronized with the intranet code in real time. For DTK, in addition to the source code comments, you can also read the <a href="https://linuxdeepin.github.io/dtk/">DTK API</a> web page (currently updated daily). If you want more people to experience the effect of your code, just submit <code>pr</code> and remember to refer to this <a href="https://github.com/linuxdeepin/developer-center/wiki/">Commit Submission Specification</a> for submission specifications. Commit%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83) Oh. See you next~~.</p>
<br>

<p><strong>If you want to be merged quickly, attach some suggestions:</strong></p>
<ol>
<li>for porting to other distributions, bug fixes, such contributions pr are easy and fast to merge;</li>
<li>for some community customization features, it is recommended to set them to take effect only on community Deepin, and to disable them by default on UOS to speed up the merge process. 3. for some new features and functions, if they are needed in the UOS version or are in the planning stage, it is recommended to set them to take effect only on community Deepin;</li>
<li>for some new features and functions, if they are required by the UOS version or are in the planning stage, they can also be merged quickly; 4. for individuals and from the community, it is recommended to set it to work only on community Deepin;</li>
<li>for individuals and rounds from the community, it is also easy to merge, with communication that the community is looking forward to it (less strict rules and processes than the commercial line). 5;</li>
<li>to test as fully and completely as possible before submitting.</li>
<li><strong>Be sure to pay attention to the <a href="https://github.com/linuxdeepin/developer-center/wiki/Commit%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83">Commit Submission Specification</a>;</strong></li>
<li>you can communicate in the community bbs forum or github to remind the</li>
</ol>
<p>In addition, the following interface classes [dsysinfo.h](<a href="https://github.com/linuxdeepin/dtkcore/blob/523a51ab69e97b5fd8c906cb83ed3049888f680d/src/">https://github.com/linuxdeepin/dtkcore/blob/523a51ab69e97b5fd8c906cb83ed3049888f680d/src/</a> dsysinfo.h), and write a detailed tutorial sometime, distinguishing between the various versions of the system.</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QString <span class="token class-name">DSysInfo</span><span class="token double-colon punctuation">::</span><span class="token function">uosEditionName</span><span class="token punctuation">(</span><span class="token keyword">const</span> QLocale <span class="token operator">&amp;</span>locale<span class="token punctuation">)</span> <span class="token comment">// Get the version name, for example, "Professional"/"Home"/"Community"....</span>

<span class="token keyword">enum</span> <span class="token class-name">UosEdition</span> <span class="token punctuation">&#123;</span>
    UosEditionUnknown<span class="token punctuation">,</span>
    UosProfessional<span class="token punctuation">,</span>  <span class="token comment">//专业版</span>
    UosHome<span class="token punctuation">,</span>         <span class="token comment">//个人版</span>
    UosCommunity<span class="token punctuation">,</span>    <span class="token comment">//社区版</span>
    UosMilitary<span class="token punctuation">,</span>
    UosEnterprise<span class="token punctuation">,</span>
    UosEnterpriseC<span class="token punctuation">,</span>
    UosEuler<span class="token punctuation">,</span>        <span class="token comment">// 欧拉版</span>
    UosMilitaryS<span class="token punctuation">,</span>    <span class="token comment">// for Server</span>

    UosEditionCount <span class="token comment">// must at last</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token comment">// The following interface is not recommended, as it will be removed later.</span>

    <span class="token keyword">enum</span> <span class="token class-name">ProductType</span> <span class="token punctuation">&#123;</span>
        UnknownType <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        Deepin<span class="token punctuation">,</span>
        ArchLinux<span class="token punctuation">,</span>
        CentOS<span class="token punctuation">,</span>
        Debian<span class="token punctuation">,</span>
        Fedora<span class="token punctuation">,</span>
        LinuxMint<span class="token punctuation">,</span>
        Manjaro<span class="token punctuation">,</span>
        openSUSE<span class="token punctuation">,</span>
        SailfishOS<span class="token punctuation">,</span>
        Ubuntu<span class="token punctuation">,</span>
        Uos
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">enum</span> <span class="token class-name">DeepinType</span> <span class="token punctuation">&#123;</span>
        UnknownDeepin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        DeepinDesktop<span class="token punctuation">,</span>
        DeepinProfessional<span class="token punctuation">,</span>
        DeepinServer<span class="token punctuation">,</span>
        DeepinPersonal
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="Updated-2020-11-16"><a href="#Updated-2020-11-16" class="headerlink" title="Updated: 2020-11-16"></a>Updated: 2020-11-16</h2><p>However, due to various factors such as release schedule, expected release strategy, overall rush, allowing time for testing, and coordinating with other project developers and working together, it is not possible to schedule the fixes immediately once they are applied and see the effect.</p>
<p>Fix the bug that the default transparency module is compressed due to a layout error in <strong>Control Center and Modify Window with Rounded Corners</strong>:</p>
<ul>
<li>This part of the fix involves front-end support:<ul>
<li><code>dde-control-center</code>: [a6ea6be6](<a href="https://github.com/linuxdeepin/dde-control-center/commit/">https://github.com/linuxdeepin/dde-control-center/commit/</a> a6ea6be6927efede1ee3b7aac7265adcb62c21a9)</li>
</ul>
</li>
</ul>
<br>

<p>Fix <strong>after logging out&#x2F;restarting, the right corner of the taskbar and active window becomes rounded and the state cannot be saved.</strong> </p>
<ul>
<li>This part of the change concerns backend support:<ul>
<li><code>dde-daemon</code> : <a href="https://github.com/linuxdeepin/dde-daemon/commit/a6fee1b90fad7bf3a5414a241c90266bc2275322">a6fee1b9</a></li>
<li><code>startdde</code> : <a href="https://github.com/linuxdeepin/startdde/commit/f7b62e85d599e0c87734d2f4365b3fd15dd49cee">f7b62e85</a> </li>
<li><code>deepin-desktop-schemas</code>:  <a href="https://github.com/linuxdeepin/deepin-desktop-schemas/commit/73b992dae8984675a3d93c96c200dd5baf31fe88">73b992da</a>，  <a href="https://github.com/linuxdeepin/deepin-desktop-schemas/commit/9b448b22823d8d2fa051f792f161fd5c3eaa89af">9b448b22</a></li>
</ul>
</li>
<li>This part of the revision concerns front-end support:<ul>
<li><code>dde-control-center</code>: <a href="https://github.com/linuxdeepin/dde-control-center/commit/e523a87f80726dff196bccb78bbe5b1c2b0366ad">e523a87f</a></li>
</ul>
</li>
</ul>
<br>

<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary:"></a>Summary:</h2><p>The method is to modify the value of a <code>dtkgui</code> item, then regenerate the corresponding binary and replace it in the system directory; although it works for the time being, it is not standardized, and it will fail after reboot or logout. It doesn’t feel so simple and elegant;** </p>
<p>I’m just saying it’s working. Who’s to say they haven’t done it yet? The enthusiastic techies who can’t wait to get started will have to find a way to make it work, and we’ll see what we can achieve first.</p>
<p><strong>But as a formal change,</strong> it must not be treated in the same way, it has to conform to a dtk style, user-friendly, functional and product design planning must not conflict, interface changes must be standardized, and the interface must be kept backward compatible.</p>
<p> <br>It is important that the interface is standardized and kept backwards compatible.</p>
<p>I thought I was modifying a simple feature, but it would end up involving so many items I didn’t expect: <code>dde-daemon</code>, <code>startdde</code>, <code>deepin-desktop-schemas</code>, <code>dde-control-center</code>, <code>dtkgui</code>, &#96;dde-dock There are a total of 6 of them, many of them are very important core base libraries, if you modify them, it will affect many other projects, so it is more careful and cautious to modify them. But I’m happy to add this feature to the community at last. <br>It’s a good thing that we have a lot of people working on this;</p>
<br>

<h3 id="Series-Address"><a href="#Series-Address" class="headerlink" title="Series Address."></a>Series Address.</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a></p>
<p>Welcome to the <code>star</code> and <code>fork</code> series of QT &#x2F; DTK learnings, with a table of contents for learning the ins and outs.</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
      <tags>
        <tag>DTK</tag>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin 开发任务栏网速插件 lfxSpeed</title>
    <url>/posts/c225b552/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　在 <code>DDE</code> 桌面环境中开发 <code>dde-dock 插件</code> 项目实战： 网速插件 <code>lfxSpeed</code>；</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/Peek%202020-12-04%2015-19.gif" width="50%"/ loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<blockquote>
<p> ———–2021-02-03 更新——————-<br>现在更推荐新版网速插件：<a href="https://github.com/xmuli/NetSpeed">NetSpeed</a> </p>
<p>文章描述：<a href="https://xmuli.blog.csdn.net/article/details/113573870">Deepin 任务栏网速插件推荐 NetSpeed (重构 lfxSpeed)</a></p>
</blockquote>
<br>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>因 <code>DDE</code>  属实漂亮，使用美观舒适，作为 <code>Deepin</code> 爱好者，习惯于在其它系统上有一个任务栏网速插件，但此 <code>Deepin v20 / UOS v20</code>上没有，于是便有了这个项目。适用于 <code>DDE</code> 的 <code>Linux</code> 发行版。</p>
<br>

<h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p><strong>已实现功能：</strong></p>
<ul>
<li>实时显示网速、CPU 、内存使用率</li>
<li>自定义网速精确度</li>
<li>自定义修改标签</li>
<li>自定义刷新时间</li>
<li>显示或隐藏某一信息栏</li>
<li>网速单位显示模式三种</li>
<li>浅色 &#x2F; 暗色 主题模式</li>
</ul>
<p><strong>项目预览图：</strong></p>
<p>  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201204203142.png" width="50%"/ loading="lazy">  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201204152635.png" width="35%"/ loading="lazy"></p>
<br>

<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>开发环境 <strong>💻：</strong>  <code>uos20</code> 📎 <code>Qt 5.11.3</code> 📎  <code>dde-dock = 5.2.0.24</code> 📎  <code>&quot;1.2.2&quot; 版本</code>；安装开发包，</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libdtkwidget-dev
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> dde-dock-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<p>下载 <a href="https://github.com/xmuli/lfxspeed">源码</a> 后，进入项目根目录，进行编译</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> build <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> build
cmake <span class="token punctuation">..</span>
<span class="token function">make</span> <span class="token parameter variable">-j16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<p>会生成一个 <code>liblfxSpeed.so</code> 共享库，在其路径下执行如下命令，若希望看到效果，需要执行 <code>killall dde-dock</code> 、<code>dde-dock</code> 后生效；</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> liblfxSpeed.so /usr/lib/dde-dock/plugins     <span class="token comment"># 安装</span>
<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /usr/lib/dde-dock/plugins/liblfxSpeed.so <span class="token comment">#  卸载</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="插件原理"><a href="#插件原理" class="headerlink" title="插件原理"></a>插件原理</h3><p>项目最后生成一个动态库，原理是 <code>dde-dock</code> 使用了 <code>Qt5</code> 的插件机制，在运行时候加载动态库。</p>
<p>有一篇 <code>Deepin</code> 官方出的教程，是隐藏 <code>dde-dock </code>项目之中 <a href="https://github.com/linuxdeepin/dde-dock/blob/master/plugins/plugin-guide/plugins-developer-guide.md">plugins-developer-guide</a> 感觉成了一个小彩蛋；这篇文章对插件接口写的很详细，也有一个自带的小例子，讲解的很清晰；</p>
<p><strong>主要工作就是，继承如下两个类：</strong></p>
<ul>
<li><a href="https://github.com/linuxdeepin/dde-dock/blob/master/interfaces/pluginproxyinterface.h">pluginproxyinterface.h</a> ：可以主动去调用 dde-dock 的接口，用来管理 插件 的管理类</li>
<li><a href="https://github.com/linuxdeepin/dde-dock/blob/master/interfaces/pluginsiteminterface.h">pluginsiteminterface.h</a> ：被动的被 dock 调用</li>
</ul>
<p>而自己新写的插件类，是必须同时继承两个类的：如 <code>class SpeedPlugin : public QObject, public PluginsItemInterface</code> 。实现一个最简单的插件类，重写下面前六个函数即可；若加更多功能，再重其它函数即可</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 插件必须重写函数</span>
<span class="token keyword">virtual</span> <span class="token keyword">const</span> QString <span class="token function">pluginName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>PluginProxyInterface <span class="token operator">*</span>proxyInter<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
<span class="token keyword">virtual</span> QWidget <span class="token operator">*</span><span class="token function">itemWidget</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>itemKey<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>

<span class="token comment">// 插件禁用和启用相关的接口</span>
<span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">pluginIsAllowDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
<span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">pluginIsDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">pluginStateSwitched</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>

<span class="token comment">// 额外的功能：预览、右键菜单、悬浮显示</span>
<span class="token keyword">virtual</span> <span class="token keyword">const</span> QString <span class="token function">pluginDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
<span class="token keyword">virtual</span> <span class="token keyword">const</span> QString <span class="token function">itemContextMenu</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>itemKey<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">invokedMenuItem</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>itemKey<span class="token punctuation">,</span> <span class="token keyword">const</span> QString <span class="token operator">&amp;</span>menuId<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">bool</span> checked<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
<span class="token keyword">virtual</span> QWidget <span class="token operator">*</span><span class="token function">itemTipsWidget</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>itemKey<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>

<span class="token comment">// 更多其它...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="lfxSpeed-原理"><a href="#lfxSpeed-原理" class="headerlink" title="lfxSpeed 原理"></a>lfxSpeed 原理</h3><p>基本思路为 获取 <code>/proc</code> 文件，然后通过计算，转换单位等，只显示自己想要的结果；然后将其显示在控件布局之中，最后将整个控件显示在任务栏上（返回其对象的指针给 dock）；<strong>下面讲解如何从 <code>Linux</code> 通过 <code>/proc</code> 获取系统网速、CPU、Memory和运行时间等信息。</strong></p>
<br>

<h2 id="获取系统参数"><a href="#获取系统参数" class="headerlink" title="获取系统参数"></a>获取系统参数</h2><h3 id="proc-介绍"><a href="#proc-介绍" class="headerlink" title="/proc 介绍"></a><code>/proc</code> 介绍</h3><p>Linux系统上的&#x2F;proc目录是一种文件系统，即proc文件系统。与其它常见的文件系统不同的是，&#x2F;proc是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，用户可以通过这些文件查看有关系统硬件及当前正在运行进程的信息，甚至可以通过更改其中某些文件来改变内核的运行状态。</p>
<p>基于&#x2F;proc文件系统如上所述的特殊性，其内的文件也常被称作虚拟文件，并具有一些独特的特点。例如，其中有些文件虽然使用查看命令查看时会返回大量信息，但文件本身的大小却会显示为0字节。此外，这些特殊文件中大多数文件的时间及日期属性通常为当前系统时间和日期，这跟它们随时会被刷新（存储于RAM中）有关。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 更多文件的获取，可以参考 https://zh.m.wikipedia.org/zh-cn/Procfs</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PROC_PATH_UPTIME</span>    <span class="token string">"/proc/uptime"</span>      <span class="token comment">// "系统启动" 和 "系统空闲" 的时间</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PROC_PATH_CPU</span>       <span class="token string">"/proc/stat"</span>        <span class="token comment">// "CPU" 使用率 的状态</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PROC_PATH_MEM</span>       <span class="token string">"/proc/meminfo"</span>     <span class="token comment">// "内存" 和 "交换空间" 的状态</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PROC_PATH_NET</span>       <span class="token string">"/proc/net/dev"</span>     <span class="token comment">// "网速" 下载和上传 的状态</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PROC_PATH_DISK</span>      <span class="token string">"/proc/diskstats"</span>   <span class="token comment">// "磁盘" 读取和写入 的状态</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="获取网速"><a href="#获取网速" class="headerlink" title="获取网速"></a>获取网速</h3><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><p>网络相关的数据，从 <code>/proc/net/dev</code>  文件获取：读取此文件进行计算即可<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20201117165447548.png" width="100%"/ loading="lazy"></p>
<p>这个文件每一行的详细含义如下：<strong>face: 接口</strong> </p>
<p>​	————————————-【接收】————————————-</p>
<ol>
<li><p><code>bytes:</code> 接口接收的数据的总字节数</p>
</li>
<li><p><code>packets:</code> 接口接收的数据包总数</p>
</li>
<li><p><code>errs:</code> 由设备驱动程序检测到接收错误的总数</p>
</li>
<li><p><code>drop:</code> 设备驱动程序丢弃的数据包总数</p>
</li>
<li><p><code>fifo:</code> FIFO缓冲区错误的数量</p>
</li>
<li><p><code>frame:</code> 分组帧错误的数量</p>
</li>
<li><p><code>compressed:</code> 设备驱动程序接收的压缩数据包数</p>
</li>
<li><p><code>multicast:</code> 设备驱动程序发送或接收的多播帧数</p>
<p>————————————-【传送】————————————-</p>
</li>
<li><p><code>bytes:</code>  接口发送的数据的总字节数</p>
</li>
<li><p><code>packets:</code> 接口发送的数据包总数</p>
</li>
<li><p><code>errs:</code> 由设备驱动程序检测到的发送错误的总数</p>
</li>
<li><p><code>drop:</code> 同上</p>
</li>
<li><p><code>fifo:</code> 同上</p>
</li>
<li><p><code>colls:</code> 接口上检测到的冲突数</p>
</li>
<li><p><code>carrier:</code> 由设备驱动程序检测到的载波损耗的数量</p>
</li>
<li><p><code>compressed:</code> 设备驱动程序发送的压缩数据包数</p>
</li>
</ol>
<p>需要注意的,，此处只是获取的为<strong>接口接收的数据的总字节数</strong> ，要获取实时速率，还得用起差值除以单位时间，才是网速。 <strong>其单位默认是字节</strong>。</p>
<br>

<h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>此文件是<strong>某一时刻的</strong>，本机所有接收和发送的<strong>数据包总量</strong> ，其分别对应每一行的第 1 列、第 9 列 （byte 一列）；（注：第 0 列是前面的英文字符串）</p>
<p>将每一行的的第 2 列累加，为此时可总的接收数据包（下载）；将每一行的的第 10 列加，为此时总的发送数据包（上传）；然后将两次时刻之差 除以时间间隔，就得到单位时间网速；</p>
<br>

<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p><del>这里使用 <code>QRegExp(&quot;\\s&#123;1,&#125;&quot;)</code> 来分割，莫名会得到第一个切割为 <code>“”</code> 的字符串，所以对应的第 1和 9 列都要顺延加 1。</del> 此问题已经由 <a href="https://github.com/xmuli/lfxSpeed/pull/5">#5</a> 修复</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*!
 * \brief SpeedInfo::netRate 获取网某一时刻的网络总的数据包量
 * \param[out] netUpload 网络上传数据量
 * \param[out] netUpload 网络下载数据量
 */</span>
<span class="token keyword">void</span> <span class="token class-name">SpeedInfo</span><span class="token double-colon punctuation">::</span><span class="token function">netRate</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">&amp;</span>netDown<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token operator">&amp;</span>netUpload<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QFile <span class="token function">file</span><span class="token punctuation">(</span>PROC_PATH_NET<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token double-colon punctuation">::</span>ReadOnly <span class="token operator">|</span> QIODevice<span class="token double-colon punctuation">::</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 在读取时，把行尾结束符修改为 '\n'； 在写入时，把行尾结束符修改为本地系统换行风格，比如Windows文本换行是 "\r\n"</span>
        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\"/proc/net/dev\" don't open!"</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">long</span> down <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> upload <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    QTextStream <span class="token function">stream</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString line <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    line  <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    line  <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>line<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        line <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">trimmed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QStringList list <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token function">QRegExp</span><span class="token punctuation">(</span><span class="token string">"\\s&#123;1,&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 匹配任意 大于等于1个的 空白字符</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            down <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            upload <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        netDown <span class="token operator">+=</span> down<span class="token punctuation">;</span>
        netUpload <span class="token operator">+=</span> upload<span class="token punctuation">;</span>
        line  <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p>还需要将字节可以智能转换为对应的单位和对应的数值 的函数：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*!
 * \brief SpeedInfo::autoRateUnits 自动显示单位
 * \param[in] speed 传入的网速(无单位)
 * \param[out] unit 智能调节后的网速的单位
 * \param sensitive 速率单位的大小写模式
 * \return 自能调节单位后的速率
 */</span>
<span class="token keyword">double</span> <span class="token class-name">SpeedInfo</span><span class="token double-colon punctuation">::</span><span class="token function">autoRateUnits</span><span class="token punctuation">(</span><span class="token keyword">long</span> speed<span class="token punctuation">,</span> SpeedInfo<span class="token double-colon punctuation">::</span>RateUnit <span class="token operator">&amp;</span>unit<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/* 自动判断合适的速率单位,默认传进来的是 Byte
     * bit    0 ~ 7 位 (不到 1 字节)
     * Byte   1    ~ 2^10  Byte
     * KB     2^10 ~ 2^20  Byte
     * MB     2^20 ~ 2^30  Byte
     * GB     2^30 ~ 2^40  Byte
     * TB     2^40 ~ 2^50  Byte
     */</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>unit <span class="token operator">!=</span> SpeedInfo<span class="token double-colon punctuation">::</span>RateByte<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"请先将单位转为字节(byte)后再传参"</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">double</span> sp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;=</span> speed <span class="token operator">&amp;&amp;</span> speed <span class="token operator">&lt;</span> <span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        unit <span class="token operator">=</span> SpeedInfo<span class="token double-colon punctuation">::</span>RateByte<span class="token punctuation">;</span>
        sp <span class="token operator">=</span> speed<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> speed <span class="token operator">&amp;&amp;</span> speed <span class="token operator">&lt;</span> <span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        unit <span class="token operator">=</span> SpeedInfo<span class="token double-colon punctuation">::</span>RateKb<span class="token punctuation">;</span>
        sp <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>speed <span class="token operator">/</span> <span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> speed <span class="token operator">&amp;&amp;</span> speed <span class="token operator">&lt;</span> <span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        unit <span class="token operator">=</span> SpeedInfo<span class="token double-colon punctuation">::</span>RateMb<span class="token punctuation">;</span>
        sp <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>speed <span class="token operator">/</span> <span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> speed <span class="token operator">&amp;&amp;</span> speed <span class="token operator">&lt;</span> <span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        unit <span class="token operator">=</span> SpeedInfo<span class="token double-colon punctuation">::</span>RateGb<span class="token punctuation">;</span>
        sp <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>speed <span class="token operator">/</span> <span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> speed <span class="token operator">&amp;&amp;</span> speed <span class="token operator">&lt;</span> <span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        unit <span class="token operator">=</span> SpeedInfo<span class="token double-colon punctuation">::</span>RateTb<span class="token punctuation">;</span>
        sp <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>speed <span class="token operator">/</span> <span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        unit <span class="token operator">=</span> SpeedInfo<span class="token double-colon punctuation">::</span>RateUnknow<span class="token punctuation">;</span>
        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"本设备网络速率单位传输超过 TB, 或者低于 0 Byte."</span><span class="token punctuation">;</span>
        sp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> sp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="获取CPU"><a href="#获取CPU" class="headerlink" title="获取CPU"></a>获取CPU</h3><h4 id="读取文件-1"><a href="#读取文件-1" class="headerlink" title="读取文件"></a>读取文件</h4><p><code>CPU</code> 相关的数据，从 <code>/proc/stat</code>  文件获取：读取此文件进行计算即可</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201202110836.png" width="100%"/ loading="lazy">

<p><strong>这个文件上面每一列表的详细含义如下:</strong></p>
<ol>
<li><code>user:</code> 用户态时间（一般&#x2F;高优先级，仅统计nice&lt;&#x3D;0）</li>
<li><code>nice:</code> 用户态时间（低优先级，nice&gt;0）</li>
<li><code>system:</code>  内核态时间</li>
<li><code>idle:</code> 空闲时间（ 不包含IO等待时间） </li>
<li><code>iowait:</code>  I&#x2F;O等待时间 （ 硬盘IO等待时间） </li>
<li><code>irq:</code> 硬中断 </li>
<li><code>softirq:</code>  软中断</li>
<li><code>steal:</code>  被盗时间（虚拟化环境中运行其他操作系统上花费的时间（since Linux 2.6.11））</li>
<li><code>guest:</code>  来宾时间（操作系统运行虚拟CPU花费的时间（since Linux 2.6.24））</li>
<li><code>guest_nice:</code> nice 来宾时间（ 运行一个带nice值的guest花费的时间（since Linux 2.6.33））</li>
</ol>
<br>

<p><strong>最后的几个数值含义：</strong></p>
<ol>
<li><code>intr：</code> 系统启动以来的所有interrupts的次数情况（有冗余信息）；这行给出中断的信息，第一个为自系统启动以来，发生的所有的中断的次数。然后每个数对应一个特定的中断自系统启动以来所发生的次数。</li>
<li><code>ctxt:</code>  自系统启动以来CPU发生的上下文交换的次数</li>
<li><code>btime：</code> 启动时长(单位:秒)，从Epoch(即1970零时)开始到系统启动所经过的时长，每次启动会改变。</li>
<li><code>processes</code>：自系统启动以来所创建的任务的个数目。当短时间该值特别大，系统可能出现异常</li>
<li><code>procs_running：</code> 当前运行队列的任务的数目</li>
<li><code>procs_blocked：</code> 当前被阻塞的任务的数目</li>
<li><code>softirq:</code>  此行显示所有CPU的softirq总数, 第一列是所有软件和每个软件的总数, 后面的列是特定softirq的总数</li>
</ol>
<p><strong>其单位为 <code>jiffies</code>；其中 <code>1 jiffies = 0.01s = 10ms</code></strong></p>
<br>

<h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>和我们相关暂时只关心第一行，每次读取，依旧<strong>是某一时刻状态</strong> ，CPU 总量 cpuAll 为第一行所有列之和，空闲量 cpuFree 为第一行的第 4 列。将 <code>（cpuAll - cpuFree） / cpuAll</code> 就是此时刻的 CPU 使用率。</p>
<p>而 <code>(((cpuAll - old_cpuAll) - (cpuFree - old_cpuFree)) * 100.0 / (cpuAll - old_cpuAll)</code> 则是CPU 在<strong>某一单位时间段</strong> 的 CPU 使用率。</p>
<br>

<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><p>获取某一时刻 CPU 的总量和空闲量</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*!
 * \brief SpeedInfo::cpuRate 获取某一次 CPU 的使用情况
 * \param[out] cpuAll 总 cpu 使用量
 * \param[out] cpuFree 空闲 cpu 的使用量
 */</span>
<span class="token keyword">void</span> <span class="token class-name">SpeedInfo</span><span class="token double-colon punctuation">::</span><span class="token function">cpuRate</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">&amp;</span>cpuAll<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token operator">&amp;</span>cpuFree<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    cpuAll <span class="token operator">=</span> cpuFree <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    QFile <span class="token function">file</span><span class="token punctuation">(</span>PROC_PATH_CPU<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token double-colon punctuation">::</span>ReadOnly <span class="token operator">|</span> QIODevice<span class="token double-colon punctuation">::</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    QTextStream <span class="token function">stream</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString line <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>line<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        QStringList list <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token function">QRegExp</span><span class="token punctuation">(</span><span class="token string">"\\s&#123;1,&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> v <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> v <span class="token operator">!=</span> list<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>v<span class="token punctuation">)</span>
            cpuAll <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLong</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>

        cpuFree <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLong</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="获取内存"><a href="#获取内存" class="headerlink" title="获取内存"></a>获取内存</h3><h4 id="读取文件-2"><a href="#读取文件-2" class="headerlink" title="读取文件"></a>读取文件</h4><p><code>Memory</code> 相关的数据，从 <code>/proc/meminfo</code>  文件获取：读取此文件进行计算即可</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201202132456.png" width="40%"/ loading="lazy"> 



<p>此文件的详细解释：</p>
<ol>
<li><p><code>MemTotal:</code> 所有内存(RAM)大小,减去一些预留空间和内核的大小。</p>
</li>
<li><p><code>MemFree:</code> 完全没有用到的物理内存，lowFree+highFree</p>
</li>
<li><p><code>MemAvailable:</code> 在不使用交换空间的情况下，启动一个新的应用最大可用内存的大小，计算方式：MemFree+Active(file)+Inactive(file)-(watermark+min(watermark,Active(file)+Inactive(file)&#x2F;2))</p>
</li>
<li><p><code>Buffers:</code> 块设备所占用的缓存页，包括：直接读写块设备以及文件系统元数据(metadata)，比如superblock使用的缓存页。</p>
</li>
<li><p><code>Cached:</code> 表示普通文件数据所占用的缓存页。</p>
</li>
<li><p><code>SwapCached:</code> swap cache中包含的是被确定要swapping换页，但是尚未写入物理交换区的匿名内存页。那些匿名内存页，比如用户进程malloc申请的内存页是没有关联任何文件的，如果发生swapping换页，这类内存会被写入到交换区。</p>
</li>
<li><p><code>Active:</code> active包含active anon和active file</p>
</li>
<li><p><code>Inactive:</code> inactive包含inactive anon和inactive file</p>
</li>
<li><p><code>Active(anon):</code> anonymous pages（匿名页），用户进程的内存页分为两种：与文件关联的内存页(比如程序文件,数据文件对应的内存页)和与内存无关的内存页（比如进程的堆栈，用malloc申请的内存），前者称为file pages或mapped pages,后者称为匿名页。</p>
</li>
<li><p><code>Inactive(anon):</code> 见上</p>
</li>
<li><p><code>Active(file):</code> 见上</p>
</li>
<li><p><code>Inactive(file):</code> 见上</p>
</li>
<li><p><code>SwapTotal:</code> 可用的swap空间的总的大小(swap分区在物理内存不够的情况下，把硬盘空间的一部分释放出来，以供当前程序使用)</p>
</li>
<li><p><code>SwapFree:</code> 当前剩余的swap的大小</p>
</li>
<li><p><code>Dirty:</code> 需要写入磁盘的内存去的大小<code>Writeback:</code> 正在被写回的内存区的大小<code>AnonPages:</code> 未映射页的内存的大小<code>Mapped:</code> 设备和文件等映射的大小</p>
</li>
<li><p><code>Slab:</code> 内核数据结构slab的大小</p>
</li>
<li><p><code>SReclaimable:</code> 可回收的slab的大小</p>
</li>
<li><p><code>SUnreclaim:</code> 不可回收的slab的大小</p>
</li>
<li><p><code>PageTables:</code> 管理内存页页面的大小</p>
</li>
<li><p><code>NFS_Unstable:</code> 不稳定页表的大小</p>
</li>
<li><p><code>VmallocTotal:</code> Vmalloc内存区的大小</p>
</li>
<li><p><code>VmallocUsed:</code> 已用Vmalloc内存区的大小</p>
</li>
<li><p><code>VmallocChunk:</code> vmalloc区可用的连续最大快的大小</p>
</li>
</ol>
<h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>此为某一时刻系统的内存和交换空间使用情况的截图；</p>
<p><strong>对于内存：</strong> 内存总量 memoryAll 为 MemTotal 的数值，空闲内存 memoryFree 为 MemAvailable 的数值，使用中的内存为 memoryUse 为 （MemTotal - MemAvailable）；</p>
<p><strong>对于交换空间：</strong> 交换空间总量 swapAll 为 SwapTotal 数值，空闲交换空间 swapFree 为 SwapFree 数值，使用中的交换控件量为 swapUse 为 （SwapTotal -  SwapFree） 数值；</p>
<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><p>获取某一时刻内存核交换空间的使用情况，但是这里所有单位都是 字节；</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*!
 * \brief SpeedInfo::memoryRate 获取 “内存” 和 “交换空间” 的某一时刻的使用情况
 * \param memory 内存使用量
 * \param memoryAll 内存总量
 * \param swap 交换空间使用量
 * \param swapAll 交换空间总量
 */</span>
<span class="token keyword">void</span> <span class="token class-name">SpeedInfo</span><span class="token double-colon punctuation">::</span><span class="token function">memoryRate</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">&amp;</span>memory<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token operator">&amp;</span>memoryAll<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token operator">&amp;</span>swap<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token operator">&amp;</span>swapAll<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    memory <span class="token operator">=</span> memoryAll <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    swap <span class="token operator">=</span> swapAll <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    QFile <span class="token function">file</span><span class="token punctuation">(</span>PROC_PATH_MEM<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token double-colon punctuation">::</span>ReadOnly <span class="token operator">|</span> QIODevice<span class="token double-colon punctuation">::</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    QTextStream <span class="token function">stream</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> buff<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        QString line <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QStringList list <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token function">QRegExp</span><span class="token punctuation">(</span><span class="token string">"\\s&#123;1,&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        buff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLong</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>

    memoryAll <span class="token operator">=</span> buff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    memory <span class="token operator">=</span> buff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> buff<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    swapAll <span class="token operator">=</span> buff<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    swap <span class="token operator">=</span> buff<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">-</span> buff<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="获取系统运行时间"><a href="#获取系统运行时间" class="headerlink" title="获取系统运行时间"></a>获取系统运行时间</h3><h4 id="读取文件-3"><a href="#读取文件-3" class="headerlink" title="读取文件"></a>读取文件</h4><p>想在预览里面显示系统开机到现在的运行时间。读取文件为 <code>/proc/uptime</code> ，</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201202140839.png" width="40%"/ loading="lazy"> 

<p>文件一共的两列表含义为：</p>
<ol>
<li>系统启动到现在的时间（以秒为单位）</li>
<li>系统空闲的时间（以秒为单位）</li>
</ol>
<h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p>将第一个参数获取获取，然后将这个数值转换为  <strong>“ x 天， hh:MM:ss”</strong>  的格式，这是我想显示的格式。</p>
<h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><p>获取系统开始到现在的运行时间，单位为 秒；</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">SpeedInfo</span><span class="token double-colon punctuation">::</span><span class="token function">uptime</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">&amp;</span>run<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">&amp;</span>idle<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    run <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    idle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    QFile <span class="token function">file</span><span class="token punctuation">(</span>PROC_PATH_UPTIME<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token double-colon punctuation">::</span>ReadOnly <span class="token operator">|</span> QIODevice<span class="token double-colon punctuation">::</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\"/proc/uptime\" don't open!"</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    QTextStream <span class="token function">stream</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString line <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList list <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token function">QRegExp</span><span class="token punctuation">(</span><span class="token string">"\\s&#123;1,&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        run <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        idle <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>这里本以为个很容易有现成的 <code>QDateTime</code> 之类的，直接将 秒 转换为想要的时间格式，试了一圈，发现没有，有一个很接近，但是以 1970 零时为开始的，也不符合预期。娜娜的无奈，还是自己动手写吧～</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QString <span class="token class-name">SpeedInfo</span><span class="token double-colon punctuation">::</span><span class="token function">autoTimeUnits</span><span class="token punctuation">(</span><span class="token keyword">double</span> s<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token function">qFloor</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ss <span class="token operator">=</span> time <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> MM <span class="token operator">=</span> <span class="token punctuation">(</span>time <span class="token operator">%</span> <span class="token number">3600</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> hh <span class="token operator">=</span> <span class="token punctuation">(</span>time <span class="token operator">%</span> <span class="token number">86400</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3600</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> dd <span class="token operator">=</span> time <span class="token operator">/</span> <span class="token number">86400</span><span class="token punctuation">;</span>

    QString runTime <span class="token operator">=</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"系统已运行: %1天, %2:%3:%4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>dd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">'f'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">QLatin1Char</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>hh<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token char">'f'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">QLatin1Char</span><span class="token punctuation">(</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>MM<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token char">'f'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">QLatin1Char</span><span class="token punctuation">(</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token char">'f'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">QLatin1Char</span><span class="token punctuation">(</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> runTime<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="任务栏-1-2-2-的缺陷"><a href="#任务栏-1-2-2-的缺陷" class="headerlink" title="任务栏 1.2.2 的缺陷"></a>任务栏 <code>1.2.2</code> 的缺陷</h2><p>开发过程中，又遇到一些如下 dde-dock 的一些 bug：</p>
<ol>
<li><p><strong>插件真实大小只有 图标范围</strong></p>
<p>这里指的是，无论插件在 dock 布局上，显示有多大，但实际大小都只有如下中间的一个图标大小，右键非红色区域没有响应；</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201204195032.png" width="30%"/ loading="lazy">
</li>
<li><p><strong>叫非 <code>datetime</code> 的插件显示都会被压缩</strong></p>
<p>如果返回的插件名称为非 <code>datetime</code>， 且任务栏高度过低的时候，会出现内容上下被遮盖，显示不全。原因分析参见 <a href="https://github.com/linuxdeepin/dde-dock/issues/321">#321</a> （基于 <code>1.2.2</code>）；另外在 <a href="https://github.com/linuxdeepin/dde-dock/commit/9188fff15bdac20edbd14290bb1e44c1bcef28b5">9188fff1</a> 已经修复（基于 <code>1.2.3</code> ）。补丁暂只提交到 uos 分支，当前开发分支暂时未升级。</p>
</li>
<li><p><strong>修改布局不会自动刷新</strong></p>
<p>当我调整的插件布局时候，好像不会<strong>立刻</strong> 通知到 dock 重新布局，也没有信号重新通知任务栏。也有可能室友，但是我没有找到？？？或如果有更好的解决方案，可以分享一波？？？临时的解决方案是，①将布局大小写死 ②手动刷新（卸载此插件后立刻重新加载此插件）。</p>
</li>
</ol>
<br>

<h2 id="更新-2020-12-28"><a href="#更新-2020-12-28" class="headerlink" title="更新 2020-12-28"></a>更新 2020-12-28</h2><p><a href="https://github.com/xmuli/lfxSpeed">此项目 </a>不再维护；但基于其思路和新的实现目标，源码将会重新设计实现，一个功能更加强大的网速插件，也会提供对应的库便于其它开发者二次开发，新的项目在 <a href="https://github.com/xmuli/NetSpeed">NetSpeed</a>  ，芜湖～ </p>
<h2 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h2><ul>
<li>GitHub: <a href="https://github.com/xmuli/lfxspeed">lfxspeed</a> </li>
<li>Deepin Store 深度商店  |  Spark Store 星火商店</li>
</ul>
<br>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><ul>
<li><a href="https://github.com/linuxdeepin/dde-dock/blob/master/plugins/plugin-guide/plugins-developer-guide.md">plugins-developer-guide</a></li>
<li><a href="https://www.jianshu.com/p/deb0ed35c1c2">深度系统监视器原理剖析</a> </li>
<li><a href="http://gityuan.com/2017/08/12/proc_stat/">&#x2F;proc&#x2F;stat解析</a></li>
<li><a href="http://smilejay.com/2012/05/proc_uptime/">&#x2F;PROC&#x2F;UPTIME详解</a></li>
<li><a href="https://www.cnblogs.com/liushui-sky/p/9236007.html">Linux平台Cpu使用率的计算</a></li>
<li><a href="https://github.com/sonichy/CMDU_DDE_DOCK">CMDU_DDE_DOCK</a></li>
<li><a href="https://github.com/v-svg/dde-dock-netspeed">dde-dock-netspeed</a></li>
<li><a href="https://github.com/zhongyang219/TrafficMonitor">TrafficMonitor</a></li>
<li><a href="https://stackoverflow.com/questions/3521678/what-are-meanings-of-fields-in-proc-net-dev">What are meanings of fields in &#x2F;proc&#x2F;net&#x2F;dev?</a></li>
</ul>
]]></content>
      <categories>
        <category>学习 - Linux</category>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
        <category>专栏 - 项目实战开发</category>
      </categories>
      <tags>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin 愿望墙：社区插件等需求调研结果</title>
    <url>/posts/8bad87dd/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　社区或独立开发者，欲开发一些插件或小功能等，但一时之间没想到合适的方向，可参考此作为方向，作为个人学习或者练手编程。<font size="3" color="#FF0000">既是个人兴趣，也是他人所需，妙哉。</font> </p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="详细调研"><a href="#详细调研" class="headerlink" title="详细调研"></a>详细调研</h2><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>之前拜托大佬调研过一些有社区希望上哪些功能，此处放出来，也可以作为社区开发者一个参考，如果感兴趣的话，可以考虑个人开发一些小轮子，<font size="3" color="#FF0000">即使已经有的，或许你可以开发一个更棒的。然后可在<a href="https://docs.deepin.org/pages/d318e7/#%E6%8A%95%E7%A8%BF%E4%BD%9C%E5%93%81">官方文档</a>投稿、论坛发帖等，一起分享。</font></p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20210105163355.png" width="70%"/ loading="lazy">

<br>

<h3 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h3><p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201130151859.png" width="40%"/ loading="lazy">  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201130151328.png" width="50%"/ loading="lazy"></p>
<p>对于这些数据， 有些还是比较意外的，有的是在情理之中，从国内社区和国际社区， 得到数据的综合来看，其中需求最大的 <code>Topbar</code> 和 动态壁纸 ，Hash 值的校验，文件对比，发送到…， 而对于网速、天气、CPU 温度、快捷设置</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201130152757.png" width="100%"/ loading="lazy">

<br>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://bbs.deepin.org/post/204108#mod=viewthread&tid=204108&page=1&extra=">【DTK之开发文档调研】统计你希望官方输出的DTK文档</a> </li>
<li><a href="https://bbs.deepin.org/post/204104#mod=viewthread&tid=204104&page=1&extra=">【DTK之桌面插件调研】你希望官方支持的桌面插件</a></li>
<li><a href="https://bbs.deepin.org/post/204106#mod=viewthread&tid=204106&page=1&extra=">【DTK之文管插件调研】统计希望支持的文管插件</a></li>
<li><a href="https://bbs.deepin.org/post/204107#mod=viewthread&tid=204107&page=1&extra=">【DTK之任务栏插件调研】统计希望支持的任务栏插件</a></li>
<li>等</li>
</ul>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
      <tags>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin 自定义修改窗口圆角大小</title>
    <url>/posts/cd317ccc/</url>
    <content><![CDATA[<p><strong>简  述：</strong> 社区版本 <code>Deepin</code>  的<code>大圆角</code> 官方版本的 <strong>“小杯”、“中杯”、“超大杯”</strong> 来了。所有窗口有和任务栏有了 <strong>直角、小圆角、大圆角 （0px、8px、 18px）</strong>。附上详细修改教程步骤，和如何修改任意角度的圆角。</p>
<iframe width="760" height="427" src="//player.bilibili.com/player.html?aid=245084838&bvid=BV1jv411C7oW&cid=247386263&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<blockquote>
<p>翻译的英文版本： <a href="xmuli.tech/posts/3757693a/">Deepin Custom Modify Window Corner Rounding Size</a></p>
</blockquote>
<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>对于 <code>DDE</code> 一直以来的大圆角 <code>18px</code>，社区有着不同审美，有人希望坚持大圆角、有人希望调整小圆角、和直角；个人经历和生活环境不同，柑橘也不一样，所以有着各自不同角度的看待想法，能够互相欣赏即可</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201022150848.png" width="25%"/ loading="lazy">



<p><code>DDE</code> 的圆角修改范围为： **所有主窗口的圆角 + Dock 圆角 + Menu 圆角 ** 。</p>
<p>本次修改只涉及社区 <code>Deepin</code> 拥有此功能（属于社区定制功能，也是某文和社区心心恋恋的~ ）。</p>
<p><code>UOS</code> 版本默认不开启，当然，你想体验的话，也可通过命令来修改圆角大小 （此类功能，暂时都属于规定的计划之外。 也害怕被 <code>UOS</code> 的产品经理、开发们锤、然后被测试小姐姐报 <code>bug</code> 单）。</p>
<blockquote>
<p>因 <code>Deepin</code> 和 <code>UOS</code> 实际是一个产品的两种不同形态。</p>
</blockquote>
<br>

<h2 id="文案设计"><a href="#文案设计" class="headerlink" title="文案设计:"></a>文案设计:</h2><ul>
<li><strong>中文文案:</strong>  <code>窗口圆角</code>， <code>小</code>， <code>中</code>， <code>大</code></li>
<li><strong>English 文案 :</strong>  <code>Rounded Corner</code>， <code>small</code>，  <code>medium</code>，  <code>large</code></li>
</ul>
<p>大圆角（系统原本样式）：窗口 &#x3D; 18px；   中圆角：窗口 &#x3D; 8px；    小圆角：窗口 &#x3D; 0px；    对于 内部（按钮、item背景等）的圆角大小， 不做修改。 </p>
<p>嗯嗯 ，，也是来自设计部的小姐姐（人也美）给的设计图，由于篇幅，就不上图了（<del>我说的是设计图</del>）， 确实很棒，，，</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/eb07e579-973e-4a08-aab8-0f8e120dccfc.png" width="25%"/ loading="lazy">

<br>

<h2 id="修改圆角窗口思路："><a href="#修改圆角窗口思路：" class="headerlink" title="修改圆角窗口思路："></a>修改圆角窗口思路：</h2><blockquote>
<ol>
<li>先 <code>fork</code> 官网仓库到自己的仓库；</li>
<li>编译项目的依赖， 执行 <code>sudo apt build-dep dtkgui</code>  ，或者去项目根目录下， 执行 <code>dpkg-checkbuilddeps</code> ；</li>
<li>修改代码， 按照格式提交（很重要）</li>
<li>测试达到预期后后、提交代码，等待合并</li>
</ol>
</blockquote>
<p>如何实现，修改地方一共要设计三个项目：</p>
<ul>
<li><a href="https://github.com/linuxdeepin/dtkgui">dtkgui</a> ：修改基础的圆角数值、添加接口</li>
<li><a href="https://github.com/linuxdeepin/dde-control-center">dde-control-center</a> ：添加控件修改软件的圆角数值，国际化翻译</li>
<li><a href="https://github.com/linuxdeepin/dde-dock">dde-dock</a> ：同时修改任务栏 dock 的在“时尚模式”下的圆角大小数值</li>
</ul>
<br>

<h3 id="修改-dtkgui-代码："><a href="#修改-dtkgui-代码：" class="headerlink" title="修改 dtkgui 代码："></a>修改 dtkgui 代码：</h3><p>先添加对应的接口；要确 <code>winID</code> 被创建后（不然会被创建一个默认的窗口），再修改 属性的数值， 否则 dock 会变灰，右键菜单等都会变成不透明的严重 bug。 本次修改提交，代码如下。</p>
<p><strong>修改代码提交:</strong></p>
<blockquote>
<ol>
<li><a href="https://github.com/linuxdeepin/dtkgui/commit/a3b9836b83f92e308b2af58c148350471119690b">commit  a3b9836b</a>                        &#x2F;&#x2F; 添加修改圆角接口</li>
<li><a href="https://github.com/linuxdeepin/dtkgui/commit/de1f742edefee47963515acf63721ffb53193a8b">commit  de1f742e</a>                         &#x2F;&#x2F; 修复默显示为直角角</li>
<li><a href="https://github.com/linuxdeepin/dtkgui/commit/6ae8f77d42beea9e026444f29944cc06d298b3e6">commit  6ae8f77d</a>                        &#x2F;&#x2F; 修复 ToolTip 的圆角为 18px 的不美观的意外 bug</li>
<li><a href="https://github.com/linuxdeepin/dtkgui/commit/ea60f6b0bb40cad111548a8374060f06473f66b1">commit  ea60f6b0</a>                        &#x2F;&#x2F; 优化代码</li>
</ol>
</blockquote>
<br>

<p>运行之后，将新的头文件和生成的二进制，替换进系统，查看效果</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">☁  dtkgui <span class="token punctuation">[</span>master<span class="token punctuation">]</span> ⚡ <span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /usr/lib/x86_64-linux-gnu/libdtkgui.so.5.2.2
☁  dtkgui <span class="token punctuation">[</span>master<span class="token punctuation">]</span> ⚡ <span class="token function">sudo</span> <span class="token function">cp</span> ~/project/build-dtkgui-unknown-Debug/src/libdtkgui.so.5.2.2 /usr/lib/x86_64-linux-gnu/
☁  dtkgui <span class="token punctuation">[</span>master<span class="token punctuation">]</span> ⚡  <span class="token function">sudo</span> <span class="token function">cp</span> src/dplatformtheme.h /usr/include/libdtk-5.2.2/DGui<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="修改-dde-control-center-代码："><a href="#修改-dde-control-center-代码：" class="headerlink" title="修改 dde-control-center 代码："></a>修改 dde-control-center 代码：</h3><p><strong>修改代码提交:</strong></p>
<blockquote>
<ol>
<li><a href="https://github.com/linuxdeepin/dde-control-center/commit/a37aae159ab5fb0b8c4cbb8189e81e8ac81f0f43">commit  a37aae15</a>                           &#x2F;&#x2F; 添加控件修改大圆角度的数值</li>
<li><a href="https://github.com/linuxdeepin/dde-control-center/commit/b9926d9795cb39d9298d22c295eed90dd437fe11">commit  b9926d97</a>                          &#x2F;&#x2F; 添加对的应国际化翻译</li>
<li><a href="https://github.com/linuxdeepin/dde-control-center/commit/a6ea6be6927efede1ee3b7aac7265adcb62c21a9">commit  a6ea6be6</a>                          &#x2F;&#x2F; 修复布局错误导致其他控件的被压缩显示</li>
</ol>
</blockquote>
<p>直接运行，查看是否有实时效果。</p>
<br>

<h3 id="修改-dde-dock-代码："><a href="#修改-dde-dock-代码：" class="headerlink" title="修改 dde-dock 代码："></a>修改 dde-dock 代码：</h3><p><strong>修改代码提交:</strong></p>
<blockquote>
<ol>
<li><a href="https://github.com/linuxdeepin/dde-dock/commit/89cf36abf18a5a0283db739a5b3cd053b1e011f1">commit  89cf36ab</a>                              &#x2F;&#x2F; Dock 任务栏修改大圆角</li>
<li><a href="https://github.com/linuxdeepin/dde-dock/commit/63953ef5d05a7320ac3bd2d952602038d6b1fb48">commit  63953ef5</a>                              &#x2F;&#x2F; 修复 注销重启后，dock 默认显示为直角</li>
</ol>
</blockquote>
<p>运行编译下想要看下效果，需要先下载 <code>dconf-editor</code> 软件， 搜寻 看门狗 <code>watchdog</code>， 然后关闭 <code>dde-dock</code> 的按钮，这样就可以运行代码生成的 dock 而非一直显示系统本身的任务栏 dock。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201020202526.png" width="50%"/ loading="lazy">



<br>

<h3 id="后期优化："><a href="#后期优化：" class="headerlink" title="后期优化："></a>后期优化：</h3><p>突然，被楼上测试小姐姐报告了一个缺陷，</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/407bef0d-99f4-412e-a10b-7cd0729351b2.gif" width="40%"/ loading="lazy">

<p>由于只在前端做了此值的设置， 所以每次 “注销 、重启、关闭特效后再开启”， 都会导致此值 <code>&quot;DTK/windowRadius&quot; QVariant(int, 8)</code> 的丢失，从而导致都会显示为大圆角。</p>
<p>下一阶段，会在后端一块给此添加赋值，修复此缺陷。</p>
<br>

<h2 id="自定义设置圆角大小："><a href="#自定义设置圆角大小：" class="headerlink" title="自定义设置圆角大小："></a>自定义设置圆角大小：</h2><h3 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h3><p>通过界面调整 <strong>“控制中心 - 个性化- 圆角窗口“</strong>  的修改（仅对 <code>Deepin</code> 有效）。只有 直角<code>(0px</code>)、小圆角（<code>8px</code>） 、和 大圆角(18px) 三档可调。</p>
<br>

<h3 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h3><p>通过命令终端调整，执行命令：其中具体的参数 <code>8</code> 可以替换为任意数字的角度，且对 <code>Deepin</code> 和 <code>UOS</code> 都生效。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 终端手动调整数值 "DTK/windowRadius" QVariant(int， 8)</span>
/usr/lib/x86_64-linux-gnu/libdtk-5.2.2/DGui/bin/deepin-gui-settings <span class="token parameter variable">--set</span> <span class="token string">"DTK/WindowRadius"</span> <span class="token parameter variable">-i</span> <span class="token number">8</span>  // 设定圆角数值

/usr/lib/x86_64-linux-gnu/libdtk-5.2.2/DGui/bin/deepin-gui-settings    // 查看圆角数值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>PS： 若是此路径下没有此运行程序，则需要执行： <code>sudo apt install libdtkgui5-bin</code></p>
</blockquote>
<br>

<h2 id="最终效果："><a href="#最终效果：" class="headerlink" title="最终效果："></a>最终效果：</h2><p>没图，没图说个🔨： </p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201022145645.png" width="30%"/ loading="lazy">



<p>赶紧先放一下最终的实现效果：</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/截图录屏_dde-desktop_20201015211555.png" width="90%"/ loading="lazy">

<br>

<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/截图录屏_dde-desktop_20201015211629.png" width="90%"/ loading="lazy">

<br>

<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/截图录屏_dde-desktop_20201015211822.png" width="90%"/ loading="lazy">

<br>

<h2 id="碎碎念总结-："><a href="#碎碎念总结-：" class="headerlink" title="碎碎念总结~："></a>碎碎念总结~：</h2><p>本次功能很小，但却是社区用户的一直想要的功能，提交很多此次。一是被测试小姐姐测出来的，二是秉持一个提交只干一件事情。三是给想参与社区贡献的小伙伴，一个提交示范，展示如何从 <code>github</code> 提交 <code>pr</code> 然后被合并到 主干代码的流程。四是分享自己的细节和快乐。</p>
<p>对于任意的一个软件，个人觉得都应该是秉持 <strong>”以人为本“</strong>  的观点。<strong>一个产品应该有温度的</strong> ，在一些细节的地方有着对用户的细心呵护，而不知识一个冷冰冰的设备。没得一点感情，虽然需要时候能用，但是不用后就丢弃，以后再也想不起。 人生短暂，得做一点有意思的事情。始终尽我所能，为其添加一份心意在里面。也感谢过程中指点的思路的大佬们。</p>
<br>

<h2 id="一起参与贡献："><a href="#一起参与贡献：" class="headerlink" title="一起参与贡献："></a>一起参与贡献：</h2><p>若是感兴趣，你也可以添加一些新功能在里面，直接合入上游的 Deepin 主线代码中。源码直接在 <a href="https://github.com/linuxdeepin">linuxdeepin</a> 中下载，是实时和 内网代码同步的。关于DTK 的除了看源码注释，还可以看 <a href="https://linuxdeepin.github.io/dtk/">DTK API</a> 网页说明（目前每日更新）。然后 <code>fork</code> 后，自己修改自己玩，若是想要让更多的人体验你的代码效果，直接提交 <code>pr</code> ，记得 提交规范参考这个 <a href="https://github.com/linuxdeepin/developer-center/wiki/Commit%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83">Commit提交规范</a> 哦。下一篇再见~~</p>
<br>

<p><strong>若是希望能够快速被合并，附上一些建议：</strong></p>
<ol>
<li>对于在其他发行版移植、一些缺陷 Bug 修复的，此类贡献 pr 都是很容易被合并的且快速的；</li>
<li>对于一些社区的自定义功能，建议设置为只在社区 Deepin 上生效，且在 UOS 上默认生效是不生效关闭的，能够加快被被合并的速度；</li>
<li>对于一些新功能和特性，若是 UOS 版本刚好需要，或者在规划中，也能够被快速合并；</li>
<li>对于个人和来自社区的轮子，沟通下，也是很容易被合并的，社区都是很期待的（没有商业线那么严格的规范和流程）；</li>
<li>尽可能的充分测试完整再提交；</li>
<li><strong>一定要注意  <a href="https://github.com/linuxdeepin/developer-center/wiki/Commit%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83">Commit提交规范</a> ；</strong></li>
<li>可以在社区 bbs 论坛或者 github 进行沟通，提醒</li>
</ol>
<p>另外，对于系统版本的区分，可以推荐使用如下接口的类 <a href="https://github.com/linuxdeepin/dtkcore/blob/523a51ab69e97b5fd8c906cb83ed3049888f680d/src/dsysinfo.h">dsysinfo.h</a> ， 有空再写一个详细的教程，区分系统的各个版本。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QString <span class="token class-name">DSysInfo</span><span class="token double-colon punctuation">::</span><span class="token function">uosEditionName</span><span class="token punctuation">(</span><span class="token keyword">const</span> QLocale <span class="token operator">&amp;</span>locale<span class="token punctuation">)</span> <span class="token comment">// 获取版本名称，比如英文的话返回"Professional"/"Home"/"Community"...</span>

<span class="token keyword">enum</span> <span class="token class-name">UosEdition</span> <span class="token punctuation">&#123;</span>
    UosEditionUnknown<span class="token punctuation">,</span>
    UosProfessional<span class="token punctuation">,</span>  <span class="token comment">//专业版</span>
    UosHome<span class="token punctuation">,</span>   <span class="token comment">//个人版</span>
    UosCommunity<span class="token punctuation">,</span>    <span class="token comment">//社区版</span>
    UosMilitary<span class="token punctuation">,</span>
    UosEnterprise<span class="token punctuation">,</span>
    UosEnterpriseC<span class="token punctuation">,</span>
    UosEuler<span class="token punctuation">,</span>    <span class="token comment">// 欧拉版</span>
    UosMilitaryS<span class="token punctuation">,</span> <span class="token comment">// for Server</span>
    UosEditionCount <span class="token comment">// must at last</span>
<span class="token punctuation">&#125;</span>；


<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token comment">// 不推荐使用下面的接口，后面此接口会被移除的。</span>

    <span class="token keyword">enum</span> <span class="token class-name">ProductType</span> <span class="token punctuation">&#123;</span>
        UnknownType <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        Deepin<span class="token punctuation">,</span>
        ArchLinux<span class="token punctuation">,</span>
        CentOS<span class="token punctuation">,</span>
        Debian<span class="token punctuation">,</span>
        Fedora<span class="token punctuation">,</span>
        LinuxMint<span class="token punctuation">,</span>
        Manjaro<span class="token punctuation">,</span>
        openSUSE<span class="token punctuation">,</span>
        SailfishOS<span class="token punctuation">,</span>
        Ubuntu<span class="token punctuation">,</span>
        Uos
    <span class="token punctuation">&#125;</span>；

    <span class="token keyword">enum</span> <span class="token class-name">DeepinType</span> <span class="token punctuation">&#123;</span>
        UnknownDeepin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        DeepinDesktop<span class="token punctuation">,</span>
        DeepinProfessional<span class="token punctuation">,</span>
        DeepinServer<span class="token punctuation">,</span>
        DeepinPersonal
    <span class="token punctuation">&#125;</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="更新-2020-11-16"><a href="#更新-2020-11-16" class="headerlink" title="更新: 2020-11-16"></a>更新: 2020-11-16</h2><p>以下修改早已经早已经完成， 不过由于发布版本时间的安排， 预计的发布策略， 整体的赶进度， 给测试预留时间， 和协调其它项目的开发者沟通，一起合作等等多方面因素， 导致不能一被修复就立马安排上，看到作用.</p>
<p>修复 <strong>控制中心， 添加圆角修改窗口的布局错误，导致默认透明度模块被压缩了的 Bug</strong>:</p>
<ul>
<li>本部分修改涉及到前端支持:<ul>
<li><code>dde-control-center</code>: <a href="https://github.com/linuxdeepin/dde-control-center/commit/a6ea6be6927efede1ee3b7aac7265adcb62c21a9">a6ea6be6</a></li>
</ul>
</li>
</ul>
<br>

<p>修复 <strong>注销&#x2F;重启后，任务栏和活动窗口直角就成圆角了，状态不能够保存的 bug；</strong></p>
<ul>
<li>本部分修改涉及到后端支持:<ul>
<li><code>dde-daemon</code> : <a href="https://github.com/linuxdeepin/dde-daemon/commit/a6fee1b90fad7bf3a5414a241c90266bc2275322">a6fee1b9</a></li>
<li><code>startdde</code> : <a href="https://github.com/linuxdeepin/startdde/commit/f7b62e85d599e0c87734d2f4365b3fd15dd49cee">f7b62e85</a> </li>
<li><code>deepin-desktop-schemas</code>:  <a href="https://github.com/linuxdeepin/deepin-desktop-schemas/commit/73b992dae8984675a3d93c96c200dd5baf31fe88">73b992da</a>，  <a href="https://github.com/linuxdeepin/deepin-desktop-schemas/commit/9b448b22823d8d2fa051f792f161fd5c3eaa89af">9b448b22</a></li>
</ul>
</li>
<li>本部分修改涉及到前端支持:<ul>
<li><code>dde-control-center</code>: <a href="https://github.com/linuxdeepin/dde-control-center/commit/e523a87f80726dff196bccb78bbe5b1c2b0366ad">e523a87f</a></li>
</ul>
</li>
</ul>
<br>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p>修改一个定义窗口圆角，在社区中早已经有人给出相应的教程，方法是修改一个 <code>dtkgui</code> 项目数值，然后重新生成对应的二进制后替换到系统目录中；虽然暂时可行，但是会有不规范，和重启或者注销之后， 失效的问题， 方法比较简单且粗犷和有效， 且替换方式复杂， <strong>感觉不是那么的简洁和优雅；</strong> </p>
<p>只是说能用，谁说官方迟迟未进行此功能呢? 迫不及待的热情技术者们， 就只好自己动手先来探探路， 搞一个可用方式， 先完成可达到的预期再说， 舒坦了~；</p>
<p><strong>但作为正式的修改，</strong>  肯定不能同样的对待， 得符合一个dtk 的风格， 方便用户， 功能上和产品设计的规划不能冲突， 接口的修改要规范， 且要保持接口向下兼容.</p>
<br>

<p>本以为是修改一个简单功能， 但是会最后会牵涉到如此多的项目， 是我没有想到的: <code>dde-daemon</code>、<code>startdde</code> 、<code>deepin-desktop-schemas</code>、<code>dde-control-center</code>、<code>dtkgui</code>、 <code>dde-dock</code> 全程一共有 6 个，且其中好几个都是很重要的核心基础库，修改的话， 会对其他很多项目都有影响，所以修改的时候比较慎重和小心。 不过最后算是给社区加上了这个功能，还是很开心的。 Happy~;</p>
<br>

<h3 id="系列地址："><a href="#系列地址：" class="headerlink" title="系列地址："></a>系列地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a></p>
<p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 QT &#x2F; DTK 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
      <tags>
        <tag>DTK</tag>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin、DDE 的历史起源与发展(附 Deepin 所有版本的dde截图)</title>
    <url>/posts/41a6b35e/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　在 <a href="https://xmuli.blog.csdn.net/article/details/106189533">另一篇</a>中，详细讲述了写了 <code>dtk</code> 的历史起源、发展和简单入门；而本篇则是简述与之紧密相关的 deepin， dde，team 相关；<strong>本篇重点在 <code>dde</code> 的多年以来的 <code>UI</code> 变化；重新欣赏一遍 <code>deepin</code> 以前到现在的界面演变过程。（2009-2015-&gt;2020）</strong></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518142854.png" width="90%"/ loading="lazy">

<p>(本图片素材来自 <a href="https://github.com/shule1987">shule</a>)</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="前排说明："><a href="#前排说明：" class="headerlink" title="前排说明："></a>前排说明：</h3><p>因有些地方知道的也不是详细，难以保证细节地方有所偏差，所有有一个小的声明；也是基于个人对于 dtk 、deepin、develop team 的一个团队的了解；<strong>文章图片素材大部分来自 shule 老师，少部分来自网络和自己截图；</strong> 故会在图片下方附加素材来源，毕竟白嫖了 shule 老师那么多好看的素材就跑，为了晚上能够睡的着觉，故有必要每张图标注一下图片来源（不然下次我就不好意思了~）</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/IMG_1166.JPG" width="35%"/ loading="lazy">

<br>

<p><font color=#FF0000  size=4 face="幼圆"><strong>若是图片未加说明，图片素材均来自 <a href="https://github.com/shule1987">shule</a>，其图片的版权也归其所有。</strong></font></p>
<p><strong>&amp;&amp;</strong></p>
<p><font color=#FF0000 size=4 face="幼圆"><strong>「本文仅代表个人观点和感知，若有偏差，请以官方文章为准，也欢迎邮件 <a href="mailto:&#x78;&#x6d;&#x75;&#x6c;&#x69;&#x74;&#101;&#99;&#x68;&#64;&#103;&#97;&#x6d;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;">&#x78;&#x6d;&#x75;&#x6c;&#x69;&#x74;&#101;&#99;&#x68;&#64;&#103;&#97;&#x6d;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;</a> 帮我指正」；</strong></font> </p>
<br>

<h3 id="捋顺名词："><a href="#捋顺名词：" class="headerlink" title="捋顺名词："></a>捋顺名词：</h3><h4 id="deepin"><a href="#deepin" class="headerlink" title="deepin:"></a>deepin:</h4><p>deepin 通常是指 <font color=#D0087E size=4 face="幼圆"><code>deepin</code> 操作系统</font>（基于 debian 系统），一个国际排名长期稳定于前 10 名的一个 Linux 的发行版。同时也是该研发公司（武汉深之度科技有限公司）的 logo。</p>
<p>前辈们说（迷人一枝花的大叔），deepin 的发展历程一直早期是磕磕拌拌的，螺旋一样来回探索出路，然后在 14 年才有质的变化，在 15 年之后，才真正的一飞冲天；甚至还在自己绘画了一张很可爱的小表情图来表示这些年来的历程，我在了解一下后，柑橘这张图还真的是很蛮符合的：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518144027.png" width="90%"/ loading="lazy">

<p>(本图片素材来自 <a href="https://github.com/shule1987">shule</a>)</p>
<br>

<h4 id="dde"><a href="#dde" class="headerlink" title="dde:"></a>dde:</h4><p>dde（<code>deepin desktop environment</code>） 简称  <font color=#D0087E size=4 face="幼圆"><strong>深度桌面环境</strong></font>；是采用 <code>qt</code> 作为前端，<code>go</code> 为后端，<code>gala</code> 作为 <code>wm</code>，<code>lightdm</code> 作为 <code>dm</code> 的独立开发的桌面环境。</p>
<br>

<h4 id="dtk："><a href="#dtk：" class="headerlink" title="dtk："></a>dtk：</h4><p>dtk（<code>deepin tool kit</code>）中文名称 <font color=#D0087E size=4 face="幼圆"><strong>深度工具套件</strong></font>；是基于 <code>Qt5</code> 开发一整套界面美观且实用的 <code>UI</code> 图形库。是多个项目仓库的集合（dtkweidget + dtkgui + qt5integration + dtkcore + …）</p>
<p>dtk 各个项目之间联系。详细介绍和快速入门 dtk 见<a href="https://docsin.uniontech.com/?p=6268">这篇文章</a>；文末附较多 dtk 资料链接。<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518133859.png" width="100%"/ loading="lazy"><br>(本图片素材来自 <a href="https://github.com/BLumia">BLumia</a>)</p>
<br>

<h3 id="deepin-发展历史："><a href="#deepin-发展历史：" class="headerlink" title="deepin 发展历史："></a>deepin 发展历史：</h3><ul>
<li>2004年，其前身 Hiweed Linux 是中国第一个基于 Debian 的本地化版本，同时组建社区研发团队。</li>
<li>2008年，正式更名为Linux Deepin，发布了深度操作系统第一个版本。</li>
<li>2011年，成立了武汉深之度科技有限公司（简称：深度科技），并组建了专职研发团队对其进行支持。</li>
<li>2012年，deepin进入全球发行版排行榜前100名，获得《第七届中日韩开源软件竞赛优胜奖》。</li>
<li>2013年，deepin进入全球发行版排行榜前50名，对外提供商业服务。</li>
<li>2014年，再次更名为deepin，进入全球发行版排行版前20名，建立北京运营中心，进入中央国家机关政府采购中心操作系统采购名录，通过软件企业认定与ISO9001认证，与多家上下游国产软件厂商达成战略合作，多项作品获得软件著作权认证，获得中国开源软件推荐联盟《2014年度开源优秀项目奖》，获得数千万规模的战略投资，建立起国内唯一拥有员工过百人专注于桌面 Linux发行版的团队。</li>
<li>2015年，通过工信部国产操作系统适配测试，研发上线中国第一台基于国产操作系统的ATM设备，获得公安部安全操作系统认证，加入Linux基金会，获得《第十九届中国国际软件博览会创新奖》，获得2015中国信息安全大会《国产化迁移最佳解决方案奖》和《自主可控操作系统最佳产品奖》，建立华东、华南、东北、西北分支机构。</li>
<li>2016年，和网易云音乐联合正式发布国内第一个支持Linux平台的在线音乐应用，公司获得CMMI3 认证证书。</li>
<li>2020年，发布 deepin v20 beta 和 uos v20；</li>
</ul>
<p>目前，已经建立国内最活跃的国产操作系统社区，深度操作系统累计下载量5000多万次，提供40种不同的语言版本，用户遍及全球40多个国家和地区，是全球开源操作系统排行榜上排行名最高的中国操作系统产品。</p>
<br>

<h3 id="deepin-历史版本的发布："><a href="#deepin-历史版本的发布：" class="headerlink" title="deepin 历史版本的发布："></a>deepin 历史版本的发布：</h3><p>用一个大概的图来讲述 hiweed、deepin、uos 的关系，和他们重要版本的发布年限时间；更加细致的版本发布可参考：<a href="https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">wiki</a> 和 <a href="https://distrowatch.com/table.php?distribution=deepin">distribution</a> </p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518-140536.png" width="100%"/ loading="lazy">

<p>(本图片素材来自 <a href="https://github.com/xmuli">xmuli</a>)</p>
<br>

<p><strong>发行版本列表:</strong></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518142638.png" width="70%"/ loading="lazy">

<p>(本图片素材来自 <a href="https://zh.wikipedia.org/wiki/">wiki</a>)</p>
<br>

<h3 id="Hiweed-Linux-时期："><a href="#Hiweed-Linux-时期：" class="headerlink" title="Hiweed Linux 时期："></a>Hiweed Linux 时期：</h3><p>在追寻 <code>deepin</code> 历史演变的时候，意外得知，约在 04 ~ 08 年，此前还有一个我不知道到的名称~;那个时候它的名字还是叫 <code>Hiweed Linux</code>；而 Hiweed Linux 是一个由国人制作的一个 Linux 发行版，Hiweed Linux 基于 Ubuntu 8.10 ,可以说 Hiweed Linux 是一个中文本土化的 Ubuntu ，相对比 Ubuntu 上手更容易，免去了安装 Ubuntu 后的一系列的“汉化”过程。</p>
<p>Hiweed GNU&#x2F;Linux桌面版基于Ubuntu GNU&#x2F;Linux，适合中国的 Debian 新手和老手使用。Hiweed 桌面是一份已经配置好的中文桌面，包括 fcitx 中文输入法，stardict 词典，zhcon 中文终端，ttf-simsun字体等等。Hiweed 的目标是：免去新手的痛苦，节省老手的时间。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518141958.png" width="90%"/ loading="lazy">

<p>(本图片素材来自 <a href="https://www.youtube.com/watch?v=lPrM0AgeP7Y">youtub</a>)</p>
<br>

<h3 id="Linux-Deepin-时期："><a href="#Linux-Deepin-时期：" class="headerlink" title="Linux Deepin 时期："></a>Linux Deepin 时期：</h3><p>约 2009 年时期，咦，那这也是十一年前了~，这是早期的 Linux Deepin 桌面； </p>
<p><font color=#D0087E size=4 face="幼圆"><strong>下面的数字表示：</strong></font> <strong>年份.月份</strong> </p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518150655.png" width="90%"/ loading="lazy">

<p>(本图片素材来自 <a href="https://github.com/shule1987">shule</a>)</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518_150731.png" width="90%"/ loading="lazy">

<p>(本图片素材来自 <a href="https://github.com/shule1987">shule</a>)</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518_150747.png" width="90%"/ loading="lazy">

<p>(本图片素材来自 <a href="https://github.com/shule1987">shule</a>)</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518_150815.png" width="90%"/ loading="lazy">

<p>(本图片素材来自 <a href="https://github.com/shule1987">shule</a>)</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518_150829.png" width="90%"/ loading="lazy">

<p>(本图片素材来自 <a href="https://github.com/shule1987">shule</a>)</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518_150859.png" width="90%"/ loading="lazy">

<p>(本图片素材来自 <a href="https://github.com/shule1987">shule</a>)</p>
<br>

<h3 id="Deepin-时期："><a href="#Deepin-时期：" class="headerlink" title="Deepin 时期："></a>Deepin 时期：</h3><p>约 2014 年开始，dde 有了质的飞越，界面也变得美观多了，然后一直出出来了打磨好久的 deepin v 15 版本；成为了一个经典的版本，且我没有想到的是，在 2015- 2019 期间，反而是潜心下来继续打磨细节，在细微之处更加美观和实用。表示出来了极大的好感~</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518_150915.png" width="90%"/ loading="lazy">

<p>(本图片素材来自 <a href="https://github.com/shule1987">shule</a>)</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518_151017.png" width="90%"/ loading="lazy">
(本图片素材来自 [shule](https://github.com/shule1987))



 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518_152732.png" width="90%"/ loading="lazy">

<p>(本图片素材来自 <a href="https://www.youtube.com/watch?v=-jhDHmtdzsg">youtub</a>)</p>
<br>

<h3 id="uos-时期："><a href="#uos-时期：" class="headerlink" title="uos 时期："></a>uos 时期：</h3><p>deepin v15.11 在发展了这一版本的多次迭代之后，其已经有了比较惊艳的改观~，且在 2019 -&gt; 2020 之际，准备研发新的新的大版本，有了更多的研发小伙伴和其他产品等的加入。。。</p>
<p>在 2019 年末，2020 年初，分别依次发布了 deepin 20 beta 和 uos v20： desktop &amp;&amp; server 等版本的发布</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518_151641.png" width="90%"/ loading="lazy">

<p>(本图片素材来自 <a href="https://github.com/xmuli">xmuli</a>)</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518_151610.png" width="90%"/ loading="lazy">

<p>(本图片素材来自 <a href="https://github.com/xmuli">xmuli</a>)</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518154800.png" width="90%"/ loading="lazy">

<p>(本图片素材来自 <a href="https://www.bilibili.com/">bilibili</a>)</p>
<br>

<h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a></p>
<p>欢迎 star 和 fork 这个系列的 qt&#x2F;dtk 学习，附学习由浅入深的目录。</p>
<br>

<h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><ul>
<li><a href="https://wiki.deepin.org/wiki/%E6%B7%B1%E5%BA%A6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE">深度操作系统项目</a> ：wiki 说明</li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">wiki 深度操作系统</a> ：wikipedia 国际排名说明</li>
<li><a href="https://www.deepin.org/aboutus/">deepin 公司</a> （官网）</li>
<li><a href="https://www.uniontech.com/about">uos 公司</a> （官网）</li>
<li><strong>&amp;&amp;</strong></li>
<li><a href="https://github.com/linuxdeepin">github linuxdeepin</a>： dde 相关的开源项目</li>
</ul>
]]></content>
      <categories>
        <category>学习 - Linux</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>Deepin、DTK 文档参考资料集合</title>
    <url>/posts/e7de542e/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　整理收集 <code>DTK</code> 相关资料。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>



<h2 id="DTK-文档集合"><a href="#DTK-文档集合" class="headerlink" title="DTK 文档集合"></a>DTK 文档集合</h2><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><ul>
<li><p><a href="https://www.chinauos.com/developMode/dtk">DTK 介绍、架构设计、了解更多</a></p>
</li>
<li><p><a href="https://docs.uniontech.com/zh/">DTK开发文档</a></p>
<ul>
<li><a href="https://docs.uniontech.com/zh/content/r_cxG3kBK9iDf9B9THjR">概念：简介，设计理念以及入门指引🎉🎉</a></li>
<li><a href="https://docs.uniontech.com/zh/content/sfeZRXkBK9iDf9B9MYOu">开发：各类开发模块的 API 文档🎉🎉</a></li>
<li><a href="https://docs.uniontech.com/zh/content/t_dbG3kBK9iDf9B963ok">设计：统信 UOS 设计概述 🎉🎉</a></li>
<li><a href="https://docs.uniontech.com/zh/content/Q_edSXkBK9iDf9B9AJd3">代码示例：简单的示例代码展示模块用法</a></li>
</ul>
</li>
<li><p><a href="https://www.zcool.com.cn/work/ZNDgxODMyNjA=.html">统信UOS和deepin操作系统的DTK图形控件库设计 🎉🎉</a></p>
</li>
<li><p><a href="https://linuxdeepin.github.io/dtk/">DTK API 文档</a>：<code>DTK</code> 的 <code>API</code> 接口中文说明，自动同步更新</p>
</li>
<li><p><a href="http://linuxdeepin.github.io/docs">Deepin 社区文档</a>：核心为 <code>DTK</code> 团队的文档积累，社区爱好者的作品展示、技术交流</p>
</li>
<li><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a>：个人积累，参考第五章节，为 <code>DTK</code> 的源码架构一些理解和实战</p>
</li>
<li><p><a href="https://github.com/linuxdeepin/developer-center/wiki">Deepin Wiki</a>： <code>Deepin</code> 在 <code>GitHub</code> 上某些仓库都有写 <code>Wiki</code>。虽零碎，但有惊喜</p>
</li>
<li><p><a href="https://github.com/linuxdeepin/docs/tree/master/Resources/DTK">DTK 相关 PPT</a> ：《DTK 框架分享.pptx》 《DTK 框架介绍、优势对比.pptx》</p>
</li>
</ul>
<br>

<h3 id="交流"><a href="#交流" class="headerlink" title="交流"></a>交流</h3><ul>
<li><a href="https://www.deepin.org/zh/">Deepin 官网</a>：<code>Deepin</code> 的官网</li>
<li><a href="https://bbs.deepin.org/">Deepin 论坛</a>：<code>Deepin</code> 中文与国际论坛，用户使用的交流地</li>
<li><a href="https://distrowatch.com/table.php?distribution=deepin">Distrowatch</a>： <code>Deepin</code> 在 <code>Distrowatch</code> 中的排名和详细介绍（国际排行）</li>
<li><a href="https://t.me/deepin">https://t.me/deepin</a>：Deepin 在 telegram 上的最大群组（英文）</li>
<li><a href="https://t.me/deepin_cn">https://t.me/deepin_cn</a>：Deepin 在 telegram 上的群组（中文）</li>
</ul>
<br>

<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><ul>
<li><a href="https://github.com/linuxdeepin">linuxdeepin</a>： <code>Deepin</code> 在 <code>GitHub</code> 上开源仓库，仓库和内网开发仓库实时同步</li>
<li><a href="https://github.com/linuxdeepin/package-tag/tree/master/packages-tag-version">package-tag</a>： <code>Deepin</code> 每次发布版本的，都会统计在此 [完善中]</li>
<li><a href="https://github.com/linuxdeepin/docs/tree/master/Resources/DTK">DTK Resources</a>：DTK 相关资料，会存放在此，后续会更新</li>
</ul>
<br>

<h3 id="内网交流："><a href="#内网交流：" class="headerlink" title="内网交流："></a>内网交流：</h3><p>具体链接可内网自查。</p>
<ul>
<li>内部博客： <code>UOS/Deepin</code> 全体的技术人员的博客交流地，各种技术大佬分享知识</li>
<li>内部 WiKi：不仅是知识的宝藏库，多来这里搜搜，总会有意想不到的惊喜</li>
</ul>
<br>

]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>DTK</tag>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin 任务栏网速插件推荐 NetSpeed(重构 lfxSpeed)</title>
    <url>/posts/164f4705/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　之前写过一个版本 <a href="https://github.com/xmuli/lfxSpeed">lfxSpeed</a> 的 <code>dde-dock</code> 插件，用来实时现实网速插件；现重构为 <a href="https://github.com/xmuli/NetSpeed">NetSpeed</a> 项目，修复之前的许多缺陷，和添加功能。</p>
<p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/Peek%202021-02-02%2013-28.gif" width="60%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/Peek%202021-02-02%2013-31.gif" width="35%"/ loading="lazy"></p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>



<br>

<h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><p>​		<code>NetSpeed</code> 是一款轻量、快速的实时显示系统资源信息的应用程序。<code>NetSpeed</code>  是 <code>lfxSpeed</code> 的重构版本，属于 <code>dde-dock</code> 的网速插件，也是前者的子项目。</p>
<br>

<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><blockquote>
<p><font size="4" color="#ff5500"><strong>Deepin &#x2F; UOS 下的最佳网速插件推荐</strong> <a href="https://github.com/xmuli/NetSpeed">NetSpeed</a> 。</font></p>
</blockquote>
<p>​		 当我写上这句之初，老脸微微一红；用过其它几款网速插件，发觉都不支持 dde-dock 是垂直模式的状态，不过瑕不掩瑜，也都有各自的精彩之处；在此提供大家多一个选择，适合自己才是最好的。</p>
<br>

<p>​		之前在论坛发帖： <a href="https://bbs.deepin.org/zh/post/206895">祝贺 DDUC 十周年，献礼一份：Dock 网速插件</a>，收获很多交流于快乐。于是将上次写的网速插件 <a href="https://github.com/xmuli/lfxSpeed">lfxSpeed</a> ，彻底重构了一下为 <a href="https://github.com/xmuli/NetSpeed">NetSpeed</a> ，修复许多缺陷，添加很多新功能；</p>
<p><font size="4" color="red"> <strong>本次最重要的就是支持 Dock 在左右两侧的时候，也能够支持显示(实用为主)。</strong></font><img src="https://bbs.deepin.org/assets/image/raccoon/blush.gif" alt="img" loading="lazy"><img src="https://bbs.deepin.org/assets/image/raccoon/blush.gif" alt="img" loading="lazy"><img src="https://bbs.deepin.org/assets/image/raccoon/blush.gif" alt="img" loading="lazy"> ，可算是找到了一个比较好的解决方案。也制作为 <code>deb</code> 安装包格式，可自行双击后下载安装。</p>
<br>

<h3 id="支持功能"><a href="#支持功能" class="headerlink" title="支持功能"></a>支持功能</h3><ul>
<li>高分屏显示</li>
<li>用户自定义配置</li>
<li><font size="3" color="#55aaff">为系统所有用户安装</font></li>
<li>显示的前缀内容和颜色</li>
<li>显示的标签内容和颜色</li>
<li>更改显示字体和字体大小</li>
<li><font size="3" color="#55aaff"><strong>适配 <code>dock</code> 的模式（支持水平和垂直）</strong> </font></li>
<li>自动切换单位（默认智能）</li>
<li>调整网络速率精确度</li>
<li>调整刷新时间间隔</li>
<li>显示额外显示的悬浮信息</li>
<li><font size="3" color="#55aaff"> 左键单击显示的动作（可单击打开 “系统监视器”）</font></li>
<li>配置数据导出（可系统路径 | 用户路径）</li>
<li><code>CPU</code>、内存、的利用率；流量的使用预警</li>
<li>应用的主题样式（浅色和暗色模式）</li>
<li>更改系统所自带的所有风格选择</li>
</ul>
<p>，，，，其它更多功能（写漏了那就是小彩蛋）</p>
<img src="https://storage.deepin.org/thread/202102021433299289_lfxMonitorNet.png" width="100%"/ loading="lazy">

<br>





<h3 id="重构心得"><a href="#重构心得" class="headerlink" title="重构心得"></a>重构心得</h3><p>​		相比于<a href="https://github.com/xmuli/NetSpeed">旧版</a> 的简版网速插件，新版插件多了很多功能，且还有功能已经实现，但是未在界面显示出来（或已经实现大半）；以为重构是一件很容易的事情，毕竟之前核心部分已经有书写过一遍。</p>
<p>​		经过这次重构之后，发现很多不足。但是这些不足都是最初我意料之外的一些因素；比如 Linux 下多用安装；重写 CMake 的语法；打包分发； UI 逻辑和数据之间的传递；预期用户交互功能、和开发者自己想要开发的功能；边写边修正，很多功能都想加，越写越大，越来越复杂，似乎遗忘了最初的插件本身功能，小而简洁；<del>缺乏好看的 UI 设计图（缺设计师，捂脸），最后实现效果和我预期的效果，有差异（忽略此）</del>；大多数是之前以为的一小部分事情，实际去完成它们后，才发现开发只是整个过程中的一小部分（开发竟然是我自己，打包也是）。</p>
<p>​		另外没有真正的跨平台，即使有，也都是每一个平台下的逐个去实现；也遇到以为很容易的功能，实际很复杂和难以简单的跨平台；对于 Qt 有了跟进一步的认识，也有其不足。</p>
<br>

<h3 id="后期计划"><a href="#后期计划" class="headerlink" title="后期计划"></a>后期计划</h3><p>​		后面空闲计划，将 <code>NetSpeed</code> 写成 Linux 下通用的网速悬浮窗；吸取网速插件的经验，对功能的实现，只保留必须的功能；简洁才是初心，功能的堆砌可能并不怎么棒；记得 “二八原则”，那么就只去实现那 “二” 等的功能。然后 <code>NetSpeed</code> 使用 DTK 来写，且去掉一些可能没人使用的功能。沟通协调 <code>dock</code> 提供一些 API 接口，有些地方本该有 Dock 提供插件，此处自行补丁跳过，按道理不应该如此。先等待一下用户体验和建议之类的反馈</p>
<p>​		看在使用过过程中，还有哪些细节没有注意到，若是感觉比较好，会在下一个版本中修正优化。</p>
<br>

<h3 id="功能-amp-效果"><a href="#功能-amp-效果" class="headerlink" title="功能 &amp; 效果"></a>功能 &amp; 效果</h3><ol>
<li>多语言切换，智能单位切换</li>
<li>自定义网速标签 &#x2F; 背景标签内容、颜色、精准度、字体、字体大小、位置互换、是否显示</li>
<li>自带两套浅色 &#x2F; 暗色两套主题、切换程序风格</li>
<li>支持水平和垂直两种模式、窗口置顶</li>
<li>自定义数据导出</li>
<li>欢迎帮助完善</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210316-162021.png" width="100%"/ loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210316-162022.png" width="100%"/ loading="lazy">

<br>

<h3 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h3><p>在重构过程中，也获得很多思路解惑、用户交互的探讨交流，<a href="https://github.com/justforlxz">流年匆忙</a> 、<a href="https://github.com/zccrs">zccrs</a> 、wangpeng，<a href="https://github.com/juteman">juteman</a> 等也有给了很多建议，在此表示感谢。也有朋友们的其它的协助，都在此谢过</p>
<br>

<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>欢迎来 <a href="https://github.com/xmuli/NetSpeed/issues">此处</a> 反馈缺陷、提供建议、参与贡献；或者在论坛帖子 <a href="https://bbs.deepin.org/zh/post/213210">https://bbs.deepin.org/zh/post/213210</a>  下盖楼也行 。</p>
<ul>
<li><p>项目地址：<a href="https://github.com/xmuli/NetSpeed">NetSpeed</a> </p>
</li>
<li><p>安装包下载：<a href="https://github.com/xmuli/NetSpeed/releases">releases</a></p>
</li>
</ul>
<br>

<p>你的 <code>star</code> 和 <code>fork</code> 是对我最大的支持。也欢迎学习这个系列的 <a href="https://xmuli.blog.csdn.net/article/details/QT/DTK"><code>QT/DTK</code></a> 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
        <category>专栏 - 项目实战开发</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>git submodule 基本用法</title>
    <url>/posts/43ae19e5/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　记录几个 <code>git submodule</code> 常用的基本命令。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="抉择"><a href="#抉择" class="headerlink" title="抉择"></a>抉择</h2><p>​	最近在个人项目中引入第三方库，通常会使用到 <code>git submodule</code> 或 <code>git treemodule</code> 命令，各有优略，不存在谁是当前流行的趋势。适合自己使用的，才是最好的。<code>git submodule</code> 的类似 **”链接引用”**，而 <code>git treemodule</code> 则更接近 <strong>“拷贝复制”</strong> 下来使用。对本人而言，更喜欢前者形式。</p>
<br>

<h2 id="git-submodule"><a href="#git-submodule" class="headerlink" title="git submodule"></a>git submodule</h2><h3 id="添加子模块"><a href="#添加子模块" class="headerlink" title="添加子模块"></a>添加子模块</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 引入第三方库到本地指定路径</span>
<span class="token function">git</span> submodule <span class="token function">add</span> <span class="token punctuation">[</span>-b master<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote_repo<span class="token punctuation">]</span> <span class="token punctuation">[</span>dest_dir<span class="token punctuation">]</span>
eg:
<span class="token function">git</span> submodule <span class="token function">add</span> https://github.com/gabime/spdlog.git ./3rdparty/spdlog
<span class="token function">git</span> submodule <span class="token function">add</span> https://github.com/Skycoder42/QHotkey.git ./3rdparty/QHotkey<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="clone-repositories"><a href="#clone-repositories" class="headerlink" title="clone repositories"></a>clone repositories</h3><p>两种方式均会 <strong>会自动初始化并更新每一个子模块仓库代码</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 方式一</span>
<span class="token function">git</span> clone <span class="token parameter variable">--recursive</span> https://github.com/XMuli/Flipped.git   // 初始化并更新所有子模块

<span class="token comment"># 方式二</span>
<span class="token function">git</span> clone https://github.com/XMuli/Flipped.git
<span class="token function">git</span> submodule init
<span class="token function">git</span> submodule update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="删除子模块"><a href="#删除子模块" class="headerlink" title="删除子模块"></a>删除子模块</h3><p>有时子模块的项目维护地址发生了变化，或者需要替换子模块，就需要删除原有的子模块。</p>
<p>删除子模块较复杂，步骤如下：</p>
<ol>
<li><code>rm -rf</code> 子模块目录 删除子模块目录及源码</li>
<li><code>vi .gitmodules</code> 删除项目目录下 <code>.gitmodules</code> 文件中子模块相关条目</li>
<li><code>vi .git/config</code> 删除配置项中子模块相关条目</li>
<li><code>rm .git/module/*</code> 删除模块下的子模块目录，每个子模块对应一个目录，注意只删除对应的子模块目录即可</li>
</ol>
<p>执行完成后，再执行添加子模块命令即可，如果仍然报错，执行如下：</p>
<p><code>git rm --cached 子模块名称</code></p>
]]></content>
      <categories>
        <category>学习 - Git</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo 开启双线程解析部署到 GitHub + Aliyun</title>
    <url>/posts/e5b4e435/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  本站 <a href="https://xmuli.tech/">xmuli.tech</a> 迁移一份到国内服务器后，分享一下我当前的博客运行设计方案实行，以及我如何利用 <code>GitHub</code> 的 <code>Action</code> 设置脚本，进行双解析：<code>阿里云服务器</code> + <code>GitHub Pages</code>。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210306.png" width="90%"/ loading="lazy">



<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="部署原理"><a href="#部署原理" class="headerlink" title="部署原理"></a>部署原理</h3><p>​		当前博客的部署原理如上图，解决了之前在国内访问略慢的遗憾。现在这套方案，非常的满足我的个人所需。</p>
<p><strong>图解注释：</strong><br>本电脑 M：主力编程机器，也可以是任意一台设备<br>服务器 A：GitHub 仓库 xmuliMark，存放源文件（*.md），只使用 master 分支<br>服务器 B：GitHub 仓库 xmuli.github.io，存放解析后网页（*. html），使用 master 分支 (非默认分支)<br>服务器 C：国内阿里云的轻量级服务器，存放解析后网页（*. html），使用 master 分支</p>
<p><strong>优点如下：</strong></p>
<ul>
<li><font color=#D0087E size=4 face="幼圆">任意电脑写 <code>Markdown</code> 文章，然后推送到 A 仓库即可（不用配置关心环境）</font></li>
<li>不需本地解析，都是远程服务器解析，在部署到另外两台远程服务器</li>
<li>国内 IP 访问，解析到阿里云服务器</li>
<li>国外 IP 访问，解析到 <code>GitHub</code> 的服务器</li>
<li>仅一份源文件，两份部署后的解析文件，各自部署</li>
<li>源文件仅自己可访问，提高安全（将源文件与解析后的网页文件分开）</li>
<li>全程自己搭建，学习动手部署，甚是快乐</li>
<li>费用极低（阿里云服务器 + 域名费用）</li>
<li>自己的服务器又部署一个服务，感觉惬意</li>
</ul>
<br>

<h3 id="如何搭建"><a href="#如何搭建" class="headerlink" title="如何搭建"></a>如何搭建</h3><p><strong>关于如何部署，详细可以参考这两篇</strong></p>
<ul>
<li><a href="https://ifmet.cn/posts/5490ca44/">阿里云服务器部署 Hexo 博客</a> </li>
<li><a href="https://ifmet.cn/posts/70a6b02f/">阿里云服务器 nginx 上部署 SSL 证书实现 https 访问</a></li>
</ul>
<p>再之前的，可以参考 <a href="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-hexo/">此系列</a> ，记录着我搭建博客的一些记录</p>
<br>

<h3 id="配置-GitHub-Action："><a href="#配置-GitHub-Action：" class="headerlink" title="配置 GitHub Action："></a>配置 GitHub Action：</h3><p>​		部署中的一个痛点：A 仓库存放 markdown 文件，然后可以利用 GitHub 的 Action 服务，自动解析为一份 html 网页文件，但是如何使用一个 .yml 部署到 阿里云服务器 + GitHub Pages 呢？</p>
<p>​		附上我比较优雅的解决方案，其中 A 仓库的 .yml 如下</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 工作流程的名称</span>
<span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo Deploy GitHub Page + Aliyun

<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">push</span><span class="token punctuation">:</span>
    <span class="token key atrule">branches</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> master

<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">build</span><span class="token punctuation">:</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span><span class="token number">20.04</span>
    
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout
      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2.3.4
      
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Node.js environment
      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v2.1.5
      <span class="token key atrule">with</span><span class="token punctuation">:</span> 
        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"14.x"</span>
    
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo deploy
      <span class="token key atrule">env</span><span class="token punctuation">:</span>
        <span class="token key atrule">HEXO_DEPLOY_KEY</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.HEXO_DEPLOY_KEY <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
        
      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
        mkdir -p ~/.ssh/
        echo "$HEXO_DEPLOY_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        ssh-keyscan ifmet.cn >> ~/.ssh/known_hosts
        git config --global user.name "xmuli"
        git config --global user.email "xmulitech@gmail.com"
        npm i -g hexo-cli
        npm i
        hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>​		其中 <code>HEXO_DEPLOY_KEY</code> 是本地机器秘钥，也是 A 仓库(书写 *.md 文章) 中的 <strong>“settings-Secrets and variables”</strong> ，而 C 服务器有着对应的公钥，其值为本地机器的 git 私有秘钥( <code>cat ~/.ssh/id_rsa</code> 所输出的值)；且设置了免密登录，而其中末尾的 run: | 中则下面两行是关键，同时部署两个服务器的重点</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">ssh<span class="token punctuation">-</span>keyscan github.com <span class="token punctuation">></span><span class="token punctuation">></span> ~/.ssh/known_hosts
ssh<span class="token punctuation">-</span>keyscan ifmet.cn <span class="token punctuation">></span><span class="token punctuation">></span> ~/.ssh/known_hosts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br>]]></content>
      <categories>
        <category>学习 - Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo 部署 valine 评论的 leancloud 设置</title>
    <url>/posts/f8ca040f/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　很久之前，就是使用的 <code>valine</code> 的评论系统，实际是在 <code>leancloud</code> 平台进行部署的。也算是之前文章今发。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>一开始建议选择 <strong>国际版</strong>，后面绑定域名可以无需备案。点击 <code>存储</code> - <code>创建 Class</code>；名称为 Counter 后点击确认。</p>
<p>在 <code>设置</code> - <code>应用 Keys</code> 中记录对应的 <strong>AppID</strong> 、<strong>AppKey</strong>  即可；然后填写进 yun 主题的 .yml 文件 （ 实际是 <code>hexo/source/_data/yun.yml</code>，由 yun 主题约定的） ； 参见 <a href="https://hexo-theme-yun.vercel.app/guide/third-party-support.html#valine">yun - valine</a> 、<a href="https://valine.js.org/quickstart.html#%E8%8E%B7%E5%8F%96APP-ID-%E5%92%8C-APP-Key">valine.js.org</a>  配置说明</p>
<br>

<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>点击 <code>云引擎</code> -  <code>-WEB</code> - <code>部署</code> - <code>部署项目</code>  - <code>-o- Git部署</code>，点击 <code>配置 Git</code> 后，输入后，点击刷新。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://github.com/zhaojun1998/Valine-Admin.git   <span class="token comment"># 新版，推荐，邮件通知很棒</span>

设置教程：https://github.com/zhaojun1998/Valine-Admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<p>PS: <del><code>https://github.com/DesertsP/Valine-Admin.git</code>  # 旧版，v1.4.0 后没有自带邮件功能，不推荐</del></p>
<p>再次进入到部署，如下图点击 <code>部署</code>， 略加等待，即可部署成功。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210306150154.png" width="80%"/ loading="lazy">

<br>

<h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>点击 <code>设置</code> - <code>域名绑定</code> - <code>绑定新域名</code>，选择如下，随后按照提示，去阿里云配置 DNS 解析。</p>
<p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210306150753.png" width="45%"/ loading="lazy">  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210306150831.png" width="45%"/ loading="lazy"></p>
<p>随后等待即可成功。如果选取 自动 SSL 证书管理，第一次显示失败（我就遇到了），那么只需要再重新尝试配置一遍 DNS 解析，它也会成功。</p>
<br>

<h3 id="自定义环境变量"><a href="#自定义环境变量" class="headerlink" title="自定义环境变量"></a>自定义环境变量</h3><p>点击 <code>云引擎</code> -  <code>-WEB</code> - <code>设置</code> - <strong>添加</strong>， 添加一些如下变量， 可以用来自定义一些邮件通知、通知模板、消息回复等个性化的设置。 详细参考 <a href="https://deserts.io/valine-admin-document/">Valine Admin 配置手册</a> </p>
<table>
<thead>
<tr>
<th>变量</th>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>SITE_NAME</td>
<td>Deserts</td>
<td>[必填]博客名称</td>
</tr>
<tr>
<td>SITE_URL</td>
<td><a href="https://panjunwen.com/">https://panjunwen.com</a></td>
<td>[必填]首页地址</td>
</tr>
<tr>
<td><strong>SMTP_SERVICE</strong></td>
<td>QQ</td>
<td>[新版支持]邮件服务提供商，支持 QQ、163、126、Gmail 以及 <a href="https://nodemailer.com/smtp/well-known/#supported-services">更多</a></td>
</tr>
<tr>
<td>SMTP_USER</td>
<td><a href="mailto:xxxxxx@qq.com">xxxxxx@qq.com</a></td>
<td>[必填]SMTP登录用户</td>
</tr>
<tr>
<td>SMTP_PASS</td>
<td>ccxxxxxxxxch</td>
<td>[必填]SMTP登录密码（QQ邮箱需要获取独立密码）</td>
</tr>
<tr>
<td>SENDER_NAME</td>
<td>Deserts</td>
<td>[必填]发件人</td>
</tr>
<tr>
<td>SENDER_EMAIL</td>
<td><a href="mailto:xxxxxx@qq.com">xxxxxx@qq.com</a></td>
<td>[必填]发件邮箱</td>
</tr>
<tr>
<td>ADMIN_URL</td>
<td><a href="https://xxx.leanapp.cn/">https://xxx.leanapp.cn/</a></td>
<td>[建议]Web主机二级域名（云引擎域名），用于自动唤醒</td>
</tr>
<tr>
<td>BLOGGER_EMAIL</td>
<td><a href="mailto:xxxxx@gmail.com">xxxxx@gmail.com</a></td>
<td>[可选]博主通知收件地址，默认使用SENDER_EMAIL</td>
</tr>
<tr>
<td>AKISMET_KEY</td>
<td>xxxxxxxx</td>
<td>[可选]Akismet Key 用于垃圾评论检测，设为MANUAL_REVIEW开启人工审核，留空不使用反垃圾</td>
</tr>
</tbody></table>
<p><font color=#D0087E size=4 face="幼圆">然后点击重启部署，即可生效。</font> </p>
<br>

<h3 id="评论管理"><a href="#评论管理" class="headerlink" title="评论管理"></a>评论管理</h3><p>看到运行中，输入浏览器输入 <code>https://云引擎域名/sign-up</code> 对应我的就是 <code>https://valine.ifmet.cn/sign-up </code>，第一次登录输入是让注册管理员登录信息</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210306154824.png" width="50%"/ loading="lazy">

<p> 输入完成之后，它会自动跳转到  <code>https://云引擎域名</code> 网站让登录，输入用户名，刚才的密码，即可登录成功。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210306154958.png" width="50%"/ loading="lazy">

<br>

<h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p>​		免费的 leancloud 是会自动休眠的，这里设置一下。注意国际版使用UTC-0时间，注意与国内时间对应。我的配置如下：</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210306160110.png" width="90%"/ loading="lazy">

<br>

<h3 id="邮件通知模板"><a href="#邮件通知模板" class="headerlink" title="邮件通知模板"></a>邮件通知模板</h3><p>在 云引擎里面，是可以修改自定义的参数的，从而修改邮件模板的样式。</p>
]]></content>
      <categories>
        <category>学习 - Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>Key is invalid. You must supply a key in OpenSSH public key format</title>
    <url>/posts/f879ecd2/</url>
    <content><![CDATA[<p><strong>简  述：</strong> 搭建 <code>Hexo</code> + <code>GitHub</code> 时，添加 <code>ssh</code> 的私钥，总是报错如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Key is invalid<span class="token punctuation">.</span> You must supply a key in OpenSSH <span class="token keyword">public</span> key format<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p><strong>原因：</strong></p>
<ul>
<li>从  <code>id_rsa</code> 、<code>id_rsa.pub</code> 某些场景下<sup>[1]</sup>，直接打开复制，会格式错乱</li>
<li>确认此处是粘贴 <strong>公钥</strong> <code>id_rsa.pub</code> 、还是 <strong>私钥</strong> <code>id_rsa</code>；且是复制文本所有内容</li>
<li>GitHub 账号下右上角的、还是『博客』仓库下的 <code>Setting</code></li>
<li>网页粘贴错了位置，是 <code>Secrets</code>、还是 <code>Deploy keys</code>；前者为部署 Hexo Blog 常见，后者 push 常见</li>
</ul>
<br>

<p><strong>解决：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clip <span class="token operator">&lt;</span> ~/.ssh/id_rsa.pub      <span class="token comment"># 直接拷贝到剪切板</span>
<span class="token function">cat</span> ~/.ssh/id_rsa.pub         <span class="token comment"># 输出到终端后选中复制、后粘贴到网页</span>
使用 notepad、notepad++ 打开    <span class="token comment"># 后复制粘贴</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br>

<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/20220901015843.png" width="100%"/ loading="lazy">

<br>

<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><p><sup>[1]</sup>: Mac 下直接 <code>vim</code> 复制；Linux 直接 GUI 工具打开复制，均会格式改变</p>
<br>

<p>Mac 技巧</p>
<ul>
<li><code>Command+Shift+.</code> 可以显示隐藏文件、文件夹，再按一次，恢复隐藏；</li>
<li>finder下使用<code>Command+Shift+G</code> 可以前往任何文件夹，包括隐藏文件夹。</li>
</ul>
]]></content>
      <categories>
        <category>学习 - Git</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>LPSTR/LPCSTR/LPTSTR/HWND/HANDLE/HMODULE/HINSTANCE 等含义和区别</title>
    <url>/posts/5020c5e7/</url>
    <content><![CDATA[<p><strong>简  述:</strong>  <code>Windows</code> 编程中常见的一些类型意义、区别和讲解定义</p>
<ol>
<li><strong>PVOID 和 LPVOID</strong></li>
<li><strong>LPSTR &#x2F; LPCSTR &#x2F; LPTSTR &#x2F; LPCTSTR &#x2F; LPWSTR &#x2F; LPCWSTR</strong></li>
<li><strong>HWND &#x2F; HANDLE &#x2F; HMODULE &#x2F; HINSTANCE</strong></li>
</ol>
<br>

<h3 id="辨别区分标志"><a href="#辨别区分标志" class="headerlink" title="辨别区分标志"></a><font color=#FF0000>辨别区分标志</font></h3><ul>
<li>L  –&gt; long；WIN32 下 long 和 int 长度一样。 <strong>故 L 和 LP 无区别</strong>。</li>
<li>C  –&gt; const</li>
<li>T  –&gt; 通用版本，依据 UNICODE 时候被定义，确定使用 A 还是 W 版本的函数、或字符集。</li>
<li>STR  –&gt; string 字符串</li>
<li>PTR  –&gt; ptr  指针</li>
</ul>
<br>

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="Windows-Data-Types"><a href="#Windows-Data-Types" class="headerlink" title="Windows Data Types"></a>Windows Data Types</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span>PVOID<span class="token punctuation">;</span>       								<span class="token comment">// PVOID	  - void *</span>
<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span>LPVOID<span class="token punctuation">;</span>       							<span class="token comment">// LPVOID     - void *</span>

<span class="token keyword">typedef</span> CHAR <span class="token operator">*</span>LPSTR<span class="token punctuation">;</span>       								<span class="token comment">// LPSTR      - ANSI, 每个字符占 1 字节(8 bit)</span>
<span class="token keyword">typedef</span> __nullterminated CONST CHAR <span class="token operator">*</span>LPCSTR<span class="token punctuation">;</span>        	<span class="token comment">// LPCSTR     - ANSI,  每个字符占 1 字节</span>
<span class="token keyword">typedef</span> WCHAR <span class="token operator">*</span>LPWSTR<span class="token punctuation">;</span>  								<span class="token comment">// LPWSTR     - UNICODE, 每个字符占 2 字节(16 bit)</span>
<span class="token keyword">typedef</span> CONST WCHAR <span class="token operator">*</span>LPCWSTR<span class="token punctuation">;</span>                       	<span class="token comment">// LPCWSTR    - UNICODE,  每个字符占 2 字节</span>
<span class="token keyword">typedef</span> LPWSTR LPTSTR<span class="token punctuation">;</span>   <span class="token punctuation">[</span>OR<span class="token punctuation">]</span> <span class="token keyword">typedef</span> LPSTR LPTSTR<span class="token punctuation">;</span>   	<span class="token comment">// LPTSTR     - ANSI/UNICODE, 每个字符占 1 字节或 2 字节</span>
<span class="token keyword">typedef</span> LPCWSTR LPCTSTR<span class="token punctuation">;</span> <span class="token punctuation">[</span>OR<span class="token punctuation">]</span> <span class="token keyword">typedef</span> LPCSTR LPCTSTR<span class="token punctuation">;</span>   <span class="token comment">// LPCTSTR    - ANSI/UNICODE, 每个字符占 1 字节或 2 字节</span>

<span class="token keyword">typedef</span> PVOID HANDLE<span class="token punctuation">;</span>                    				<span class="token comment">// HANDLE     - void *</span>
<span class="token keyword">typedef</span> HANDLE HWND<span class="token punctuation">;</span>       								<span class="token comment">// HWND       - void *</span>

<span class="token keyword">typedef</span> HINSTANCE HMODULE<span class="token punctuation">;</span> 								<span class="token comment">// HMODULE    - void *   此两个互相等价， 于 &lt;wtypes.h></span>
<span class="token keyword">typedef</span> HANDLE HINSTANCE<span class="token punctuation">;</span>  								<span class="token comment">// HINSTANCE  - void *</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<table>
<thead>
<tr>
<th>Data type</th>
<th>Description</th>
<th>declared</th>
</tr>
</thead>
<tbody><tr>
<td>PVOID</td>
<td>A pointer to any type.</td>
<td>WinNT.h</td>
</tr>
<tr>
<td>LPVOID</td>
<td>A pointer to any type.</td>
<td>WinDef.h</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>LPSTR</td>
<td>A pointer to a null-terminated string of 8-bit Windows (ANSI) characters. For more information, see <em><strong>Character Sets Used By Fonts</strong></em></td>
<td>WinNT.h</td>
</tr>
<tr>
<td>LPCSTR</td>
<td>A pointer to a constant null-terminated string of 8-bit Windows (ANSI) characters. For more information, see <em><strong>Character Sets Used By Fonts</strong></em></td>
<td>WinNT.h</td>
</tr>
<tr>
<td>LPWSTR</td>
<td>A pointer to a null-terminated string of 16-bit Unicode characters. For more information, see <em><strong>Character Sets Used By Fonts</strong></em></td>
<td>WinNT.h</td>
</tr>
<tr>
<td>LPCWSTR</td>
<td>A pointer to a constant null-terminated string of 16-bit Unicode characters. For more information, see <em><strong>Character Sets Used By Fonts</strong></em></td>
<td>WinNT.h</td>
</tr>
<tr>
<td>LPTSTR</td>
<td>An <a href="https://docs.microsoft.com/en-us/windows/win32/winprog/windows-data-types#lpwstr"><strong>LPWSTR</strong></a> if <strong>UNICODE</strong> is defined, an <a href="https://docs.microsoft.com/en-us/windows/win32/winprog/windows-data-types#lpstr"><strong>LPSTR</strong></a> otherwise. For more information, see <em><strong>Windows Data Types for Strings</strong></em></td>
<td>WinNT.h</td>
</tr>
<tr>
<td>LPCTSTR</td>
<td>An <a href="https://docs.microsoft.com/en-us/windows/win32/winprog/windows-data-types#lpcwstr"><strong>LPCWSTR</strong></a> if <strong>UNICODE</strong> is defined, an <a href="https://docs.microsoft.com/en-us/windows/win32/winprog/windows-data-types#lpcstr"><strong>LPCSTR</strong></a> otherwise. For more information, see <em><strong>Windows Data Types for Strings</strong></em></td>
<td>WinNT.h</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>HWND</td>
<td>A handle to a window.</td>
<td>WinDef.h</td>
</tr>
<tr>
<td>HANDLE</td>
<td>A handle to an object.</td>
<td>WinNT.h</td>
</tr>
<tr>
<td>HMODULE</td>
<td>A handle to a module. The is the base address of the module in memory. <strong>HMODULE</strong> and <strong>HINSTANCE</strong> are the same in current versions of Windows, but represented different things in 16-bit Windows.</td>
<td>WinDef.h</td>
</tr>
<tr>
<td>HINSTANCE</td>
<td>A handle to an instance. This is the base address of the module in memory.</td>
<td>WinDef.h</td>
</tr>
</tbody></table>
<br>

<h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><ul>
<li><p><strong>PVOID 和 LPVOID</strong> </p>
<ul>
<li>都是 <code>void *</code>， 可指向一切，不解释。</li>
</ul>
</li>
<li><p><strong>LPSTR &#x2F; LPCSTR &#x2F; LPTSTR &#x2F; LPCTSTR &#x2F; LPWSTR &#x2F; LPCWSTR</strong></p>
<ol>
<li>LPSTR：     32bit 指针，指向一个字符串，每个字符占 1 字节。 相当于　char *　　</li>
<li>LPCSTR:     32-bit 指针，指向一个常字符串，每个字符占 1 字节。　相当于　const char *</li>
<li>LPWSTR:    32-bit 指针，指向一个 unicode 字符串的指针，每个字符占 2 字节。　</li>
<li>LPCWSTR:  32-bit 指针，指向一个 unicode 字符串常量的指针，每个字符占 2 字节。</li>
<li>LPTSTR:     32-bit 指针，指向一个字符串，    每字符可能占 1 字节或 2 字节，取决于 Unicode 是否定义　　</li>
<li>LPCTSTR:   32-bit 指针，指向一个常字符串，每字符可能占 1 字节或 2 字节，取决于 Unicode 是否定义</li>
</ol>
</li>
<li><p><strong>HWND &#x2F; HANDLE &#x2F; HMODULE &#x2F; HINSTANCE</strong></p>
<p>都是 <code>void *</code> 类型，没有区别，只是其使用时候代表的含义用作区分</p>
<ol>
<li>HWND：窗口句柄，如线程相关的</li>
<li>HANDLE ：系统内核对象，如文件句柄，线程句柄，进程句柄</li>
<li>HMODULE ：模块基地址，如 exe、dll 被载入内存时刻的地址</li>
<li>HINSTANCE：同 HMODULE（仅在 16 位 Windows 上有所不同）</li>
</ol>
</li>
</ul>
<br>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="https://docs.microsoft.com/en-us/windows/win32/winprog/windows-data-types">docs.microsoft.com：windows-data-types</a></li>
<li><a href="https://blog.csdn.net/wangshubo1989/article/details/53203718">Windows客户端开发–必须清楚HWND、HANDLE、HMODULE、HINSTANCE的区别</a></li>
<li><a href="https://blog.csdn.net/u011392772/article/details/52510524">LPSTR、LPCSTR、LPTSTR和LPCTSTR的意义及区别</a></li>
<li><a href="https://blog.csdn.net/weixin_30797199/article/details/95368790">引用 LPSTR、LPCSTR、LPTSTR、LPCTSTR、LPWSTR及LPCWSTR的意义及区别</a></li>
</ul>
]]></content>
      <categories>
        <category>学习 - C/C++ 序二 经验</category>
        <category>学习 - Windows</category>
      </categories>
      <tags>
        <tag>Windows 编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Lambda 表达式详解</title>
    <url>/posts/9ece64cc/</url>
    <content><![CDATA[<p><strong>简  述:</strong>  详解  <code>Lambda</code> 表达式的基础使用，原理，和使用场景。</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202203241724748.png" width="30%"/ loading="lazy">



<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><code>[captures](params) mutable exception -&gt; ret &#123;body&#125;</code></p>
<p>• 捕获表列，捕获当前作用域内的变量，用逗号分隔</p>
<p>• 参数列表</p>
<p>• 可选限定符，可选，mutable允许在函数体内改变按值捕获的变量</p>
<p>• 异常说明符，可选，noexcept</p>
<p>• 返回值类型，可选，多数情况可由编译器自动推导</p>
<p>• 函数体</p>
<br>

<h3 id="捕获列表"><a href="#捕获列表" class="headerlink" title="捕获列表"></a>捕获列表</h3><ul>
<li><p>[var] 按值捕获，将 var 按值复制到  Lambda  作用域，默认不能修改</p>
</li>
<li><p>[&amp;var] 按引用捕获，将 var 的引用捕获到  Lambda  作用域</p>
</li>
<li><p>[&#x3D;] 捕获所在作用域内全部变量的值</p>
</li>
<li><p>[&amp;] 捕获所在作用域内全部变量的引用</p>
</li>
<li><p>[this] 在类的成员函数中，捕获当前的 this 指针</p>
</li>
</ul>
<hr>
<h3 id="初始化捕获"><a href="#初始化捕获" class="headerlink" title="初始化捕获"></a>初始化捕获</h3><p>初始化捕获：C++14 支持，在捕获变量时，可以</p>
<p>• 指定闭包类中数据成员的名字</p>
<p>• 直接捕获表达式的结果</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202203241729927.png" width="30%"/ loading="lazy">

<hr>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>• Lambda 表达式：</p>
<p>​	右值表达式，是源码的一部分，指示编译器生成对应的闭包类和闭包对象</p>
<p>• 闭包类(clousure class)：</p>
<p>​	由编译器根据 Lambda 表达式在编译时生成，每个 Lambda 表达式都有对应的唯一闭包类</p>
<p>• 闭包(clousure)：</p>
<p>​	在运行时创建的闭包类实例，对 Lambda 表达式的调用也就是调用这个实例的成员函数</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202203241756896.svg" width="80%"/ loading="lazy">

<br>

<p>分为 <code>闭包类 – 捕获变量</code> 和 <code>闭包类 – 不捕获变量</code> 两种；</p>
<hr>
<h3 id="Lambda-表达式的使用场景"><a href="#Lambda-表达式的使用场景" class="headerlink" title="Lambda 表达式的使用场景"></a>Lambda 表达式的使用场景</h3><p>• 创建变量存储 Lambda 表达式</p>
<p>•  Lambda 表达式作为函数参数</p>
<p>•  Lambda 表达式作为类数据成员</p>
<p>• 使用容器存储 Lambda 表达式</p>
<br>

<h4 id="使用-auto-和-decltype-定义-Lambda-表达式变量"><a href="#使用-auto-和-decltype-定义-Lambda-表达式变量" class="headerlink" title="使用 auto 和 decltype 定义 Lambda 表达式变量"></a>使用 auto 和 decltype 定义 Lambda 表达式变量</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//右值初始化</span>
<span class="token keyword">auto</span> f2 <span class="token operator">=</span> f<span class="token punctuation">;</span> <span class="token comment">//拷贝</span>
<span class="token keyword">decltype</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> f3 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//移动</span>
<span class="token keyword">auto</span><span class="token operator">&amp;&amp;</span> f4 <span class="token operator">=</span> <span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//右值引用绑定右值</span>
<span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> f5 <span class="token operator">=</span> f4<span class="token punctuation">;</span> <span class="token comment">//常量左值绑定</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="使用模板将-Lambda-表达式类型参数化"><a href="#使用模板将-Lambda-表达式类型参数化" class="headerlink" title="使用模板将 Lambda 表达式类型参数化"></a>使用模板将 Lambda 表达式类型参数化</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">F</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">fn1</span><span class="token punctuation">(</span>F fn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">F</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">fn2</span><span class="token punctuation">(</span>F<span class="token operator">&amp;&amp;</span> fn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">fn</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>F<span class="token operator">></span></span></span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="std-function-函数对象包装器"><a href="#std-function-函数对象包装器" class="headerlink" title="std::function 函数对象包装器"></a>std::function 函数对象包装器</h4><ul>
<li><p>可以包装任意类型函数对象</p>
</li>
<li><p>函数签名相同的对象可以存储为同一类型</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token punctuation">)</span><span class="token operator">></span> fn<span class="token punctuation">;</span>
fn <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>fmaxf<span class="token punctuation">;</span> <span class="token comment">//普通函数</span>
fn <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">multiplies</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//仿函数</span>
fn <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">*</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// Lambda </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<br>

<h4 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h4><ul>
<li><p>动态分配内存</p>
</li>
<li><p>虚函数调用</p>
</li>
</ul>
<br>

<h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><ul>
<li><p>悬挂引用</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> <span class="token function">make_lambda</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> v <span class="token operator">+</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">auto</span> l <span class="token operator">=</span> <span class="token function">make_lambda</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">l</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>悬挂指针</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">Object</span><span class="token double-colon punctuation">::</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">thread</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>
        <span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> m_value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<p>​	</p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序二 经验</category>
      </categories>
      <tags>
        <tag>C++11/17/20</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux or Mac 安装 gitbook 3.2.3 失败解决方案</title>
    <url>/posts/d7327716/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　欲用 <code>gitbook</code> 来开启人生第一本书，结果安装、使用时候卡住了。。。这里记录一下；没想新的版本里面有坑。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在 <code>Linux</code> 和 <code>Mac</code> 版本上，用  <code>GitBook 3.2.3</code> 版本， 只能对应使用 <code>Node = v10.23.0</code>  LTS 版本；使用 v12 、V14 版本会失败。 我在 <code>UOS20</code> 和 <code>Mac 10.14.6</code> 上面都逐一尝试过了。</p>
<br>

<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>依次按照如下顺序安装：</p>
<ol>
<li>nvm ：用来安装、管理切换 nodejs 的版本</li>
<li>nodejs：运行所需要的环境</li>
<li>npm: 用来安装 gitbook-cli（自动安装最佳 gitbook 版本）</li>
<li>cnpm: 换源，使用 cnpm 替代 npm。</li>
<li>使用 gitbook 命令，预览和发布到 gitbook.com &#x2F; github page</li>
</ol>
<p>在 Linux 和 Mac 上做了如下尝试的。</p>
<br>

<h2 id="Linux-安装-gitbook"><a href="#Linux-安装-gitbook" class="headerlink" title="Linux 安装 gitbook"></a>Linux 安装 gitbook</h2><h3 id="Node-v14-15-1"><a href="#Node-v14-15-1" class="headerlink" title="Node  v14.15.1"></a>Node  v14.15.1</h3><p>执行 <code>gitbook init</code> 会报错如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">☁  book  gitbook init
Installing GitBook <span class="token number">3.2</span>.3
/home/xmuli/.config/nvm/versions/node/v14.15.1/lib/node_modules/gitbook-cli/node_modules/_npm@5.1.0@npm/node_modules/graceful-fs/polyfills.js:287
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span> cb.apply<span class="token punctuation">(</span>this, arguments<span class="token punctuation">)</span>
                 ^

TypeError: cb.apply is not a <span class="token keyword">function</span>
    at /home/xmuli/.config/nvm/versions/node/v14.15.1/lib/node_modules/gitbook-cli/node_modules/_npm@5.1.0@npm/node_modules/graceful-fs/polyfills.js:287:18
    at FSReqCallback.oncomplete <span class="token punctuation">(</span>fs.js:184:5<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="Node-x3D-v12-20-0"><a href="#Node-x3D-v12-20-0" class="headerlink" title="Node &#x3D; v12.20.0"></a>Node &#x3D; v12.20.0</h3><p>执行 <code>gitbook init</code> 或者 <code>gitbook serve</code> 中一步会报错如同 <code>Node v14.15.1</code> 。</p>
<br>

<h3 id="Node-x3D-v10-23"><a href="#Node-x3D-v10-23" class="headerlink" title="Node &#x3D; v10.23"></a>Node &#x3D; v10.23</h3><p>执行 <code>gitbook init</code> 成功，执行 <code>gitbook serve</code> 成功，可以使用；</p>
<p>虽然会卡很久（此时已经替换了 npm为淘宝源，采用的 cnpm 安装 gitbook），但是最后会成功。</p>
<br>

<h2 id="Mac-安装-gitbook-尝试-node-版本"><a href="#Mac-安装-gitbook-尝试-node-版本" class="headerlink" title="Mac 安装 gitbook (尝试 node 版本)"></a>Mac 安装 gitbook (尝试 node 版本)</h2><p>如下都是安装 <code>gitbook 3.2.3</code> 版本尝试执行   <code>gitbook init</code>  或 <code>git serve</code> 看是否会报错；</p>
<h3 id="Node-v14-15-1-1"><a href="#Node-v14-15-1-1" class="headerlink" title="Node v14.15.1"></a>Node v14.15.1</h3><p>执行 <code>gitbook init</code> 会报错如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">TypeError <span class="token punctuation">[</span>ERR_INVALID_ARG_TYPE<span class="token punctuation">]</span>: The <span class="token string">"data"</span> argument must be of <span class="token builtin class-name">type</span> string or an instance of Buffer, TypedArray, or DataView. Received an instance of Promise<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>

<h3 id="Node-v12-20-0"><a href="#Node-v12-20-0" class="headerlink" title="Node v12.20.0"></a>Node v12.20.0</h3><p>执行 <code>gitbook init</code> 成功，执行 <code>gitbook serve</code> 会报错如下；</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Live reload server started on port: <span class="token number">35729</span>
Press CTRL+C to quit <span class="token punctuation">..</span>.

/Users/xmuli/.nvm/versions/node/v12.20.0/lib/node_modules/gitbook-cli/node_modules/_npm@5.1.0@npm/node_modules/graceful-fs/polyfills.js:287
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span> cb.apply<span class="token punctuation">(</span>this, arguments<span class="token punctuation">)</span>
                 ^

TypeError: cb.apply is not a <span class="token keyword">function</span>
    at /Users/xmuli/.nvm/versions/node/v12.20.0/lib/node_modules/gitbook-cli/node_modules/_npm@5.1.0@npm/node_modules/graceful-fs/polyfills.js:287:18
    at FSReqCallback.oncomplete <span class="token punctuation">(</span>fs.js:169:5<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="Node-v10-23-0"><a href="#Node-v10-23-0" class="headerlink" title="Node v10.23.0"></a>Node v10.23.0</h3><p>执行 <code>gitbook init</code> 成功，执行 <code>gitbook serve</code> 成功，可以使用；</p>
<br>

<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="Gitbook-serve-报错"><a href="#Gitbook-serve-报错" class="headerlink" title="Gitbook serve 报错"></a>Gitbook serve 报错</h3><p>后来在 Linux 中 使用 <code>gitbook 3.2.3</code>  + <code>nodejs=v10.23.0</code> 成功；当执行 <code>gitbook serve</code> 时候，报错如下（但是在 Mac 中却没有此问题）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: ENOENT: no such <span class="token function">file</span> or directory, <span class="token function">stat</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p><strong>解决方案</strong></p>
<p>这是 <code>gitbook 3.2.3</code> 的一个 bug；找到 <code>~\.gitbook\versions\3.2.3\lib\output\website\copyPluginAssets.js</code> 路径，</p>
<p>将所有的 <code>confirm :true</code> 都替换为 <code>confirm :false</code>；成功</p>
<br>

<h3 id="尝试降低-x2F-升级-gitbook"><a href="#尝试降低-x2F-升级-gitbook" class="headerlink" title="尝试降低&#x2F;升级 gitbook"></a>尝试降低&#x2F;升级 gitbook</h3><p>想着坚持使用 <code>Node v14.15.1</code> 版本； 更改为尝试 使用低版本的 gitbook，也试了高版本的 预览版本，但是执行 <code>gitbook fetch x.x.x</code> 时候会失败。此方式放弃。</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 中用 dh_make 将 Qt + CMake 项目打包为 deb 文件</title>
    <url>/posts/607854c8/</url>
    <content><![CDATA[<p><strong>简  述:</strong> 在 <code>Ubuntu 20.04</code> 中，将基于 <code>Qt5</code> + <code>CMake</code> 的个人项目 <a href="https://github.com/XMuli/PicShot">PicShot</a> ，通过 <code>dh_make</code> 制作一个<code>.deb</code> 安装包。</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202203271752132.png" width="20%"/ loading="lazy">



<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="步骤流程"><a href="#步骤流程" class="headerlink" title="步骤流程"></a>步骤流程</h3><p>在 <strong>💻：</strong>  <code>Ubuntu 20.04</code>  中，从源码包构建一个 <code>deb</code> 文件，依次执行如下即可：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">wget</span> <span class="token function">tar</span> dh-make debmake lintian <span class="token comment"># 下载工具包</span>
$ <span class="token builtin class-name">cd</span> ~/Desktop                                 
$ <span class="token function">mkdir</span> DebExample <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> DebExample                 <span class="token comment"># 创建一个空文件夹并且进入</span>
$ <span class="token function">git</span> clone <span class="token parameter variable">--recursive</span> https://github.com/xmuli/PicShot.git  <span class="token comment"># 下载仓库和子模块仓库</span>

$ <span class="token function">cp</span> <span class="token parameter variable">-r</span> PicShot/ picshot-0.1.2                      <span class="token comment"># 复制重命名格式&lt;name>-&lt;version></span>
$ <span class="token function">tar</span> <span class="token parameter variable">-cvzf</span> picshot-0.1.2.tar.gz picshot-0.1.2      <span class="token comment"># 制作 .tar.gz 的压缩包</span>

$ <span class="token function">cat</span> <span class="token operator">>></span> ~/.bashrc <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation">                            <span class="token comment"># 配置环境变量，用于模板填充作者名和邮箱</span></span>
DEBEMAIL="xmulitech@gmail.com"                      # 维护者的邮箱
DEBFULLNAME="XMuli"                                 # 维护者的姓名
export DEBEMAIL DEBFULLNAME
export PATH=~/Qt5.12.11/5.12.11/gcc_64/bin:<span class="token environment constant">$PATH</span>    # 代替 QT5_DIR 作用，编译用；可省略
EOF</span>
$ <span class="token builtin class-name">.</span> ~/.bashrc                                       <span class="token comment"># 更新使修改后的配置文件立刻生效；重启生效太 low 了</span>

$ <span class="token builtin class-name">cd</span> picshot-0.1.2                                  <span class="token comment"># *** 后续所有命令均在此下操作【提示】 ***</span>
$ dh_make <span class="token parameter variable">-f</span> <span class="token punctuation">..</span>/picshot-0.1.2.tar.gz <span class="token parameter variable">-s</span> <span class="token parameter variable">-c</span> mit <span class="token parameter variable">-y</span>   <span class="token comment"># 源码根目录下，生成 debian 模板目录</span>

$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> devscripts
$ <span class="token function">vim</span> debian/changelog                              <span class="token comment"># 用 dch -i 或 dch -v version-revision</span>
$ <span class="token function">vim</span> debian/control                                <span class="token comment"># 修改文件</span>
$ <span class="token function">vim</span> debian/copyright                              <span class="token comment"># 修改版权信息</span>

$ dpkg-buildpackage <span class="token parameter variable">-us</span> <span class="token parameter variable">-uc</span>                         <span class="token comment"># 制作 deb 包，通过源码编译</span>
$ <span class="token function">ls</span> <span class="token parameter variable">-al</span> <span class="token punctuation">..</span>/                                        <span class="token comment"># 确认 deb 包生成</span>

$ lintian <span class="token punctuation">..</span>/picshot_0.1.2-1_amd64.deb              <span class="token comment"># lintian 检查规范；若想进官方 apt 必须全部通过；可省略</span>
$ dpkg-deb <span class="token parameter variable">-c</span> <span class="token punctuation">..</span>/picshot_0.1.2-1_amd64.deb          <span class="token comment"># 查看 deb 文件的安装目录；可省略</span>


<span class="token comment"># PS 补充：-------------------------------</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> devscripts       <span class="token comment"># 使用 dch -i 或用 dch -v version-revision 来指定版本</span>

Linux 对应： /opt/Qt/5.15.2/gcc_64/bin    或    ~/Qt5.12.11/5.12.11/gcc_64/bin
MacOS 对应： /Users/winks/Qt/5.15.2/clang_64/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h3><h4 id="源码包名有个格式规定"><a href="#源码包名有个格式规定" class="headerlink" title="源码包名有个格式规定"></a>源码包名有个格式规定</h4><p><code>$ cp -r PicShot/ picshot-0.1.2</code></p>
<p> 下载 <code>PicShot</code> 源码包后，若想用 dh_make 打包为 deb ，则需将 『文件夹』 重命名为指定格式 <code>&lt;package&gt;-&lt;version&gt;</code> ，这是官方强制的要求的 <sup><a href="https://manpages.debian.org/testing/dh-make/dh_make.1.en.html">DESCRIPTION</a></sup>；例中我就直接 cp 一份改名。</p>
<blockquote>
<p><strong>dh_make</strong> is a tool that adds necessary files for making Debian source package from upstream source according to the requirements of the Debian Policy. <strong>dh_make</strong> must be invoked within a directory containing the source code, which must be named <packagename>-<version>. The <packagename> must be all lowercase, The <packagename> and <version> must be all lowercase, digits and dashes. The <version> can also contain digits, and the symbols plus, dot, tilde. The <version> must start with a digit. If the directory name does not conform to this scheme, you must rename it before using <strong>dh_make.</strong> Alternatively, you may be able to use the <strong>–packagename</strong> option to force the package name.</p>
</blockquote>
<br>

<h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> <span class="token operator">>></span> ~/.bashrc <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation">                            <span class="token comment"># 配置环境变量，用于模板填充作者名和邮箱</span></span>
DEBEMAIL="xmulitech@gmail.com"                      # 维护者的邮箱
DEBFULLNAME="XMuli"                                 # 维护者的姓名
export DEBEMAIL DEBFULLNAME
export PATH=~/Qt5.12.11/5.12.11/gcc_64/bin:<span class="token environment constant">$PATH</span>    # 代替 QT5_DIR 作用，编译用；可省略
EOF</span>
$ <span class="token builtin class-name">.</span> ~/.bashrc                                       <span class="token comment"># 更新使修改后的配置文件立刻生效；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> 命令含义为，直接将 『DEBEMAIL&#x3D;”<a href="mailto:&#120;&#x6d;&#x75;&#108;&#105;&#x74;&#x65;&#x63;&#104;&#x40;&#103;&#109;&#97;&#x69;&#108;&#46;&#99;&#111;&#x6d;">&#120;&#x6d;&#x75;&#108;&#105;&#x74;&#x65;&#x63;&#104;&#x40;&#103;&#109;&#97;&#x69;&#108;&#46;&#99;&#111;&#x6d;</a>“  ..省略..   :$PATH』   这段文本，追加在  <code>~/.bashrc</code> 文件的尾部，然后更新使此新加的环境变量 <strong>立刻</strong> 生效。<code>DEBEMAIL</code> 和 <code>DEBFULLNAME</code> 两个变量，是填充自动生成模板使用的。</p>
<br>

<h4 id="dh-make-生成-debian-目录"><a href="#dh-make-生成-debian-目录" class="headerlink" title="dh_make 生成 debian 目录"></a>dh_make 生成 debian 目录</h4><p><code>$ dh_make -f ../picshot-0.1.2.tar.gz -s -c mit -y</code> </p>
<p><code>dh_make</code>  命令用来在源码根目录下 <code>debian</code> 的；问了下 debian 的官方某维护者，他也是教我用这个命令。我这儿直接指定了几个参数： 压缩包 路径和 packageclass 为 single，和  copyright 为 mit 许可证。</p>
<p>默认生成的 <code>debian</code> 文件夹下又如此文件，以 <code>.ex</code>  结尾代表模板的含义，<font color=#FF0000 size=4 face="STFangsong">除了标记出来的几个必须 <sup><a href="https://www.debian.org/doc/manuals/maint-guide/dreq.zh-tw.html">章 4. <code>debian</code> 目錄中的必須內容</a></sup> ，其余都是可删除的，</font>放心大胆的删，屡试不爽。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xmuli@xmuli-virtual-machine:~/Desktop/DebExample/picshot-0.1.2$ tree debian
debian
├── changelog                <span class="token comment"># 必须</span>
├── control                  <span class="token comment"># 必须</span>
├── copyright                <span class="token comment"># 必须</span>
├── manpage.1.ex
├── manpage.sgml.ex
├── manpage.xml.ex
├── picshot.cron.d.ex
├── picshot.doc-base.EX
├── picshot-docs.docs
├── postinst.ex
├── postrm.ex
├── preinst.ex
├── prerm.ex
├── README.Debian
├── README.source
├── rules                    <span class="token comment"># 必须</span>
├── salsa-ci.yml.ex
├── <span class="token builtin class-name">source</span>                   <span class="token comment"># 必须</span>
│   └── <span class="token function">format</span>
└── watch.ex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们只需要简单修改 <code>changelog</code> 、<code>control</code>、<code>copyright</code>  这三个文件即可；<code>rules</code> 为构建脚本，通常采用默认即可。下面将我修改的提供大家参考。</p>
<br>

<h5 id="修改-debian-changelog"><a href="#修改-debian-changelog" class="headerlink" title="修改 debian/changelog"></a>修改 <code>debian/changelog</code></h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xmuli@xmuli-virtual-machine:~/Desktop/DebExample/picshot-0.1.2$ <span class="token function">cat</span> debian/changelog   <span class="token comment"># 修改后的参考</span>
picshot <span class="token punctuation">(</span><span class="token number">0.1</span>.2-1<span class="token punctuation">)</span> unstable<span class="token punctuation">;</span> <span class="token assign-left variable">urgency</span><span class="token operator">=</span>medium

  * try build .deb on Linux<span class="token punctuation">(</span>ubuntu <span class="token number">20.04</span><span class="token punctuation">)</span>                     <span class="token comment">#『改写』随便写一句替换默认的</span>

 -- XMuli <span class="token operator">&lt;</span>xmulitech@gmail.com<span class="token operator">></span>  Sun, <span class="token number">27</span> Mar <span class="token number">2022</span> <span class="token number">16</span>:16:38 +0800
 
 
 //----------------------------------------------------
 <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> devscripts       <span class="token comment"># 使用 dch -i 或用 dch -v version-revision 来指定版本</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h5 id="修改-debian-control"><a href="#修改-debian-control" class="headerlink" title="修改 debian/control "></a>修改 <code>debian/control </code></h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xmuli@xmuli-virtual-machine:~/Desktop/DebExample/picshot-0.1.2$ <span class="token function">cat</span> debian/control   <span class="token comment"># 修改后的参考</span>
Source: picshot
Section: unknown
Priority: optional
Maintainer: XMuli <span class="token operator">&lt;</span>xmulitech@gmail.com<span class="token operator">></span>                    <span class="token comment">#『已修改』维护者姓名和联系方式</span>
Build-Depends: debhelper-compat <span class="token punctuation">(</span><span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">)</span>                     <span class="token comment">#『未修改』构建依赖</span>
Standards-Version: <span class="token number">4.4</span>.1
Homepage: https://github.com/XMuli                         <span class="token comment">#『已修改』首页网站</span>
<span class="token comment">#Vcs-Browser: https://salsa.debian.org/debian/picshot</span>
<span class="token comment">#Vcs-Git: https://salsa.debian.org/debian/picshot.git</span>

Package: picshot                                           <span class="token comment">#『未修改』包名称</span>
Architecture: any                                          <span class="token comment">#『未修改』平台</span>
Depends: <span class="token variable">$&#123;shlibs<span class="token operator">:</span>Depends&#125;</span>, <span class="token variable">$&#123;misc<span class="token operator">:</span>Depends&#125;</span>                <span class="token comment">#『未修改』依赖</span>
Description: Open <span class="token builtin class-name">source</span> cross-platform screenshots        <span class="token comment">#『已修改』简短的一句描述</span>
 Qt5-based <span class="token function">open</span> <span class="token builtin class-name">source</span> cross-platform screenshot tool      <span class="token comment">#『已修改』可以书写详细的描述</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>注意：</strong> 关键词后紧贴着冒号，填写的内容需要先填一个空格，格式正确，否则后面会失败。</p>
<br>

<h5 id="修改-debian-copyright"><a href="#修改-debian-copyright" class="headerlink" title="修改 debian/copyright"></a>修改 <code>debian/copyright</code></h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xmuli@xmuli-virtual-machine:~/Desktop/DebExample/picshot-0.1.2$ <span class="token function">cat</span> debian/copyright  <span class="token comment"># 修改后的参考</span>
Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
Upstream-Name: picshot
Upstream-Contact: https://github.com/XMuli/PicShot         <span class="token comment">#『已修改』</span>
Source: https://github.com/XMuli/PicShot                   <span class="token comment">#『已修改』</span>

Files: *
Copyright: <span class="token number">2022</span> XMuli <span class="token operator">&lt;</span>xmulitech@gmail.com<span class="token operator">></span>
License: MIT

Files: debian/*
Copyright: <span class="token number">2022</span> XMuli <span class="token operator">&lt;</span>xmulitech@gmail.com<span class="token operator">></span>
License: MIT

License: MIT
 Permission is hereby granted, <span class="token function">free</span> of charge, to any person obtaining a
 copy of this software and associated documentation files <span class="token punctuation">(</span>the <span class="token string">"Software"</span><span class="token punctuation">)</span>,
 to deal <span class="token keyword">in</span> the Software without restriction, including without limitation
 the rights to use, copy, modify, merge, publish, distribute, sublicense,
 and/or sell copies of the Software, and to permit persons to whom the
 Software is furnished to <span class="token keyword">do</span> so, subject to the following conditions:
 <span class="token builtin class-name">.</span>
 The above copyright notice and this permission notice shall be included
 <span class="token keyword">in</span> all copies or substantial portions of the Software.
 <span class="token builtin class-name">.</span>
 THE SOFTWARE IS PROVIDED <span class="token string">"AS IS"</span>, WITHOUT WARRANTY OF ANY KIND, EXPRESS
 OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

<span class="token comment"># Please also look if there are files or directories which have a</span>
<span class="token comment"># different copyright/license attached and list them here.</span>
<span class="token comment"># Please avoid picking licenses with terms that are more restrictive than the</span>
<span class="token comment"># packaged work, as it may make Debian's contributions unacceptable upstream.</span>
<span class="token comment">#</span>
<span class="token comment"># If you need, there are some extra license texts available in two places:</span>
<span class="token comment">#   /usr/share/debhelper/dh_make/licenses/</span>
<span class="token comment">#   /usr/share/common-licenses/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意开源软件的许可证，对于想要进入 debian 官方上游 apt 仓库，对于这些都管控很严格，提交不正确或者错误，是会发邮件告知不i通过原因，按要求修改即可。</p>
<br>

<h4 id="dh-make-的参数含义"><a href="#dh-make-的参数含义" class="headerlink" title="dh_make 的参数含义"></a>dh_make 的参数含义</h4><p>感觉有必要列举出来，含义自己看；几个关键的参数：<code>-c</code>、<code>-f</code> 、<code>s|i|l|p</code> ，没必要全部都熟记，二八原则。 <code>-y</code> 参数的最大优点就是后面写 yml 构建 CI&#x2F;CD 的时候优势就出来了，届时在写一篇教程；</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xmuli@xmuli-virtual-machine:~/Desktop/DebExample/PicShot$ dh_make <span class="token parameter variable">--help</span>
usage: dh_make <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token punctuation">[</span>-a<span class="token punctuation">]</span> <span class="token punctuation">[</span>-c <span class="token operator">&lt;</span>type<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--copyrightfile <span class="token operator">&lt;</span>file<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-d<span class="token punctuation">]</span> <span class="token punctuation">[</span>--docs<span class="token punctuation">]</span> <span class="token punctuation">[</span>-e <span class="token operator">&lt;</span>address<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-f <span class="token operator">&lt;</span>file<span class="token operator">></span><span class="token punctuation">]</span>
               <span class="token punctuation">[</span>-n<span class="token punctuation">]</span> <span class="token punctuation">[</span>-o <span class="token operator">&lt;</span>dir<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-p <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-t <span class="token operator">&lt;</span>dir<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-y<span class="token punctuation">]</span> <span class="token punctuation">[</span>--createorig<span class="token punctuation">]</span> <span class="token punctuation">[</span>--with-emacs<span class="token punctuation">]</span>
               <span class="token punctuation">[</span>-C <span class="token operator">&lt;</span>cls<span class="token operator">></span> <span class="token operator">|</span> <span class="token parameter variable">-s</span> <span class="token operator">|</span> <span class="token parameter variable">-i</span> <span class="token operator">|</span> <span class="token parameter variable">-l</span> <span class="token operator">|</span> --python<span class="token punctuation">]</span> <span class="token punctuation">[</span>-v<span class="token punctuation">]</span>

prepare Debian packaging from an original <span class="token builtin class-name">source</span> archive

optional arguments:
  -h, <span class="token parameter variable">--help</span>            show this <span class="token builtin class-name">help</span> message and <span class="token builtin class-name">exit</span>
  -a, <span class="token parameter variable">--addmissing</span>      reprocess package and <span class="token function">add</span> missing files
  <span class="token parameter variable">-c</span> <span class="token operator">&lt;</span>type<span class="token operator">></span>, <span class="token parameter variable">--copyright</span> <span class="token operator">&lt;</span>type<span class="token operator">></span>
                        use <span class="token operator">&lt;</span>type<span class="token operator">></span> of license <span class="token keyword">in</span> copyright <span class="token function">file</span> <span class="token punctuation">(</span>apache<span class="token operator">|</span>artistic<span class="token operator">|</span>bsd<span class="token operator">|</span>gpl<span class="token operator">|</span>gpl2<span class="token operator">|</span>gpl3<span class="token operator">|</span>isc<span class="token operator">|</span>lgpl<span class="token operator">|</span>lgpl2<span class="token operator">|</span>lgpl3<span class="token operator">|</span>mit<span class="token operator">|</span>custom<span class="token punctuation">)</span>
  <span class="token parameter variable">--copyrightfile</span> <span class="token operator">&lt;</span>file<span class="token operator">></span>
                        Template to use <span class="token keyword">for</span> custom copyright
  -d, <span class="token parameter variable">--defaultless</span>     skip the default Debian and package class templates
  <span class="token parameter variable">--docs</span>                create a separate docs package
  <span class="token parameter variable">-e</span> <span class="token operator">&lt;</span>address<span class="token operator">></span>, <span class="token parameter variable">--email</span> <span class="token operator">&lt;</span>address<span class="token operator">></span>
                        use <span class="token operator">&lt;</span>address<span class="token operator">></span> as the maintainer e-mail address
  <span class="token parameter variable">-f</span> <span class="token operator">&lt;</span>file<span class="token operator">></span>, <span class="token parameter variable">--file</span> <span class="token operator">&lt;</span>file<span class="token operator">></span>
                        use <span class="token operator">&lt;</span>file<span class="token operator">></span> as the original <span class="token builtin class-name">source</span> archive
  -n, <span class="token parameter variable">--native</span>          the program is Debian native, don<span class="token string">'t generate .orig
  -o &lt;dir>, --overlay &lt;dir>
                        reprocess package using templates in &lt;dir>
  -p &lt;name>, --packagename &lt;name>
                        force package name to be &lt;name>
  -t &lt;dir>, --templates &lt;dir>
                        apply customizing templates from &lt;dir>
  -y, --yes             automatic yes to prompts and run non-interactively
  --createorig          create orig.tar.xz file
  --with-emacs          add files for emacsen
  -C &lt;cls>, --packageclass &lt;cls>
                        set package class (s|i|l|p)
  -s, --single          set package class to single
  -i, --indep           set package class to arch-independent
  -l, --library         set package class to library
  --python              set package class to python
  -v, --version         show program'</span>s version number and <span class="token builtin class-name">exit</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="dpkg-buildpackage-生成-deb-包"><a href="#dpkg-buildpackage-生成-deb-包" class="headerlink" title="dpkg-buildpackage 生成 deb 包"></a>dpkg-buildpackage 生成 deb 包</h4><p><code>$ dpkg-buildpackage -us -uc</code></p>
<p>会自动生成如下中间过程和最后的 <code>picshot_0.1.2-1_amd64.deb</code> 包；已然成功，双击安装即可。</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202203271631591.png" width="100%"/ loading="lazy">

<p>双击即可安装；</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202203271633515.png" width="70%"/ loading="lazy">

<br>

<h4 id="lintian-检查包"><a href="#lintian-检查包" class="headerlink" title="lintian 检查包"></a>lintian 检查包</h4><p><code>$ lintian ../picshot_0.1.2-1_amd64.deb</code></p>
<p>此步骤通过 <code>lintian </code> 对 <code>deb</code> 进行一个标准的格式检查，如果想要进入上游 apt 仓库，就必须全部通过。标记有 E 只要不 apt 都是无所谓的，就如同编译的 警告一样。</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202203271803363.png" width="80%"/ loading="lazy">

<p>当时倘若你有心走的更远，那么怎么也不能耽误了武学奇才，给出一个具体案例讲解 <a href="https://blog.csdn.net/qq_33154343/article/details/106366582">Linux上面使用lintian检测deb包报错的解决方案</a>。</p>
<br>

<h4 id="dpkg-deb-查看-deb-的安装路径"><a href="#dpkg-deb-查看-deb-的安装路径" class="headerlink" title="dpkg-deb 查看 deb 的安装路径"></a>dpkg-deb 查看 deb 的安装路径</h4><p><code>$ dpkg-deb -c ../picshot_0.1.2-1_amd64.deb</code></p>
<p>执行一下会看到你想要的信息♥。</p>
<br>

<h3 id="其它有用命令"><a href="#其它有用命令" class="headerlink" title="其它有用命令"></a>其它有用命令</h3><p>再补充两个命令</p>
<ul>
<li><p><code>ldd</code>  可以查看依赖</p>
</li>
<li><p><code>locate</code>   命令用于查找符合条件的文档</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> mlocate                 <span class="token comment"># 所在包</span>
<span class="token function">locate</span> Qt5X11Extras.so.5                 <span class="token comment"># 用  例</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
<br>

<h3 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h3><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> </p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 该如何自我系统的学习「心路」？</title>
    <url>/posts/63d476f1/</url>
    <content><![CDATA[<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>



<h4 id="序言："><a href="#序言：" class="headerlink" title="序言："></a>序言：</h4><p>搞编程，学 C&#x2F;C++ 怎么不能学习一下 Linux ? 了解一下底层的知识库和程序运行原理？附上个人学习目录，此系列学完之后，回来预期会继续更新 Qt 相关的知识 <a href="https://github.com/xmuli/QtExamples">QtExamples</a> ，将更多的一些知识分享出来。</p>
<p><font color=#D0087E size=4 face="幼圆">Linux 系统学习三部曲：❶基础编程 ❷系统编程 ❸网络编程</font></p>
<br>

<h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><p><code>Linux / Unix</code> Example：文章中的所有例子均在 MacOS &amp;&amp; UOS 上面编译和运行成功。</p>
<br>

<h4 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h4><p><strong>💻：</strong>  <code>MacOS 10.14.6 </code> 📎 <code>gcc/g++ 9.2.0</code> 📎 <code>gdb 8.3</code></p>
<p><strong>💻：</strong>  <code>UOS20 (Debian8+)</code> 📎 <code>gcc/g++ 8.3.0</code> 📎 <code>gdb 8.0</code></p>
<br>

<h2 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h2><h4 id="服务器开发之-Linux-基础编程："><a href="#服务器开发之-Linux-基础编程：" class="headerlink" title="服务器开发之 Linux 基础编程："></a>服务器开发之 Linux 基础编程：</h4><h5 id="gcc-x2F-g"><a href="#gcc-x2F-g" class="headerlink" title="gcc&#x2F;g++:"></a>gcc&#x2F;g++:</h5><ul>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/104639656">在MacOS上面通过brew命令安装gcc编译器集</a> </li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/104645129">gcc和g++的区别，编译.c和.cpp文件的区别</a> </li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/104693603">gcc工作流程：预处理，编译，汇编，链接</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/104692241">Linux下使用gcc生成静态库.a和调用（图文并茂，坑已踩完）</a> </li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/104692370">Linux下使用gcc生成动态库.so和调用（图文并茂，坑已踩完）</a> </li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/104758512">在Linux中，编写入门的makefile文件，然后逐渐迭代</a></li>
</ul>
<br>

<h5 id="gdb"><a href="#gdb" class="headerlink" title="gdb:"></a>gdb:</h5><ul>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/104784641"> 在MacOS10.14.6安装最新gdb8.3的详细教程，含可能遇到的所有坑(网上最新教程)</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/104904798">gdb调试器的使用，初探全貌</a></li>
</ul>
<br>

<h5 id="程序运行原理，文件描述符，PCB："><a href="#程序运行原理，文件描述符，PCB：" class="headerlink" title="程序运行原理，文件描述符，PCB："></a>程序运行原理，文件描述符，PCB：</h5><ul>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/105010222">Linux中文件操作，软硬链接ln，用户权限chmod、chown，文件查找和检索find、grep，压缩gz，bz2</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/105029261">Linux中虚拟地址空间、pcb、文件描述符、C库函数工作流程、标准库和系统库函数区别</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/105031987">Linux中man手册，阻塞和非阻塞，stat，文件操作和遍历，文件描述符复制dup()</a></li>
</ul>
<br>

<h4 id="服务器开发之-Linux-系统编程："><a href="#服务器开发之-Linux-系统编程：" class="headerlink" title="服务器开发之 Linux 系统编程："></a>服务器开发之 Linux 系统编程：</h4><h5 id="进程间通信："><a href="#进程间通信：" class="headerlink" title="进程间通信："></a>进程间通信：</h5><ul>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/105157044">Linux中fork创建兄弟子进程，验证进程之间全局变量不共享，exec函数族</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/105164215">Linux中孤儿进程，僵尸进程，进程回收wait、waitpid函数</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/105254078">父子进程、兄弟子进程之间通信方式–匿名管道pipe(适用于有血缘关系的进程)</a></li>
<li><a href="https://xmuli.blog.csdn.net/article/details/105266919">Linux中普通的进程间通信方式–有名管道fifo(适用于无血缘关系的进程)</a> </li>
<li><a href="https://xmuli.blog.csdn.net/article/details/105322927">Linux中进程间的通信方式–内存映射区mmap()</a></li>
</ul>
<br>

<h5 id="信号和守护进程："><a href="#信号和守护进程：" class="headerlink" title="信号和守护进程："></a>信号和守护进程：</h5><ul>
<li><a href="https://xmuli.blog.csdn.net/article/details/105357886">Linux中系统信号初识，和函数kill，raise，abort，alarm，setitimer</a> </li>
<li><a href="https://xmuli.blog.csdn.net/article/details/105448914">Linux中未决信号集和阻塞信号集的状态关系sigaddset，以及捕捉信号函数</a> </li>
<li><a href="https://xmuli.blog.csdn.net/article/details/105453850">Linux中创建守护进程setsid()</a></li>
</ul>
<br>

<h5 id="多线程："><a href="#多线程：" class="headerlink" title="多线程："></a>多线程：</h5><ul>
<li><a href="https://xmuli.blog.csdn.net/article/details/105546234">Linux中创建多线程实例pthread_create()</a> </li>
<li><a href="https://xmuli.blog.csdn.net/article/details/105620043">Linux中多线程操作函数pthread_exit()、pthread_jion()、pthread_detach()、pthread_cancel()</a> </li>
<li><a href="https://xmuli.blog.csdn.net/article/details/105779111">Linux中使用使用互斥量(锁)Mutex来操持多线程同步执行pthread_mutex_lock()</a> </li>
<li><a href="https://xmuli.blog.csdn.net/article/details/105800949">Linux中原子操作，死锁原因以及解决方法，读写锁的属性和函数使用pthread_rwlock_wrlock()</a></li>
</ul>
<p><br><br></p>
<h3 id="我所想说：🙋‍♀️"><a href="#我所想说：🙋‍♀️" class="headerlink" title="我所想说：🙋‍♀️"></a>我所想说：🙋‍♀️</h3><p>虽然不盈利，会累，但因自由和开源软件而写的开心ya， 鸭鸭</p>
<p>但 github 上，你的 star 和 fork 是我最大鼓励，也是我一直持续写下去的动力…</p>
<blockquote>
<p>由于会经常更新新的文章，所以暂时先使用这一份目录更新：<a href="https://github.com/xmuli/linuxExample">https://github.com/xmuli/linuxExample</a><br>更新时间： 2020-04-29</p>
</blockquote>
]]></content>
      <categories>
        <category>学习 - Linux</category>
        <category>学习 - MacOS</category>
      </categories>
  </entry>
  <entry>
    <title>Linux上面使用lintian检测deb包报错的解决方案</title>
    <url>/posts/231e1b44/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　使用<code>Linux</code>（<code>uos v20</code> 系统），安装 了；<code>lintian</code> 命令之后，执行 <code>lintian xxx.deb</code> 发现报错如下；而未按照预期正确输出结果应该是带上 <code>E / W / I /N / O</code>   等明显的标记。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20200526141442460.png" width="90%"/ loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p>
<br>

<h3 id="lintian："><a href="#lintian：" class="headerlink" title="lintian："></a>lintian：</h3><p>事情的起因于 <a href="https://github.com/linuxdeepin/dtkgui/issues/5">#5</a>，后面去了解了一下想关知识；</p>
<p><code>lintian</code> 这是一个 <code>Debian</code> 上面的包质量的检测工具。对于要上传到  <code>Debian</code>  仓库的 <code>.deb</code> 包都是有着严格的文件夹规范的，否则不被允许上传；</p>
<br>

<p><strong><a href="https://www.debian.org/doc/manuals/maint-guide/checkit.zh-cn.html">官方解释：</a></strong></p>
<p><strong>lintian</strong> 命令会运行很多测试脚本来检查常见的打包错误。<strong>lintian</strong> 命令的输出常带有以下几种标记：</p>
<ul>
<li><code>E:</code> 代表错误：确定违反了 <code>Debian Policy</code> 或是一个肯定的打包错误。</li>
<li><code>W:</code> 代表警告：可能违反了 <code>Debian Policy</code> 或是一个可能的打包错误。</li>
<li><code>I:</code> 代表信息：对于特定打包类别的信息。</li>
<li><code>N:</code> 代表注释：帮助你调试的详细信息。</li>
<li><code>O:</code> 代表已覆盖：一个被 <code>lintian-overrides</code> 文件覆盖的信息，但由于使用 <code>--show-overrides</code> 选项而显示。</li>
</ul>
<p>对于警告，你应该改进软件包或者检查警告是否的确无意义。如果确定没有意义，则按照 <a href="https://www.debian.org/doc/manuals/maint-guide/dother.zh-cn.html#lintian">第 5.14 节 “<code>&#123;*</code>package<code>*.,source/&#125;lintian-overrides</code>”</a> 中的叙述使用 <code>lintian-overrides</code> 文件将其覆盖。</p>
<p>注意，你可以用 <strong>dpkg-buildpackage</strong> 来构建软件包，并执行 <strong>lintian</strong>，只要你使用了 debuild(1) 或 pdebuild(1).</p>
<br>

<h3 id="安装-amp-使用lintian报错："><a href="#安装-amp-使用lintian报错：" class="headerlink" title="安装&amp;使用lintian报错："></a>安装&amp;使用lintian报错：</h3><p>我在 <code>uos v20</code> 版本，下载和执行如下命令后，实际发现是无法使用的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载得到 dde-control-center_5.1.0101.1+r0+g98e285d4e_amd64.deb 文件</span>
☁  softFile  <span class="token function">sudo</span> <span class="token function">apt</span> download dde-control-center  

<span class="token comment"># 安装 lintian ，和使用它检测 deb 包</span>
☁  softFile  <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> lintian
☁  softFile  lintian dde-control-center_5.1.0101.1+r0+g98e285d4e_amd64.deb <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>运行之后，wtf！！！ 显示报错？ </p>
<pre class="line-numbers language-none"><code class="language-none">Could not find a profile matching &quot;&#123;VENDOR&#125;&#x2F;main&quot; for vendor deepin at &#x2F;usr&#x2F;share&#x2F;perl5&#x2F;Lintian&#x2F;Profile.pm line 702.
	Lintian::Profile::_find_vendor_profile(Lintian::Profile&#x3D;HASH(0x556a2ba4e6c0)) called at &#x2F;usr&#x2F;share&#x2F;perl5&#x2F;Lintian&#x2F;Profile.pm line 136
	Lintian::Profile::new(&quot;Lintian::Profile&quot;, undef, ARRAY(0x556a2a1887c0), HASH(0x556a2a354ed0)) called at &#x2F;usr&#x2F;bin&#x2F;lintian line 215
	dplint::load_profile(undef) called at &#x2F;usr&#x2F;share&#x2F;lintian&#x2F;commands&#x2F;lintian.pm line 1446
	main::load_profile_and_configure_tags() called at &#x2F;usr&#x2F;share&#x2F;lintian&#x2F;commands&#x2F;lintian.pm line 657
	main::main() called at &#x2F;usr&#x2F;bin&#x2F;lintian line 46
	eval &#123;...&#125; called at &#x2F;usr&#x2F;bin&#x2F;lintian line 46
	main::__ANON__(&quot;&#x2F;usr&#x2F;share&#x2F;lintian&#x2F;commands&#x2F;lintian.pm&quot;) called at &#x2F;usr&#x2F;bin&#x2F;lintian line 114
	dplint::run_tool(&quot;&#x2F;usr&#x2F;bin&#x2F;lintian&quot;, &quot;lintian&quot;) called at &#x2F;usr&#x2F;bin&#x2F;lintian line 290
	dplint::main() called at &#x2F;usr&#x2F;bin&#x2F;lintian line 359<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>一顿胡乱分析，这很明显是 <code>lintian</code> 这个命令有点问题。</p>
<br>

<h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p><code>/etc/dpkg/origins</code> 是这个里面<code>default</code> 指向了<code>deepin</code> 所以<code>dpkg</code> 认为当前是<code>deepin</code>环境，都换成<code>uos</code> 就可以；意思就是 <code>lintian</code> 需要通过判断当前系统环境 根据<code>debian/ubuntu/kail</code> 等环境做检测，我们 fork 一份 debian 配置检测。</p>
<br>

<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><ol>
<li>进入 <code>/etc/dpkg/origins</code> 里面，修改 <code>default</code> 的软链接 重新指向 <code>uos</code>；</li>
<li>复制一份<code>debian</code> 配置检测，改名为 <code>uos</code>；</li>
<li>正常使用 <code>lintian</code> 命令；</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 没有修改之前的来两个路径文件夹内容</span>
xmuli@xmuli-PC:/etc/dpkg/origins$ <span class="token function">ls</span> <span class="token parameter variable">-al</span>
总用量 <span class="token number">20</span>
drwxr-xr-x <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">20</span> <span class="token number">13</span>:40 <span class="token builtin class-name">.</span>
drwxr-xr-x <span class="token number">4</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">20</span> 09:17 <span class="token punctuation">..</span>
-rw-r--r-- <span class="token number">1</span> root root   <span class="token number">82</span> <span class="token number">5</span>月  <span class="token number">20</span> 09:17 debian
-rw-r--r-- <span class="token number">1</span> root root   <span class="token number">87</span> <span class="token number">4</span>月  <span class="token number">29</span> <span class="token number">16</span>:41 deepin
lrwxrwxrwx <span class="token number">1</span> root root    <span class="token number">6</span> <span class="token number">5</span>月  <span class="token number">20</span> 09:17 default -<span class="token operator">></span> deepin
-rw-r--r-- <span class="token number">1</span> root root   <span class="token number">84</span> <span class="token number">4</span>月  <span class="token number">29</span> <span class="token number">16</span>:41 uos

xmuli@xmuli-PC:/usr/share/lintian/profiles$ <span class="token function">ls</span> <span class="token parameter variable">-al</span>
总用量 <span class="token number">28</span>
drwxr-xr-x  <span class="token number">7</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">12</span>:14 <span class="token builtin class-name">.</span>
drwxr-xr-x <span class="token number">11</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">12</span>:14 <span class="token punctuation">..</span>
drwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">12</span>:14 debian
drwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">20</span> 09:19 dpkg
drwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">12</span>:14 kali
drwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">12</span>:14 pureos
drwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">12</span>:14 ubuntu

<span class="token comment"># 修改软链接</span>
<span class="token builtin class-name">cd</span> /etc/dpkg/origins
<span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-snf</span> uos default <span class="token comment"># 或 sudo ln -snf /etc/dpkg/origins/uos default</span>

<span class="token comment"># 复制一份文件配置且改名</span>
<span class="token builtin class-name">cd</span> /usr/share/lintian/profiles
<span class="token function">sudo</span> <span class="token function">cp</span> debian ./uos <span class="token parameter variable">-r</span> <span class="token comment"># 拷贝 debian 的配置，命令为 uos</span>

<span class="token comment"># 修改完成之后</span>
xmuli@xmuli-PC:/etc/dpkg/origins$ <span class="token function">ls</span> <span class="token parameter variable">-al</span>
总用量 <span class="token number">20</span>
drwxr-xr-x <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">12</span>:06 <span class="token builtin class-name">.</span>
drwxr-xr-x <span class="token number">4</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">25</span> <span class="token number">20</span>:19 <span class="token punctuation">..</span>
-rw-r--r-- <span class="token number">1</span> root root   <span class="token number">82</span> <span class="token number">5</span>月  <span class="token number">25</span> <span class="token number">20</span>:19 debian
-rw-r--r-- <span class="token number">1</span> root root   <span class="token number">87</span> <span class="token number">4</span>月  <span class="token number">29</span> <span class="token number">16</span>:41 deepin
lrwxrwxrwx <span class="token number">1</span> root root    <span class="token number">3</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">12</span>:06 default -<span class="token operator">></span> uos
-rw-r--r-- <span class="token number">1</span> root root   <span class="token number">84</span> <span class="token number">4</span>月  <span class="token number">29</span> <span class="token number">16</span>:41 uos

xmuli@xmuli-PC:/usr/share/lintian/profiles$ <span class="token function">ls</span> <span class="token parameter variable">-al</span>
总用量 <span class="token number">32</span>
drwxr-xr-x  <span class="token number">8</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">12</span>:07 <span class="token builtin class-name">.</span>
drwxr-xr-x <span class="token number">11</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">11</span>:05 <span class="token punctuation">..</span>
drwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">11</span>:05 debian
drwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">25</span> <span class="token number">20</span>:21 dpkg
drwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">11</span>:05 kali
drwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">11</span>:05 pureos
drwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">11</span>:05 ubuntu
drwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">12</span>:07 uos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p>重新运行一开始的命令，可以看到预期的效果： </p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20200526141346928.png" width="90%"/ loading="lazy"> 

<br>

<h3 id="所有-lintian-的解决方案："><a href="#所有-lintian-的解决方案：" class="headerlink" title="所有 lintian 的解决方案："></a>所有 lintian 的解决方案：</h3><p>对于开启 lintian 检查，其报错的问题可以在这里查到所有的报错信息：<a href="https://lintian.debian.org/tags/">https://lintian.debian.org/tags/</a>  根据官方的描述修改即可</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux下使用gcc生成动态库.so和调用（图文并茂，坑已踩完）</title>
    <url>/posts/7f5979a7/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　 继 <a href="https://blog.csdn.net/qq_33154343/article/details/104692241">上一篇</a>。本篇就继续实践踩坑，实现在Linux上面，使用gcc编译动态库.so，文件，且调用动态库。此处例子实际：使用g++8.3.0在uos20(Linux)平台下完成这个知识点的实践教程。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>UOS20 (即deepin20)</code> 📎 <code>gcc/g++ 8.3.0</code> </p>
<p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 (18G103)</code> 📎 <code>gcc/g++ 9.2.0</code> </p>
<br>

<h3 id="动态库概念："><a href="#动态库概念：" class="headerlink" title="动态库概念："></a>动态库概念：</h3><p><strong>动态库</strong> 在程序编译时并不会被连接到目标代码中，而是在<strong>程序运行是才被载入，因此在程序运行时还需要动态库存在</strong> 。动态库的后缀一般是 <code>.so</code>作为后缀。</p>
<p><strong>库：</strong> 二进制文件；是加密之后的.c&#x2F;.cpp的文件</p>
<p><strong>动态库：</strong>  <code>.dll 或 .so</code></p>
<br>

<h3 id="前期铺垫："><a href="#前期铺垫：" class="headerlink" title="前期铺垫："></a>前期铺垫：</h3><ul>
<li><strong>重要提醒：</strong></li>
</ul>
<p><font color=#FF0000  size=3 face="幼圆"><strong>本次运行环境是在uos20（Linux）系统上面跑成功的，</strong></font> <font color=#FF0000  size=4 face="幼圆">  在运行之前，添加动态库的（绝对）路径时候，需要执行 <code>export LD_LIBRARY_PATH=动态库的绝对路径:$LD_LIBRARY_PATH</code> </font></p>
<p>​	</p>
<p><font color=#FF0000  size=4 face="幼圆">若是在MacOS10.14上面跑成功（已经测试成功），在运行之前，添加动态库的（绝对）路径时候，需要执行 <code>export DYLD_LIBRARY_PATH=动态库的绝对路径:$DYLD_LIBRARY_PATH</code> </font></p>
<p><font color=#0000FF size=4 face="幼圆">设置环境变量的时候：Linux 的 <code>LD_LIBRARY_PATH</code> 对应的就是 Mac 的 <code>DYLD_LIBRARY_PATH</code> 。（动态链接器会查找）。</font></p>
<p>下面每个文件里面写的代码如下：<strong>注意此处，其中所有的.cpp文件都没有包含ExHeader.h或者其他的.h头文件</strong>， 是为了验证一个猜想，.cpp生成的.o文件，在到.o生成的.so文件，是单独的二进制文件。只在最后编译和链接main.cpp文件时候，才会包含这个ExHeader.h文件。重最后结果来看，这个结果是✅的。 </p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/81soxRT22.png" width="100%"/ loading="lazy">

<p> 创建的几个文件目录结构如图：</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_Snip20200307_181130.png" width="35%"/ loading="lazy">

<br>

<h3 id="将-cpp文件生成-o文件："><a href="#将-cpp文件生成-o文件：" class="headerlink" title="将.cpp文件生成.o文件："></a>将.cpp文件生成.o文件：</h3><ul>
<li><p>运行命令 <code>g++-8 -c ExAdd.cpp ExDiv.cpp ExMul.cpp ExSub.cpp -fpic</code>，将除了main.cpp之外的所有.cpp文件，全部制作为二进制文件。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法：使用 gcc 加参数 -fpic(或 FPIC)制作.o文件</span>
g++-8 <span class="token parameter variable">-c</span> ExAdd.cpp ExDiv.cpp ExMul.cpp ExSub.cpp <span class="token parameter variable">-fpic</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
<br>

<h3 id="将-o文件大包为-so文件："><a href="#将-o文件大包为-so文件：" class="headerlink" title="将.o文件大包为.so文件："></a>将.o文件大包为.so文件：</h3><ul>
<li><p>执行命令 <code>g++-8 -shared ExAdd.o ExDiv.o ExMul.o ExSub.o -o libxxx.so</code> 将上面生成的所有.o文件，打包为一个动态库.so文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法：使用 gcc 加参数 -shared,将.o打包为.so文件</span>
g++-8 <span class="token parameter variable">-shared</span> ExAdd.o ExDiv.o ExMul.o ExSub.o <span class="token parameter variable">-o</span> libxxx.so
<span class="token function">mv</span> *.so ./lib       //将.so文件放入lib文件夹
<span class="token function">mv</span> *.o ./lib        //将.o文件放入lib文件夹
<span class="token function">mv</span> *.h ./include    //将.h文件放入include文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<p> 此时该文件的结构如下：</p>
  <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/20200307181518.png" width="35%"/ loading="lazy">

<br>

<h3 id="调用-so文件："><a href="#调用-so文件：" class="headerlink" title="调用.so文件："></a>调用.so文件：</h3><ul>
<li><p>执行命令 <code>g++-8 main.cpp -I ./include -L ./lib -lxxx -o mainApp</code> ，使用gcc将main.cpp进行编译链接，其中需要的头文件在include文件夹里面找，需要的动态链接库文件在lib文件夹里面找，调用的动态库的库名叫xxx，最后输出一个名为mainApp的可执行程序</p>
<ul>
<li><font color=#D0087E size=4 face="幼圆">注意，所要生成的.a文件的名字前三位必须是lib，否则在链接的时候，就可能导致找不到这个库</font> </li>
<li><strong>命令规则：</strong> <font color=#FF0000  size=4 face="幼圆">lib</font>xxx<font color=#FF0000  size=4 face="幼圆">.a</font> ；<font color=#D0087E size=4 face="幼圆"><strong>红色部分为固定的格式，中间的xxx才是库名</strong></font></li>
<li><font color=#D0087E size=4 face="幼圆">-l 为调用的库的名称(-l 后面没有空格，直接加库名)</font></li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#-I 为指定的库的头文件的路径</span>
<span class="token comment">#-L 为指定的库的二进制文件文件</span>
<span class="token comment">#-l 为调用的库的名称(-l 后面没有空格，直接加库名)</span>
<span class="token comment">#-o 输出文件，生成的可执行程序的名称</span>

g++-8 main.cpp <span class="token parameter variable">-I</span> ./include <span class="token parameter variable">-L</span> ./lib <span class="token parameter variable">-lxxx</span> <span class="token parameter variable">-o</span> mainApp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<p> 此时文件夹的结构如下：</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/20200307181554.png" width="35%"/ loading="lazy">

<br>

<h3 id="设置-so的运行时的PATH："><a href="#设置-so的运行时的PATH：" class="headerlink" title="设置.so的运行时的PATH："></a>设置.so的运行时的PATH：</h3><ul>
<li><p>执行命令 <code>export LD_LIBRARY_PATH=库的绝对路径:$LD_LIBRARY_PATH</code> 来设置临时的环境变量；告知系统这里有一个绝对路径的动态库路径，<strong>动态库不能够使用相对路径。</strong> 若是设置绝对路径的环境变量，则程序一定会跑失败。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span>/home/muli/Desktop/04_02_so/lib:<span class="token variable">$LD_LIBRARY_PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<h4 id="解决-Linux-加载动态库-so-文件失败的方法："><a href="#解决-Linux-加载动态库-so-文件失败的方法：" class="headerlink" title="解决 Linux 加载动态库 .so 文件失败的方法："></a>解决 Linux 加载动态库 .so 文件失败的方法：</h4><ul>
<li><p>若是<strong>运行之后，若首次未做设置，则就会发现运次失败！！！，会报错误提示，说找不到libxxx.so;</strong> </p>
<p><strong>原因是：</strong> <font color=#70AD47 size=4 face="幼圆"><strong>因为linux 的工作机制，其加载动态库.so的顺序。要知道所依赖库的.so 的名称，还要知道其绝对路径。</strong> </font></p>
</li>
</ul>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/20200307181652.png" width="60%"/ loading="lazy">



  <br>

<ul>
<li><p><strong>解决 Linux 加载动态库 .so 文件失败的方法：</strong></p>
<p>思路：添加动态库的（绝对）路径。</p>
<ul>
<li><p><font color=#0000FF size=4 face="幼圆"><strong>「方法1」拷贝自己制作的共享库：</strong> </font></p>
<ul>
<li>拷贝自己制作的共享库 .so 文件到 <code>/lib</code> 或 <code>/usr/lib</code>[不推荐，容易重名替换让系统崩溃]</li>
</ul>
</li>
<li><p><font color=#0000FF size=4 face="幼圆"><strong>「方法2」使用环境变量：</strong> </font></p>
<ul>
<li>临时设置：<code>export LD_LIBRARY_PATH=动态库的绝对路径:$LD_LIBRARY_PATH</code>(只添加新值，<em>等号两边不能空格，路径也不需要双引号</em> )</li>
<li>永久设置：<ul>
<li>「用户级别」将<code>export LD_LIBRARY_PAT = 动态库的加载路径</code>添加到<code>~/.zshrc</code>文件；然后重新加载，方法为重启终端或者 运行 <code>sources ./zshrc</code>; 即可生效.</li>
<li>「系统级别」将绝对路径加入到<code>/etc/profile</code>文件，然后用命令<code>source /etc/profile </code>重新加载该文件.</li>
</ul>
</li>
</ul>
</li>
<li><p><font color=#0000FF size=4 face="幼圆"><strong>「方法3」使用文件列表：</strong> </font></p>
<ul>
<li>将动态库的绝对路径添加到<code>/etc/ld.so.conf</code>文件中；然后执行 <code>sudo ldconfig -v</code></li>
</ul>
</li>
<li><p><font color=#0000FF size=4 face="幼圆"><strong>「方法4」使用函数调动态库：</strong> </font></p>
<ul>
<li>函数名：<code>dlopen()</code>  <code>dlclose()</code>  <code>dlsym()</code></li>
</ul>
</li>
</ul>
<br>

<p><strong>补充一个小的知识点：</strong></p>
<ul>
<li><code>file appTest(可执行程序)</code>: 查看文件的类型，可以看到为 elf 类型</li>
<li>ldd appTest(可执行程序)<code> 查看 appTest 的所需要的加载动态库的文件，以及显示这些文件是否能找到</code> </li>
<li><code>echo $PATH</code> each 显示一个字符串，这里取 PATH 的值</li>
</ul>
</li>
</ul>
<br>

<h3 id="运行可执行程序："><a href="#运行可执行程序：" class="headerlink" title="运行可执行程序："></a>运行可执行程序：</h3><ul>
<li><p>执行可执行程序 <code>./mainApp</code> ，可以看到程序跑起来的成功结果。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./mainApp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<p> 此时运行效果为（uos20[Linux]下）：</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_Snip20200307_182031.png" width="80%"/ loading="lazy">



<p> 此时运行效果为（MacOS10.14 [Uinx]下）：</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/20200307183004.png" width="90%"/ loading="lazy">

<br>

<h3 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h3><ul>
<li><a href="https://github.com/xmuli/linuxExample/tree/master/04_make_so_a">04_make_so_a</a></li>
<li>04_02_so，Linux版：uos20 例子</li>
<li>04_03_so，Uinx版：MacOS10.14 例</li>
</ul>
<br>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>看起来很简单，<strong>殊不知，纸上学来终觉浅，</strong> 还是亲自实现一番才以记忆深刻。若是成功的白嫖到了这篇文章，可以点个赞，给我留个言，鼓励一下。你的加油，我会持续不断的出新的文章，那啥，白嫖一时爽，一直白嫖一直     。🥺</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux下使用gcc生成静态库.a和调用（图文并茂，坑已踩完）</title>
    <url>/posts/1661e315/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong> 　在Linux系统下，使用gcc来编译，生成静态库，且调用静态库.a文件，生成可执行程序。此处例子实际：使用g++9.2在mac平台下完成这个知识点的教程。在 <a href="https://blog.csdn.net/qq_33154343/article/details/104692370">下一篇</a> 踩坑生成动态库的.so制作和使用。</p>
<span id="more"></span>

<hr>
<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 (18G103)</code> 📎 <code>gcc/g++ 9.2.0</code> </p>
<br>

<h3 id="静态库概念："><a href="#静态库概念：" class="headerlink" title="静态库概念："></a>静态库概念：</h3><p><strong>静态库</strong> 是在可执行程序运行之前就已经加入到执行代码中，成为执行程序的一部分；静态库的后缀一般是 <code>.a</code>作为后缀。</p>
<p><strong>库：</strong> 二进制文件；是加密之后的.c&#x2F;.cpp的文件</p>
<p><strong>静态库：</strong> <code>.lib 或 .a</code></p>
<br>

<h3 id="前期铺垫："><a href="#前期铺垫：" class="headerlink" title="前期铺垫："></a>前期铺垫：</h3><p>创建如下例子几个文件：注意是.cpp文件，里面写的也是c++的语法。</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/20200308003020.png" width="35%"/ loading="lazy">

<br>

<h3 id="将-cpp生成-o："><a href="#将-cpp生成-o：" class="headerlink" title="将.cpp生成.o："></a>将.cpp生成.o：</h3><ul>
<li><p>执行命令 <code>g++-9 -c *.cpp</code> 将所有.cpp 文件都编译不链接生成对应的.o；且将.o文件都存放于lib文件夹下。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++-9 <span class="token parameter variable">-c</span> *.cpp  //注意 <span class="token parameter variable">-c</span> 是小写，非大写
<span class="token function">mv</span> *.o ./lib <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br></li>
</ul>
<h3 id="将-o生成-a："><a href="#将-o生成-a：" class="headerlink" title="将.o生成.a："></a>将.o生成.a：</h3><ul>
<li><p>执行命令 <code>ar cr libxxx.a ./lib/*.o</code> 将所有的.o文件全部归档，然后替换创建为一个静态文件.a；<font color=#D0087E size=4 face="幼圆">ar 是GNU 归档工具，rcs 表示（replace and create）</font> </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法：ar rcs 静态库的名字 原材料  </span>
<span class="token comment">#ar -archive</span>

ar cr libxxx.a ./lib/*.o  //生成静态库文件.a
<span class="token function">mv</span> *.h ./include          //将所有的.h文件放在include文件夹下
<span class="token function">mv</span> libxxx.a ./lib         //将.a文件也放在lib文件夹下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>此时的工程结构如下:</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/20200308003054.png" width="35%"/ loading="lazy">

<br></li>
</ul>
<h3 id="链接库，调用静态函数-a："><a href="#链接库，调用静态函数-a：" class="headerlink" title="链接库，调用静态函数.a："></a>链接库，调用静态函数.a：</h3><ul>
<li><p>执行命令 <code>g++-9 -I ./include -L ./lib -lxxx -o mainApp</code> 调用生成的.a文件，并且链接，生成可执行程序mainApp</p>
<ul>
<li><font color=#D0087E size=4 face="幼圆">注意，所要生成的.a文件的名字前三位必须是lib，否则在链接的时候，就可能导致找不到这个库</font> </li>
<li><strong>命令规则：</strong> <font color=#FF0000  size=4 face="幼圆">lib</font>xxx<font color=#FF0000  size=4 face="幼圆">.a</font> ；<font color=#D0087E size=4 face="幼圆"><strong>红色部分为固定的格式，中间的xxx才是库名</strong></font></li>
<li><font color=#D0087E size=4 face="幼圆">-l 为调用的库的名称(-l 后面没有空格，直接加库名)</font></li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#-I 为指定的库的头文件的路径</span>
<span class="token comment">#-L 为指定的库的二进制文件文件</span>
<span class="token comment">#-l 为调用的库的名称(-l 后面没有空格，直接加库名)</span>
<span class="token comment">#-o 输出文件，生成的可执行程序的名称</span>

g++-9 <span class="token parameter variable">-I</span> ./include <span class="token parameter variable">-L</span> ./lib <span class="token parameter variable">-lxxx</span> <span class="token parameter variable">-o</span> mainApp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
<li><p>此时工程的结构：</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/20200308003118.png" width="35%"/ loading="lazy">


</li>
<li><p>运行成功可以查看.a文件里面的内容，本质是把其余的.o文件全部塞到了.a里面</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#成功之后，可以查看.a里面的包含具体的所有的.o文件 </span>
nm libmytest.a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/20200308003143.png" width="50%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="运行可执行程序成功："><a href="#运行可执行程序成功：" class="headerlink" title="运行可执行程序成功："></a>运行可执行程序成功：</h3><p>运行命令 <code>./mainApp</code>，执行可执行程序，能够看到结果输出，表示成功。</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/20200308003233.png" width="80%"/ loading="lazy">

<br>

<h3 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h3><p><a href="https://github.com/xmuli/linuxExample/tree/master/04_make_so_a">04_make_so_a</a></p>
<br>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>看起来很简单，<strong>殊不知，纸上学来终觉浅，</strong> 还是亲自实现一番才以记忆深刻。若是成功的白嫖到了这篇文章，可以<strong>点个赞，</strong> 给我留个言，鼓励一下。你的加油，我们持续不断的出新的文章，那啥，白嫖一时爽，一直白嫖一直 。🥺</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux中apt与apt-get命令的区别与解释</title>
    <url>/posts/bd2df255/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  讲述Linux中<code>apt</code>与<code>apt-get</code>命令的区别与解释</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<blockquote>
<p><strong>简单来说就是：apt &#x3D; apt-get、apt-cache 和 apt-config 中最常用命令选项的集合。</strong></p>
</blockquote>
<h3 id="apt和apt-get命令之间的区别"><a href="#apt和apt-get命令之间的区别" class="headerlink" title="apt和apt-get命令之间的区别:"></a>apt和apt-get命令之间的区别:</h3><p>虽然 <code>apt</code> 与 <code>apt-get</code> 有一些类似的命令选项，但它并不能完全向下兼容 apt-get 命令。也就是说，可以用 apt 替换部分 apt-get 系列命令，但不是全部。</p>
<table>
<thead>
<tr>
<th align="center">apt 命令</th>
<th align="center">取代的命令</th>
<th align="center">命令的功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">apt install</td>
<td align="center">apt-get install</td>
<td align="center">安装软件包</td>
</tr>
<tr>
<td align="center">apt remove</td>
<td align="center">apt-get remove</td>
<td align="center">移除软件包</td>
</tr>
<tr>
<td align="center">apt purge</td>
<td align="center">apt-get purge</td>
<td align="center">移除软件包及配置文件</td>
</tr>
<tr>
<td align="center">apt update</td>
<td align="center">apt-get update</td>
<td align="center">刷新存储库索引</td>
</tr>
<tr>
<td align="center">apt upgrade</td>
<td align="center">apt-get upgrade</td>
<td align="center">升级所有可升级的软件包</td>
</tr>
<tr>
<td align="center">apt autoremove</td>
<td align="center">apt-get autoremove</td>
<td align="center">自动删除不需要的包</td>
</tr>
<tr>
<td align="center">apt full-upgrade</td>
<td align="center">apt-get dist-upgrade</td>
<td align="center">在升级软件包时自动处理依赖关系</td>
</tr>
<tr>
<td align="center">apt search</td>
<td align="center">apt-cache search</td>
<td align="center">搜索应用程序</td>
</tr>
<tr>
<td align="center">apt show</td>
<td align="center">apt-cache show</td>
<td align="center">显示装细节</td>
</tr>
</tbody></table>
<p>当然，<code>apt</code> 还有一些自己的命令：</p>
<table>
<thead>
<tr>
<th align="center">新的apt命令</th>
<th align="center">命令的功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">apt list</td>
<td align="center">列出包含条件的包（已安装，可升级等）</td>
</tr>
<tr>
<td align="center">apt edit-sources</td>
<td align="center">编辑源列表</td>
</tr>
</tbody></table>
<p>需要大家注意的是：<code>apt</code> 命令也还在不断发展， 因此，你可能会在将来的版本中看到新的选项。</p>
<br>

<h2 id="apt-get已弃用？"><a href="#apt-get已弃用？" class="headerlink" title="apt-get已弃用？"></a>apt-get已弃用？</h2><p>目前还没有任何 Linux 发行版官方放出 apt-get 将被停用的消息，至少它还有比 apt 更多、更细化的操作功能。对于低级操作，仍然需要 apt-get。</p>
<br>

<h2 id="我应该使用apt还是apt-get？"><a href="#我应该使用apt还是apt-get？" class="headerlink" title="我应该使用apt还是apt-get？"></a>我应该使用apt还是apt-get？</h2><p>既然两个命令都有用，那么我该使用 apt 还是 apt-get 呢？作为一个常规 Linux 用户，系统极客建议大家尽快适应并开始首先使用 apt。不仅因为广大 Linux 发行商都在推荐 apt，更主要的还是它提供了 Linux 包管理的必要选项。</p>
<p>最重要的是，apt 命令选项更少更易记，因此也更易用，所以没理由继续坚持 apt-get。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>最后结大家提供两点使用上的建议：</p>
<ul>
<li><code>apt</code> 可以看作 <code>apt-get</code> 和 <code>apt-cache</code> 命令的子集, 可以为包管理提供必要的命令选项。</li>
<li><code>apt-get</code> 虽然没被弃用，但作为普通用户，还是应该首先使用 <code>apt</code>。</li>
</ul>
<p>参考文章：<a href="https://www.sysgeek.cn/apt-vs-apt-get/">Linux中apt与apt-get命令的区别与解释</a></p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux中fork创建(兄弟)子进程，验证进程之间全局变量不共享，exec函数族</title>
    <url>/posts/5e8d6319/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong> 本篇主要讲解如下知识点：</p>
<ul>
<li>并行和并发的区别</li>
<li>进程控制块 <code>PCB</code> 和进程的五种状态</li>
<li>使用 <code>fork()</code> 创建子进程，创建多个兄弟子进程（不含孙进程）</li>
<li>验证进程之间没有共享全局变量</li>
<li><code>exec()</code> 函数族的使用：<code>execl()</code> 和 <code>execlp()</code></li>
</ul>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p>
<p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p>
<br>

<h3 id="并行和并发："><a href="#并行和并发：" class="headerlink" title="并行和并发："></a>并行和并发：</h3><h4 id="并发：一个时间段，处理请求的个数"><a href="#并发：一个时间段，处理请求的个数" class="headerlink" title="并发：一个时间段，处理请求的个数"></a>并发：一个时间段，处理请求的个数</h4><p>eg：<font color=#FF0000 face="幼圆"><strong>在一个时间段内，</strong> </font> <strong>处理的请求个数。</strong> 只有一个 cpu 对任务进行处理。 （每个人都吃一口饭，但是所有人都没有吃饱，短时间内让大量的快速吃，然后这样轮循环。）</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200325_204310.png" width="50%"/ loading="lazy">

 <bt>

<h4 id="并行：多个进程同时进行任务分配："><a href="#并行：多个进程同时进行任务分配：" class="headerlink" title="并行：多个进程同时进行任务分配："></a>并行：多个进程同时进行任务分配：</h4><p>可以看做，有多个 cpu 对多个任务进行同时处理。</p>
  <img src='https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/vQbYAF.png' width="50%"/ loading="lazy">

<br>

<h3 id="PCB-和-进程的五种状态："><a href="#PCB-和-进程的五种状态：" class="headerlink" title="PCB 和 进程的五种状态："></a>PCB 和 进程的五种状态：</h3><h4 id="进程控制块-PCB："><a href="#进程控制块-PCB：" class="headerlink" title="进程控制块 PCB："></a>进程控制块 PCB：</h4><p><strong>此部分了解即可：</strong> 每一个进程在内核中都有一个进程控制块 PCB 来维护进程相关的信息，其是有一个 400 多行的结构体组成，其中主要的需要了解的部分如下：</p>
<ul>
<li>进程 id。系统中每一个进程有唯一的一个 id，在 C 语言中，用 pid_t 类型表示。（凡是 xxx_t 一般都是 #define 重新定一个类型， 这里实际就上课非负整数）</li>
<li>进程的状态，有<strong>就绪，运行，挂起，停止</strong> 等状态。（还有一个<strong>初始态</strong> ）</li>
<li>进程切换时候，需要保存和恢复一些的 CPU 寄存器</li>
<li>描述虚拟地址空间的信息（每启动一个进程，就对应一个虚拟地址空间）</li>
<li>描述控制终端的信息</li>
<li>当前的工作目录</li>
<li>umask 掩码（执行 umask）</li>
<li>文件描述符表，包含很多执行 file 结构体的指针（一个进程最多打开 1024 个）</li>
<li>和信号相关的信息</li>
<li>用户 uid 和组 gid (用stat xxx 可以查看)</li>
<li>会话（Session）和进程组。（会话就是多个进程组）</li>
<li>进程可以使用的资源上限（Resource Limit）。（使用 <code>ulimit -a</code> 可看）</li>
</ul>
<br>

<h4 id="进程的五种状态："><a href="#进程的五种状态：" class="headerlink" title="进程的五种状态："></a>进程的五种状态：</h4><p>看着如下的这张图，想起里了我之前初看的计算机操作系统的相关知识的时候，感慨颇多。</p>
<ul>
<li>状态切换的关键：<ul>
<li>获得 cpu</li>
<li>cpu 执行</li>
</ul>
</li>
</ul>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200325_212716.png" width="70%"/ loading="lazy">

<br>

<h3 id="进程控制块，父进程创建子进程的分析-🎃："><a href="#进程控制块，父进程创建子进程的分析-🎃：" class="headerlink" title="进程控制块，父进程创建子进程的分析 🎃："></a>进程控制块，父进程创建子进程的分析 🎃：</h3><p>父子进程空间，其虚拟地址空间是完全一样的（用户区的所有数据都是一样的，也是会运行的相同的一段代码；系统区也是一样的，唯一不一样的就是系统区的 id 号）。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200325_215524.png" width="90%"/ loading="lazy">



<p>创建一个子进程，是使用 <code>int fork(void)</code> 函数来创建，在执行完这个 fork 函数之后，将用户区的内容全部拷贝（包括接下来要执行的代码）过去。<font color=#FF0000  size=4 face="幼圆">且该 fork 函数有两个返回值，<strong>执行完 fork() 后，父进程会返回子进程的 id（大于 0），子进程会返回一个 0，后面执行相同的代码，依靠这个来区分父子进程。</strong></font> 下面写一个代码片来表明：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200325_220405.png" width="70%"/ loading="lazy">



<p>对照上面的两个图，可以思考如下问题：</p>
<ul>
<li>fork 之后，函数的返回值？<ul>
<li>fork() 返回值 &gt; 0，就是父进程；fork() 返回值 &#x3D;&#x3D; 0，就是子进程</li>
</ul>
</li>
<li>子进程创建成功之后，代码的执行位置？<ul>
<li><font color=#FF0000  size=4 face="幼圆"><strong>父进程执行哪里（才创建子进程），子进程就重哪里里开始执行。</strong></font></li>
</ul>
</li>
<li>父子进程的执行顺序？<ul>
<li>不一定，自己去抢占 cpu 资源。执行顺序是程序员无法控制的。<strong>（cpu 轮循执行）</strong></li>
</ul>
</li>
<li>如何区分父子进程？<ul>
<li>通过 fork() 返回值</li>
</ul>
</li>
<li>如何获取当前进程和父进程的 id？<ul>
<li>获取进程 id：获取当前进程的 PID：<code>getpid()</code> ；获取当前进程的父进程的 PID： <code>getppid()</code></li>
</ul>
</li>
</ul>
<p>对与上面的问题，写如下代码片段进程测试，main.cpp 里面的代码是：<a href="https://github.com/xmuli/linuxExample/tree/master/08_fork">代码下载 main.cpp</a></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"++++i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    pid_t pid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a parent process, pid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a child process, pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"----i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>其运行结果如下：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200325_223752.png" width="60%"/ loading="lazy">

<br>

<h3 id="父进程如何创建多个兄弟子进程（不含孙进程）🎃："><a href="#父进程如何创建多个兄弟子进程（不含孙进程）🎃：" class="headerlink" title="父进程如何创建多个兄弟子进程（不含孙进程）🎃："></a>父进程如何创建多个兄弟子进程（不含孙进程）🎃：</h3><p>看了上面的小的例子之后，发现这样可以创建子进程；进一步，怎么创建多个子进程，但是不要孙创建进程？有怎么判断子进程的顺序编号？怎么得到最开始父进程？</p>
<p><strong>代码如下：</strong> <a href="https://github.com/xmuli/linuxExample/tree/master/08_fork">代码下载 childProcess.cpp</a></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    pid_t pid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">//如果当前进程是子进程，就跳出此循环，不在进行 fork() 创建新的子进程</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a child process (i == 0), pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a child process (i == 1), pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a child process (i == 2), pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a parent process (i == 3), pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p><strong>分析代码片：</strong></p>
<p><strong>若是没有上面的 13、14 行代码，那么创建的就不止 3 个子进程；就是如下图片所示的结果；</strong> <font color=#FF0000  size=4 face="幼圆"><strong>使用 fork() 创建子进程的时候，是进行虚拟地址控件的拷贝（可在草稿纸上面画图理解，是一个地址块所有的代码和变量值都复制一份），他们的当时 i 是 1 的时候，创建的新的子进程的 i 也是 1，不会是初值 0；同理，当 i 是 2 时候创建新进程，其新进程的 i 值是 2，而不是 1；</strong></font> 但是禁止子进程创建孙进程，那么就可以使用 for() 循环生成多个兄弟子进程，且没有任何的孙进程。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200325_230510.png" width="80%"/ loading="lazy">



<p><strong>运行结果：</strong></p>
<p>可以自己每运行行代码，标记一下 i 的值，以及此 i 的值时刻复制当前进程的虚拟地址空间，给新的子进程；所以 可以通过编号 i 的数值，来判断兄弟子进程的先后顺序；最后编号最大的那个，就是最初的父进程。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200325_233741.png" width="80%"/ loading="lazy">

<br>

<h3 id="进程之间是否共享全局变量：🎃"><a href="#进程之间是否共享全局变量：🎃" class="headerlink" title="进程之间是否共享全局变量：🎃"></a>进程之间是否共享全局变量：🎃</h3><ul>
<li><p>读时共享（同一个物理内存的上面区域，内存地址为同一个变量）</p>
</li>
<li><p>写的时候复制</p>
</li>
<li><p><font color=#FF0000  face="幼圆">父子进程之间能否使用全局变量通信？</font></p>
<ul>
<li><font color=#FF0000  face="幼圆">不能。因为两个进程之间内存不共享</font>（读时共享，写时复制）</li>
</ul>
<p>代码验证，改写上面的代码，添加一个全局变量 int g_num &#x3D; 200，进行验证：</p>
<p><a href="https://github.com/xmuli/linuxExample/tree/master/08_fork">代码下载 sharedGlobalvariable.cpp</a></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
  
  
  <span class="token keyword">int</span> g_num <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
  
  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
      pid_t pid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  
      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  
      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
          <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">//如果当前进程是子进程，就跳出此循环，不在进行 fork() 创建新的子进程</span>
              <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
  
  
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          g_num <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>
          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a child process (i == 2), pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
  
  
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
          g_num <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>
          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a child process (i == 2), pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
  
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          g_num <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>
          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a child process (i == 2), pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
  
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          g_num <span class="token operator">+=</span> <span class="token number">100</span><span class="token punctuation">;</span>
          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a parent process (i == 3), pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
  
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"g_nmu = %d\n"</span><span class="token punctuation">,</span> g_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行截图：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200326_232753.png" width="90%"/ loading="lazy">

<p>草稿图分析：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200326_233718.png" width="80%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="显示当前进程的状态-ps"><a href="#显示当前进程的状态-ps" class="headerlink" title="显示当前进程的状态 ps:"></a>显示当前进程的状态 ps:</h3><ul>
<li><code>ps aus</code> 显示不依赖于终端的进程（终端是用来和用户进行交互的）</li>
<li><code>ps aux | grep 查找的进程名</code> 使用管道查找指定的进程名称</li>
<li><code>ps ajx</code> 显示更多的进程信息； PID、PPID、PGID、SID（进程，父进程，组进程，会话）（会话就是多个组进程）</li>
<li><code>ps ajx | grep 查找的进程名</code> 若是没有找到，也会有一行显示信息，显示的是 grep 进程相关的信息</li>
</ul>
<br>

<h3 id="删除执行中的程序或工作-kill"><a href="#删除执行中的程序或工作-kill" class="headerlink" title="删除执行中的程序或工作 kill:"></a>删除执行中的程序或工作 kill:</h3><p>Linux kill命令用于删除执行中的程序或工作。</p>
<p>kill可将指定的信息送至程序。预设的信息为SIGTERM(15)，可将指定程序终止。若仍无法终止该程序，可使用SIGKILL(9)信息尝试强制删除程序。程序或工作的编号可利用ps指令或jobs指令查看。</p>
<ul>
<li><code>kill -9 将被杀死的进程</code>  -9 为 杀死信号</li>
<li><code>kill -l</code> 显示所有，1-31 通常使用；32 和 33 没有； 34-51 号通常为系统预留</li>
</ul>
<p>使用 kill 命令之后，有一点困惑，使用 <code>kill -l</code> 命令之后；</p>
<ul>
<li><p>在 Ubuntu 18.4 显示如下， 和 MacOS 显示有区别， 有清楚的，可以在下面留言帮我解答一下也可以哦。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200327_144507.png" width="70%"/ loading="lazy">

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200327_144548.png" width="80%"/ loading="lazy">
</li>
<li><p><strong>只有第9种信号(SIGKILL)才可以无条件终止进程，其他信号进程都有权利忽略。 下面是常用的信号：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">HUP     <span class="token number">1</span>    终端断线
INT     <span class="token number">2</span>    中断（同 Ctrl + C）
QUIT    <span class="token number">3</span>    退出（同 Ctrl + <span class="token punctuation">\</span>）
KILL    <span class="token number">9</span>    强制终止
<span class="token environment constant">TERM</span>   <span class="token number">15</span>    终止
CONT   <span class="token number">18</span>    继续（与STOP相反， fg/bg命令）
STOP   <span class="token number">19</span>    暂停（同 Ctrl + Z）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<br>

<h3 id="exec-函数族-🎃："><a href="#exec-函数族-🎃：" class="headerlink" title="exec 函数族 🎃："></a>exec 函数族 🎃：</h3><p><strong>作用：</strong> <font color=#FF0000  size=4 face="幼圆"><strong>让父子进程执行不相干的操作；能够替换进程空间中源代码的 <code>.txt</code> 段；当前程序中调用另外一个应用程序 （调用 exec 之前，需要 fork ）；</strong></font></p>
<p><font color=#FF0000  size=4 face="幼圆"><strong>exec() 函数族， 也不要判断返回值：若是函数执行成功，不返回（.text 的代码立即被全部替换，后面的代码也不会执行）；若是执行失败，可以调用 perror(“xx 提示:”) 来打印错误信息，退出当前进程；</strong></font></p>
<br>

<h4 id="执行指定目录下的程序-execl"><a href="#执行指定目录下的程序-execl" class="headerlink" title="执行指定目录下的程序 execl():"></a>执行指定目录下的程序 execl():</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">execl</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>arg<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">/*, (char *)0 */</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><p><strong>path:</strong> 需要执行的程序的绝对路径(推荐绝对路经)</p>
</li>
<li><p><strong>变参 arg：</strong> 要执行的程序的需要的参数</p>
<ul>
<li><strong>第一个 arg：</strong> 占位（内容随便写什么，但不可为空）</li>
<li><strong>后边的 arg：</strong> 命令的参数</li>
</ul>
</li>
<li><p><strong>参数写完之后：</strong> NULL （作用是哨兵，表示该命令的参数已经输入完毕）</p>
</li>
<li><p>一般是执行自己写的程序（也可以执行系统自带的命令）</p>
</li>
<li><p>写一个例子验证一下：<a href="https://github.com/xmuli/linuxExample/tree/master/09_exec">代码下载</a></p>
<ul>
<li><strong>代码如下：</strong></li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-----i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>

    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建子进程</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">execl</span><span class="token punctuation">(</span><span class="token string">"/bin/ls"</span><span class="token punctuation">,</span> <span class="token string">"占位参数"</span><span class="token punctuation">,</span> <span class="token string">"-al"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//ls 程序使用子进程的地址空间</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token comment">//这段打印只会（父进程）被执行一遍。</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"+++++i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>   

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p><strong>过程分析：</strong></p>
<p>第一段打印”—–i &#x3D;” 内容，是只会被父进程执行一遍的，子进程不会执行该段代码（分析见上）；结束时候打印 “+++++i &#x3D;” 内容时候，是只会执行一遍的，还是被父进程执行的，而子进程不执行 的原因是，当第 12 行的代码execl(“ls”) 执行结束之后，其子进程的虚拟地址空间的以用户区域的 .text 代码段的二进制代码被替换为 &#x2F;bin&#x2F;ls 这个程序的代码；其后面面也都是运行 ls 程序的代码内容。</p>
</li>
<li><p><strong>运行结果：</strong></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200327_150211.png" width="70%"/ loading="lazy"></li>
</ul>
</li>
</ul>
<br>

<h4 id="执行-PATH-目录下的程序-execlp"><a href="#执行-PATH-目录下的程序-execlp" class="headerlink" title="执行 PATH 目录下的程序 execlp():"></a>执行 PATH 目录下的程序 execlp():</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">execlp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>arg<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">/*, (char *)0 */</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><strong>file:</strong> 需要执行的程序的名字</li>
<li><strong>变参 arg：</strong> 要执行的程序的需要的参数<ul>
<li><strong>第一个 arg：</strong> 占位（内容随便写什么，但不可为空）</li>
<li><strong>后边的 arg：</strong> 命令的参数</li>
</ul>
</li>
<li><strong>参数写完之后：</strong> NULL （作用是哨兵，表示该命令的参数已经输入完毕）</li>
<li>一般是执行系统自带的命令（也就是 &#x2F;bin 下的程序）<ul>
<li>execlp 执行自定义程序的程序： file 参数绝对路径</li>
</ul>
</li>
</ul>
<br>

<h3 id="下载-x2F-系列地址："><a href="#下载-x2F-系列地址：" class="headerlink" title="下载&#x2F;系列地址："></a>下载&#x2F;系列地址：</h3><p><a href="https://github.com/xmuli/linuxExample">https://github.com/xmuli/linuxExample</a></p>
<p>欢迎 star 和 fork 这个系列的 linux 学习，附学习进阶的路线图。</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux中man手册，阻塞和非阻塞，stat，文件操作和遍历，文件描述符复制dup()</title>
    <url>/posts/85526a5a/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　讲解在 <code>Unix / Linux</code> 下，<code>man</code> 手册的使用；写了一个例子调用系统库函数来读写文本文件，和打印文件描述符；<strong>阻塞和非阻塞实际是文件的属性，而非标准输入输出的 I&#x2F;O 函数的属性。</strong> 以及文件详细描述的 <code>stat</code> 命令和 <code>stat()</code> 函数的使用；文件属性相关的操作；文件夹遍历和创建、删除的相关函数，可能 <code>Linux</code> 有时候会调用到他们，现在实际上，更多的使用 Qt 的库来对文件进行读写操作；以及关于复制文件描述符的函数 <code>dup()</code> 函数的讲解</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p>
<p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p>
<br>

<h3 id="man-手册的使用："><a href="#man-手册的使用：" class="headerlink" title="man 手册的使用："></a>man 手册的使用：</h3><ul>
<li><p><code>man 2 open</code> 在第二章里面，精确查找 open 函数</p>
</li>
<li><p><code>man man</code> 查看 man 手册的大致介绍 （Linux 下）</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_171732.png" width="80%"/ loading="lazy">
</li>
<li><p>mac 下安装中文 man 文档：<a href="https://www.cnblogs.com/himonkey/p/11853564.html">Mac配置中文 man 手册</a> </p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200314_205616.png" width="70%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="系统函数读写文件："><a href="#系统函数读写文件：" class="headerlink" title="系统函数读写文件："></a>系统函数读写文件：</h3><p><strong>如下为 Unix &#x2F; Linux系统的库函数：</strong></p>
<ul>
<li><p><code>open()</code> ：打开文件</p>
</li>
<li><p><code>read()</code> ：对文件进行读操作</p>
</li>
<li><p><code>write()</code> ：对文件进行写操作</p>
</li>
<li><p><code>lseek()</code> ：移动文件指针；扩展文件大小（移动指针后，要进行一次写操作）</p>
<ul>
<li><p>文件指针移动到头部：lseek(fd, 0, SEEK_SET);</p>
</li>
<li><p>文件指针移动到尾部：lseek(fd, 0, SEEK_END);</p>
</li>
<li><p>文件指针移动到当前位置：lseek(fd, 0, SEEK_SUR);</p>
</li>
<li><p>文件大写为 100K, 扩展到 1000K:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//文件指针从文件尾部偏移 1000 大小，这部分用^@ 填充占位</span>
<span class="token function">wrire</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//随便写一个什么到文件中，进行一次写操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p><code>全局变量 errno</code> ：对于调用系统函数对文件进行读写操作，函数会返回一个错误 int 类型的数值。而 errno 变量就是不同的错误返回值的含义打印出来（字符串），使得人类可以看懂。调用方法:  <code>perror(&quot;[注释信息: ]&quot;);</code></p>
</li>
</ul>
<br>

<h4 id="写一例子："><a href="#写一例子：" class="headerlink" title="写一例子："></a>写一例子：</h4><ul>
<li><p>将 <code>Linux</code> 系统的函数，调用 <code>open</code> 、<code>printf</code>、<code>read</code> 写一个例子：</p>
</li>
<li><p>编写代码如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> fp <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> fp2 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"temp.txt"</span><span class="token punctuation">,</span> O_WRONLY <span class="token operator">|</span> O_CREAT<span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建文件时候，必须要有权限</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fp = %d\n"</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fp2 = %d\n"</span><span class="token punctuation">,</span> fp2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[注释信息: ]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//如果返回错误，会打印人类可读懂的出字符串</span>

    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>fp2<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret = %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">close</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>fp2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>编译：<code>g++-9 main.cpp -o main</code></p>
</li>
<li><p>运行：其中 fp 便是打开文件 hello.txt 的文件描述符（因为 0、1、2 被 stdin、stdout、stdout 占了，所以最小就是 3）；然后当打开第二个文本文件 temp.txt 的时候，其返回的文件描述符自然就是 4。关于文件描述符，详细原理解释可参考 <a href="https://github.com/xmuli/linuxExample/tree/master/07_sysfun">此篇</a> 。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_172958.png" width="50%"/ loading="lazy"></li>
</ul>
<p><strong>源码下载：</strong> <a href="https://github.com/xmuli/linuxExample/tree/master/07_sysfun">07_sysfun</a></p>
<br>

<h3 id="阻塞和非阻塞："><a href="#阻塞和非阻塞：" class="headerlink" title="阻塞和非阻塞："></a>阻塞和非阻塞：</h3><p>终端程序： bash 为前台程序，当执行 a.out 程序时候，bash 就成为了后台程序，a.out 成为了前台程序（代码执行到，等待输入）；当键盘输入完成，a.out 成为了后台程序，bash 成为了前台程序。</p>
<p>当输入的长度 大于 buf[10] 中的 10 时候， 多余的部分就会成为后面的命令输入。</p>
<p>将下面的两种，手动敲一遍。</p>
<p><font color=#FF0000 face="幼圆"><strong>阻塞</strong> 和 <strong>非阻塞</strong> 情况下，是文件的属性，而非标准输入输出的 I&#x2F;O 函数的属性。</font></p>
<ul>
<li><p>普通文件：hello.cpp </p>
<ul>
<li>默认是非阻塞</li>
</ul>
</li>
<li><p>终端设备 &#x2F;dev&#x2F;tty （默认是阻塞）</p>
<ul>
<li>终端</li>
<li>管道</li>
<li>套接字</li>
</ul>
</li>
</ul>
<br>

<h3 id="stat-x2F-lstat-函数-："><a href="#stat-x2F-lstat-函数-：" class="headerlink" title="stat &#x2F; lstat 函数 ："></a><font color=#FF0000 face="幼圆">stat &#x2F; lstat 函数 ：</font></h3><ul>
<li><p>写一个小的程序，判断 <code>ls -l</code> 命令，基本可以实现 改用 switch()</p>
</li>
<li><p><code>lstat</code> 和 <code>stat</code> 函数对于链接 l 的区别不一样。</p>
<ul>
<li>lstat 读取的是链接文件， 本身的属性</li>
<li>stat 读取的是链接文件指向的文件的属性 （也被称呼：追踪，穿透）</li>
<li>fstat 第一个参数是指文件描述符</li>
</ul>
</li>
</ul>
<br>

<blockquote>
<p>#对应的 stat 命令：</p>
<p><font color=#FF0000  size=4 face="幼圆"><strong>作用：显示文件或文件系统的状态</strong></font></p>
<p>uinx: stat -x hello.txt</p>
<p>linux: stat hello.txt</p>
</blockquote>
<br>

<p>运行命令可以看到：hell.txt 文件的所有信息</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_165144.png" width="60%"/ loading="lazy">

 <br>

<p>由 <code>ls -l hello.txt</code> 查看看的，前面的 <code>-rwxrwxrwx</code> 就是表示下图的 <strong>文件类型</strong> 、<strong>文件所有者权限</strong> 、<strong>文件所属组权限</strong> 、<strong>其他人对该文件的权限</strong> ，</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_171459.png" width="60%"/ loading="lazy">

<br>

<ul>
<li>其用 含义就是如下：</li>
</ul>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_163434.png" width="80%"/ loading="lazy">



<ul>
<li><strong>其在代码里面，用 struct 所表示的为：</strong></li>
</ul>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_163416.png" width="70%"/ loading="lazy">

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">st_ mode <span class="token operator">--</span> <span class="token number">16</span>位整数
  <span class="token number">0</span><span class="token operator">-</span><span class="token number">2</span> bit<span class="token operator">--</span>其他人权限
      <span class="token operator">-</span> S_IROTH  <span class="token number">00004</span>    读权限
      <span class="token operator">-</span> S_IWOTH  <span class="token number">00002</span>    写权限
      <span class="token operator">-</span> S_IXOTH  <span class="token number">00001</span>    执行权限
      <span class="token operator">-</span> S_IRIvxO <span class="token number">00007</span>    掩码<span class="token punctuation">,</span>过滤 st_mode 中除其他人权限以外的信息
    
  <span class="token number">3</span><span class="token operator">-</span><span class="token number">5</span> bit <span class="token operator">--</span>所属组权限
      <span class="token operator">-</span>S_IRGRP   <span class="token number">00040</span>    读权限
      <span class="token operator">-</span>S_IWGRP   <span class="token number">00020</span>    写权限
      <span class="token operator">-</span>S_IXGRP   <span class="token number">00010</span>    执行权限
      <span class="token operator">-</span>S_IRWXG   <span class="token number">00070</span>    掩码<span class="token punctuation">,</span>过滤 st_mode 中除所属组权限以外的信息
  
  <span class="token number">6</span><span class="token operator">-</span><span class="token number">8</span> bit <span class="token operator">--</span>文件所有者权限
      <span class="token operator">-</span>S_IRUSR   <span class="token number">00400</span>    读权限
      <span class="token operator">-</span>S_IWUSR   <span class="token number">00200</span>    写权限
      <span class="token operator">-</span>S_IXUSR   <span class="token number">00100</span>    执行权限
      <span class="token operator">-</span>S_IRWXU   <span class="token number">00700</span>    掩码<span class="token punctuation">,</span>过滤 st_mode 中除文件所有者权限以外的信息。
  
  <span class="token number">12</span><span class="token operator">-</span><span class="token number">15</span> bit <span class="token operator">--</span>文件类型
      <span class="token operator">-</span>S_IFSOCK  <span class="token number">0140000</span>  套接字
      <span class="token operator">-</span>S_IFLNK   <span class="token number">0120000</span>  符号链接<span class="token punctuation">(</span>软链接<span class="token punctuation">)</span>
      <span class="token operator">-</span>S_IFREG   <span class="token number">0100000</span>  普通文件
      <span class="token operator">-</span>S_IFBLK   <span class="token number">0060000</span>  块设备
      <span class="token operator">-</span>S_IFDIR   <span class="token number">0040000</span>  目录
      <span class="token operator">-</span>S_IFCHR   <span class="token number">0020000</span>  字符设备
      <span class="token operator">-</span>S_IFIFO   <span class="token number">0010000</span>  管道
      <span class="token operator">-</span>S_IFMT0   <span class="token number">0017000</span>  掩码<span class="token punctuation">,</span>过滤 st_mode 中除文件类型以外的信息
      
  
 <span class="token comment">// 命令对应的函数 </span>
<span class="token keyword">int</span> <span class="token function">stat</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">Istat</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="文件属性相关的函数："><a href="#文件属性相关的函数：" class="headerlink" title="文件属性相关的函数："></a>文件属性相关的函数：</h3><ul>
<li><code>access()</code> 判断传入的文件，所具有的（读、写、执行、是否存）的权限</li>
<li><code>chmod()</code> 修改文件权限</li>
<li><code>chown()</code> 修改文件所有者和所属组</li>
<li><code>truncate()</code> 修改文件大小</li>
<li><code>^@</code> 文件空洞， 填充占位符号，实际就是 <code>\0</code></li>
</ul>
<br>

<h3 id="目录操作相关函数："><a href="#目录操作相关函数：" class="headerlink" title="目录操作相关函数："></a>目录操作相关函数：</h3><h4 id="目录操作相关函数：-1"><a href="#目录操作相关函数：-1" class="headerlink" title="目录操作相关函数："></a>目录操作相关函数：</h4><ul>
<li><code>rename()</code> 文件重命名</li>
<li><code>chdir()</code> 修改 <font color=#D0087E size=4 face="幼圆">当前进程（应用程序）</font>的路径；cd</li>
<li><code>getcwd()</code> 获取当前进程的工作目录；pwd</li>
<li><code>mkdir()</code> 创建目录；mkdir</li>
<li><code>rmdir()</code> 删除一个空目录；rm</li>
</ul>
<br>

<h4 id="目录遍历相关函数："><a href="#目录遍历相关函数：" class="headerlink" title="目录遍历相关函数： "></a><font color=#FF0000 face="幼圆">目录遍历相关函数： </font></h4><ul>
<li><code>opendir()</code> 打开一个目录</li>
<li><code>readdir()</code> 读目录（进入子目录，需要手动创建递归函数） </li>
<li><code>close()</code> 关闭目录</li>
</ul>
<br>

<h3 id="dup-x2F-dup2-x2F-fcntl-函数："><a href="#dup-x2F-dup2-x2F-fcntl-函数：" class="headerlink" title="dup &#x2F; dup2 &#x2F; fcntl 函数："></a><font color=#FF0000 face="幼圆">dup &#x2F; dup2 &#x2F; fcntl 函数：</font></h3><ul>
<li><code>dup()</code> 复制文件描述符</li>
<li><code>dup2()</code> 同上，形参不同（也会称为 参数 2：文件描述符的重定向）</li>
<li><code>fcntl()</code> 修改文件的状态标志</li>
</ul>
<br>

<h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/github.svg" width="5%"/ loading="lazy"> <a href="https://github.com/xmuli/linuxExample">https://github.com/xmuli/linuxExample</a> </p>
<p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux中使用使用互斥量(锁)Mutex来操持多线程同步执行pthread_mutex_lock()</title>
    <url>/posts/ea6e5a6c/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　在 Linux 中，<strong>使用互斥量（互斥锁🔐） Mutex 来给保证多线程</strong> ，在访问公共变量的时候能够 “串行” 代码。从而使得多线程正确的同步执行。关于多线程创建和使用可以参考<a href="https://blog.csdn.net/qq_33154343/article/details/105546234">前面几篇</a>的文章，争取早日把 Linux 系统篇之 系统编程给发布完系列的教程。</p>
<p>PS：好几天没有接着学习 Linux 的系统函数和理论知识了。可能是前面几天有点忙了吧；时间流逝啊，总是这么得快，，，，</p>
<p>关于互斥锁的使用如下：</p>
<ul>
<li>pthread_mutex_t *mutex;   &#x2F;&#x2F;创建一个锁 </li>
<li>pthread_mutex_init();     &#x2F;&#x2F;初始化一个互斥锁</li>
<li>pthread_mutex_lock();     &#x2F;&#x2F;上锁🔓，或者使用 pthread_mutex_trylock()</li>
<li>pthread_mutex_unlock();   &#x2F;&#x2F;解锁🔐</li>
<li>pthread_mutex_destroy;    &#x2F;&#x2F;销毁互斥锁</li>
</ul>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p>
<p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p>
<br>

<h3 id="背景铺垫："><a href="#背景铺垫：" class="headerlink" title="背景铺垫："></a>背景铺垫：</h3><ul>
<li><p><strong>程序：</strong></p>
<p>先写一个多线程程序，A 和 B 两个子线程一起数出输出到 100000；然后在没有锁🔐的情况下，每一线程轮流执行 10 毫秒，模拟时间片轮转切片。</p>
</li>
<li><p><strong>代码程序：</strong></p>
<p>这个代码还没有加锁，保护共享变量。完整代码如下；</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span>

<span class="token keyword">int</span> g_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//在全局区域，共享</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXNUMBER</span> <span class="token expression"><span class="token number">100000</span></span></span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funA</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funB</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    pthread_t pthreadA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    pthread_t pthreadB <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pthreadA<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> funA<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建两个子线程</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pthreadB<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> funB<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">pthread_join</span><span class="token punctuation">(</span>pthreadA<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//阻塞，回收资源</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>pthreadB<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funA</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> g_num <span class="token operator">&lt;</span> MAXNUMBER<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> g_num<span class="token punctuation">;</span>  <span class="token comment">//27-29行，增加寄存器和内存之间的数据交换操作，使得出现内存没来得及保存数据的现象的概率大一点</span>
        a<span class="token operator">++</span><span class="token punctuation">;</span>
        g_num <span class="token operator">=</span> a<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A thread id: %ld,   num = %d\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g_num<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//沉睡 10 毫秒， 模拟时间片轮转，效果更明显</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funB</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> g_num <span class="token operator">&lt;</span> MAXNUMBER<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> g_num<span class="token punctuation">;</span>
        b<span class="token operator">++</span><span class="token punctuation">;</span>
        g_num <span class="token operator">=</span> b<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"B thread id: %ld,   num = %d\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g_num<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//沉睡 10 毫秒， 模拟时间片轮转，效果更明显</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
<li><p><strong>结果分析：</strong></p>
<p>下面截图里面，在 MacOS 10.14.6 和 Ubuntu 20.04 里面跑，都是正确的结果；</p>
<p>[疑惑]可能是因为系统系统内核或者底层作了修改？？？又或者是数数的间隔过小，数的数字不多？ 预判的结果是 实际数数的大小会比实际正确结果要小一点（原因是时间片轮转的原因），待日后挖坟考古？难道是系统比较新？所以连续出现几次都是最正确的结果。。。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200425_161541.png" width="70%"/ loading="lazy">


<p>[解答]没有出现内存来不及保存增加的数据，cpu 的时间片就被其他资源占去了，导致最后出现的小数有可能出现在大数的后面打印，这是一个概率问题；而 27-29 行和 42-44 行，是刻意增加寄存器和内存之间的数据交换操作次数，使得出现内存没来得及保存数据的现象的概率大一点。</p>
<ul>
<li><p>如果在 Ubuntu 16.04 里面跑改程序，如果出现了最后一个数字比 100000 小一点，那么解释的可能如下：</p>
<p>其中会发现结果有点混乱。这是两个子线程互相操作同一个数据，时间片切换的时候，还新的数据还没有来得及保存进内存里面，就切换到了下一个线程中去了。</p>
<ul>
<li>[实际结果]多数了一位，最后一个结果是100001，且有时候还会下面还会再打印一个小的数字</li>
<li>[期望结果]只数数到 100000；</li>
<li>分析图如下：</li>
</ul>
</li>
</ul>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200425_145954.png" width="60%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="使用互斥量-锁-Mutex"><a href="#使用互斥量-锁-Mutex" class="headerlink" title="使用互斥量(锁) Mutex:"></a>使用互斥量(锁) Mutex:</h3><p><font color=#FF0000  size=4 face="幼圆"><strong>如果我们想使用互斥锁同步线程，那么所有线程，只要是有访问同一个共享公共变量的线程都要加锁。</strong> </font></p>
<ul>
<li><strong>使用流程步骤：</strong></li>
</ul>
<ol>
<li><p><strong>创建一把互斥锁</strong> </p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pthread_mutex_t <span class="token operator">*</span>mutex<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


</li>
<li><p><strong>对互斥锁进程初始化 init</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span>pthread_mutex_t <span class="token operator">*</span>mutex<span class="token punctuation">,</span> <span class="token keyword">const</span> pthread_mutexattr_t <span class="token operator">*</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


</li>
<li><p><strong>使用互斥锁：每个子线程要访问公共变量的时候，都加上锁，使用完后就解锁</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//若果没有上锁，就上锁；若果已经上锁，直接返回，不阻塞</span>
<span class="token keyword">int</span> <span class="token function">pthread_mutex_trylock</span><span class="token punctuation">(</span>pthread_mutex_t <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//若果没有上锁，就上锁；若果已经上锁，就阻塞该线程</span>
<span class="token keyword">int</span> <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span>pthread_mutex_t <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//解锁</span>
<span class="token keyword">int</span> <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span>pthread_mutex_t <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
<li><p><strong>使用完毕，销毁互斥锁</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span>pthread_mutex_t <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<br>

<h3 id="改写例子，使用互斥量-锁-实例："><a href="#改写例子，使用互斥量-锁-实例：" class="headerlink" title="改写例子，使用互斥量(锁)实例："></a>改写例子，使用互斥量(锁)实例：</h3><p>将上面的例子改了改，然后在 A、B 两个子线程里面，使用互斥量(锁)，会发现也会得到取其正确的结果。结果符合预期。</p>
<ul>
<li><strong>修改后的加锁例子：</strong></li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span>

<span class="token keyword">int</span> g_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//在全局区域，共享</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXNUMBER</span> <span class="token expression"><span class="token number">100000</span></span></span>
pthread_mutex_t g_mutex<span class="token punctuation">;</span> <span class="token comment">//创建全局的互斥锁</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funA</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funB</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//对锁进行初始化</span>

    pthread_t pthreadA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    pthread_t pthreadB <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pthreadA<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> funA<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建两个子线程</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pthreadB<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> funB<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">pthread_join</span><span class="token punctuation">(</span>pthreadA<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//阻塞，回收资源</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>pthreadB<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//释放互斥锁资源</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funA</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> g_num <span class="token operator">&lt;</span> MAXNUMBER<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> g_num<span class="token punctuation">;</span>
        a<span class="token operator">++</span><span class="token punctuation">;</span>
        g_num <span class="token operator">=</span> a<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A thread id: %ld,   num = %d\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//沉睡 10 毫秒， 模拟时间片轮转，效果更明显</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funB</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> g_num <span class="token operator">&lt;</span> MAXNUMBER<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> g_num<span class="token punctuation">;</span>
        b<span class="token operator">++</span><span class="token punctuation">;</span>
        g_num <span class="token operator">=</span> b<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"B thread id: %ld,   num = %d\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//沉睡 10 毫秒， 模拟时间片轮转，效果更明显</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p><strong>运行结果：</strong></p>
<p>实际结果和预期结果一致。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200425_161541.png" width="60%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p> <a href="https://github.com/xmuli/linuxExample/tree/master/18_mutex">18_mutex</a></p>
<p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux中创建多线程实例pthread_create()</title>
    <url>/posts/28f8209f/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　前面几篇，学习了 Linux 下多进程使用  fork() 分析的其构造和原理；这里进一步，探究一下如何创建多线程，以及多线程和多进程之间的差异。最后写几个实例；验证分析。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p>
<p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p>
<br>

<h3 id="线程："><a href="#线程：" class="headerlink" title="线程："></a>线程：</h3><p>线程和进程的理论概念不再称述；这里主要是从虚拟地址空间和 PCB 的角度来看，主、子线程。</p>
<p>Linux 中，系统是不认识线程还是进程的，它们只认识 PCB；</p>
<p>Unix 和 Linux 的线程在系统的底层实现是不一样的，有区别的，但是它们在应用层是看起来没什么区别；Linux 中一开始没有线程，是 Windows 中先有的，后面被前辈们移植过来的，所以 Linux 中线程的实现，系统底层是由创建进程改了改。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200411_215259.png" width="80%"/ loading="lazy">



<ul>
<li><p><font color=#FF0000  size=4 face="幼圆"><strong>主线程和子线程：</strong></font></p>
<ul>
<li><font color=#FF0000  size=4 face="幼圆"><strong>共享：</strong></font><ul>
<li>用户区内，除了栈区是不共享的，其余都是不共享的。</li>
</ul>
</li>
<li><font color=#FF0000  size=4 face="幼圆"><strong>不共享：</strong></font><ul>
<li>栈区（当有 1 主 + 4 子线程时候，栈区会被平分为 5 份）</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>在 Linux 下：</strong></p>
<ul>
<li>线程就是进程 – 轻量级的进程</li>
<li>对于内核来说，线程就是进程（内核只会用）</li>
</ul>
</li>
<li><p><strong>多线程和多进程的区别：</strong></p>
<ul>
<li><strong>多进程共享的资源：</strong><ul>
<li>代码</li>
<li>文件描述符</li>
<li>内存映射区 –mmap</li>
</ul>
</li>
<li><strong>多线程共享的资源：</strong><ul>
<li>堆</li>
<li>全局变量</li>
<li>相比多进程，更加节省系统资源；对于系统 CPU 轮转时间片来说，不论是线程还是进程，它不认识，只认 PCB。</li>
</ul>
</li>
</ul>
</li>
</ul>
<br>

<h3 id="安装线程-man-page："><a href="#安装线程-man-page：" class="headerlink" title="安装线程 man page："></a>安装线程 man page：</h3><ul>
<li><p>安装线程 man page 命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> manpages-posix-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<br>

<h3 id="查看指定线程的-LWP-号："><a href="#查看指定线程的-LWP-号：" class="headerlink" title="查看指定线程的 LWP 号："></a>查看指定线程的 LWP 号：</h3><ul>
<li>线程号和线程 ID 是有区别的</li>
<li>线程号是给内核看的</li>
<li>查看方式：<ul>
<li>找到程序的进程 ID</li>
<li><code>ps -Lf pid</code></li>
</ul>
</li>
</ul>
<p>一个例子，查看火狐浏览器程序由多线程构成：</p>
<p>如： Linux 下 查看火狐浏览器，发现其是由多线程构成的</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ps ajx <span class="token operator">|</span> grep <span class="token string">"firefox"</span>

ps <span class="token operator">-</span>Lf <span class="token number">31102</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="pthread-create-："><a href="#pthread-create-：" class="headerlink" title="pthread_create()："></a>pthread_create()：</h3><ul>
<li><strong>作用：</strong> 创建子线程</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span>pthread_t <span class="token operator">*</span>thread<span class="token punctuation">,</span> <span class="token keyword">const</span> pthread_attr_t <span class="token operator">*</span>attr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>start_routine<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><p>主线程退出，子线程一定会被强制结束退出。</p>
</li>
<li><p><strong>参数：</strong></p>
<ul>
<li><strong>thread：</strong> 传出参数，线程创建成功后，会设置一个合适值，通常比较大。</li>
<li><strong>attr：</strong> 线程属性，默认使用 NULL</li>
<li><strong>start_routine：</strong> 子线程的处理函数（也被称为回调函数）</li>
<li><strong>arg：</strong> 子线程的处理函数的参数</li>
</ul>
</li>
<li><p><strong>返回值：</strong></p>
<ul>
<li><p>函数调用成功返回 0，失败返回错误号；但此处的错误号不是之前那个能够用 perror() 打印的错误号，这两个不是一个东西，他们各自使用的库不通用。</p>
</li>
<li><p>想要打印错误信息，需要使用标准库函数 strerror()</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_creator</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> 
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error: %s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
<h3 id="写一个例子："><a href="#写一个例子：" class="headerlink" title="写一个例子："></a>写一个例子：</h3><h4 id="例子一："><a href="#例子一：" class="headerlink" title="例子一："></a>例子一：</h4><p>使用不带参数的，子线程的处理函数，验证子线程执行的代码，只有该回调函数里面的内容。</p>
<ul>
<li><p><strong>代码示例：</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">myfun</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    pthread_t pthread <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//创建一个子线程</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pthread<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> myfun<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"parent thread id: %ld\n"</span><span class="token punctuation">,</span> pthread_self<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//避免主线程运行后，就死亡了，而子线程没机会</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//验证子线程，并不会执行这里面的代码，只会执行回调函数 muyfun 里面的</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">myfun</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child thread id: %ld\n"</span><span class="token punctuation">,</span> pthread_self<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
<li><p><strong>运行结果：</strong></p>
  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200411_214058.png" width="60%"/ loading="lazy"></li>
</ul>
<br>

<h4 id="例子二："><a href="#例子二：" class="headerlink" title="例子二："></a>例子二：</h4><p>写一个能够创建多个子线程的函数，要使用到其参数。</p>
<p>注意其是地址传递的话，有这样一种可能，该变量是在主线程的地址空间中，其他几个子线程都是在该线程中读取改值；但是由于他们分别抢占 CPU 时间片，会导致结果可能和预期结果不符；此时可以考虑使用值传递。</p>
<ul>
<li><p><strong>代码示例：</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span>

<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token comment">//设置为全局变量，在全局区域，共享</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">myfun</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>num<span class="token punctuation">;</span>  <span class="token comment">//传一个地址进去（voi* 也是 4 个字节）</span>
    pthread_t id<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> myfun<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d, thread id: %ld\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">myfun</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"num = %d, child thread id: %ld\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>程序分析：</strong></p>
<p>可以看出，其其创建多个子线程成功了🤓🤓，和预期结果相符。</p>
</li>
<li><p><strong>运行结果：</strong></p>
  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200413_220730.png" width="70%"/ loading="lazy">


</li>
<li><p>其它</p>
<p>如果将全局变量 <code>int num = 13;</code> 放到  main() 里面，当做局部变量的话，就会出现如下结果!!! 有一处小的瑕疵，有点困惑？注意其 mun 的值，有时候会异常，怀疑是多个线程抢占 CPU 的时间片 + 是传递的地址，或者有其他系统或者数据修改过该值？？？所以有时候值得范围是非 13-17；异常变得巨大； 原因还在找，或者你知道的话，可以在下方留言告诉我，学习知识这种事，达者为先，相互指点一下后到“晚辈”。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200411_232406.png" width="100%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p> <a href="https://github.com/xmuli/linuxExample/tree/master/17_thread">17_thread</a></p>
<p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux中创建守护进程setsid()</title>
    <url>/posts/2c6bb236/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　前面几篇，刚写过了父子进程的实例。这里写一个<strong>守护进程</strong> 的例子，从了解到运用 <code>setsid()</code> ；守护进程也就是脱离于终端，不需要和用户交流的，不受注销影响的后台程序（可理解为 win 中的<strong>服务</strong> ）。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p>
<p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p>
<br>

<h3 id="守护进程的特点："><a href="#守护进程的特点：" class="headerlink" title="守护进程的特点："></a>守护进程的特点：</h3><ul>
<li>后台服务程序</li>
<li>独立（是脱离于）控制终端的，用户不需要和终端交互</li>
<li>周期性的执行某任务</li>
<li>不受用户登录注销的影响</li>
<li>一般采用 d 结尾的名字（服务）</li>
</ul>
<br>

<h3 id="进程组-多个进程："><a href="#进程组-多个进程：" class="headerlink" title="进程组 - 多个进程："></a>进程组 - 多个进程：</h3><ul>
<li><font color=#FF0000  size=4 face="幼圆">进程组的组长？</font><ul>
<li><font color=#FF0000  size=4 face="幼圆">组长是是组里的第一个进程</font></li>
<li><font color=#FF0000  size=4 face="幼圆">进程组的 ID &#x3D;&#x3D; 进程组的组长的 ID</font></li>
</ul>
</li>
</ul>
<br>

<h3 id="会话-多个进程组："><a href="#会话-多个进程组：" class="headerlink" title="会话 - 多个进程组："></a>会话 - 多个进程组：</h3><p>进程组是由多个进程组成，而会话是由多个进程组组成成。</p>
<ul>
<li><strong>创建一个会话注意的事项：</strong><ul>
<li><font color=#FF0000  size=4 face="幼圆"><strong>不能是组长进程</strong></font></li>
<li>创建会话的进程成为新进程组的组长</li>
<li>有些 Linux 版本需要 root 权限执行此操作（Ubuntu 不需要）</li>
<li><font color=#FF0000  size=4 face="幼圆"><strong>创建出的新会话会丢弃原有的控制终端</strong></font></li>
<li>一般步骤：先 fork()，父亲死，儿子创建绘画操作(setsid())</li>
</ul>
</li>
<li><strong>获取进程所属的会话 ID：</strong><ul>
<li><code>pid_t getsid(pid_t pid);</code></li>
</ul>
</li>
<li><strong>创建一个会话：</strong><ul>
<li><code>pid_t setsid(void);</code></li>
</ul>
</li>
</ul>
<br>

<h3 id="创建守护进程模型："><a href="#创建守护进程模型：" class="headerlink" title="创建守护进程模型："></a>创建守护进程模型：</h3><p>下面列出创建一个标准的进程守护模型操作流程：</p>
<ol>
<li><strong>fork() 进程，父进程退出 (必须)</strong></li>
<li><strong>子进程创建新的会话 (必须)</strong><ul>
<li>使用 <code>setsid()</code></li>
</ul>
</li>
<li><strong>改变当前工作目录 chdir (可选)</strong><ul>
<li>比如，U 盘插在笔记本，运行 U 盘文件夹里面的可执行程序，然后拔掉，会有一些影响</li>
</ul>
</li>
<li><strong>重设文件掩码 (可选)</strong><ul>
<li>子进程会继承父进程的掩码</li>
<li>增加子进程程序操作的灵活性</li>
<li>umask(0)</li>
</ul>
</li>
<li><strong>关闭文件描述符 (可选)</strong><ul>
<li>节约资源，关闭此进程的 PCB 的文件描述符表中 0、1、2 三个，因为预警不需要和终端交互，故可关闭</li>
</ul>
</li>
<li><strong>执行核心工作 (必须)</strong><ul>
<li>你想让该守护进程干的事情</li>
</ul>
</li>
</ol>
<br>

<h3 id="写一个例子："><a href="#写一个例子：" class="headerlink" title="写一个例子："></a>写一个例子：</h3><p>对上面的函数使用，写一个例子：写一个守护进程，每隔 2s 获取一次系统时间，写入到文本文件中。</p>
<ul>
<li><p><strong>代码示例</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span>

<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//用作回调函数，给 signal() 调用</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//父进程退出</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">setsid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//子进程创建为会话</span>
        <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">"/Users/muli/Desktop/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//改变进程的工作目录</span>
        <span class="token function">umask</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//重设置文件掩码</span>

        <span class="token function">close</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//关闭和终端的联系，文件描述符</span>
        <span class="token function">close</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">close</span><span class="token punctuation">(</span>STDERR_FILENO<span class="token punctuation">)</span><span class="token punctuation">;</span>

        __sigaction_u sigactu<span class="token punctuation">;</span>  <span class="token comment">//设置信号捕捉</span>
        sigactu<span class="token punctuation">.</span>__sa_handler <span class="token operator">=</span> func<span class="token punctuation">;</span>

        <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> act<span class="token punctuation">;</span>
        act<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        act<span class="token punctuation">.</span>__sigaction_u <span class="token operator">=</span> sigactu<span class="token punctuation">;</span>
        <span class="token function">sigaddset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>act<span class="token punctuation">.</span>sa_mask<span class="token punctuation">,</span> SIGQUIT<span class="token punctuation">)</span><span class="token punctuation">;</span>

        itimerval time<span class="token punctuation">;</span>  <span class="token comment">//设置周期性的定时器</span>
        time<span class="token punctuation">.</span>it_value<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        time<span class="token punctuation">.</span>it_value<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        time<span class="token punctuation">.</span>it_interval<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        time<span class="token punctuation">.</span>it_interval<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token function">sigaction</span><span class="token punctuation">(</span>SIGVTALRM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>act<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//捕捉（下面一行发射的）信号，在 fun() 里面实现</span>
        <span class="token function">setitimer</span><span class="token punctuation">(</span>ITIMER_VIRTUAL<span class="token punctuation">,</span> <span class="token operator">&amp;</span>time<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用定时器，发射信号</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//保持该守护进程不死亡</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> 
<span class="token punctuation">&#123;</span>
    time_t currtime<span class="token punctuation">;</span>  <span class="token comment">//获取系统当前时间，传出参数</span>
    <span class="token function">time</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>currtime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>currtime<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/Users/muli/Desktop/setsid.txt"</span><span class="token punctuation">,</span> O_CREAT <span class="token operator">|</span> O_WRONLY <span class="token operator">|</span> O_APPEND<span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//写入磁盘文件</span>
    <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>代码分析：</strong></p>
<p>这里 <code>sigaction(SIGVTALRM, &amp;act, NULL);</code> 和代码 <code>setitimer(ITIMER_VIRTUAL, &amp;time, NULL);</code> 这一行，成为互相对应的关系。</p>
<p>，使用了周期定时器 setitimer，第一个参数填了三个枚举之一，但是对应的 sigaction 信号捕捉中，就要填写对应的参数（见 man 手册）；<strong>注意，要先有捕捉函数，后实现信号发射函数，避免出现信号已经发射了，但是捕捉函数还没有实现或执行。</strong> </p>
</li>
<li><p><strong>运行效果：</strong></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200411175755.gif" width="90%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="文件掩码是什么？"><a href="#文件掩码是什么？" class="headerlink" title="文件掩码是什么？"></a>文件掩码是什么？</h3><ul>
<li>linux中的 umask 函数主要用于：在创建新文件或目录时 屏蔽掉新文件或目录不应有的访问允许权限。</li>
<li>文件的访问允许权限共有9种，分别是：rwxrwxrwx</li>
<li>它们分别代表：用户读 用户写 用户执行　组读 组写　组执行　其它读 其它写 其它执行</li>
<li>更多是使用 umask 命令或者 umask() 函数老表示，比如： 777；</li>
</ul>
<br>

<h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p> <a href="https://github.com/xmuli/linuxExample/tree/master/16_daemon">16_daemon</a></p>
<p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux中原子操作，死锁原因以及解决方法，读写锁的属性和函数使用pthread_rwlock_wrlock()</title>
    <url>/posts/9e69ff46/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　上一篇中介绍了多线程使用互斥量(锁)来控制程序的访问公共资源的时候是”串行“的；本篇继续，重点讲解如下几个概念：Linux 中的<strong>原子操作</strong> 、<strong>死锁原因</strong> 以<strong>及解决方法</strong> 、和<strong>读写锁</strong> 和对应的源码小例子。其中读写锁的使用例子，完全可以参考互斥量(锁)，其大概流程如下：</p>
<ul>
<li><code>pthread_rwlock_init()</code></li>
<li><code>pthread_rwlock_rdlock()</code> &#x2F; <code>pthread_rwlock_tryrdlock()</code> &#x2F; <code>pthread_rwlock_wrlock()</code> &#x2F; <code>pthread_rwlock_trywrlock()</code></li>
<li>、、、代码片</li>
<li><code>pthread_rwlock_unlock()</code></li>
<li><code>pthread_rwlock_destroy()</code></li>
</ul>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p>
<p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p>
<br>

<h3 id="原子操作："><a href="#原子操作：" class="headerlink" title="原子操作："></a>原子操作：</h3><ul>
<li><p><strong>原子操作：</strong></p>
<ul>
<li><strong>cpu 处理一个指令，线程 &#x2F; 进程在处理完这个指令之前，是不会失去 cpu 的。</strong></li>
</ul>
</li>
</ul>
<p>借用显示生活中的知识，原子⚛是最小的不可分割的物质，没有比它更小的（类比，不详探究夸克）；在一个程序中，是有几百行代码构成了，可以将一行代码（一行表达式语句）看做为一个 <strong>”原子操作“</strong>；</p>
<p>比如：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br>

<ul>
<li><p><strong>临界区：</strong></p>
<ul>
<li>从代码的角度理解，就是 执行加锁语句 <code>pthread_mutex_lock()</code> 和解锁语句 <code>pthread_mutex_unlock()</code> 之间代码片，称之为 <strong>临界区</strong>； 也可以看作为 ”伪原子操作“ ，因为它有可能临界区的代码执行到一半，cpu 就被抢走了，但是其虽然抢到了 cpu 但是会阻塞，或者不能够访问该临界区的代码片，然后等待轮转，cpu 再次回来，继续在自己身上继续执行接下来的代码行；然后这样临界区的代码就只有它执行完毕了。可以看做是一个 ”伪“ 原子操作。</li>
</ul>
<p> <strong>示意图如下：</strong></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200426_231357.png" width="50%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="造成死锁的原因："><a href="#造成死锁的原因：" class="headerlink" title="造成死锁的原因："></a>造成死锁的原因：</h3><h4 id="自己锁自己："><a href="#自己锁自己：" class="headerlink" title="自己锁自己："></a>自己锁自己：</h4><ul>
<li><strong>分析：</strong> 当遇到连续锁两次的时候，线程会阻塞在 第二个 <code>pthread_mutex_lock()</code> 函数这一行里面。</li>
</ul>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200426_231648.png" width="70%"/ loading="lazy">

<br>

<h4 id="循环锁住："><a href="#循环锁住：" class="headerlink" title="循环锁住："></a>循环锁住：</h4> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200426_231710.png" width="70%"/ loading="lazy">

<br>

<h3 id="避免死锁的方式："><a href="#避免死锁的方式：" class="headerlink" title="避免死锁的方式："></a>避免死锁的方式：</h3><p>避免或者解决死锁的三种方式如下：</p>
<ul>
<li><strong>让线程按照一定的顺序访问共享资源</strong></li>
<li><strong>在访问其他锁的时候，需要先将自己的锁解开</strong></li>
<li><strong>设置上锁的使用，可以使用 <code>pthread_mutex_trylock()</code> 函数</strong></li>
</ul>
<br>

<h3 id="读写锁："><a href="#读写锁：" class="headerlink" title="读写锁："></a>读写锁：</h3><p>除了使用互斥量(锁)之外，还可以采用 读写锁 来控制多线程访问共享资源。</p>
<h4 id="读写锁的理解："><a href="#读写锁的理解：" class="headerlink" title="读写锁的理解："></a>读写锁的理解：</h4><ul>
<li>读锁 - 对内存做读操作</li>
<li>写锁 - 对内存做写操作</li>
</ul>
<h4 id="读写锁的特性："><a href="#读写锁的特性：" class="headerlink" title="读写锁的特性："></a><font color=#FF0000 face="幼圆">读写锁的特性：</font></h4><ul>
<li>线程 A 加锁成功，又来了三个线程，做读操作，可以加锁成功<ul>
<li><font color=#FF0000  size=4 face="幼圆">读共享</font> - 并行处理</li>
</ul>
</li>
<li>线程 A 加写锁成功，又来了三个线程，做读操作，三个线程阻塞<ul>
<li><font color=#FF0000  size=4 face="幼圆">写独占</font></li>
</ul>
</li>
<li>线程 A 加读锁成功，又来了 B 线程加写锁线程阻塞，又来了 C 线程加读锁阻塞<ul>
<li><font color=#FF0000  size=4 face="幼圆">读写不能同时进行</font></li>
<li><font color=#FF0000  size=4 face="幼圆">写的优先级高</font>（即使后面线程有先后来顺序来，也会看一下优先级）</li>
</ul>
</li>
</ul>
<br>

<h3 id="读写锁的场景练习："><a href="#读写锁的场景练习：" class="headerlink" title="读写锁的场景练习："></a>读写锁的场景练习：</h3><p>上面的<strong>读写锁的特性</strong> 可以看做是理论部分，然后这里用几个实际场景进行一下分析：</p>
<ul>
<li>线程 A 加写锁成功，线程 B 请求读锁<ul>
<li>线程 B 阻塞</li>
</ul>
</li>
<li>线程 A 持有读锁，线程 B 请求写锁<ul>
<li>线程 B 阻塞</li>
</ul>
</li>
<li>线程 A 拥有读锁，线程 B 请求读锁<ul>
<li>线程 B 加锁成功</li>
</ul>
</li>
<li>线程 A 持有读锁，然后线程 B 请求写锁，然后线程 C 请求读锁<ul>
<li>B 阻塞，C 阻塞 -写的优先级高</li>
<li>A 解锁，B 线程加写锁成功，C继续阻塞</li>
<li>B 解锁，C 加读锁成功</li>
</ul>
</li>
<li>线程A持有写锁，然后线程B请求读锁，然后线程C请求写锁</li>
</ul>
<br>

<h3 id="读写锁的使用场景："><a href="#读写锁的使用场景：" class="headerlink" title="读写锁的使用场景："></a>读写锁的使用场景：</h3><ul>
<li>互斥锁 - 读写串行</li>
<li>读写锁：<ul>
<li>读：并行</li>
<li>写：串行</li>
</ul>
</li>
<li>程序中的 “读操作” 大于 ”写操作“ 的时候，比如说 12306 买火车票的例子 ，就有大量的率新读取数据，远大于买票的时候写操作。</li>
</ul>
<br>

<h3 id="读写锁的主要操作函数："><a href="#读写锁的主要操作函数：" class="headerlink" title="读写锁的主要操作函数："></a>读写锁的主要操作函数：</h3><p>读写锁的使用流程和互斥量(锁)的流程基本一样。</p>
<ul>
<li><p>初始化读写锁</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_rwlock_init</span><span class="token punctuation">(</span>pthread_rwlock_t <span class="token operator">*</span>lock<span class="token punctuation">,</span> <span class="token keyword">const</span> pthread_rwlockattr_t <span class="token operator">*</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>销毁读写锁</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_rwlock_destroy</span><span class="token punctuation">(</span>pthread_rwlock_t <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>加读锁</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_rwlock_rdlock</span><span class="token punctuation">(</span>pthread_rwlock_t <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>尝试加读锁</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_rwlock_tryrdlock</span><span class="token punctuation">(</span>pthread_rwlock_t <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>加写锁</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_rwlock_wrlock</span><span class="token punctuation">(</span>pthread_rwlock_t <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>尝试加写锁</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_rwlock_trywrlock</span><span class="token punctuation">(</span>pthread_rwlock_t <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>解锁</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_rwlock_unlock</span><span class="token punctuation">(</span>pthread_rwlock_t <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<br>

<h3 id="写一个运用读写锁的例子："><a href="#写一个运用读写锁的例子：" class="headerlink" title="写一个运用读写锁的例子："></a>写一个运用读写锁的例子：</h3><p>上面例子讲了这么多用法和属性作为铺垫，这里有一代码例子，讲解读写锁的使用例子：</p>
<ul>
<li><p><strong>需求练习：</strong> </p>
<ul>
<li>3 个线程不定时写同一全局资源，5 个线程不定时读同一全局资源</li>
</ul>
</li>
<li><p><strong>代码：</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span>

<span class="token keyword">int</span> g_number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
pthread_rwlock_t lock<span class="token punctuation">;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">writeFunc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">readFunc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    pthread_t p<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token function">pthread_rwlock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始化一个锁</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//创建写线程</span>
        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> writeFunc<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//创建读线程</span>
        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> readFunc<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//阻塞回收子线程的 pcb</span>
        <span class="token function">pthread_join</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">pthread_rwlock_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//销毁读写锁，释放锁资源</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">writeFunc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">pthread_rwlock_wrlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//加写锁</span>
        g_number<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"--write: %lu, %d\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g_number<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_rwlock_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//解锁</span>
        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">readFunc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">pthread_rwlock_rdlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//加读锁</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"--read : %lu, %d\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g_number<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_rwlock_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//解锁</span>
        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
<li><p><strong>运行效果：</strong></p>
<ul>
<li><p>屏蔽去掉加锁解锁的几行注释，则会出现以下异常情况，小数可能在大数后面再执行打印语句：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200427_215101.png" width="60%"/ loading="lazy">


</li>
<li><p>加上读写锁之后，得到预期正确结果，大数只会出现在小数后面打印</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200427_214901.png" width="60%"/ loading="lazy"></li>
</ul>
</li>
</ul>
<br>

<h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p> <a href="https://github.com/xmuli/linuxExample/tree/master/19_pthread_rwlock_wrlock">19_pthread_rwlock_wrlock</a></p>
<p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux中多线程使用信号量(信号灯)，和sem_wait()函数使用</title>
    <url>/posts/67949f28/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　<a href="https://xmuli.blog.csdn.net/article/details/105885580">上一篇</a>中讲解了“条件变量 + 互斥量”的组合使用，演示了 “生产者-消费者”模型。本篇讲解 互斥量的升级版：<strong>信号量（信号灯）</strong> 的理解和使用。互斥量与信号量的关系，可以简单理解为 c 和 c++ 的关系。信号量的使用的步骤，也是和前面的互斥量很像，不过这次的头文件改为了 <code>#include &lt;semaphore.h&gt;</code>:</p>
<ul>
<li>sem_t sem; &#x2F;&#x2F;定义变量</li>
<li>sem_wait();  &#x2F;&#x2F;加锁</li>
<li>…其他代码</li>
<li>sem_post();  &#x2F;&#x2F;解锁</li>
<li>sem_destroy();  &#x2F;&#x2F;销毁</li>
</ul>
<p><font color=#D0087E size=4 face="幼圆">说明：</font></p>
<p><strong>本例子是在 Linux 下面运行成功的，编译时候，时候需要加参数 <code>-pthread</code> 。</strong></p>
<p>若是想要在 Mac 运行改程序，需要改写替换部分函数(mac 不支持其中的部分函数)</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p>
<p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p>
<br>

<h3 id="信号量-信号灯-："><a href="#信号量-信号灯-：" class="headerlink" title="信号量(信号灯)："></a>信号量(信号灯)：</h3><p>简单理解为里面具有多个互斥量的集合。是加强版的互斥锁。</p>
<p><strong>其他：</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">sem_t sem<span class="token punctuation">;</span> 
<span class="token keyword">int</span> <span class="token function">sem_init</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span>sem<span class="token punctuation">,</span> <span class="token keyword">int</span> pshared<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>之间的一些解释：</p>
<p>sem 变量和 函数 sem_init 中的 sem 参数是同一个；在函数里面，第一个参数 sem 实际是和第三个参数 value 关联的；表面上对 sem 进行修改，实际上是修改关联的 value 的值，对其进行 ++ 或 – 操作。（嗯嗯，原理就这么理解就行）。</p>
<br>

<h3 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h3><ol>
<li><p>sem_t sem; </p>
<br>
</li>
<li><p>初始化信号量</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">sem_init</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span>sem<span class="token punctuation">,</span> <span class="token keyword">int</span> pshared<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><strong>参数：</strong><ul>
<li>pshared：<ul>
<li>0 - 线程同步</li>
<li>1 - 进程同步</li>
</ul>
</li>
<li>value：<ul>
<li>最多有几个线程操作共享数据</li>
</ul>
</li>
</ul>
</li>
</ul>
<br>
</li>
<li><p>加锁:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//调用一次相当于对 sem 做了一次 -- 操作</span>
<span class="token keyword">int</span> <span class="token function">sem_wait</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//加锁； => 如果 sem 值为 0，线程会阻塞</span>

<span class="token keyword">int</span> <span class="token function">sem_trywait</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//尝试加锁； => sem == 0，加锁失败，不阻塞，直接返回</span>

<span class="token keyword">int</span> <span class="token function">sem_timedwait</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span>sem<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">timespec</span> <span class="token operator">*</span>abs_timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//限时尝试加锁</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>
</li>
<li><p>解锁:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">sem_post</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//相当于对于 sem 做了 ++ 操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>
</li>
<li><p>销毁信号量</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">sem_destroy</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br></li>
</ol>
<h3 id="“生产者-消费者”例子："><a href="#“生产者-消费者”例子：" class="headerlink" title="“生产者-消费者”例子："></a>“生产者-消费者”例子：</h3><p>将上一篇的例子改一改，直接使用信号量来写这个例子“生产者-消费者”。本篇文章例子如下：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200502_020639.png" width="80%"/ loading="lazy">

<br>

<h4 id="理论模型："><a href="#理论模型：" class="headerlink" title="理论模型："></a>理论模型：</h4> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200502_021414.png" width="90%"/ loading="lazy">

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200502_020625.png" width="60%"/ loading="lazy">

<br>

<h4 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h4><p>多看一下理论模型的那个伪代码的流程图，多体会揣摩其中的箭头的流向，且一开始这设置为消费者为阻塞，当生产者生产之后，为其解锁。</p>
<br>

<h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;semaphore.h></span></span>

sem_t semProducer<span class="token punctuation">;</span>
sem_t semCustomer<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span>  <span class="token comment">//节点结构</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> data<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token operator">*</span> next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> Node<span class="token punctuation">;</span>

Node<span class="token operator">*</span> g_head <span class="token operator">=</span>  <span class="token keyword">nullptr</span><span class="token punctuation">;</span>  <span class="token comment">//永远指向链表头部的指针</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funProducer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//生产者--添加一个头结点</span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funCustomer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//消费者--删除一个头结点</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    pthread_t p1<span class="token punctuation">;</span>
    pthread_t p2<span class="token punctuation">;</span>

    <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>semProducer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//初始化生产者线程信号量， （赋予 4 个，对比下一行，让生产者先运行）</span>
    <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>semCustomer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//初始化消费者线程信号量， (赋予 0 个， 一开始就让消费者处于阻塞状态)</span>

    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p1<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> funProducer<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建生产者线程</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p2<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> funCustomer<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建消费者线程</span>

    <span class="token function">pthread_join</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//阻塞回收子线程</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">sem_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>semProducer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//销毁生产者信号量</span>
    <span class="token function">sem_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>semCustomer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//销毁消费者信号量</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funProducer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>semProducer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//semProducer--，  == 0， 则阻塞</span>
        Node<span class="token operator">*</span> pNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pNew<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">;</span> 
        pNew<span class="token operator">-></span>next <span class="token operator">=</span> g_head<span class="token punctuation">;</span>
        g_head <span class="token operator">=</span> pNew<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-----funProducer(生产者): %lu, %d\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pNew<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>semCustomer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// semCustomer++</span>

        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//随机休息 0~2 s</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funCustomer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>semCustomer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//semCustomer--，  == 0， 则阻塞</span>
        Node<span class="token operator">*</span> pDel <span class="token operator">=</span> g_head<span class="token punctuation">;</span>
        g_head <span class="token operator">=</span> g_head<span class="token operator">-></span>next<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-----funCustomer(消费者): %lu, %d\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pDel<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span> pDel<span class="token punctuation">;</span>
        <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>semProducer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// semProducer++</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h4><p>这个例子是在 uos20 上面运行的成功的；编译的时候，记得加上参数 <code>-pthread</code> 。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200502_014422.gif" width="90%"/ loading="lazy">

<br>

<h3 id="Mac-下对-sem-init-x2F-sem-destory-不支持："><a href="#Mac-下对-sem-init-x2F-sem-destory-不支持：" class="headerlink" title="Mac 下对 sem_init()&#x2F;sem_destory() 不支持："></a>Mac 下对 sem_init()&#x2F;sem_destory() 不支持：</h3><p><font color=#D0087E size=4 face="幼圆"><strong>注意：</strong> </font></p>
<p>MacOS 不支持 <code>sem_init()</code> 和 <code>sem_destroy()</code>；这个例子若是想在 mac 下编译通过，需要自行修改替换相关的函数。</p>
<ul>
<li><code>sem_init(&amp;sem, 0, 1)</code> 改成 <code>sem_open(&quot;sem&quot;, O_CREAT|O_EXCL, S_IRWXU, 0)</code></li>
<li><code>sem_destory(&amp;sem)</code> 改成 <code>sem_unlink(&quot;sem&quot;);</code></li>
<li>且支持 <code>pthread_mutex_init(&amp;mutex, NULL)</code> 却不支持 <code>pthread_mutex_destory(&amp;mutex)</code></li>
</ul>
<br>

<p>Mac 的该文件在 <code>/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/semaphore.h</code> 路径，可以查看到该头文件的源码，附上详细 mac 下该库源码：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_SYS_SEMAPHORE_H_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_SYS_SEMAPHORE_H_</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">int</span> sem_t<span class="token punctuation">;</span>

<span class="token comment">/* this should go in limits.h> */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SEM_VALUE_MAX</span> <span class="token expression"><span class="token number">32767</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SEM_FAILED</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/cdefs.h></span></span>

__BEGIN_DECLS
<span class="token keyword">int</span> <span class="token function">sem_close</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">sem_destroy</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span><span class="token punctuation">)</span> __deprecated<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">sem_getvalue</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span> __restrict<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> __restrict<span class="token punctuation">)</span> __deprecated<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">sem_init</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span> __deprecated<span class="token punctuation">;</span>
sem_t <span class="token operator">*</span> <span class="token function">sem_open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">sem_post</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">sem_trywait</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">sem_unlink</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">sem_wait</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">__DARWIN_ALIAS_C</span><span class="token punctuation">(</span>sem_wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
__END_DECLS


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">/* _SYS_SEMAPHORE_H_ */</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p> <a href="https://github.com/xmuli/linuxExample/tree/master/21_semaphore">21_semaphore</a></p>
<p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux中多线程使用条件变量阻塞线程，和pthread_cond_wait()函数使用</title>
    <url>/posts/1b3fd61f/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　继续<a href="https://xmuli.blog.csdn.net/article/details/105800949">上一篇</a>中，讲解了原子⚛操作（粗略看作 cpu 会执行完该几行代码，才会切换到其他的线程）和重点讲解<strong>读写锁</strong> 的使用。本篇讲解 <strong>条件变量</strong> 的使用步骤：</p>
<ul>
<li><code>pthread_cond_t g_cond()</code> &#x2F;&#x2F;条件变量–阻塞线程，等待条件满足*</li>
<li><code>pthread_cond_init()</code>  &#x2F;&#x2F;初始化</li>
<li><code>pthread_cond_wait()</code> &#x2F; <code>pthread_cond_timedwait()</code>  &#x2F;&#x2F;阻塞线程（若是条件不满足）</li>
<li>…其他代码</li>
<li><code>pthread_cond_signal()</code> &#x2F; <code>pthread_cond_timedwait()</code> &#x2F;&#x2F;通知阻塞中的线程解除阻塞</li>
<li><code>pthread_cond_destroy()</code>  &#x2F;&#x2F;销毁</li>
</ul>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p>
<p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p>
<br>

<h3 id="条件变量是锁🔐吗？"><a href="#条件变量是锁🔐吗？" class="headerlink" title="条件变量是锁🔐吗？"></a>条件变量是锁🔐吗？</h3><ul>
<li><font color=#FF0000  size=4 face="幼圆">条<strong>件变量不是锁，</strong></font>  但是条件变量能够阻塞线程</li>
<li>使用条件变量 + 互斥量<ul>
<li>互斥量：保护一块共享数据</li>
<li>条件变量：引起阻塞<ul>
<li>生产者和消费者模型</li>
</ul>
</li>
</ul>
</li>
</ul>
<br>

<h3 id="条件变量的两个动作？"><a href="#条件变量的两个动作？" class="headerlink" title="条件变量的两个动作？"></a>条件变量的两个动作？</h3><ul>
<li>当条件不满足，阻塞线程</li>
<li>当条件满足；通知阻塞的线程开始工作</li>
</ul>
<br>

<h3 id="使用条件变量流程："><a href="#使用条件变量流程：" class="headerlink" title="使用条件变量流程："></a>使用条件变量流程：</h3><p><font color=#FF0000  size=4 face="幼圆"><strong>条件变量通常是结合和互斥量一起使用。</strong></font> 其使用方式，和互斥量使用很是相似，包括下一篇准备写的<strong>信号量(信号灯)</strong> ，的使用方式也是和互斥量很是相似。</p>
<ol>
<li><p>初始化条件变量</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_cond_init</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>cond<span class="token punctuation">,</span> <span class="token keyword">const</span> pthread_condattr_t <span class="token operator">*</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


</li>
<li><p>阻塞条件变量</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//阻塞一个条件变量</span>
<span class="token keyword">int</span> <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>cond<span class="token punctuation">,</span> pthread_mutex_t <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//注意：另一个参数是互斥量参数</span>

<span class="token comment">//限时阻塞一个条件变量</span>
<span class="token keyword">int</span> <span class="token function">pthread_cond_timedwait</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>cond<span class="token punctuation">,</span> pthread_mutex_t <span class="token operator">*</span>mutex<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">timespec</span> <span class="token operator">*</span>abstime<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>pthread_cond_wait() 函数，还有干了其他事情：</p>
<ul>
<li><strong>阻塞线程</strong></li>
<li><font color=#D0087E size=4 face="幼圆"><strong>将已经上锁的互斥锁解锁</strong></font></li>
<li><font color=#D0087E size=4 face="幼圆"><strong>接解除阻塞之后，对互斥锁进行加锁操作</strong></font></li>
</ul>
</li>
<li><p><font color=#FF0000  size=4 face="幼圆">唤醒阻塞在条件变量上的线程</font> </p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//唤醒至少一个阻塞在条件变量上的线程</span>
<span class="token keyword">int</span> <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//唤醒全部阻塞在条件变量上的线程</span>
<span class="token keyword">int</span> <span class="token function">pthread_cond_broadcast</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
<li><p>销毁一个条件变量</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_cond_destroy</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<br>

<h3 id="生产者-消费者模型："><a href="#生产者-消费者模型：" class="headerlink" title="生产者-消费者模型："></a>生产者-消费者模型：</h3><p>对于 <strong>“条件变量 + 互斥量”</strong> 的使用组合，有一个很是景点的例子 “生产者-消费者模型”。</p>
<br>

<h4 id="理论模型："><a href="#理论模型：" class="headerlink" title="理论模型："></a>理论模型：</h4> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200502_003206.png" width="90%"/ loading="lazy">

<br>

<h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><p>将上面的理论模型的伪代码，用实际的完整代码实现如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span>  <span class="token comment">//节点结构</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> data<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token operator">*</span> next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> Node<span class="token punctuation">;</span>

Node<span class="token operator">*</span> g_head <span class="token operator">=</span>  <span class="token keyword">nullptr</span><span class="token punctuation">;</span>  <span class="token comment">//永远指向链表头部的指针</span>

pthread_mutex_t g_mutex<span class="token punctuation">;</span>  <span class="token comment">//互斥锁--线程同步</span>
pthread_cond_t g_cond<span class="token punctuation">;</span>    <span class="token comment">//条件变量--阻塞线程，等待条件满足</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funProducer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//生产者--添加一个头结点</span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funCustomer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//消费者--删除一个头结点</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    pthread_t p1<span class="token punctuation">;</span>
    pthread_t p2<span class="token punctuation">;</span>

    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//初始化互斥锁</span>
    <span class="token function">pthread_cond_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_cond<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化条件变量</span>

    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p1<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> funProducer<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建生产者线程</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p2<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> funCustomer<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建消费者线程</span>

    <span class="token function">pthread_join</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//阻塞回收子线程</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//配套销毁互斥锁</span>
    <span class="token function">pthread_cond_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_cond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//配套销毁条件变量</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funProducer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        Node<span class="token operator">*</span> pNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Node* pNew = (Node *)malloc(sizeof(Node));</span>
        pNew<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">;</span> 

        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//加锁</span>
        pNew<span class="token operator">-></span>next <span class="token operator">=</span> g_head<span class="token punctuation">;</span>
        g_head <span class="token operator">=</span> pNew<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-----funProducer(生产者): %lu, %d\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pNew<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//解锁</span>
        
        <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_cond<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//通知阻塞的消费者线程，解除阻塞</span>

        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//随机休息 0~2 s</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funCustomer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//加锁</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>g_head <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//若是没有，则等待生产者生产出来，在此阻塞，等待消费</span>
            <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_cond<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//阻塞线程，且该函数会对互斥锁解锁；且接解除阻塞之后，对互斥锁进行加锁操作</span>
        <span class="token punctuation">&#125;</span>

        Node<span class="token operator">*</span> pDel <span class="token operator">=</span> g_head<span class="token punctuation">;</span>
        g_head <span class="token operator">=</span> g_head<span class="token operator">-></span>next<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-----funCustomer(消费者): %lu, %d\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pDel<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span> pDel<span class="token punctuation">;</span>
        <span class="token comment">// free(pDel);</span>
        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//解锁</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h4><p>多看一下理论模型的那个伪代码的流程图，生产者生产完一个之后，要通知（此时处于）阻塞的线程，给它一个信号，让他解除阻塞。</p>
<br>

<h4 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h4> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200501_173204.gif" width="90%"/ loading="lazy">

<br>

<h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p> <a href="https://github.com/xmuli/linuxExample/tree/master/20_conditton">20_conditton</a></p>
<p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux中多线程操作函数pthread_exit()、pthread_jion()、pthread_detach()、pthread_cancel()</title>
    <url>/posts/e20f5ad6/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　<a href="https://blog.csdn.net/qq_33154343/article/details/105546234">上一篇</a>讲解了多线程的入门的知识，如何创建多线程程序，以及从虚拟地址空间和 PCB 分析线程的一些细节。本章再讲述一些线程操作相关的函数：</p>
<ul>
<li>pthread_exit(): 退出一个线程，不会影响其他线程的</li>
<li>pthread_jion(): <font color=#FF0000  size=4 face="幼圆">阻塞等待线程退出，获取线程退出的状态</font> </li>
<li>pthread_detach(): 设置线程分离的属性</li>
<li>pthread_cancel(): 杀死（取消）一个线程</li>
<li>pthread_equal(): 判断两个线程是否相等，预留函数</li>
</ul>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p>
<p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p>
<br>

<h3 id="单个线程退出-pthread-exit"><a href="#单个线程退出-pthread-exit" class="headerlink" title="单个线程退出 pthread_exit():"></a>单个线程退出 pthread_exit():</h3><ul>
<li><strong>作用：</strong> 一个进程的退出使用 <code>exit(0)</code>； 而退出一个线程，使用 <code>pthread_exit(NULL)</code>；</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>value_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><p><strong>参数：</strong></p>
<ul>
<li>value_ptr：必须指向全局，或者堆。是一个传出参数，用来在该线程结束推出的时候，传输一个内容。若是指向局部变量，该线程被销毁了的话，其他线程可能访问不到此块数据块。</li>
</ul>
</li>
<li><p>写一个例子：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span>

<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token comment">//设置为全局变量，在全局区域，共享</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">myfun</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>num<span class="token punctuation">;</span>  <span class="token comment">//传一个地址进去（voi* 也是 4 个字节）</span>
    pthread_t id<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> myfun<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d, thread id: %ld\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// pthread_exit(nullptr);  //终止主线程</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"main thread-----%d------\n"</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">myfun</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"child thread-----%d------\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
             <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//退出进程</span>
            <span class="token comment">// pthread_exit(nullptr);  //终止主线程</span>
        <span class="token punctuation">&#125;</span>        
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>运行结果：</strong></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419_123512.png" width="60%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="阻塞等待退出线程退出-pthread-jion"><a href="#阻塞等待退出线程退出-pthread-jion" class="headerlink" title="阻塞等待退出线程退出 pthread_jion():"></a>阻塞等待退出线程退出 pthread_jion():</h3><ul>
<li><p><strong>作用:</strong> </p>
<p><font color=#FF0000  size=4 face="幼圆">阻塞等待线程退出，获取线程退出的状态</font></p>
</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_join</span><span class="token punctuation">(</span>pthread_t thread<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>value_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><p><strong>参数：</strong></p>
<ul>
<li>thread： 要回收的子线程的 id</li>
<li>value_ptr：读取线程退出时候的携带信息状态；指向的内存和 pthread_exit 的参数是指向同一块内存地址 。在上一个函数 pthread_exit(void *value_ptr) 中，线程退出的时候，传出来了全局变量的指针； 而这里第二个参数，此二级指针就可以读出来这个值。</li>
</ul>
</li>
<li><p><strong>写了一例子：</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span>

<span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span> <span class="token comment">//要是一个全局的变量哦，或者是堆的空间</span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">myfun</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    pthread_t pthread <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pthread<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> myfun<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error: %s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"parent thread id: %ld\n"</span><span class="token punctuation">,</span> pthread_self<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>

    <span class="token function">pthread_join</span><span class="token punctuation">(</span>pthread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//阻塞等待子线程退出，并且回收 pcb</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"number = %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"parent i = %d\n"</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">myfun</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child thread id: %ld\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// int number = 1234;   //若是为栈里面的数据，则会组线程里面，会崩溃或者失败</span>
            <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//此处的地址，必须是指向堆或者全局变量</span>
        <span class="token punctuation">&#125;</span>

        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>运行效果：</strong></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419_123654.png" width="60%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="线程分离-pthread-detach"><a href="#线程分离-pthread-detach" class="headerlink" title="线程分离 pthread_detach():"></a>线程分离 pthread_detach():</h3><p>在用 pthread_create 创建子线程的时候，第三个参数，是可以设置为此属性的；正常情况下，是由子线程死亡，是由父线程来释放遗留的资源；但如果设置了此线程分离的属性，那么子线程是在创建的时候，就独立于父线程，其死亡时候资源也是由自己来释放。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_detach</span><span class="token punctuation">(</span>pthread_t thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><strong>调用该函数之后，就不在需要调用 pthread_jion() 了</strong></li>
</ul>
<br>

<h3 id="杀死-取消-线程-pthread-cancel"><a href="#杀死-取消-线程-pthread-cancel" class="headerlink" title="杀死(取消)线程 pthread_cancel():"></a>杀死(取消)线程 pthread_cancel():</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_cancel</span><span class="token punctuation">(</span>pthread_t thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<ul>
<li><strong>注意：</strong><ul>
<li>要杀死子线程对应的处理的函数的内部，必须做一次系统调用。</li>
<li>系统调用函数有，eg: open,write, printf 等，这次都是最终会调用到系统层及的函数。</li>
<li>不涉及到系统层级调用，eg： int a &#x3D; 10;</li>
</ul>
</li>
</ul>
<br>

<h3 id="判断线程是否相等-pthread-equal"><a href="#判断线程是否相等-pthread-equal" class="headerlink" title="判断线程是否相等 pthread_equal():"></a>判断线程是否相等 pthread_equal():</h3><p><strong>是一个预留函数</strong> ，通过线程号 判断两个线程是否相等；目前不需要使用该函数。若是以后线程变为返回一个结构体。就可以用此预留函数(修改一下实现)来判断两个线程是否实现了。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_equal</span><span class="token punctuation">(</span>pthread_t t1<span class="token punctuation">,</span> pthread_t t2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>

<h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p> <a href="https://github.com/xmuli/linuxExample/tree/master/17_thread">17_thread</a></p>
<p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux中孤儿进程，僵尸进程，进程回收wait、waitpid函数</title>
    <url>/posts/19535392/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　这篇继承<a href="https://blog.csdn.net/qq_33154343/article/details/105157044">上一篇</a>，先要自己梳理清楚一下进程相关的知识， <a href="https://blog.csdn.net/qq_33154343/article/details/105029261">上上一篇</a>的虚拟地址空间和进程控制块 <code>PCB</code> ，以及上一篇的进程相关知识，带着思考来学习 <strong>孤儿进程、僵尸进程</strong>、 以及<strong>进程回收</strong> <code>wait()</code>， <code>waitpid()</code>相关的概念。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p>
<p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p>
<br>

<h3 id="孤儿进程："><a href="#孤儿进程：" class="headerlink" title="孤儿进程："></a>孤儿进程：</h3><ul>
<li><p>父进程创建子进程</p>
</li>
<li><p><strong>父进程死了，子进程还活着，该进程叫孤儿进程(Orphan Process)</strong></p>
</li>
<li><p><font color=#FF0000  face="幼圆">在传统的 Linux 系统中，孤儿进程被 init 进程领养，init 进程成为孤儿进程的父亲</font></p>
<ul>
<li><font color=#FF0000  face="幼圆">init 进程这样做，主要是为了释放子进程占用的系统资源。</font></li>
<li><font color=#FF0000  face="幼圆">因为进程结束之后，能够释放用户控空间；但是释放不了系统空间的 PCB，这块资源必须由父进程释放。</font></li>
</ul>
</li>
<li><p><strong>写一个代码例子：</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建子进程</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//存活时间大于 1s（此时父进程已经执行完成销毁）, 为孤儿子进程</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a child process, pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//父进程</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a parent process, pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//执行完后，父进程就结束了</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>代码分析：</strong></p>
<p>当父进程创建子进程之后，很快的就执行完后就结束销毁自己（小于 1s 内）；因为子进程的生存时间大于 1s，故此时它为孤儿进程（下图可证明：此时其父进程号是 1 而非 17441），然后被系统的 init 进程领养，帮助销毁子进程的 PCB；</p>
</li>
<li><p><strong>运行结果：</strong></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200328_000041.png" width="90%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="僵尸进程："><a href="#僵尸进程：" class="headerlink" title="僵尸进程："></a>僵尸进程：</h3><ul>
<li><p>父进程创建子进程</p>
</li>
<li><p><strong>子进程死了，父进程还活着，且不去释放子进程的 PCB，该子进程就变成了僵尸进程(Zombie Process)。</strong></p>
</li>
<li><p><font color=#FF0000  face="幼圆">僵尸进程是一个已经死掉的进程。</font></p>
</li>
<li><p><strong>写一个代码例子：</strong> </p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建子进程</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//（此时子进程已经执行完成销毁）, 而父进程没有时间去销毁这个子进程的 pcb，故为僵尸进程</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a child process, pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//父进程</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a parent process, pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//执行完后，父进程就结束了</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>代码分析：</strong></p>
<p>父进程创建子进程之后，子进程在极短的时间内执行完所有代码后，其用户区的资源被释放，其系统区的 pcb 等待其父进程来释放；但是父进程一直在忙其它的时间，没有做处理，释放自己成的 PCB，在下图左侧还没有运行 <code>ctrl c</code> 的时候，使用 <code>ps</code> 在管道里面查询该子进程的号 5563，可以发现其已经被标注为死亡的进程（其 Z+ 中的是单词僵尸 Zombie 的首字母）。</p>
</li>
<li><p><strong>运行结果：</strong></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200328_002130.png" width="100%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="进程回收："><a href="#进程回收：" class="headerlink" title="进程回收："></a>进程回收：</h3><h4 id="wait-："><a href="#wait-：" class="headerlink" title="wait()："></a>wait()：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pid_t <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>stat_loc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><p><strong>作用：</strong></p>
<ul>
<li><font color=#FF0000  face="幼圆"><strong>阻塞并且等待子进程退出</strong></font></li>
<li><font color=#FF0000 face="幼圆"><strong>回收子进程残留的资源</strong></font></li>
<li><font color=#FF0000 face="幼圆"><strong>获取子进程结束的状态（退出原因）</strong></font></li>
<li>每次只能够回收一个进程，调用一次 wait() 也只能回收一个进程</li>
</ul>
</li>
<li><p><strong>参数：</strong></p>
<ul>
<li><code>WIFEXITED(status)</code>: 为非 0   –&gt; 进程正常退出<ul>
<li><code>WEXITSTATUS(status)</code>: 如果这个宏为真，使用此宏 –&gt; 获取进程退出状态(exit &#x2F; return) 的参数</li>
</ul>
</li>
<li><code>WIFSIGNALED(status)</code>: 为非 0   –&gt; 进程异常终止<ul>
<li><code>WTERMSIG(status)</code>: 如果这个宏为真，使用此宏 –&gt; 获取使进程退出的那个信号的编号。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>返回值：</strong></p>
<ul>
<li>成功：清理掉的子进程 ID</li>
<li>失败：-1（没有子进程）</li>
</ul>
</li>
<li><p><strong>写一个代码例子验证：</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-----开始-----\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建子进程</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//（此时子进程已经执行完成销毁）, 而父进程没有时间去销毁这个子进程的 pcb，故为僵尸进程</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a child process, pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//父进程</span>
        <span class="token comment">//sleep(1);</span>
        
        <span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        pid_t wpid <span class="token operator">=</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//回收子进程</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WIFEXITED</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//判断是否正常退出</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"退出值是 val = %d\n"</span><span class="token punctuation">,</span> <span class="token function">WEXITSTATUS</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WIFSIGNALED</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//判断是被信号杀死</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"通过信号退出 val = %d\n"</span><span class="token punctuation">,</span> <span class="token function">WTERMSIG</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a parent process, pid = %d  ppid =  %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//执行完后，父进程就结束了</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"+++++结束+++++\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token comment">//若是注释掉 12 和 15 行代码，会显示父父进程的 退出值是 9</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p><strong>代码分析：</strong></p>
<p><strong>代码是在 MacOS（Unix）系统上面运行的；</strong> </p>
<p>若是注释掉 12 和 15 行代码，则会运行第一个宏，可以看到进程结束的返回值是 9 （人为随机指定的一个数值，return 9）；运行结果见下面第一个图。</p>
<p>而不注释掉 12 和 15 行代码；运行程序后，执行 <code>kill 进程号</code> 杀死子进程， 则会执行第二个宏，显示是被信号（15）所杀「若果是 Linux 运行，这里会显示信号是 9」；运行结果见下面第二个图。</p>
</li>
<li><p><strong>运行截图：</strong></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200328_163037.png" width="70%"/ loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200328_163741.png" width="100%"/ loading="lazy"></li>
</ul>
</li>
</ul>
<br>

<h4 id="waitpid"><a href="#waitpid" class="headerlink" title="waitpid():"></a>waitpid():</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pid_t <span class="token function">waitpid</span><span class="token punctuation">(</span>pid_t pid<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>stat_loc<span class="token punctuation">,</span> <span class="token keyword">int</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><p><strong>作用：</strong></p>
<p>同 wait()，但是可以指定要回收的进程 pid 号，且能够指定是阻塞还是非阻塞模式。</p>
</li>
<li><p><strong>参数：</strong></p>
<ul>
<li><p>pid：</p>
<p><font color=#FF0000 face="幼圆">pid &#x3D;&#x3D; -1；回收所有的子进程。与 wait 等效</font></p>
<p><font color=#FF0000 face="幼圆">pid &gt; 0；  回收指定 pid 的进程</font></p>
<p>pid &#x3D;&#x3D; 0； 回收当前组的所有子进程</p>
<p>pid &lt; -1； 回收进程的 pid 取反（加减号）</p>
</li>
<li><p>status：</p>
<p>子进程的退出状态，用法同 wait()</p>
</li>
<li><p>options：</p>
<p>设置为 WNOHANG，函数非阻塞，设置为 0，函数阻塞</p>
</li>
</ul>
</li>
<li><p><strong>返回值：</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">></span> <span class="token number">0</span>  <span class="token comment">//返回清理掉的子进程 ID</span>
<span class="token operator">-</span><span class="token number">1</span>   <span class="token comment">//无子进程</span>
<span class="token operator">=</span><span class="token number">0</span>   <span class="token comment">//参数 3 为 WHOHANG，且子进程正在运行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
<br>

<h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><a href="https://github.com/xmuli/linuxExample/tree/master/10_orphan_zombie_process">10_orphan_zombie_process</a></p>
<p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux中文件操作，软硬链接ln，用户权限chmod、chown，文件查找和检索find、grep，压缩gz，bz2</title>
    <url>/posts/ecefa455/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong> 在 <code>Linux</code> 中，对于一些经常会使用到的命令（不做知识点的搬运工），作业个简短的记录📝，主要作为日后快速查找。还有对于操作系统的主次版本号的含义，<code>shell</code>，<code>bash</code> 的区别等简单做一个说明。主要有如下知识点：</p>
<ul>
<li>Linux 和 GNU 的区别</li>
<li>shell 和 bash 的区别</li>
<li>光标相关快捷键</li>
<li>文件目录的结构组成，</li>
<li>文件 &#x2F; 文件夹操作命令 tree，pwd，mkdir，rm，cp，mv，touch</li>
<li>显示文件相关信息 cat，more，head，less，tial</li>
<li>软硬链接 ln -s</li>
<li>用户组，权限 chmod， chown</li>
<li>文件查找和检索文件内容 find，grep</li>
<li>压缩与解压 tar，rar，zip，gz，bz2</li>
</ul>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="Linux-和-GNU-的区别与联系："><a href="#Linux-和-GNU-的区别与联系：" class="headerlink" title="Linux 和 GNU 的区别与联系："></a>Linux 和 GNU 的区别与联系：</h3><blockquote>
<p>Linux 发行版 &#x3D;&#x3D; Linux 内核 + GNU 应用软件的操作系统</p>
</blockquote>
<ul>
<li><p>Linux 是类 Unix 计算机操作系统的统称</p>
</li>
<li><p>Linux 操作系统的内核也是 ”Linux“</p>
</li>
<li><p>Linux 这个单词只表示 Linux 内核，但是实际上人们已经习惯用 Linux 来形容基于 Linux 内核的整个操作系统</p>
</li>
<li><p>Linux 是由芬兰大学生 Linus Torvallds 1991 年编写</p>
</li>
<li><p>GNU 是一个类 Unix 操作系统。它是由多个应用程序、系统库、开发工具乃至游戏构成的程序集合。</p>
</li>
</ul>
<p><strong>总结：</strong></p>
<p>Linux 确实存在，许多人都在使用它，但它仅仅是所用系统的一部分。Linux是内核：它是为你运行的其他程序分配计算机资源的程序。内核是操作系统的基本部分，但是它自己并无用处；它只能在完整的操作系统框架下才能发挥作用。Linux一般和GNU操作系统一起使用：整个系统基本上就是GNU加上Linux，或叫GNU&#x2F;Linux。所有被叫做“Linux”的发行版实际上是GNU&#x2F;Linux发行版。</p>
<p><strong>详细参考：</strong></p>
<ul>
<li>Linux和GNU系统 <a href="https://www.gnu.org/gnu/linux-and-gnu.html">https://www.gnu.org/gnu/linux-and-gnu.html</a></li>
<li>GNU是什么？ <a href="https://www.gnu.org/">https://www.gnu.org</a></li>
</ul>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200321_163227.png" width="70%"/ loading="lazy">

<br>

<h3 id="Linux-版本号和-PATH："><a href="#Linux-版本号和-PATH：" class="headerlink" title="Linux 版本号和 PATH："></a>Linux 版本号和 PATH：</h3><ul>
<li><p><strong>Linux 版本号：</strong> 主版本号是双数为 STL 支持 5 年；此版本.04 (4月份稳定版)，.10为 debug 版本</p>
</li>
<li><p><strong>环境变量：</strong> 一些列的路径，在 shell 里面输入的命令，系统就会在这个路径里面去查找该命令是否存在；若存在则执行对应的操作</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token environment constant">$HOME</span> 
<span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
<br>

<h3 id="shell-和-bash-的区别："><a href="#shell-和-bash-的区别：" class="headerlink" title="shell 和 bash 的区别："></a>shell 和 bash 的区别：</h3><ul>
<li><code>shell</code> –unix  全称：Bourne（伯恩） shell</li>
<li><code>bash</code>  –linux  首字母缩写：Bourne age shell</li>
</ul>
<p>解释一下，先有 Unix 系统，当时是以伯恩开发的和系统进行交互的软件，命名为 shell ；随后在出现 Linux （类 Unix）系统，伯恩想要将 shell 迁移到 Linux 上面，但是又不重名，所以称呼为 Bourne age shell，简写为 bash。</p>
<br>

<h3 id="shell-命令参数风格："><a href="#shell-命令参数风格：" class="headerlink" title="shell 命令参数风格："></a>shell 命令参数风格：</h3><p>命令参数，其实是由带 - 和不带 - 两种的。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200321_163207.png" width="90%"/ loading="lazy">

<br>

<h3 id="光标相关快捷键："><a href="#光标相关快捷键：" class="headerlink" title="光标相关快捷键："></a>光标相关快捷键：</h3><ul>
<li><code>history</code> (crtl + p&#x2F;n  向上向下遍历历史命令)</li>
<li><code>crtl + b/f</code> (前进后退：backward，forward)</li>
<li><code>crtl + a/e</code> (移动到首尾：begin，end)</li>
<li><code>crtl + u/k</code> (删除一行、删除光标到结尾)</li>
<li><code>crtl + h/d</code> （删除光标前面、后面一个字母： del）</li>
<li><code>Tab</code> 单词提示补全</li>
</ul>
<br>

<h3 id="Linux-目录文件结构："><a href="#Linux-目录文件结构：" class="headerlink" title="Linux 目录文件结构："></a>Linux 目录文件结构：</h3><ul>
<li><p>Linux 目录根文件&#x2F;结构</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200320_000515.png" width="100%"/ loading="lazy">
</li>
<li><p><code>/bin</code> 二进制文件，可执行文件，shell 命令</p>
</li>
<li><p><code>/dev</code> Linux 下一切皆文件，硬盘，显卡，显示器</p>
</li>
<li><p><code>/lib</code> 动态库</p>
</li>
<li><p><code>/met</code> 手动的挂载目录</p>
</li>
<li><p><code>/media</code> 外设的自动的挂载目录，如 U 盘</p>
</li>
<li><p><code>/root</code> 超级用户的家目录</p>
</li>
<li><p><code>/usr</code> -&gt;unix system resource</p>
</li>
<li><p>头文件，游戏，用户安装的程序（usr&#x2F;local） <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200320_000631.png" width="100%"/ loading="lazy"></p>
</li>
<li><p><code>/etc</code> 存放配置文件</p>
</li>
<li><p><code>/opt</code> 安装第三方应用程序（如：火狐浏览器，notepadqq） </p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200320_001451.png" width="60%"/ loading="lazy">
</li>
<li><p><code>/home</code> Linux 操作系统下所有用户的家目录</p>
</li>
<li><p><code>/tmp</code> 存放临时文件，可能重启会被清除里面的文件</p>
</li>
<li><p><code>/boot</code> 系统开机的一些配置文件</p>
</li>
</ul>
<br>

<h3 id="文件目录相关的命令："><a href="#文件目录相关的命令：" class="headerlink" title="文件目录相关的命令："></a>文件目录相关的命令：</h3><ul>
<li><p><code>tree</code> 查看目录的内容</p>
<ul>
<li># -C 表示输出带彩色， -N 直接显示编码输出（中文不乱码）；<code>alias tree=&#39;tree -CN&#39;</code></li>
<li>-L 显示多少层的树</li>
</ul>
</li>
<li><p><code>ls</code> 查看文件或者目录</p>
<ul>
<li><p>-a 显示包括影隐藏文件， -l 每个文件的详细信息</p>
</li>
<li><p>-F 若是文件夹，则文件夹名字后加 &#x2F; 标识</p>
</li>
<li><p>-h 以人类能够看得懂的方式显示，大小带单位</p>
<p><font color=#FF0000  size=4 face="幼圆"><strong>Linux 下文件夹永远是 4K；</strong> </font> 而 unix 下不是 4K。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200320_004653.png" width="90%"/ loading="lazy">

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200320_004531.png" width="90%"/ loading="lazy"></li>
</ul>
</li>
<li><p><code>pwd</code> 显示完整当前路径 (printf work dir)</p>
</li>
<li><p><code>mkdir</code> 创建文件夹</p>
<ul>
<li>-p 循环创建多个文件夹</li>
</ul>
</li>
<li><p><code>touch</code> 创建文件</p>
<ul>
<li>若是文件已存在，则只更改文件创建时间</li>
</ul>
</li>
<li><p><code>rm</code> 删除目录（删除之后，不能恢复）</p>
<ul>
<li><p>-r 递归删除；-f 删除时候不弹出确认是否；-i 删除时候添加提示信息</p>
<p>rmdir （辣鸡，只能删除空文件夹）</p>
</li>
</ul>
</li>
<li><p><code>cp</code> 复制文件、文件夹</p>
<ul>
<li>cp fileA fileB (fileB 无，则创建；fileB 已存在，则覆盖)</li>
<li>cp dirA&#x2F; dirB <ul>
<li>dirB 无   (dirA 文件夹(含) 拷贝到 目录 dirB)</li>
<li>dirB 存在  (dirA 文件夹(不含) 拷贝到 目录 dirB)</li>
</ul>
</li>
</ul>
</li>
<li><p><code>mv</code> 移动、改名</p>
</li>
</ul>
<br>

<h3 id="显示文件内容命令-cat-x2F-more："><a href="#显示文件内容命令-cat-x2F-more：" class="headerlink" title="显示文件内容命令 cat &#x2F; more："></a>显示文件内容命令 cat &#x2F; more：</h3><ul>
<li><code>cat</code> 把文件内容打印到终端</li>
<li><code>more</code> 浏览文件（回车浏览下一行；空格翻页；q 退出）</li>
<li><code>less</code> 和 more 相似</li>
<li><code>head</code> 显示文件头部的前 10 行</li>
<li><code>tail</code> 显示文件尾部 10 行</li>
</ul>
<br>

<h3 id="软硬链接："><a href="#软硬链接：" class="headerlink" title="软硬链接："></a>软硬链接：</h3><h4 id="软连接-ln-s："><a href="#软连接-ln-s：" class="headerlink" title="软连接 ln -s："></a>软连接 ln -s：</h4><ul>
<li><p>可以看做 <strong>快捷方式</strong></p>
</li>
<li><p><code>ln -s 文件名 快捷方式名</code> (文件名带上绝对路劲，快捷方式任何地方都可用)</p>
</li>
<li><p>目录也可以创建快捷方式</p>
</li>
</ul>
<h4 id="硬链接-ln："><a href="#硬链接-ln：" class="headerlink" title="硬链接 ln："></a>硬链接 ln：</h4><ul>
<li><p><code>ln 文件名 硬链接名</code> （不需要带路径）</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200320220735.png" width="50%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="用户权限，用户，用户组-chmod-x2F-chown："><a href="#用户权限，用户，用户组-chmod-x2F-chown：" class="headerlink" title="用户权限，用户，用户组 chmod &#x2F; chown："></a>用户权限，用户，用户组 chmod &#x2F; chown：</h3><blockquote>
<ul>
<li>目录必须要有执行权限，才可以进去</li>
<li>查看所属用户 cat &#x2F;etc&#x2F;passwd </li>
<li>查看所属于组 cat &#x2F;etc&#x2F;group （看到的 x 表示加密的密码）</li>
</ul>
</blockquote>
<ul>
<li><code>chmod</code> 修改文件或者目录的权限（同命令，在 Linux 可运行，在 Unix 不一定可以通过）；<strong>含义：u、g、o、a （usr&#x2F;group&#x2F;other&#x2F;all）</strong> <ul>
<li>默认是使用 a(all) 所有人的权限<ul>
<li>eg: chmod ugo+x 20200314_205632.png (加减不同权限用逗号)</li>
<li>eg: chmod 777 20200314_205632.png （覆盖权限）</li>
<li>eg: chmod -440 20200314_205616.png （加减权限）</li>
</ul>
</li>
</ul>
</li>
<li><code>chown</code> 修改文件所有者或所属组<ul>
<li>chown 新的所有者 文件名</li>
<li>chown 新的所有者：新的组 文件名</li>
</ul>
</li>
<li><code>chgrp</code> 修改文件所属组(可以看做弱一点的命令)<ul>
<li>chgrp 新的组 文件名</li>
</ul>
</li>
</ul>
<br>

<h3 id="文件查找和检索-find-x2F-grep："><a href="#文件查找和检索-find-x2F-grep：" class="headerlink" title="文件查找和检索 find &#x2F; grep："></a><font color=#FF0000 face="幼圆">文件查找和检索 find &#x2F; grep：</font></h3><ul>
<li><p><font color=#FF0000 face="幼圆"><code>find</code> 根据文件属性查找</font></p>
<ul>
<li><p><strong>name、type、size、ctime&#x2F;mtime&#x2F;atime</strong> (创建、修改、访问日期)、<strong>mindepth&#x2F;maxdepth&#x2F;</strong> (最浅、深的层数)</p>
<ul>
<li>eg: find ~&#x2F; -name “*.txt”</li>
<li>eg: find . -type d (七种文件类型:f,d,l,p,s,c,b)</li>
<li>eg: find . -size +4k -size -1M <strong>(4k &lt; 文件大于 &lt; 1M)</strong></li>
<li>eg: find . -ctime -2 (在2天之内创建的文件)</li>
<li>eg: find . -maxdepth 2 (查找当前目录下最深为 2 层的目录)</li>
</ul>
</li>
<li><p>高级查找： </p>
<ul>
<li><p>find . -type d <font color=#FF0000 face="幼圆">-exec</font> ls -l <font color=#FF0000 face="幼圆">{} ;</font>  (ls -l 为具体的shell 命令，<strong>红色为固定格式</strong> )</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># exec 也可以替换为 ok; ok还会弹出确认提示，要加上分号</span>
<span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> d <span class="token parameter variable">-exec</span> 命令 <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">\</span><span class="token punctuation">;</span>  
<span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> d <span class="token parameter variable">-ok</span> 命令 <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">\</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>find . -type d | xargs shell命令 (用管道效率比上面高)</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><font color=#FF0000 face="幼圆"><code>grep</code> 根据文件内容查找</font></p>
<ul>
<li>grep -r (有文件夹) ”查找的内容“ 搜索路径 -n； <strong>（-n 显示匹配到的字符串的行数）</strong><ul>
<li>eg: grep -r “aa” ~&#x2F;Desktop -n  （文件夹可以没有）</li>
</ul>
</li>
</ul>
</li>
</ul>
<br>

<h3 id="压缩包的管理"><a href="#压缩包的管理" class="headerlink" title="压缩包的管理:"></a><font color=#FF0000 face="幼圆">压缩包的管理:</font></h3><h4 id="Linux-常见压缩格式-gz-x2F-bz2："><a href="#Linux-常见压缩格式-gz-x2F-bz2：" class="headerlink" title="Linux 常见压缩格式 .gz &#x2F; .bz2："></a><font color=#FF0000 face="幼圆">Linux 常见压缩格式 .gz &#x2F; .bz2：</font></h4><ul>
<li><code>.gz</code>   –gzip 工具压压缩出来的 </li>
<li><code>.bz2</code>  –bzip2 工具压压缩出来的</li>
<li>上面两个命令，只能压缩文件，很弱，一般是被间接使用</li>
</ul>
<h4 id="常用压缩命令-tar-x2F-rar-x2F-zip："><a href="#常用压缩命令-tar-x2F-rar-x2F-zip：" class="headerlink" title="常用压缩命令 tar &#x2F; rar &#x2F; zip："></a><font color=#FF0000 face="幼圆">常用压缩命令 tar &#x2F; rar &#x2F; zip：</font></h4><blockquote>
<p><font color=#FF0000 face="幼圆"><strong>总结：</strong> </font></p>
<p><strong>压缩：</strong></p>
<p>tar zcvf  压缩包名 原材料    （若含文件夹，压缩则需要 -r）</p>
<p>rar a     压缩包名 原材料    （若含文件夹，压缩则需要 -r）</p>
<p>zip       压缩包名 原材料    （若含文件夹，压缩则需要 -r）</p>
<p><strong>解缩：</strong></p>
<p>tar   zxvf 压缩包名 -C 解压路径</p>
<p>rar   x    压缩包名    解压路径</p>
<p>unzip      压缩包名 -d 解压路径</p>
</blockquote>
 <br>

<ul>
<li><code>tar</code>   <strong>–压缩解压</strong><ul>
<li><strong>参数：</strong><ul>
<li>c  -创建压缩文件</li>
<li>x  -释放压缩文件</li>
<li>v  -打印提示信息（可不写）</li>
<li>f  -指定压缩包的名字</li>
<li>z  -使用 gzip 压缩文件    -xxx.tar.gz</li>
<li>j  -使用 bzip 压缩该文件  -xxx.tar.bz2</li>
</ul>
</li>
<li><strong>压缩：</strong><ul>
<li>tar 参数 压缩包名字 原材料</li>
<li><code>tar zcvf test.tar.gz A b.txt c.png d.exe</code></li>
</ul>
</li>
<li><strong>解压：</strong><ul>
<li>-C  -解压目录</li>
<li><code>tar zxvf test.tar.gz -C 解压目录</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<br>

<ul>
<li><code>rar</code>    <strong>–压缩解压</strong><ul>
<li><strong>压缩：</strong> <code>rar a 压缩包名(不用指定后缀) 压缩内容</code>  (有目录则加 -r 参数)</li>
<li><strong>解压：</strong> <code>rar x 压缩包名 解压目录</code></li>
</ul>
</li>
</ul>
<br>

<ul>
<li><code>zip</code>   <strong>–压缩解压</strong><ul>
<li><strong>压缩：</strong> <code>zip 参数 压缩包名 原材料</code></li>
<li><strong>解压缩：</strong> <code>unzip 解压文件 -d 解压路径</code></li>
</ul>
</li>
</ul>
<br>

<h3 id="系列地址："><a href="#系列地址：" class="headerlink" title="系列地址："></a>系列地址：</h3><p><a href="https://github.com/xmuli/linuxExample">https://github.com/xmuli/linuxExample</a></p>
<p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux中普通的进程间通信方式--有名管道fifo(适用于无血缘关系的进程)</title>
    <url>/posts/fe544e10/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　在<a href="https://blog.csdn.net/qq_33154343/article/details/105254078">上一篇</a>中，写了有血缘关系的进程间的通信，使用匿名管道 <code>pipe</code>，本篇是介绍，<strong>对于无血缘关系的进程间通信，可以采用（有名）管道的 <code>fifo</code> 方式。</strong>   </p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p>
<p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p>
<br>

<h3 id="进程间通信-IPC："><a href="#进程间通信-IPC：" class="headerlink" title="进程间通信 IPC："></a>进程间通信 IPC：</h3><p>进程间通信（Inter Process Communication），字母首写即为 IPC。</p>
<ul>
<li><font color=#FF0000  size=4 face="幼圆"><strong>进程间常用的 4 种方式：</strong></font><ul>
<li><strong>管道</strong> （简单）</li>
<li><strong>信号</strong> （系统开销小）</li>
<li><strong>共享映射区</strong> （有无血缘关系的进程间通信都可以）</li>
<li><strong>本地 socket 套接字</strong> (稳定)</li>
</ul>
</li>
</ul>
<br>

<h3 id="有名管道（fifo）："><a href="#有名管道（fifo）：" class="headerlink" title="有名管道（fifo）："></a>有名管道（fifo）：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">fifo</span><span class="token punctuation">(</span><span class="token keyword">int</span> fildes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><font color=#FF0000  size=4 face="幼圆">适用于无血缘关系的进程之间的通信。</font>进程之间是不要使用 sleep() 函数的，因为管道默认就是堵塞的。虽然实现形态上是文件，但是管道本身并不占用磁盘或者其他外部存储的空间。在Linux的实现上，它占用的是内核的一段缓冲区空间。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200401202233.png" width="50%"/ loading="lazy">



<br>

<ul>
<li><strong>本质：</strong> <ul>
<li><font color=#FF0000  size=4 face="幼圆">是内核缓冲区。也是伪文件（不占用磁盘空间）</font></li>
</ul>
</li>
<li><strong>特点：</strong><ul>
<li>有名管道</li>
<li>在磁盘上有这样一个文件 <code>ls -l -&gt; p</code></li>
<li>伪文件，在磁盘大小永远为 0</li>
<li>在内核中有一个对应的缓冲区</li>
<li>使用半双工的通信方式</li>
</ul>
</li>
<li><strong>使用场景：</strong><ul>
<li>适用于没有血缘关系的进程间的通信</li>
</ul>
</li>
<li><strong>创建方式：</strong><ul>
<li>命令： mkfifo 管道名</li>
<li>函数： mkfifo()</li>
</ul>
</li>
<li><strong>fifo 文件可以使用 IO 函数进行操作</strong><ul>
<li>open() &#x2F; close()</li>
<li>read() &#x2F; write()</li>
<li>不能执行 lseek 操作</li>
</ul>
</li>
</ul>
<br>

<h3 id="写一个例子："><a href="#写一个例子：" class="headerlink" title="写一个例子："></a>写一个例子：</h3><p>有两个进程 a 和 b，分别用 write.cpp 和 read.cpp 进行实现，然后进程 a 往一个管道里面写数据，进程 b 从这个管道里面读取数据。</p>
<ul>
<li><p><strong>代码实现：</strong></p>
<p>这里写 <code>writ.cpp</code>，之后运行可执行程序 writ，当做 <strong>a 进程</strong> ，往这个管道里面一直写数据：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请按照格式输入: ./write myfifo\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">access</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_OK<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//判断文件是否存在</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">mkfifo</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[creator fifo file] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"creator fifo success: %d\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[open file] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"this is 2020-04-01, code"</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//        sleep(2);  //用来验证管道阻塞这一属性的</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>这里写 <code>read.cpp</code>，之后运行可执行程序 read，当做 <strong>b 进程</strong> ，往这个管道里面一直读数据：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请按照格式输入: ./read myfifo\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">access</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_OK<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//判断文件是否存在</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">mkfifo</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[creator fifo file] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"creator fifo success: %d\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[open file] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        buf<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf = %s,  len = %d\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<p>​	</p>
<ul>
<li><p><strong>代码分析：</strong><br>为了清晰演示管道的阻塞属性，我们打开写端的 <code>sleep(2)</code> 这一行代码，故意用来制造写端的速度比读端要慢，然后观察读端的打印显示。可以清楚的得到管道是阻塞的这一结论。</p>
</li>
<li><p><strong>运行效果：</strong></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200401_210833.png" width="90%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><a href="https://github.com/xmuli/linuxExample/tree/master/11_pipe">11_pipe</a></p>
<p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux中未决信号集和阻塞信号集的状态关系sigaddset，以及捕捉信号函数signal、sigaction</title>
    <url>/posts/1a716682/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　在<a href="https://blog.csdn.net/qq_33154343/article/details/105357886">上一篇</a>中，讲解了 Linux 的系统中基本信号概念入门。这里就说一下两个重要的概念，系统内核里面的 <strong>未决信号集</strong> 和 <strong>阻塞信号集</strong> 的状态关系，以及处于用户区域的 <strong>自定义的信号集</strong> ，如何处理这三者之间的关系。和 Linux 中的<strong>信号捕捉</strong> ，以及捕捉函数相关函数相关的使用。</p>
<ul>
<li><strong>自定义信号集：</strong><ul>
<li>sigaddset()    &#x2F;&#x2F;将指定信号置为 1，添加到自定义集中 </li>
<li>sigdelset()    &#x2F;&#x2F;将指定信号置为 0，添加到自定义集中 </li>
<li>sigemptyset()  &#x2F;&#x2F;将所有信号置为 0，清空</li>
<li>sigfillset()   &#x2F;&#x2F;将所有信号置为 1，填充</li>
<li>sigismember()  &#x2F;&#x2F;判断指定信号是否存在，是否为 1</li>
</ul>
</li>
<li><strong>系统信号集：</strong><ul>
<li>sigprocmask()   &#x2F;&#x2F;将自定义信号集设置给阻塞信号集。</li>
<li>sigprocmask()   &#x2F;&#x2F;读取当前信号的未决信号集。参数为输出参数，内核将未决信号集写入 set</li>
</ul>
</li>
<li><strong>信号捕捉：</strong><ul>
<li>signal()        &#x2F;&#x2F;实现信号捕捉的功能；最简单使用一个函数。</li>
<li>sigaction()     &#x2F;&#x2F;同上，多一个额外功能，运行期间能够<strong>临时</strong> 屏蔽指定信号</li>
</ul>
</li>
</ul>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p>
<p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p>
<br>

<h3 id="未决信号集："><a href="#未决信号集：" class="headerlink" title="未决信号集："></a>未决信号集：</h3><ul>
<li><strong>概念：</strong> 没有被当前进程处理的信号</li>
</ul>
<h3 id="阻塞信号集："><a href="#阻塞信号集：" class="headerlink" title="阻塞信号集："></a>阻塞信号集：</h3><ul>
<li><strong>概念：</strong> 将某个信号放到阻塞信号集中，这个信号就不会被进程处理；当阻塞解除后，信号就会被处理。</li>
</ul>
<p>绘画一个草图理解一下这几则之间的关系，当一个程序跑起来之后，会生成一个进程，有自己虚拟地址控件，然后在内核区域的 PCB 中，有着未决信号集合阻塞信号集两个，被系统内核所控制，包括其和自定义信号集的类型都是一样的。左侧的数值是系统信号 1-64(或更多)对应的，然后格子里面的是该 n 号信号对应的值，值为 0 或 1；当发送一个 2 号信号在未决信号集里面时候，系统就会去阻塞信号集里面照片 2 号信号的值，若是为 1，表示阻塞，不作处理，让其一直待在未决信号集中；若是为 0，则将 2 号信号在未决信号集中的值修改为 1，且对出对应的处理。</p>
<p>若是要修改阻塞信号集合里面的值，只能够先赋值号自顶一个信号集，然后再讲自定义的这个值设置到系统的阻塞信号中。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200407_233036.png" width="80%"/ loading="lazy">



<br>

<h3 id="自定义信号集："><a href="#自定义信号集：" class="headerlink" title="自定义信号集："></a>自定义信号集：</h3><p>查看 man 文档，里面常见的 自定义信号集 的接口函数为如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">sigaddset</span><span class="token punctuation">(</span>sigset_t <span class="token operator">*</span>set<span class="token punctuation">,</span> <span class="token keyword">int</span> signo<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//将指定信号置为 1，添加到自定义集中 </span>

<span class="token keyword">int</span> <span class="token function">sigdelset</span><span class="token punctuation">(</span>sigset_t <span class="token operator">*</span>set<span class="token punctuation">,</span> <span class="token keyword">int</span> signo<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//将指定信号置为 0，添加到自定义集中 </span>

<span class="token keyword">int</span> <span class="token function">sigemptyset</span><span class="token punctuation">(</span>sigset_t <span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//将所有信号置为 0，清空</span>

<span class="token keyword">int</span> <span class="token function">sigfillset</span><span class="token punctuation">(</span>sigset_t <span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//将所有信号置为 1，填充</span>

<span class="token keyword">int</span> <span class="token function">sigismember</span><span class="token punctuation">(</span><span class="token keyword">const</span> sigset_t <span class="token operator">*</span>set<span class="token punctuation">,</span> <span class="token keyword">int</span> signo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//判断指定信号是否存在，是否为 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="sigprocmask-函数："><a href="#sigprocmask-函数：" class="headerlink" title="sigprocmask() 函数："></a>sigprocmask() 函数：</h3><ul>
<li><strong>作用：</strong>  将自定义信号集设置给阻塞信号集。</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">sigprocmask</span><span class="token punctuation">(</span><span class="token keyword">int</span> how<span class="token punctuation">,</span> <span class="token keyword">const</span> sigset_t <span class="token operator">*</span>restrict set<span class="token punctuation">,</span> sigset_t <span class="token operator">*</span>restrict oset<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><strong>参数：</strong><ul>
<li><strong>how：</strong> 假设当前屏蔽的信号屏蔽字符为 mask；<ul>
<li><code>SIG_BLOCK</code>: 相当于 <strong>mask &#x3D; mask | set</strong>  (set 为需要屏蔽的信号集)</li>
<li><code>SIG_UNBLOCK</code>： 相当于 <strong>mask &#x3D; mask &amp; ~set</strong>  (set 为需要解除屏蔽的信号集)</li>
<li><code>SIG_SETMASK</code>： 相当于 <strong>mask &#x3D; set</strong>  (set 为用于替代原始屏蔽集的新屏蔽集)</li>
</ul>
</li>
</ul>
</li>
</ul>
<br>

<h3 id="sigpending-函数："><a href="#sigpending-函数：" class="headerlink" title="sigpending() 函数："></a>sigpending() 函数：</h3><ul>
<li><strong>作用：</strong>  读取当前信号的未决信号集。参数为输出参数，内核将未决信号集写入 set</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">sigpending</span><span class="token punctuation">(</span>sigset_t <span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>

<h3 id="写一个小的例子："><a href="#写一个小的例子：" class="headerlink" title="写一个小的例子："></a>写一个小的例子：</h3><p>编写一个小的例子来使用一下，设置阻塞信号集，并把所有常规的信号的未决状态打印到终端。</p>
<ul>
<li><p><strong>代码实现：</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        sigset_t pendest<span class="token punctuation">;</span>
        <span class="token function">sigpending</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pendest<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//每隔一秒，对系统信号阻塞集的信号做一次校验</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sigismember</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pendest<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>运行效果：</strong></p>
<p> 这里的 1-64 号信号，在系统的阻塞信号集中，都是 0，说明该进程没有设置信号阻塞。</p>
  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200408175735.gif" width="70%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="信号捕捉："><a href="#信号捕捉：" class="headerlink" title="信号捕捉："></a>信号捕捉：</h3><p>在 Linux 中， 系统会释放信号，然后内核又会根据这个信号对对应的进程做相应的动作。然后对于信号捕捉常用有如下函数的使用。</p>
<p>其中分为简单的 <code>signal()</code> 函数，和 <code>sigaction()</code> 函数，这两个都能够捕捉指定的信号，也比较常使用</p>
<h4 id="signal-函数："><a href="#signal-函数：" class="headerlink" title="signal() 函数："></a>signal() 函数：</h4><p>实现信号捕捉的功能；最简单一个函数。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>sig_t<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sig_t <span class="token function">signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">,</span> sig_t func<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<ul>
<li><p>这个函数比较特别，当然，也可以简写为 <code> void (* signal(int sig, void (*func)(int));)(int);</code> 这种复杂形式的。</p>
<ul>
<li>第一行是一个函数指针，作为后面的函数的回调函数使用。</li>
<li>第二行是真正的信号捕捉函数调用</li>
</ul>
</li>
<li><p><strong>代码例子：</strong></p>
<p>写一个例子，捕捉信号 <code>SIGINT</code> 函数，键盘按下 <code>ctrl + c</code> 会发射此信号，然后保证此进程没有终止或者死亡的情况下，捕捉这个函数，做出自定义的行为，具体的在 func() 函数里面实现。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span>

<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//用作回调函数，给 signal() 调用</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">signal</span><span class="token punctuation">(</span>SIGINT<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置信号捕捉函数， 捕捉 ctrl + c</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Keep the thread running for the non-death state.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> 
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"捕捉的信号为: %d\n"</span><span class="token punctuation">,</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
<li><p><strong>运行效果：</strong></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200408175755.gif" width="80%"/ loading="lazy"></li>
</ul>
<br>

<h4 id="Unix-中的-sigaction-函数："><a href="#Unix-中的-sigaction-函数：" class="headerlink" title="Unix 中的 sigaction() 函数："></a>Unix 中的 sigaction() 函数：</h4><p>捕捉信号的函数，比上面使用略微复杂点，但是有一个额外的功能，<strong>可以在程序运行期间，临时屏蔽指定的信号。</strong> </p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">sigaction</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>restrict act<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>restrict oact<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* union for signal handlers */</span>
<span class="token keyword">union</span> __sigaction_u <span class="token punctuation">&#123;</span>
	<span class="token keyword">void</span>    <span class="token punctuation">(</span><span class="token operator">*</span>__sa_handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">void</span>    <span class="token punctuation">(</span><span class="token operator">*</span>__sa_sigaction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">__siginfo</span> <span class="token operator">*</span><span class="token punctuation">,</span>
	    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/* Signal vector template for Kernel user boundary */</span>
<span class="token keyword">struct</span>  <span class="token class-name">__sigaction</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">union</span> __sigaction_u __sigaction_u<span class="token punctuation">;</span>  <span class="token comment">/* signal handler */</span>
	<span class="token keyword">void</span>    <span class="token punctuation">(</span><span class="token operator">*</span>sa_tramp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> siginfo_t <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//已被废弃的参数，不填</span>
	sigset_t sa_mask<span class="token punctuation">;</span>               <span class="token comment">/* signal mask to apply */</span>
	<span class="token keyword">int</span>     sa_flags<span class="token punctuation">;</span>               <span class="token comment">/* see signal options below */</span> <span class="token comment">//在信号处理函数执行中，是 "临时" 屏蔽指定信号</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/* if SA_SIGINFO is set, sa_sigaction is to be used instead of sa_handler. */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">sa_handler</span>      <span class="token expression">__sigaction_u<span class="token punctuation">.</span>__sa_handler</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">sa_sigaction</span>    <span class="token expression">__sigaction_u<span class="token punctuation">.</span>__sa_sigaction</span></span>


<span class="token comment">//--------------------------------------------------------------------</span>
<span class="token comment">//__sigaction() 函数也可以 改为使用 sigaction() 函数</span>
<span class="token comment">/*
 * Signal vector "template" used in sigaction call.
 */</span>
<span class="token keyword">struct</span>  <span class="token class-name">sigaction</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">union</span> __sigaction_u __sigaction_u<span class="token punctuation">;</span>  <span class="token comment">/* signal handler */</span>
	sigset_t sa_mask<span class="token punctuation">;</span>               <span class="token comment">/* signal mask to apply */</span>
	<span class="token keyword">int</span>     sa_flags<span class="token punctuation">;</span>               <span class="token comment">/* see signal options below */</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ul>
<li><strong>参数：</strong><ul>
<li>sig： 捕捉的信号</li>
<li>act： 新的，将要执行的自定义动作的设定操作</li>
<li>oact： 被设置之前的旧的设定的操作吗，一般不需要，传入 NULL</li>
</ul>
</li>
</ul>
<p>restrict是c99标准引入的，它只可以用于限定和约束指针，并表明指针是访问一个数据对象的唯一且初始的方式.即它告诉编译器，所有修改该指针所指向内存中内容的操作都必须通过该指针来修改,而不能通过其它途径(其它变量或指针)来修改;这样做的好处是,能帮助编译器进行更好的优化代码,生成更有效率的汇编代码.如 int *restrict ptr, ptr 指向的内存单元只能被 ptr 访问到，任何同样指向这个内存单元的其他指针都是未定义的，直白点就是无效指针(野指针)。这个关键字只能在C99标准的C程序里使用，C++程序不支持，restrict的起源最早可以追溯到Fortran。</p>
<ul>
<li><p><strong>写一个例子：</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span>

<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//用作回调函数</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    __sigaction_u sigactu<span class="token punctuation">;</span>
    sigactu<span class="token punctuation">.</span>__sa_handler <span class="token operator">=</span> func<span class="token punctuation">;</span> <span class="token comment">//另一个变量 sigactu.__sa_sigaction 不用赋值</span>

    <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> act<span class="token punctuation">;</span>
    act<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">//通常给 0</span>
    act<span class="token punctuation">.</span>__sigaction_u <span class="token operator">=</span> sigactu<span class="token punctuation">;</span>
    <span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>act<span class="token punctuation">.</span>sa_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//清空 自定义信号集</span>
    <span class="token function">sigaddset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>act<span class="token punctuation">.</span>sa_mask<span class="token punctuation">,</span> SIGQUIT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//向指定 系统阻塞集 中写入 自定义的信号集，添加需要屏蔽的信号(ctrl + 反斜杠 触发)</span>

    <span class="token function">sigaction</span><span class="token punctuation">(</span>SIGINT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>act<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Keep the thread running for the non-death state.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> 
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"捕捉的信号为: %d\n"</span><span class="token punctuation">,</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"醒了\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>分析运行：</strong></p>
<p>这里故意运行两次：</p>
<p><font color=#D0087E size=4 face="幼圆"><strong>第一次：</strong></font>  先按下 <code>ctrl + c</code> 发射 2 号信号 <code>SIGINT</code>， 等待其收到信号后，<strong>执行 3s 后</strong> ，将 func() 内容跑完，<strong>再次按下</strong>  <code>ctrl + \</code> 发射其他信号 <code>SIGINT</code>，系统收到后，<font color=#FF0000  size=4 face="幼圆">程序立即死亡（此时该 <code>SIGINT</code> 已经过了临死屏蔽的状态）</font></p>
<p><font color=#D0087E size=4 face="幼圆"><strong>第二次：</strong></font>  先按下 <code>ctrl + c</code> 发射 2 号信号 <code>SIGINT</code>， 等待其收到信号后，<strong>执行不到 3s</strong>  ，func() 内容还没跑完，<strong>立即按下</strong>  <code>ctrl + \</code> 发射其他信号 <code>SIGINT</code>，系统收到后，<font color=#FF0000  size=4 face="幼圆">程序没有立即死亡（此时该 <code>SIGINT</code> 正处于临死屏蔽的状态）， 而是过了几秒钟在死亡。</font></p>
</li>
<li><p><strong>运行效果:</strong></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200410_224339.png" width="60%"/ loading="lazy"></li>
</ul>
<br>

<h4 id="Linux-中的-sigaction-函数："><a href="#Linux-中的-sigaction-函数：" class="headerlink" title="Linux 中的 sigaction() 函数："></a>Linux 中的 sigaction() 函数：</h4><p>Linux 中的该函数，和 Unix 有点不一致，<strong>但主要填写的四个参数是一样的，这是不变的；</strong> </p>
<p>这里贴出 Linux 下的函数原型，可以和 Unix 下的 <code>sigaction()</code> 比较一下：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200410_221353.png" width="70%"/ loading="lazy">



 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200410_221434.png" width="70%"/ loading="lazy">

<br>

<h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p> <a href="https://github.com/xmuli/linuxExample/tree/master/15_sys_usr_signal">15_sys_usr_signal</a></p>
<p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux中父子进程、兄弟子进程之间通信方式--匿名管道pipe(适用于有血缘关系的进程)</title>
    <url>/posts/145c9de9/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　<strong>对于有血缘关系的进程间通信，如父子进程、兄弟子进程子之间的通信，可以采用（匿名）管道的 <code>pipe</code> 方式。</strong> 而进程间通信一共有四种方式：管道、信号、共享映射区、套接字。且说一个概念，进程间通信（Inter Process Communication），字母首写即为 IPC。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p>
<p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p>
<br>

<h3 id="进程间通信-IPC："><a href="#进程间通信-IPC：" class="headerlink" title="进程间通信 IPC："></a>进程间通信 IPC：</h3><p>进程间通信（Inter Process Communication），字母首写即为 IPC。</p>
<ul>
<li><font color=#FF0000  size=4 face="幼圆"><strong>进程间常用的 4 种方式：</strong></font><ul>
<li><strong>管道</strong> （简单）</li>
<li><strong>信号</strong> （系统开销小）</li>
<li><strong>共享映射区</strong> （有无血缘关系的进程间通信都可以）</li>
<li><strong>本地 socket 套接字</strong> (稳定)</li>
</ul>
</li>
</ul>
<br>

<h3 id="匿名管道（pipe）："><a href="#匿名管道（pipe）：" class="headerlink" title="匿名管道（pipe）："></a>匿名管道（pipe）：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pipe</span><span class="token punctuation">(</span><span class="token keyword">int</span> fildes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>一般都是指创建匿名管道，其中传出 <code>int fildes[2]</code> 参数是固定的；fildes[0] 代表读端，fildes[1] 代表写端。<font color=#FF0000  size=4 face="幼圆">适用于有血缘关系的进程。</font>通常父子进程之间是不要使用 sleep() 函数的，因为管道默认就是堵塞的。虽然实现形态上是文件，但是管道本身并不占用磁盘或者其他外部存储的空间。在Linux的实现上，它占用的是内存空间。所以，Linux上的管道就是一个操作方式为文件的内存缓冲区。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200329_165752.png" width="70%"/ loading="lazy">



<br>

<ul>
<li><strong>本质：</strong> <ul>
<li><font color=#FF0000  size=4 face="幼圆">是内核缓冲区。也是伪文件（不占用磁盘空间）</font></li>
</ul>
</li>
<li><strong>特点：</strong><ul>
<li>其读端和写端，对应两个文件描述符；数据写端流入，读端流出</li>
<li>操作管道的进程被销毁之后，管道自动被释放了</li>
<li>管道默认是阻塞的（读写端）</li>
</ul>
</li>
<li><strong>实现原理：</strong><ul>
<li>内部实现方式：环形队列。只有一次读写的机会。先进先出。</li>
<li>其缓冲区默认是 4K 大小；但是大小会随着实际情况<strong>适当</strong> 调整。</li>
</ul>
</li>
<li><strong>局限性：</strong><ul>
<li>队列：数据只能够读取一次，不能够重复读取</li>
<li>半全工方式工作</li>
</ul>
</li>
</ul>
<br>

<h4 id="父子进程间通信："><a href="#父子进程间通信：" class="headerlink" title="父子进程间通信："></a>父子进程间通信：</h4><ul>
<li><p><strong>写一个父子进程间，使用管道通信的例子：</strong></p>
<p>比如说，写一个例子，实现父子进程间的通信，实现 <code>ps aux | grep bash</code> 的实现。你可以看下面的思路图解析，然后自己尝试敲写一遍，没有出来的话，再来看我的。学习之事，不能急于求成，始终是那句话：<strong>纸上学来终觉浅，觉知此事要躬行。</strong> 当你开始写下第一行代码的时候，你会感受到创造的快乐。</p>
</li>
<li><p><strong>代码实现：</strong></p>
</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//用来标记管道的两端的文件描述符</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建管道 pipe. fd[2] 是固定的输出参数</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[pipe create file] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
        
    <span class="token keyword">int</span> pipeRead <span class="token operator">=</span> fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   
    <span class="token keyword">int</span> pipeWrite <span class="token operator">=</span> fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                         <span class="token comment">//parent process</span>
        <span class="token function">dup2</span><span class="token punctuation">(</span>pipeWrite<span class="token punctuation">,</span> STDOUT_FILENO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//重定向</span>
        <span class="token function">close</span><span class="token punctuation">(</span>pipeRead<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">execlp</span><span class="token punctuation">(</span><span class="token string">"ps"</span><span class="token punctuation">,</span> <span class="token string">"ps"</span><span class="token punctuation">,</span> <span class="token string">"aux"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">//child process</span>
        <span class="token function">dup2</span><span class="token punctuation">(</span>pipeRead<span class="token punctuation">,</span> STDIN_FILENO<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//重定向</span>
        <span class="token function">close</span><span class="token punctuation">(</span>pipeWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">execlp</span><span class="token punctuation">(</span><span class="token string">"grep"</span><span class="token punctuation">,</span> <span class="token string">"grep"</span><span class="token punctuation">,</span> <span class="token string">"bash"</span><span class="token punctuation">,</span> <span class="token string">"--color=auto"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ul>
<li><p><strong>代码分析：</strong></p>
<ul>
<li><p>父进程的 3 号文件描述符表，指向 pipe 管道的写端，要记得此刻把它的读端关闭</p>
</li>
<li><p>子进程的 4 号文件描述符表，指向 pipe 管道的读端，要记得此刻把它的写端关闭</p>
</li>
<li><p>因为管道只能够一次机会读写机会。如果要父子进程都能够读写，那么还得加一个管道</p>
</li>
<li><p>管道是默认是阻塞的</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_160109.png" width="100%"/ loading="lazy">


</li>
<li><p>其中对代码进程中的 20-28行的理解，和文件描述表中的文件描述符 0-4号 的对应关系如下：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_154545.png" width="70%"/ loading="lazy"></li>
</ul>
</li>
<li><p><strong>运行结果：</strong></p>
<ul>
<li><p>在 Ubuntu 18.4 上面的效果如图：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_143343.png" width="90%"/ loading="lazy">
</li>
<li><p>在 Mac 10.14.6 上面效果（后面那一串多余的，都是它自带的一些命令参数）</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_143639.png" width="90%"/ loading="lazy">

<ul>
<li>当你故意开多个终端的时候，也会把其他的终端搜索出来</li>
</ul>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200330_212720.png" width="90%"/ loading="lazy"></li>
</ul>
<p>​	 </p>
<ul>
<li>由上面是可以看到 在 Linux 和 Unix 系统之间是有着一些区别的，第1、2 张截图，其进程的所有者，Linux 中两个都是 muli 用户；而 Unix 一个是 root 系统 ，一个是 muli 用户。但是这里有一段困惑，怎么 Unix 中显示 root 的那个进程， 后面是有显示为我的一个虚拟机软件y？怎么和他扯上关系的？？？这里暂时有一个小的困惑。在下一个例子中，会看到更有其他的不同。</li>
</ul>
</li>
</ul>
<br>

<h4 id="兄弟子进程间通信："><a href="#兄弟子进程间通信：" class="headerlink" title="兄弟子进程间通信："></a>兄弟子进程间通信：</h4><p>这里实现两个兄弟子进程（无孙子进程）之间，利用管道进程 pipe 进程通信的例子</p>
<ul>
<li><p><strong>先上代码：</strong> 这是由上面一个例子改写的，思路可以参考前面那个图</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//用来标记管道的两端的文件描述符</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建管道 pipe. fd[2] 是固定的输出参数</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[pipe create file] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
        
    <span class="token keyword">int</span> pipeRead <span class="token operator">=</span> fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   
    <span class="token keyword">int</span> pipeWrite <span class="token operator">=</span> fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[creator process file:]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                         <span class="token comment">//child process 1</span>
        <span class="token function">dup2</span><span class="token punctuation">(</span>pipeWrite<span class="token punctuation">,</span> STDOUT_FILENO<span class="token punctuation">)</span><span class="token punctuation">;</span>   
        <span class="token function">close</span><span class="token punctuation">(</span>pipeRead<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">execlp</span><span class="token punctuation">(</span><span class="token string">"ps"</span><span class="token punctuation">,</span> <span class="token string">"ps"</span><span class="token punctuation">,</span> <span class="token string">"aux"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">//child process 2</span>
        <span class="token function">dup2</span><span class="token punctuation">(</span>pipeRead<span class="token punctuation">,</span> STDIN_FILENO<span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token function">close</span><span class="token punctuation">(</span>pipeWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">execlp</span><span class="token punctuation">(</span><span class="token string">"grep"</span><span class="token punctuation">,</span> <span class="token string">"grep"</span><span class="token punctuation">,</span> <span class="token string">"bash"</span><span class="token punctuation">,</span> <span class="token string">"--color=auto"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">//parent process</span>
        <span class="token function">close</span><span class="token punctuation">(</span>pipeWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">close</span><span class="token punctuation">(</span>pipeRead<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// sleep(2);</span>
        <span class="token keyword">int</span> wpid<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span> wpid <span class="token operator">=</span> <span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> WNOHANG<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//回收子进程</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>wpid <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">///sbin/init splash 进程    /sbin/launchd</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>wpid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> 
                <span class="token keyword">continue</span><span class="token punctuation">;</span>

            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child dide pid = %d\n"</span><span class="token punctuation">,</span> wpid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>    
    <span class="token punctuation">&#125;</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pipeWrite = %d,  pipeRead = %d\n"</span><span class="token punctuation">,</span> pipeWrite<span class="token punctuation">,</span> pipeRead<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
<li><p><strong>附上该例子的思路图：</strong></p>
<ul>
<li>要注意关闭父进程和不必要的进程的对应对管道的读写的文件描述符。且注意到管道默认是阻塞的。</li>
</ul>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_154612.png" width="60%"/ loading="lazy">


</li>
<li><p><strong>运行效果：</strong></p>
<ul>
<li><p>在 Ubuntu 18.4 中的效果：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_143330.png" width="90%"/ loading="lazy">
</li>
<li><p>在 Mac 10.14。6 中的效果：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_143655.png" width="90%"/ loading="lazy"></li>
</ul>
</li>
<li><p><strong>运行结果以及代码分析：</strong></p>
<ul>
<li>在 Linux 和 Unix 下，均可看到，是 三行打印输出的结果<ul>
<li>第一行是查询到 <code>子进程 1</code> 的信息，往管道里面写入 <code>ps aux</code> 的那个</li>
<li>第二行是查询到 <code>子进程 2</code> 的信息，往管道里面写入 <code>grep “bash” --color=auto</code>  的那个</li>
<li>第三行是父进程，打印的输出信息。</li>
</ul>
</li>
<li>思考，如果去掉代码42，45，46 行，会发生什么？？？会发现在 Linux 和 Unix 上面，都会答应批量的 <code>child dide pid = 1</code> 信息。查看了一下，<font color=#FF0000  size=4 face="幼圆">该进程号 pid &#x3D;&#x3D; 1，在 Linux 下是 <code>/sbin/init splash</code> ；在 Unix 下是 <code>/sbin/launchd</code> 进程。</font> 也就是书上和一些博客说的 init 进程，专门用来领养孤儿进程的，<strong>用来释放</strong> 子（孤儿）进程的 <strong>系统空间的 PCB</strong> 。</li>
</ul>
</li>
</ul>
<br>

<h3 id="管道的读写行为："><a href="#管道的读写行为：" class="headerlink" title="管道的读写行为："></a>管道的读写行为：</h3><p>此部分为理解，但是归总结纳一下：</p>
<h4 id="读操作："><a href="#读操作：" class="headerlink" title="读操作："></a>读操作：</h4><ul>
<li><strong>有数据：</strong><ul>
<li>read(fd)， -正常读，返回读出的字节数</li>
</ul>
</li>
<li><strong>无数据：</strong><ul>
<li>写端全部关闭<ul>
<li>read 解除阻塞，返回 0</li>
<li>相当于读文件到了尾部</li>
</ul>
</li>
<li>没有全部关闭<ul>
<li>read 阻塞（比如设置了一个 sleep(10)）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="写操作："><a href="#写操作：" class="headerlink" title="写操作："></a>写操作：</h4><ul>
<li><strong>读端全部关闭：</strong><ul>
<li>管道破裂，进程被终止<ul>
<li>内核给当前进程发送 SIGPIPE 信号（13 号信号）</li>
</ul>
</li>
</ul>
</li>
<li><strong>读端没有全部关闭</strong><ul>
<li>缓冲区写满了<ul>
<li>write 阻塞</li>
</ul>
</li>
<li>缓冲区没有写满<ul>
<li>write 继续写</li>
</ul>
</li>
</ul>
</li>
</ul>
<br>

<h3 id="查看管道缓冲区大小："><a href="#查看管道缓冲区大小：" class="headerlink" title="查看管道缓冲区大小："></a>查看管道缓冲区大小：</h3><ul>
<li><p><strong>命令：</strong>  <del><code>ulimix -a</code></del> 现在在 Linux 和 Unix 上面，都没有 pipe size 这一栏详细信息了</p>
</li>
<li><p><strong>函数：</strong> <code>fpathconf()</code></p>
<ul>
<li><p>一个例子：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//用来标记管道的两端的文件描述符</span>
<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建管道 pipe. fd[2] 是固定的输出参数</span>

<span class="token keyword">int</span> pipeSize <span class="token operator">=</span> <span class="token function">fpathconf</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> _PC_PIPE_BUF<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//fd[1] 也行</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pipeSize = %d\n"</span><span class="token punctuation">,</span> pipeSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>输出结果：Unix 下是 512 大小</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_165502.png" width="60%"/ loading="lazy"></li>
</ul>
</li>
</ul>
<br>

<h3 id="设置管道的非阻塞属性："><a href="#设置管道的非阻塞属性：" class="headerlink" title="设置管道的非阻塞属性："></a>设置管道的非阻塞属性：</h3><ul>
<li><p><strong>默认管道是读写两端都是阻塞</strong></p>
</li>
<li><p>fcntl()  –变参函数</p>
<ul>
<li>作用一：复制文件描述符 -dup</li>
<li>作用二：修改文件属性 -open 的时候对应 flag 属性</li>
</ul>
</li>
<li><p>例如实现读端为非阻塞 pipe(fd)</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> flags <span class="token operator">=</span> <span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_GETFL<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取原来的 flags， F_GET FL （get flags 的缩写）</span>
flags <span class="token operator">|=</span> O_NONBLOCK<span class="token punctuation">;</span>                <span class="token comment">//添加非阻塞属性</span>
<span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_SETFL<span class="token punctuation">,</span> flages<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//设置新的属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
<br>

<h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><a href="https://github.com/xmuli/linuxExample/tree/master/11_pipe">11_pipe</a></p>
<p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux中系统信号初识，和函数kill，raise，abort，alarm，setitimer</title>
    <url>/posts/cef3b890/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　此处指 Linux 中系统内核发出的信号；而不是之前 Qt 学习的信号。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p>
<p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p>
<br>

<h3 id="信号初识："><a href="#信号初识：" class="headerlink" title="信号初识："></a>信号初识：</h3><ul>
<li><p><strong>特点：</strong></p>
<ul>
<li>简单</li>
<li>携带信息量很少</li>
<li>用在某个特定的场景中</li>
</ul>
</li>
<li><p><strong>型号的状态：</strong></p>
<ul>
<li><strong>产生原因：</strong><ol>
<li>键盘 Ctrl + C</li>
<li>命令：kill</li>
<li>系统函数：kill()</li>
<li>软条件：定时器</li>
<li>硬件：段错误，除 0 错误</li>
</ol>
</li>
<li><strong>未决状态</strong>  – 没有被处理</li>
<li><strong>递达状态</strong>  – 信号被处理了</li>
</ul>
</li>
<li><p><strong>处理方式：</strong></p>
<ul>
<li>忽略</li>
<li>捕捉，然后自定义动作</li>
<li>执行了默认动作</li>
</ul>
</li>
<li><p><strong>信号的四要素：</strong></p>
<ul>
<li><p>信号名、信号编号、信号默认动作、事件描述</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200405_210927.png" width="100%"/ loading="lazy">
</li>
<li><p>“动作(Action)”栏 的 字母 有 下列 含义:</p>
<table>
<thead>
<tr>
<th>A</th>
<th>缺省动作是结束进程.</th>
</tr>
</thead>
<tbody><tr>
<td>B</td>
<td>缺省动作是忽略这个信号.</td>
</tr>
<tr>
<td>C</td>
<td>缺省动作是结束进程, 并且核心转储.</td>
</tr>
<tr>
<td>D</td>
<td>缺省动作是停止进程.</td>
</tr>
<tr>
<td>E</td>
<td>信号不能被捕获.</td>
</tr>
<tr>
<td>F</td>
<td>信号不能被忽略.</td>
</tr>
</tbody></table>
<p>译注: 这里 “结束” 指 进程 终止 并 释放资源, “停止” 指 进程 停止 运行, 但是 资源 没有 释放，有可能 继续 运行。</p>
</li>
</ul>
</li>
<li><p><strong>通过 man 文档查看信号</strong></p>
<ul>
<li>执行 <code>man 7 signal</code></li>
<li><font color=#FF0000  size=4 face="幼圆">注意(man 手册中有写)：<code>SIGKILL</code>、<code>SIGSTOP</code> 这两个信号不能够被捕捉，阻塞，忽略的</font></li>
</ul>
<blockquote>
<p> The signals SIGKILL and SIGSTOP cannot be caught, blocked, or ignored.</p>
</blockquote>
</li>
<li><p><strong>概念：阻塞信号集，未决信号集</strong></p>
<ul>
<li>是在 PCB 中</li>
<li>阻塞信号集：让信号处于一个未决的状态</li>
<li>未决信号集：如果信号被阻塞了，该信号集会对阻塞的信号做记录</li>
</ul>
</li>
<li><p><strong>图解进程产生和处理：</strong></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200405_212602.png" width="50%"/ loading="lazy">

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200405_212734.png" width="70%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="kill-函数："><a href="#kill-函数：" class="headerlink" title="kill() 函数："></a>kill() 函数：</h3><p><strong>作用：</strong> 发射信号给指定进程、或者同组的信号。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">kill</span><span class="token punctuation">(</span>pid_t pid<span class="token punctuation">,</span> <span class="token keyword">int</span> sig<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<ul>
<li><p><strong>参数：</strong></p>
<ul>
<li>pid：<ul>
<li>pid &gt; 0； 发送信号给指定的进程</li>
<li>pid &#x3D; 0； 发送信号给 调用 kill 函数进程属于同一个组的所有进程</li>
<li>pid &#x3D; -1；如果用户拥有超级用户权限，则信号将被发送到所有进程</li>
<li>pid &lt; -1；取 |pid| 发给对应进程组</li>
</ul>
</li>
<li>sig：<ul>
<li>推荐使用完整的宏名称而非数字，在少数发行版下，可能指定宏对应的数值有变化</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>返回值：</strong></p>
<ul>
<li>成功： 0</li>
<li>失败：-1（ID 非法，信号非法，普通信号杀 init进程等权限级别问题，设置 errno）</li>
</ul>
</li>
</ul>
<p>写一个小的例子验证 kill 信号的使用，子进程在 5S 后，通知系统内核发送 SIGKILL 给它的父进程，然后系统将父进程杀死。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a parent process = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">kill</span><span class="token punctuation">(</span><span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SIGKILL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行效果：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200406_163402.png" width="60%"/ loading="lazy">

<br>

<h3 id="raise-函数："><a href="#raise-函数：" class="headerlink" title="raise() 函数："></a>raise() 函数：</h3><p><strong>作用：</strong> 自己给自己发射信号。在单线程程序中，它相当于 kill(getpid(), sig)；</p>
<p>在一个多线程程序中，它等同于 pthread_kill(pthread_self(), sig)。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">raise</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>比较简单，但依旧写一个例子使用一下：子进程给机子发射终止进程的信号。然后父进程在回收子进程的时候，答应其死亡的信号值</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> s<span class="token punctuation">;</span>
        pid_t wpid <span class="token operator">=</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a child process dide pid = %d\n"</span><span class="token punctuation">,</span> wpid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WIFSIGNALED</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"dide by signal: %d\n"</span><span class="token punctuation">,</span> <span class="token function">WTERMSIG</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">raise</span><span class="token punctuation">(</span>SIGINT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//给自己发射信号</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>代码中 19 行，选中的 <code>SIGINT</code> 信号，默认动作是终止进程。其对应的事件为 当用户按下&lt;ctrl + c&gt;组合键时候，<strong>用户终端向正在运行中的</strong> （由该终端启动的）<strong>程序 发出此信号。</strong> </p>
<p>运行截图：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200406_171152.png" width="70%"/ loading="lazy">

<br>

<h3 id="abort-函数："><a href="#abort-函数：" class="headerlink" title="abort() 函数："></a>abort() 函数：</h3><p><strong>作用：</strong> 给自己发送异常终止的信号。该函数没有参数和返回值，也永远不会调用失败。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">abort</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>

<h3 id="定时器："><a href="#定时器：" class="headerlink" title="定时器："></a>定时器：</h3><h4 id="alarm-函数："><a href="#alarm-函数：" class="headerlink" title="alarm() 函数："></a>alarm() 函数：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<ul>
<li><p>设置定时器（每一个进程只有一个定时器）</p>
</li>
<li><p>使用的是自然定时法则；不受进程状态的影响</p>
</li>
<li><p>当时间到达之后，函数发出一个信号 <code>SIGALRM</code></p>
<ul>
<li>SIGALRM – 调用 abort() 函数时候产生该信号 – 终止进程并产生 core 文件</li>
</ul>
</li>
<li><p>返回值：始终是返回上一次调用此函数，还剩些的时间。</p>
</li>
<li><p><strong>写一个例子：</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret = %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//重新设定定时器，返回值是返回之前闹钟的剩余的时间</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret = %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------test-----\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>分析：</strong></p>
<p>这里 ret &#x3D; 0 ，是因为第一次调用，它的上一次的剩余时间为 0；然后 ret &#x3D; 3 是因为 5 - 2 s，然后定时器被充重置了新的 10 s。故后面会打印 10 次输出语句，然后收到系统的终止信号，杀死本进程。因为是执行的 <code>alarm()</code> 的默认动作，为终止进程，且没有捕捉该函数发射的对应的信号，也没有定义自定义动作，所以本进程会被终止。</p>
</li>
<li><p><strong>运行结果：</strong></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200406_173535.png" width="50%"/ loading="lazy"></li>
</ul>
<h4 id="分析程序运行的损耗："><a href="#分析程序运行的损耗：" class="headerlink" title="分析程序运行的损耗："></a>分析程序运行的损耗：</h4><p><font color=#FF0000  size=5 face="幼圆">实际耗时 &#x3D;&#x3D;  用户 +  系统 + 损耗 </font></p>
<ul>
<li><p>写一个例子，检测一下计算机在 1s 内可以计算多少个数字？</p>
</li>
<li><p><strong>代码如下:</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>运行演示：</strong></p>
<p>分析：其中损耗文件来自文件 IO 操作</p>
<p><strong>输出到终端：</strong> 1.012 &#x3D; 0.31 + 0.34 + 损耗 （约  70w）</p>
<p><strong>输出到文件：</strong> 1.012 &#x3D; 0.93 + 0.07 + 损耗 （约 800w）</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//执行 time ./myAlarmCount（输出到终端）</span>
<span class="token number">0.31</span>s user 
<span class="token number">0.34</span>s system 
<span class="token number">64</span><span class="token operator">%</span>   cpu 
<span class="token number">1.012</span> <span class="token function">total</span>  <span class="token punctuation">(</span>输出到 <span class="token number">692977</span><span class="token punctuation">)</span>
  
<span class="token comment">//time ./myAlarmCount > file（输出到文本）</span>
<span class="token number">0.93</span>s user 
<span class="token number">0.07</span>s system 
<span class="token number">98</span><span class="token operator">%</span>   cpu 
<span class="token number">1.012</span> <span class="token function">total</span>  <span class="token punctuation">(</span>输出到 <span class="token number">8686215</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<br>

<h4 id="setitimer-函数："><a href="#setitimer-函数：" class="headerlink" title="setitimer() 函数："></a>setitimer() 函数：</h4><ul>
<li><strong>作用：</strong> 定时器，并且实现<strong>周期性</strong> 定时。</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">setitimer</span><span class="token punctuation">(</span><span class="token keyword">int</span> which<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">itimerval</span> <span class="token operator">*</span>new_value<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">itimerval</span> <span class="token operator">*</span>old_value<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">itimerval</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">struct</span> <span class="token class-name">timeval</span> it_interval<span class="token punctuation">;</span> <span class="token comment">/* 定时器的循环周期 */</span>
  <span class="token keyword">struct</span> <span class="token class-name">timeval</span> it_value<span class="token punctuation">;</span>    <span class="token comment">/* 第一次触发定时器的时间 */</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token punctuation">&#123;</span>
  time_t      tv_sec<span class="token punctuation">;</span>         <span class="token comment">/* 秒 */</span>
  suseconds_t tv_usec<span class="token punctuation">;</span>        <span class="token comment">/* 微秒 */</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ul>
<li><p><strong>参数：</strong></p>
<ul>
<li>which：<ul>
<li>ITIMER_REAL：   自然定时法，会发出信号 <code>SIGALRM</code></li>
<li>ITIMER_VIRTUAL：虚拟定时法，只会计算 <strong>用户时间</strong> ，对应信号 <code>SIGVTALRM</code></li>
<li>ITIMER_PROF：   只计算 <strong>用户时间 + 系统时间</strong> ，对应发射 <code>ITIMER_VIRTUAL</code> 信号</li>
</ul>
</li>
<li>new_value：我们需要设置的参数，总的定时时间是 <code>tv_sec + tv_usec</code> 之和</li>
<li>old_value：传出参数，传出上一次定时器的设置，一般用不到，用 NULL</li>
</ul>
</li>
<li><p>写一个例子：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    itimerval time<span class="token punctuation">;</span>
    <span class="token comment">// time.it_interval = 3;  //每隔 3s 一次循环定时</span>

    <span class="token comment">//第一次触发定时器的时间为 5s + 3ms</span>
    time<span class="token punctuation">.</span>it_value<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>     <span class="token comment">//5s </span>
    time<span class="token punctuation">.</span>it_value<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment">//3 ms</span>

    <span class="token function">setitimer</span><span class="token punctuation">(</span>ITIMER_REAL<span class="token punctuation">,</span> <span class="token operator">&amp;</span>time<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-----printf()-----\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>运行效果：</strong></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200406_215441.png" width="60%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><a href="https://github.com/xmuli/linuxExample/tree/master/14_signal">14_signal</a></p>
<p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux中虚拟地址空间、pcb、文件描述符、C库函数工作流程、标准库和系统库函数区别</title>
    <url>/posts/29bf4f80/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　对于 <code>Linux</code> 学习过程中，有一些基本的知识点、关于系统，以下均是以 32 位系统上的为例的知识点：</p>
<ul>
<li><p>虚拟地址空间</p>
</li>
<li><p>pcb 和<strong>文件描述符</strong> 表</p>
</li>
<li><p>C 库 I&#x2F;O 函数工作流程</p>
</li>
<li><p>标准 c 库函数和 linux 系统函数的区别</p>
</li>
</ul>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p>
<br>

<h3 id="虚拟地址空间："><a href="#虚拟地址空间：" class="headerlink" title="虚拟地址空间："></a>虚拟地址空间：</h3><p><font color=#FF0000  size=4 face="幼圆"><strong>Linux 每一个运行的程序（进程）操作系统都会为其分配一个 0~4G 的地址空间（虚拟地址空间）。</strong> </font></p>
<p><font color=#FF0000  size=4 face="幼圆"><strong>进程：正在运行的程序。</strong>   </font></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_135017.png" width="90%"/ loading="lazy">



<p>Linux 程序运行理解图：</p>
<ul>
<li>env 查看系统的环境变量</li>
<li>static int a &#x3D; 0; 变量 a 仍然是放在 .bss 区域（其值为0）</li>
<li><strong>栈（局域变量）：</strong> 从高位 到 低位 生长</li>
<li><strong>堆（new ）：</strong>  从低位 到 高位 生长</li>
<li>MMU（内存管理单元）：将 虚拟地址空间（硬盘）的地址， 映射 到 物理内存 里面进行管理和操作。</li>
<li>没有必要研究，大致知道其原理即可。</li>
</ul>
<br>

<h3 id="pcb-和文件描述符表："><a href="#pcb-和文件描述符表：" class="headerlink" title="pcb 和文件描述符表："></a>pcb 和文件描述符表：</h3> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_135513.png" width="90%"/ loading="lazy">



<ul>
<li><p><strong>进程控制块（PCB）：</strong> 进程在操作系统中都有一个户口，用于表示这个进程。这个户口操作系统被称为PCB（进程控制块），在 linux 中具体实现是 task_struct 数据结构。</p>
</li>
<li><p><strong>进程就是一个运行当中的程序。</strong> 我们在编辑器或 IDE 上写了十几个的.cpp 文本文件，它们组合起来就是一个工程。程序本来是存储在磁盘的,当我们需要执行它的时候，先把他读取到内存当中，再然后放入到寄存器中，最后让cpu执行程序，这个时候程序就变成了一个进程。</p>
</li>
<li><p>每个进程运行的时候都会拿到最多 4G 的虚拟内存。其中 3G 是交给用户的,然后剩下的 1G 内存存储内核的东西了。</p>
</li>
<li><p><strong>文件描述符</strong> 表，系统最多可以打开 1024 个文件，其中 0、1、2 依次被 stdin、stdout、stderr 这个给使用了；且这个三个文件描述符所指向的对象都是当前终端，当前终端也可以被看为一个文件 <code>/dev/tty</code> （Linux 下一切皆文件）； 其余每打开一个文件，就会申请一个空的、最小的 文件描述符。其就是一个 int 型的数值。eg：此时使用系统 open() 函数打开一个 .txt 文件，printf() 打印其的返回值，会显示是 4。</p>
</li>
</ul>
<br>



<h3 id="C-库-I-x2F-O-函数工作流程："><a href="#C-库-I-x2F-O-函数工作流程：" class="headerlink" title="C 库 I&#x2F;O 函数工作流程："></a>C 库 I&#x2F;O 函数工作流程：</h3> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_134219.png" width="90%"/ loading="lazy">



<ul>
<li><p>由这个图可以思考一个问题🤔？那么是不是使用系统的读写函数，一定比使用 c 库的函数的效率一定高呢❓❓❓</p>
<p>当然不是；这个的看实际情况的。使用系统的读写函数，就是直接和硬件，直接在磁盘上面读写操作，速度肯定比直接在内存上面读写要慢的多。所以就引发内存块上有缓冲区的机制，内存上面写入多次之后，缓冲区满了后，再一次都写入到磁盘上面的文件。</p>
</li>
</ul>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_134304.png" width="70%"/ loading="lazy">

<br>

<h3 id="C-库函数与系统函数的关系："><a href="#C-库函数与系统函数的关系：" class="headerlink" title="C 库函数与系统函数的关系："></a>C 库函数与系统函数的关系：</h3> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_134320.png" width="90%"/ loading="lazy">



<ul>
<li>当调用标准的 C 库函数时候（<code># include &lt;stdio.h&gt;</code>）的 <code>printf()</code> 时候，它会在里面调用应用层的 <code>weite()</code> 函数，然后应用层实际又是调用 系统的 <code>sys_write()</code>，其系统层实际又是调用驱动层的写函数，而驱动层的函数当然是可以直接操作硬件的（比如显示器🖥）。最后就终端里面看到了一句输出语句函数。</li>
</ul>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_134342.png" width="50%"/ loading="lazy">

<br>

<h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/github.svg" width="5%"/ loading="lazy"> <a href="https://github.com/xmuli/linuxExample">https://github.com/xmuli/linuxExample</a> </p>
<p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux中进程间的通信方式--内存映射区mmap()</title>
    <url>/posts/54396db8/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　本篇讲解另外一种进程间通信方式，<strong>内存映射区</strong> <code>mmap()</code>，以及对应的释放内存映射区 <code>munmap()</code> ，。前面两篇讲解了进程间通信，使用<a href="https://blog.csdn.net/qq_33154343/article/details/105266919">有名管道</a>和<a href="https://blog.csdn.net/qq_33154343/article/details/105254078">匿名管道</a>的方式进行 IPC，也是经常用到的，可以去接触一下。</p>
<ul>
<li><strong>对于有血缘关系的进程间通信：</strong><ul>
<li>有名内存映射区</li>
<li>匿名内存映射区(推荐)</li>
</ul>
</li>
<li><strong>对于无血缘关系的进程间通信：</strong><ul>
<li>(只能用)有名内存映射区</li>
</ul>
</li>
</ul>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p>
<p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p>
<br>

<h3 id="mmap内存映射原理"><a href="#mmap内存映射原理" class="headerlink" title="mmap内存映射原理:"></a>mmap内存映射原理:</h3><p><strong>（一）进程启动映射过程，并在虚拟地址空间中为映射创建虚拟映射区域</strong></p>
<p>1、进程在用户空间调用库函数mmap，原型：void *mmap(void *start, size_t length, int prot, int flags, int fd, off_t offset);</p>
<p>2、在当前进程的虚拟地址空间中，寻找一段空闲的满足要求的连续的虚拟地址</p>
<p>3、为此虚拟区分配一个vm_area_struct结构，接着对这个结构的各个域进行了初始化</p>
<p>4、将新建的虚拟区结构（vm_area_struct）插入进程的虚拟地址区域链表或树中</p>
<p><strong>（二）调用内核空间的系统调用函数 mmap（不同于用户空间函数），实现文件物理地址和进程虚拟地址的一一映射关系</strong></p>
<p>5、为映射分配了新的虚拟地址区域后，通过待映射的文件指针，在文件描述符表中找到对应的文件描述符，通过文件描述符，链接到内核“已打开文件集”中该文件的文件结构体（struct file），每个文件结构体维护着和这个已打开文件相关各项信息。</p>
<p>6、通过该文件的文件结构体，链接到file_operations模块，调用内核函数mmap，其原型为：int mmap(struct file *filp, struct vm_area_struct *vma)，不同于用户空间库函数。</p>
<p>7、内核mmap函数通过虚拟文件系统inode模块定位到文件磁盘物理地址。</p>
<p>8、通过remap_pfn_range函数建立页表，即实现了文件地址和虚拟地址区域的映射关系。此时，这片虚拟地址并没有任何数据关联到主存中。</p>
<p><strong>（三）进程发起对这片映射空间的访问，引发缺页异常，实现文件内容到物理内存（主存）的拷贝</strong></p>
<p>注：前两个阶段仅在于创建虚拟区间并完成地址映射，但是并没有将任何文件数据的拷贝至主存。真正的文件读取是当进程发起读或写操作时。</p>
<p>9、进程的读或写操作访问虚拟地址空间这一段映射地址，通过查询页表，发现这一段地址并不在物理页面上。因为目前只建立了地址映射，真正的硬盘数据还没有拷贝到内存中，因此引发缺页异常。</p>
<p>10、缺页异常进行一系列判断，确定无非法操作后，内核发起请求调页过程。</p>
<p>11、调页过程先在交换缓存空间（swap cache）中寻找需要访问的内存页，如果没有则调用nopage函数把所缺的页从磁盘装入到主存中。</p>
<p>12、之后进程即可对这片主存进行读或者写的操作，如果写操作改变了其内容，一定时间后系统会自动回写脏页面到对应磁盘地址，也即完成了写入到文件的过程。</p>
<p>注：修改过的脏页面并不会立即更新回文件中，而是有一段时间的延迟，可以调用msync()来强制同步, 这样所写的内容就能立即保存到文件里了。</p>
<br>

<h3 id="创建内存映射区-mmap-："><a href="#创建内存映射区-mmap-：" class="headerlink" title="创建内存映射区 mmap()："></a>创建内存映射区 mmap()：</h3><p><strong>作用：</strong> 将磁盘文件的数据映射到内存，用户通过修改内存就能修改磁盘文件。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200404_172709.png" width="70%"/ loading="lazy">

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200402_181944.png" width="65%"/ loading="lazy">



<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> size_t len<span class="token punctuation">,</span> <span class="token keyword">int</span> prot<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> off_t offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><strong>参数：</strong><ul>
<li><strong>addr：</strong><ul>
<li><strong>映射区的首地址，传 <code>NULL</code></strong> ；系统会自动在虚拟地址空间的动态加载区，开辟一块大小为 len 的内存区域空间。</li>
</ul>
</li>
<li><strong>len： &#x2F;&#x2F;映射区的大小</strong><ul>
<li><font color=#FF0000  size=4 face="幼圆">必须是 4K 的整数倍，且不能够为 0。</font></li>
<li>一般文件有多大，len 就有多大</li>
</ul>
</li>
<li><strong>prot： &#x2F;&#x2F;映射区的权限</strong><ul>
<li><code>PROT_READ</code>  – 映射区必须要有读权限</li>
<li><code>PROT_WRITE</code> – 写权限</li>
</ul>
</li>
<li>**flags： &#x2F;&#x2F;标志位参数 **<ul>
<li><code>MAP_SHARED</code>  共享区域，开启此权限，则内存中映射区域的内容，是和磁盘文件的内容保持一致</li>
<li><code>MAP_PRIVATR</code>  内存区域的映射内容，是和磁盘文件的内容，不是时刻同步的。</li>
</ul>
</li>
<li><strong>fd： &#x2F;&#x2F;文件描述符</strong><ul>
<li>磁盘文件（想要映射到内存中的共享区）的那个文件的文件描述符</li>
</ul>
</li>
<li><strong>offset： &#x2F;&#x2F;偏移文件的偏移量</strong><ul>
<li>当想要从文件的中间某处到结束区域，映射到内存中，就可以只用这个偏移</li>
</ul>
</li>
</ul>
</li>
<li><strong>返回值：</strong><ul>
<li>*<em>void <em>：</em></em>  开辟的那个区域的首地址，用指针传出来。<ul>
<li>映射区的首地址 – 调用成功</li>
<li>调用失败， 返回 MAP_FAILED</li>
</ul>
</li>
</ul>
</li>
</ul>
<br>

<h3 id="释放内存映射区-munmap-："><a href="#释放内存映射区-munmap-：" class="headerlink" title="释放内存映射区 munmap()："></a>释放内存映射区 munmap()：</h3><p>就像 malloc - free； new - delete； mmap - munmap 一样，有开辟空间，就有释放该内存区域</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">munmap</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>两个参数，就是 mmap() 的第一个和第二个参数。</p>
<br>

<h3 id="写一个例子，验证内存内容和磁盘文件会同步："><a href="#写一个例子，验证内存内容和磁盘文件会同步：" class="headerlink" title="写一个例子，验证内存内容和磁盘文件会同步："></a>写一个例子，验证内存内容和磁盘文件会同步：</h3><p>对于一个已有的文本文件 it.txt 进行映射，创建一个内存映射区，然后在内存映射区里面修改文件的聂荣，再重新打开磁盘的文本文件查看内容是否同时发生了改变。显示修改之前文件和使用内存映射区的内容后的文件内容后，发现磁盘里面的内容的确是和同步的改变了。最后要记得使用 <code>munmap()</code> 关闭你使用 <code>mmap()</code> 创建的内存映射区的空间哦。</p>
<ul>
<li><p><strong>代码示例：</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"it.txt"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[open file] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建内存映射区</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> MAP_FAILED<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[mmap fail] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'b'</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'c'</span><span class="token punctuation">;</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//释放内存映射区</span>
    <span class="token function">munmap</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>运行效果：</strong> </p>
<p>和预期的效果一直，在内存中改动内容，磁盘的文件的内容也随之改变。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200402_203940.png" width="80%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="对于-mmap-的一些思考："><a href="#对于-mmap-的一些思考：" class="headerlink" title="对于 mmap() 的一些思考："></a>对于 mmap() 的一些思考：</h3><ul>
<li>如果 mmap() 的返回值 (ptr)做++操作（ptr++)，munmap是否能够成功？<ul>
<li>不能，如果要做指针偏移的的话，可以 char* pt &#x3D; ptr；</li>
</ul>
</li>
<li>如果 open() 时候 O_RDONLY，mmap 时 prot 参数指定 PROR_READ | PROT_WRITE 会怎样？<ul>
<li>mmap 会调用失败</li>
<li><strong>open() 文件指定权限应该大于等于 mmap() 的第三个参数 prot 指定的权限</strong></li>
</ul>
</li>
<li>如果文件的偏移量为 1000 会怎么样？<ul>
<li><strong>会失败，其必须是 4096 的整数倍</strong></li>
</ul>
</li>
<li>如果不检查 mmap() 的返回值会怎样？<ul>
<li>也不会怎么样</li>
</ul>
</li>
<li>mmap() 什么时候会调用失败？<ul>
<li>第二个参数 len &#x3D; 0</li>
<li>第三个必须要有 PROT_READ 权限；且 open()打开的权限要大于 mmap() 的 port 参数权限</li>
</ul>
</li>
<li>可以open()的时候，O_CREAT 一个新文件来创建映射区吗？<ul>
<li>可以，但是需要做文件扩展</li>
<li>lseek()</li>
<li>truncate(path，length)</li>
</ul>
</li>
<li>mmap 后关闭文件描述符，对 mmap 映射有没有影响？<ul>
<li>文件被打开之后，就没有影响了。</li>
</ul>
</li>
<li>对 ptr 越界操作会怎么样？<ul>
<li>这个取决于 ptr 越界后面的内存写的是什么。但是<strong>大概率的会遇到段错误</strong></li>
</ul>
</li>
</ul>
<br>

<h3 id="mmap-实现内存映射？"><a href="#mmap-实现内存映射？" class="headerlink" title="mmap 实现内存映射？"></a>mmap 实现内存映射？</h3><ul>
<li>必须要有一个文件</li>
<li>文件数据什么时候有用？<ul>
<li>单纯的实现文件映射</li>
<li>进行进程间通信，磁盘的文件数据时没有用的。（在内存操作会更有效率，但是属于非阻塞）</li>
</ul>
</li>
</ul>
<br>

<h3 id="父子进程间永远共享的东西？"><a href="#父子进程间永远共享的东西？" class="headerlink" title="父子进程间永远共享的东西？"></a><font color=#FF0000 face="幼圆">父子进程间永远共享的东西？</font></h3><ul>
<li><font color=#FF0000 face="幼圆">文件描述符</font></li>
<li><font color=#FF0000 face="幼圆">内存映射区</font></li>
</ul>
<br>

<h3 id="例子实现父子进程间的通信："><a href="#例子实现父子进程间的通信：" class="headerlink" title="例子实现父子进程间的通信："></a>例子实现父子进程间的通信：</h3><p>通过改写上面的例子，创建 <a href="https://github.com/xmuli/linuxExample/blob/master/13_mmap/anonMmap">anonMmap.cpp</a> 文件，创建子进程，父进程对内存映射区进行修改内容，在首段使用 strcpy() 添加一段中文语句，然后在子进程里面对复制进来的尾部’\0’进行覆盖，再次修改一段内容，然后在子进程里面间该短内容输出到终端显示。</p>
<ul>
<li><p><strong>代码实现：</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"it.txt"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[open file] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建内存映射区</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> MAP_FAILED<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[mmap fail] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//父进程</span>
         <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">,</span> <span class="token string">"(我是父进程写入数据到内存映射区内容)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//下标0-53，一共 54 个，其中ptr[53]为'\0'</span>
         <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//回收子进程</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//子进程</span>
        <span class="token comment">// sleep(2);</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>  <span class="token comment">//故意覆盖掉'\0'，方便打印出来后面文章</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'b'</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'c'</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">munmap</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>运行效果：</strong></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200404_181557.png" width="50%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="创建匿名内存映射区："><a href="#创建匿名内存映射区：" class="headerlink" title="创建匿名内存映射区："></a>创建匿名内存映射区：</h3><p>上面写的例子，都是对于有血缘关系的父子进程之间的通信例子，通过磁盘文件使用 <code>mmap()</code> 创建的是<strong>（有名）内存映射区</strong>； 但是改一下 mmap() 创建的倒数第二个参数，且不需要 open() 磁盘文件，创建出来的就是<strong>（匿名）内存映射区</strong> ；</p>
<p><strong>但是匿名内存映射区只能够适用于有血缘关系之间的进程通信。而有名内存映射区，可以使用与在有有血缘的进程和无血缘的进程之间的通信，都可以。</strong> </p>
<h4 id="匿名内存映射区（有血缘关系进程通信）："><a href="#匿名内存映射区（有血缘关系进程通信）：" class="headerlink" title="匿名内存映射区（有血缘关系进程通信）："></a>匿名内存映射区（有血缘关系进程通信）：</h4><ul>
<li><p><strong>（匿名）内存映射区 代码例子:</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED <span class="token operator">|</span> MAP_ANON<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建匿名内存映射区，只需要修改倒数 2、3 两个阐述即可</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> MAP_FAILED<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[mmap fail] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//父进程</span>
         <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">,</span> <span class="token string">"this is parent process"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//回收子进程</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//子进程</span>
        <span class="token comment">// sleep(2);</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>  <span class="token comment">//故意覆盖掉'\0'，打印出来后面文章</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'b'</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'c'</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">munmap</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>运行效果：</strong></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200404_225528.png" width="80%"/ loading="lazy"></li>
</ul>
<br>

<h4 id="有名内存映射区（无血缘关系进程通信）："><a href="#有名内存映射区（无血缘关系进程通信）：" class="headerlink" title="有名内存映射区（无血缘关系进程通信）："></a>有名内存映射区（无血缘关系进程通信）：</h4><p>而对于无血缘关系的进程间通信，只需要都打开同一个磁盘文件，各自的进程会按照这个顺序， <code>磁盘文件名 --&gt; (各自的进程虚拟地址空间的)内存映射区 --&gt; （共用一份的）物理内存的区域 </code>， 然后都可以修改和读取这一段内存区域，从而实现进程间通信。</p>
<p>创建 aProcess.cpp 生成 a 进程，创建 bProcess.cpp 生成 b 进程；a 进程先对 c.txt 文件改写添加 “abc”，然后 b 进程再对 c.txt 文件改写添加 “ABC”，然后输出到终端显示。</p>
<ul>
<li><p><strong>代码显示：</strong></p>
<p>实现伪代码如下，详细的源码见下面下载链接</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//aProcess.cpp</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"c.txt"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>
 		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'b'</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'c'</span><span class="token punctuation">;</span>
    
    <span class="token function">munmap</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//bProcess.cpp</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"c.txt"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>
 		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'B'</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'C'</span><span class="token punctuation">;</span>
    
    <span class="token function">munmap</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>运行效果：</strong></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200404_231307.png" width="70%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="借鉴博客与总结："><a href="#借鉴博客与总结：" class="headerlink" title="借鉴博客与总结："></a>借鉴博客与总结：</h3><p>发现一篇讲解的很棒的博客，更多的是理论和概念上面的分析 mmap() 的原理：<a href="https://www.cnblogs.com/huxiao-tee/p/4660352.html">认真分析mmap：是什么 为什么 怎么用</a>， 其中文章开头的一段拿来再描述一下，其余则是本篇的侧重点是用代码来写两个例子，以及需要注意的一些坑，验证和学习这个内存映射区。</p>
<br>

<h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><a href="https://github.com/xmuli/linuxExample/tree/master/13_mmap">13_mmap</a></p>
<p>欢迎 star 和 fork <strong>这个系列</strong> 的 linux 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux学习:root，apt，vim，gcc，静动态库制作和使用</title>
    <url>/posts/98696fbd/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  Linux学习：root下文件夹含义，apt， vim，gcc，静动态库制作和使用</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="磁盘文件夹含义："><a href="#磁盘文件夹含义：" class="headerlink" title="磁盘文件夹含义："></a>磁盘文件夹含义：</h2><blockquote>
<p><strong>几个比较重要的的文件夹含义，  root根的结构</strong><br>cd<br>.   &#x3D;&gt; 当前目录<br>..  &#x3D;&gt; 当前上一级的目录</p>
<p>-[英文短横] &#x3D;&gt; 在两个临近的目录之间直接进行切换<br>~   &#x3D;&gt; &#x2F;home 里面， 用户的家目录（宿主目录）     pwd直接切换过去</p>
<p>$: 当前用户为普通用户</p>
<p>#：超级用户 – root   (使用exit命令退出超级用户)</p>
</blockquote>
<p>一些其他的文件夹📂含义：</p>
<ul>
<li><code>/dev</code> 一切皆抽象为文件</li>
<li><code>/etc</code> 全局配置文件</li>
<li><code>/usr</code> <ul>
<li><code>/usr/local</code> 第三方软件安装 </li>
<li><code>/opt</code></li>
</ul>
</li>
<li><code>/bin</code></li>
<li><code>/lib</code> 作用</li>
<li><code>~</code> 当前用户的顶层目录，比如：<code>/Users/muli</code> </li>
<li>创建一个软连接的命令； ln 推荐绝对路径 软连接名称</li>
</ul>
<p><strong>一个 ls -al 命令查看文件夹下所有文件的详细：</strong></p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200118_174025.png"/ loading="lazy">

<br>

<h2 id="apt软件-x2F-安装卸载："><a href="#apt软件-x2F-安装卸载：" class="headerlink" title="apt软件&#x2F;安装卸载："></a>apt软件&#x2F;安装卸载：</h2><ul>
<li><p><code>apt install/remove 软件名</code> 卸载软件</p>
</li>
<li><p>&#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives    <code>apt clean</code> 清空缓存</p>
</li>
<li><p><code>sudo dpkg -i xxx.deb</code> 安装 .deb 软件</p>
</li>
<li><p><code>sudo dpkg -r 软件的名字</code>  卸载 .deb 软件</p>
</li>
</ul>
<br>

<h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim:"></a>Vim:</h2><h3 id="vim-三种模式切换图："><a href="#vim-三种模式切换图：" class="headerlink" title="vim 三种模式切换图："></a>vim 三种模式切换图：</h3><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_20200117000312942.png" style="zoom:50%;" / loading="lazy">

<br>

<h3 id="vim-使用："><a href="#vim-使用：" class="headerlink" title="vim 使用："></a>vim 使用：</h3><ul>
<li><p>保存之后退出：<code>ZZ</code></p>
</li>
<li><p>代码格式化 <code>gg=G</code></p>
</li>
<li><p>四个方向 <code>hjkl</code></p>
</li>
<li><p>移动光标，行首尾，顶行，末行，跳转指定213行[附：行号n回车]； <code>0， $，gg， D， 213D</code></p>
</li>
<li><p>删除一个单词， 删出一行的前后；删除所有：<code>dw, d0, d$(D), dd（删除当前行）， ndd（删除 n行） </code></p>
</li>
<li><p>撤销，反撤销：<code>u,  crtl + r</code></p>
</li>
<li><p>光标删除前后字母，撤销，删除单词：<code>X，x，u，?</code></p>
</li>
<li><p>复制一行，多行，粘贴一行，多行：<code>yy, nyy, p（光标下一行）,P（光标上一行） [视图模式：y 粘贴,d删除,p复制下一行,P复制到上一行]</code></p>
</li>
<li><p>替换一个，替换多个；<code>r, R</code></p>
</li>
<li><p>查找：当前往下卷一圈 <code>/xxxx</code>； 当前往上卷一圈  <code>?xxxx</code>  关键字切换：<code>n/N</code></p>
</li>
<li><p>光标移到单词，<code>#</code></p>
</li>
<li><p>vim分屏： :<code>sp</code>（线水平） <code>vsp</code>(线垂直)， <code>crtl+ww</code>（屏幕之间切换）， <code>wqall</code>(保存退出所有)</p>
</li>
</ul>
<br>

<h3 id="vim-配置文件："><a href="#vim-配置文件：" class="headerlink" title="vim 配置文件："></a><strong>vim 配置文件：</strong></h3><ul>
<li>「1」用户级别(先)：<code>~/.vimrc</code></li>
<li>「2」系统级别:<code>/etc/vim/vimrc</code></li>
</ul>
<br>

<h2 id="gcc"><a href="#gcc" class="headerlink" title="gcc:"></a>gcc:</h2><h3 id="gcc工作流程："><a href="#gcc工作流程：" class="headerlink" title="gcc工作流程："></a>gcc工作流程：</h3><ul>
<li><p>预处理(<code>gcc -E</code>;  <strong>预处理器cpp</strong>)  :<code>xxx.c --&gt; xxx.i</code>  (.i 文件本质还是.c 文件)</p>
<ul>
<li>宏替换</li>
<li>头文件展开</li>
<li>注释去掉</li>
</ul>
</li>
<li><p>编译（<code>gcc -S</code>; <strong>编译器 gcc</strong>）: <code>xxx.i --&gt; xxx.s</code></p>
<ul>
<li>生成汇编文件</li>
</ul>
</li>
<li><p>汇编（<code>gcc -c</code>； <strong>汇编器as</strong>）: <code>xxx.s  --&gt;  xxx.o</code></p>
<ul>
<li>生成二进制文件</li>
</ul>
</li>
<li><p>链接（<code>gcc</code>； <strong>链接器ld</strong>）</p>
<ul>
<li><code>xxx.o  --&gt;  xxx（可执行）</code></li>
</ul>
</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_image-20200118120643285.png"/ loading="lazy">

<br>

<h3 id="gcc常用参数："><a href="#gcc常用参数：" class="headerlink" title="gcc常用参数："></a>gcc常用参数：</h3><ul>
<li><code>-v/--version：</code> 查看版本</li>
<li><code>-I：</code> 指定包含头文件路径（推荐相对路径）</li>
<li><code>-c： </code> 汇编文件生成二进制文件 </li>
<li><code>-o： </code> 指定生成文件的名字</li>
<li><code>-g：</code> gcc调试时候，添加的参数</li>
<li><code>-D： </code> 编译的时候，生成一个你所指定的宏（场景：多使用在测试程序中）</li>
<li><code>-Wall： </code> gcc 编译时候，添加显示警告⚠️信息</li>
<li><code>-On：</code> 优化代码，n 是优化级别：1，2，3（3 就是最大，填写 100 也是 3）</li>
</ul>
<br>

<h3 id="静态库和动态库的制作和使用："><a href="#静态库和动态库的制作和使用：" class="headerlink" title="静态库和动态库的制作和使用："></a>静态库和动态库的制作和使用：</h3><ul>
<li><strong>库是什么？</strong><ul>
<li>二进制文件</li>
<li>加密之后的.c&#x2F;.cpp的文件</li>
</ul>
</li>
<li><strong>库文件制作出来后，如何给用户使用？</strong><ul>
<li>需要头文件 + 制作出来的库</li>
<li><strong>动态库：</strong> <code>.dll  或  .so</code></li>
<li><strong>静态库：</strong> <code>.lib  或   .a</code></li>
</ul>
</li>
</ul>
<br>

<h4 id="静态库-a-x2F-lib-的制作和使用："><a href="#静态库-a-x2F-lib-的制作和使用：" class="headerlink" title="静态库(.a&#x2F;.lib)的制作和使用："></a>静态库(.a&#x2F;.lib)的制作和使用：</h4><ul>
<li><p><strong>命令规则：</strong> <font color=#FF0000 size=4 face="幼圆">lib</font>xxx<font color=#FF0000 size=4 face="幼圆">.a</font> </p>
</li>
<li><p><strong>静态库的制作步骤：</strong></p>
<ul>
<li><p>原材料：源代码.c .cpp</p>
</li>
<li><p>将.cpp 文件生成.o 文件  </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#可以得到 `test01.o` 和 `test02.o`文件</span>
<span class="token variable"><span class="token variable">`</span>gcc <span class="token parameter variable">-C</span> test01.c test02.cpp<span class="token variable">`</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>将.o 文件打包为.a 文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法：ar rcs 静态库的名字 原材料  </span>
<span class="token comment">#ar -archive</span>
ar rcs libmytest.a test01.o test02.o   //所生成静态文件名称为libmytest.a


<span class="token comment">#成功之后，可以查看libmytest.a里面的包含具体的所有的*.o文件</span>
nm libmytest.a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p><strong>静态库的使用：</strong></p>
<p>此刻文件夹的 tree 结构如下：</p>
<blockquote>
<p>.</p>
<p>├─ Test.cpp</p>
<p>├─ include</p>
<p>│   └─ xxxx.h</p>
<p>└─ lib</p>
<p>​    └─ libmytest.a</p>
</blockquote>
<p>然后执行如下命令，就可以在得到本路径下得到可执行程序<code>appTest</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc Test.cpp <span class="token parameter variable">-I</span> ./include <span class="token parameter variable">-L</span> ./lib <span class="token parameter variable">-l</span> mytest <span class="token parameter variable">-o</span> appTest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><p>Test.cpp：测试静态库的使用的头文件</p>
</li>
<li><p>-I：<code>./include/</code>为指定的库的头文件的路径</p>
</li>
<li><p>-L：<code>./lib/</code>为指定的库的二进制文件</p>
</li>
<li><p>-l：为静态库的库的名称，将要调用的库</p>
<p>所生成<strong>静态库的文件名称</strong>为 <code>libmytest.a</code>， 按照规则，其<strong>静态库的名称</strong>叫<code>mytest</code></p>
</li>
<li><p>-o：所生成的指定名称的为appTest的可执行程序的名称</p>
</li>
</ul>
</li>
</ul>
<br>

<h4 id="动态态库-so-x2F-dll-的制作和使用："><a href="#动态态库-so-x2F-dll-的制作和使用：" class="headerlink" title="动态态库(.so&#x2F;.dll)的制作和使用："></a>动态态库(.so&#x2F;.dll)的制作和使用：</h4><ul>
<li><p><strong>命令规则：</strong> <font color=#FF0000 size=4 face="幼圆">lib</font>xxx<font color=#FF0000 size=4 face="幼圆">.so</font> </p>
</li>
<li><p><strong>动态库的制作步骤</strong></p>
<ul>
<li><p>原材料：源代码.c .cpp</p>
</li>
<li><p>将.cpp 文件生成.o 文件  </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法：使用 gcc 加参数 -fpic(或 FPIC)制作.o文件，</span>
gcc test01.cpp test02.cpp <span class="token parameter variable">-C</span> <span class="token parameter variable">-fpic</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>将.o 文件打包为.so 文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法：使用 gcc 加参数 -shared,将.o打包为.so文件，</span>
gcc <span class="token parameter variable">-shared</span> test01.o test02.o <span class="token parameter variable">-o</span>  libmytest.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p><strong>动态库的使用</strong></p>
<ul>
<li><p>此刻文件夹的 tree 结构如下：</p>
<blockquote>
<p>.</p>
<p>├─ Test.cpp</p>
<p>├─ include</p>
<p>│   └─ xxxx.h</p>
<p>└─ lib</p>
<p>​    └─ libmytest.so</p>
</blockquote>
<p>然后执行如下命令，就可以在得到本路径下得到可执行程序<code>appTest</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc Test.cpp <span class="token parameter variable">-I</span> ./include/ <span class="token parameter variable">-L</span> ./lib/ <span class="token parameter variable">-l</span> mytest <span class="token parameter variable">-o</span> appTest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>**运行之后，若首次未做设置，则就会发现运次失败！！！，会报错误提示，说找不到libmytest.so **; </p>
<p><strong>原因是：</strong> <font color=#70AD47 size=4 face="幼圆"><strong>因为linux 的工作机制，其加载动态库.so的顺序。要知道所依赖库的.so 的名称，还要知道其绝对路径。</strong> </font></p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200118_164520.png"/ loading="lazy"></li>
</ul>
</li>
</ul>
<br>

<ul>
<li><p><strong>解决 Linux 加载动态库 .so 文件失败的方法：</strong></p>
<p>思路：添加动态库的（绝对）路径。</p>
<ul>
<li><p><font color=#0000FF size=4 face="幼圆"><strong>「方法1」拷贝自己制作的共享库：</strong> </font></p>
<ul>
<li>拷贝自己制作的共享库 .so 文件到 <code>/lib</code> 或 <code>/usr/lib</code>[不推荐，容易重名替换让系统崩溃]</li>
</ul>
</li>
<li><p><font color=#0000FF size=4 face="幼圆"><strong>「方法2」使用环境变量：</strong> </font></p>
<ul>
<li>临时设置：<code>export LD_LIBRARY_PATH = 动态库的绝对路径:$LD_LIBRARY_PATH</code>(只添加新值)</li>
<li>永久设置：<ul>
<li>「用户级别」将<code>export LD_LIBRARY_PATH = 动态库的加载路径</code>添加到<code>~/.bashrc</code>文件；然后重新加载，方法为重启终端或者 运行 <code>sources ./bashrc</code>; 即可生效.</li>
<li>「系统级别」将绝对路径加入到<code>/etc/profile</code>文件，然后用命令<code>source /etc/profile </code>重新加载该文件.</li>
</ul>
</li>
</ul>
</li>
<li><p><font color=#0000FF size=4 face="幼圆"><strong>「方法3」使用文件列表：</strong> </font></p>
<ul>
<li>将动态库的绝对路径添加到<code>/etc/ld.so.conf</code>文件中；然后执行 <code>sudo ldconfig -v</code></li>
</ul>
</li>
<li><p><font color=#0000FF size=4 face="幼圆"><strong>「方法4」使用函数调动态库：</strong> </font></p>
<ul>
<li>函数名：<code>dlopen()</code>  <code>dlclose()</code>  <code>dlsym()</code></li>
</ul>
</li>
</ul>
<br>

<p><strong>补充一个小的知识点：</strong></p>
<ul>
<li><code>file appTest(可执行程序)</code>: 查看文件的类型，可以看到为 elf 类型</li>
<li>ldd appTest(可执行程序)<code> 查看 appTest 的所需要的加载动态库的文件，以及显示这些文件是否能找到</code> </li>
<li><code>echo $PATH</code> each 显示一个字符串，这里取 PATH 的值</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Log：日志之 Spdlog 极简用法示范『二』</title>
    <url>/posts/8063f88c/</url>
    <content><![CDATA[<p><strong>简  述：</strong> 有<a href="https://xmuli.blog.csdn.net/article/details/123457938">上一篇</a>中通过日志调研选型，决定采用 <a href="https://github.com/gabime/spdlog">Spdlog</a>  后，此篇开始介绍一些基础入门，先让代码能够跑起来，放上用法示范，再去研究细节用法。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><p>　　附关联目录直达，随着后续使用，持续更新</p>
<ol>
<li><a href="https://xmuli.blog.csdn.net/article/details/123457938">Log：日志选型调研『一』</a></li>
<li><a href="https://xmuli.blog.csdn.net/article/details/123488323">Log：日志之 Spdlog 极简用法示范『二』</a></li>
<li><a href="https://xmuli.blog.csdn.net/article/details/123489094">Log：日志之 Spdlog 核心构成『三』</a></li>
</ol>
<br>

<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>　　先简单看下 spdlog 的官方介绍：</p>
<p>Very fast, header-only&#x2F;compiled, C++ logging library。</p>
<br>

<p><strong>我使用它的理由：</strong></p>
<ul>
<li><p><input checked="" disabled="" type="checkbox"> 
GitHub 高达 14K ⭐</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
稳定至今的维护且更新</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
跨平台支持（Linux &#x2F; Windows  &#x2F; MacOS &#x2F; Android &#x2F; 等 ）</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
采用现代的 C++ 11 语法，简单易用；只需包含其头文件即可</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
宽松的 MIT 许可证，就连其依赖的 fmt lib 库亦是采用 MIT 许可证；</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
完整的 <a href="https://github.com/gabime/spdlog/wiki/1.-QuickStart">wiki</a> 用法文档</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
支持多种日志：滚动文本、多文本、带颜色的终端输出</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
使用简单，且性能高；可在运行、编译时刻修改日志等级</p>
</li>
</ul>
<br>

<h3 id="用法示范"><a href="#用法示范" class="headerlink" title="用法示范"></a>用法示范</h3><p>　　演示一下在 CMake 使用 spdlog  ，<strong>个人的仅包含头文件用法</strong> ，分别默认输出到在终端和文本文件的用法。此方式不需要编译安装 spdlog   到本机。</p>
<p>　　先新建一个 Qt GUI 的 CMake 项目，使用 MSVC 套件编译运行显示一个窗口，准备工作做好了 <sup><a href="https://github.com/XMuli/QtExamples/commit/8914ebf03d1998e0297c0cae5a26b0bf31ecf28d">见提交 #8914eb</a></sup>。</p>
<br>

<h4 id="spdlog-输出到终端"><a href="#spdlog-输出到终端" class="headerlink" title="spdlog  输出到终端"></a>spdlog  输出到终端</h4><p>在 <code>ExPicShot</code> 根目下执行下载 spdlog  库</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> submodule <span class="token function">add</span> https://github.com/gabime/spdlog.git ./3rdparty/spdlog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在 <code>CMakeLists.txt</code> 中添加一行</p>
<pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">include_directories</span><span class="token punctuation">(</span>3rdparty/spdlog/include<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>再在 <code>main.cpp</code>  添加测试代码</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"widget.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QApplication></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"spdlog/spdlog.h"</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>    
    QApplication <span class="token function">a</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>

    spdlog<span class="token double-colon punctuation">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Welcome to spdlog!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    spdlog<span class="token double-colon punctuation">::</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Some error message with arg: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    spdlog<span class="token double-colon punctuation">::</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Easy padding in numbers like &#123;:08d&#125;"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    spdlog<span class="token double-colon punctuation">::</span><span class="token function">critical</span><span class="token punctuation">(</span><span class="token string">"Support for int: &#123;0:d&#125;;  hex: &#123;0:x&#125;;  oct: &#123;0:o&#125;; bin: &#123;0:b&#125;"</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    spdlog<span class="token double-colon punctuation">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Support for floats &#123;:03.2f&#125;"</span><span class="token punctuation">,</span> <span class="token number">1.23456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    spdlog<span class="token double-colon punctuation">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Positional args are &#123;1&#125; &#123;0&#125;.."</span><span class="token punctuation">,</span> <span class="token string">"too"</span><span class="token punctuation">,</span> <span class="token string">"supported"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    spdlog<span class="token double-colon punctuation">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&#123;:&lt;30&#125;"</span><span class="token punctuation">,</span> <span class="token string">"left aligned"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Widget w<span class="token punctuation">;</span>
    w<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行，即可看到使用默认的彩色格式，默认输出到控制台中  <sup><a href="https://github.com/XMuli/QtExamples/commit/6542643310ca7e9f9330219c0acacf64eb2e0a2c">见提交#654264331</a></sup>。。</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/111.png" width="60%"/ loading="lazy">

<br>

<h4 id="spdlog-输出到文件"><a href="#spdlog-输出到文件" class="headerlink" title="spdlog  输出到文件"></a>spdlog  输出到文件</h4><p>若是更改为写入 .txt 中，可改写为</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"widget.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QApplication></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"spdlog/spdlog.h"</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>    
    QApplication <span class="token function">a</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>

    spdlog<span class="token double-colon punctuation">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Welcome to spdlog!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    spdlog<span class="token double-colon punctuation">::</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Some error message with arg: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    spdlog<span class="token double-colon punctuation">::</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Easy padding in numbers like &#123;:08d&#125;"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    spdlog<span class="token double-colon punctuation">::</span><span class="token function">critical</span><span class="token punctuation">(</span><span class="token string">"Support for int: &#123;0:d&#125;;  hex: &#123;0:x&#125;;  oct: &#123;0:o&#125;; bin: &#123;0:b&#125;"</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    spdlog<span class="token double-colon punctuation">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Support for floats &#123;:03.2f&#125;"</span><span class="token punctuation">,</span> <span class="token number">1.23456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    spdlog<span class="token double-colon punctuation">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Positional args are &#123;1&#125; &#123;0&#125;.."</span><span class="token punctuation">,</span> <span class="token string">"too"</span><span class="token punctuation">,</span> <span class="token string">"supported"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    spdlog<span class="token double-colon punctuation">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&#123;:&lt;30&#125;"</span><span class="token punctuation">,</span> <span class="token string">"left aligned"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Widget w<span class="token punctuation">;</span>
    w<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行后显示 <sup><a href="https://github.com/XMuli/QtExamples/commit/3e203c345cb5bfdae2855a6459a2d80f9c727bfe">见提交 #3e203c345cb5</a></sup>。</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/20220314203615.png" width="70%"/ loading="lazy">

<br>

<hr>
<h3 id="其它用法"><a href="#其它用法" class="headerlink" title="其它用法"></a>其它用法</h3><p>　　在 <a href="https://github.com/gabime/spdlog">官网文档</a> 说的很清楚 链接二进制 方式和包含头文件路径方式如下；<strong>略麻烦是需要对 spdlog 项目进行编译安装作为前提。</strong> 还是看个人实际使用去需求。</p>
<pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># Copyright(c) 2019 spdlog authors Distributed under the MIT License (http://opensource.org/licenses/MIT)</span>

<span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.10</span><span class="token punctuation">)</span>
<span class="token keyword">project</span><span class="token punctuation">(</span>spdlog_examples CXX<span class="token punctuation">)</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">NOT</span> TARGET spdlog<span class="token punctuation">)</span>
    <span class="token comment"># Stand-alone build</span>
    <span class="token keyword">find_package</span><span class="token punctuation">(</span>spdlog REQUIRED<span class="token punctuation">)</span>
<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># ---------------------------------------------------------------------------------------</span>
<span class="token comment"># Example of using pre-compiled library</span>
<span class="token comment"># ---------------------------------------------------------------------------------------</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span>example example.cpp<span class="token punctuation">)</span>
<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>example <span class="token namespace">PRIVATE</span> <span class="token inserted class-name">spdlog::spdlog</span><span class="token punctuation">)</span>

<span class="token comment"># ---------------------------------------------------------------------------------------</span>
<span class="token comment"># Example of using header-only library</span>
<span class="token comment"># ---------------------------------------------------------------------------------------</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>SPDLOG_BUILD_EXAMPLE_HO<span class="token punctuation">)</span>
    <span class="token keyword">add_executable</span><span class="token punctuation">(</span>example_header_only example.cpp<span class="token punctuation">)</span>
    <span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>example_header_only <span class="token namespace">PRIVATE</span> <span class="token inserted class-name">spdlog::spdlog_header_only</span><span class="token punctuation">)</span>
<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="成系列地址"><a href="#成系列地址" class="headerlink" title="成系列地址"></a>成系列地址</h3><p> <a href="https://github.com/XMuli/QtExamples">QtExamples</a> </p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序二 经验</category>
      </categories>
      <tags>
        <tag>spdlog</tag>
      </tags>
  </entry>
  <entry>
    <title>Log：日志之 Spdlog 核心构成『三』</title>
    <url>/posts/cdc43b87/</url>
    <content><![CDATA[<p><strong>简  述：</strong> 通过<a href="https://xmuli.blog.csdn.net/article/details/123488323">上一篇</a>已经让 spdlog 跑了起来，现在来认识一下这个库的核心相关知识。此摘择一些核心组成的知识，降低新手门槛。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><p>　　附关联目录直达，随着后续使用，持续更新</p>
<ol>
<li><a href="https://xmuli.blog.csdn.net/article/details/123457938">Log：日志选型调研『一』</a></li>
<li><a href="https://xmuli.blog.csdn.net/article/details/123488323">Log：日志之 Spdlog 极简用法示范『二』</a></li>
<li><a href="https://xmuli.blog.csdn.net/article/details/123489094">Log：日志之 Spdlog 核心构成『三』</a></li>
</ol>
<br>

<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>　　spdlog 由两部分组成：『Sinks + Loggers』。其中 Loggers  和 Sinks  的对应关系，既可以”1对1“，也可以”1对多“。</p>
<h4 id="Loggers"><a href="#Loggers" class="headerlink" title="Loggers"></a>Loggers</h4><p>　　一个 logger 可以对应多个 sink。</p>
<p><strong>特征</strong></p>
<ul>
<li>每个 Logger 都包含一个数组，数组里是 std::shared_ptr，每次调用 log 时，logger 会在每个 sink 上调用 sink(log_msg) 。sink 分为多线程和单线程版本，单线程版本的 sink 不允许在多线程里调用</li>
</ul>
<br>

<h4 id="Sinks"><a href="#Sinks" class="headerlink" title="Sinks"></a>Sinks</h4><p>　　sink 可以认为是一个操作文件的句柄,一个 sink 对应一个文件。日志按等级分割；创建多个，每个对应一个等级。<sup><a href="https://github.com/gabime/spdlog/wiki/4.-Sinks">wiki</a></sup></p>
<p><strong>特征</strong></p>
<ul>
<li>sink 是实际写入日志的对象，每个 sink 应该只负责一个日志输出地（例如文件、控制台、数据库），并且每个 Sinks  都有自己的 formatter 对象的私有实例。</li>
<li>每个 logger 包含一个或多个 <code>std::shared_ptr&lt;sink&gt;</code> 的向量。每次调用 log 时（如果日志级别正确），logger 会调用 <code>&quot;sink(log_msg)&quot;</code>方法</li>
<li>sink 有 <code>_mt</code> 多线程 和 <code>_st</code>  单线程之分；单线程不能在多线程中使用。</li>
</ul>
<br>

<h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><p>　　日志级别 <code>Log Level</code> 相关，通常只用到 <code>debug</code>、<code>info</code>、<code>err</code>  这三个级别比较多。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">enum</span> <span class="token class-name">level_enum</span>
<span class="token punctuation">&#123;</span>
    trace <span class="token operator">=</span> SPDLOG_LEVEL_TRACE<span class="token punctuation">,</span>         <span class="token comment">// 描述事件的日志级别，显示代码的逐步执行，在标准操作期间可以忽略。『最低级』</span>
    debug <span class="token operator">=</span> SPDLOG_LEVEL_DEBUG<span class="token punctuation">,</span>         <span class="token comment">// 当需要更详细的信息时，使用此调试信息</span>
    info <span class="token operator">=</span> SPDLOG_LEVEL_INFO<span class="token punctuation">,</span>           <span class="token comment">// 突出强调应用程序的运行过程中，输出一些提示信息</span>
    warn <span class="token operator">=</span> SPDLOG_LEVEL_WARN<span class="token punctuation">,</span>           <span class="token comment">// 应用程序内部发生了意外行为，但它仍在继续工作，关键业务功能按预期运行。</span>
    err <span class="token operator">=</span> SPDLOG_LEVEL_ERROR<span class="token punctuation">,</span>           <span class="token comment">// 一项或多项功能无法正常工作，导致某些功能无法正常工作。</span>
    critical <span class="token operator">=</span> SPDLOG_LEVEL_CRITICAL<span class="token punctuation">,</span>   <span class="token comment">// 一项或多项关键业务功能不起作用，整个系统无法实现业务功能。</span>
    off <span class="token operator">=</span> SPDLOG_LEVEL_OFF<span class="token punctuation">,</span>             <span class="token comment">// 用于关闭所有日志记录。『最高级』</span>
    n_levels
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p><strong>一些建议：</strong></p>
<p>1、  <code>err</code> 信息必须同时打印日志和堆栈信息。</p>
<p>2、  线上日志统一设置为 <code>info</code> 级别。</p>
<p>3、  线上日志按照天或者小时拆分。</p>
<p>4、  日志存放目录采用相对路径。</p>
<p>5、  日志打印输出文件的大小。</p>
<br>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>   　　本来准备继续写的，突然搜到几篇这部分写的比较好的；就不搬运了和重复写轮子了，自行参考。这里就列举一点需要注意的地方。<strong>后面实际使用中，使用比较深入时候，再来续写其他人没有涉及的部分。</strong></p>
<br>

<ul>
<li><a href="http://www.manongjc.com/detail/25-prunqgufocxbyji.html">spdlog简介</a> 『荐』</li>
<li><a href="https://blog.csdn.net/bandaoyu/article/details/110730431">【C++】spdlog–log4cxx有点笨重，试一试spdlog</a> 『荐』</li>
<li><a href="https://blog.csdn.net/irving512/article/details/118472146">C++ 日志工具 spdlog 简单实用</a></li>
<li><a href="https://www.404bugs.com/index.php/details/911687741972729856">Cpp(十二) log日志基本使用spdlog</a></li>
</ul>
<br>

<ol>
<li><p><strong>遇到日志没有输出或者显示出来？</strong></p>
<p>   因 spdlog 考虑到效率，内容都在缓冲区中，可通过设置确保有输出内容。控制台看不到内容同理。</p>
   <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">logger<span class="token operator">-></span><span class="token function">flush_on</span><span class="token punctuation">(</span>spdlog<span class="token double-colon punctuation">::</span>level<span class="token double-colon punctuation">::</span>warn<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 遇到 warn 级别，就立即 flush 到文件 </span>
spdlog<span class="token double-colon punctuation">::</span><span class="token function">flush_every</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 每 10 秒刷新一次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p><strong>更改输出日志格式？</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">set_pattern</span><span class="token punctuation">(</span>pattern_string<span class="token punctuation">)</span>
实现 formatter 的接口，然后调用 <span class="token function">set_formatter</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">make_unique</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p><strong>对于格式 flag 标识？</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">spdlog<span class="token double-colon punctuation">::</span><span class="token function">set_pattern</span><span class="token punctuation">(</span><span class="token string">"*** [%H:%M:%S %z] [thread %t] %v ***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>对于 类似 <code>%t</code> 、<code>%v</code> 的这些参数，可以在这儿查看 <a href="https://github.com/gabime/spdlog/wiki/3.-Custom-formatting">wiki</a></p>
</li>
</ol>
<br>

<h3 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h3><p> <a href="https://github.com/XMuli/QtExamples">QtExamples</a> </p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序二 经验</category>
      </categories>
      <tags>
        <tag>spdlog</tag>
      </tags>
  </entry>
  <entry>
    <title>Log：日志选型调研『一』</title>
    <url>/posts/6c8be188/</url>
    <content><![CDATA[<p><strong>简  述：</strong> 准备在个人的项目中添加 Log 日志模块，便于项目日后定位和调试。因前面数月，有感受到了日志的威力，故决定调研后选取一个合适的日志模块  <a href="https://github.com/gabime/spdlog">spdlog</a>  。最后意外的惊喜发现，检索需要一点技巧，可遇村外有村，好风凭借力。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><p>　　附关联目录直达，随着后续使用，持续更新</p>
<ol>
<li><a href="https://xmuli.blog.csdn.net/article/details/123457938">Log：日志选型调研『一』</a></li>
<li><a href="https://xmuli.blog.csdn.net/article/details/123488323">Log：日志之 Spdlog 极简用法示范『二』</a></li>
<li><a href="https://xmuli.blog.csdn.net/article/details/123489094">Log：日志之 Spdlog 核心构成『三』</a></li>
</ol>
<br>

<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>　　此前的工作主要工作，主要为开发 Deepin 和 WPS 的 UI 样式开发，姑归类为客户端开发，主要使用调试方法如下，对于当时基本够用</p>
<ol>
<li><code>qDebug()</code> 终端打印调试</li>
<li><code>MessageBox</code> 弹出消息框显示调试</li>
<li><code>Visual Studio</code> &#x2F; <code>Qt Creator</code> 中源码调试，直接查看当前变量数值显示</li>
</ol>
<br>

<p>　　今年主要使用 C++ 的进行非应用界面开发，运用和见识过了 Log 日志模块的威力，简直就是 <strong>“大道至简，朴实无华，甚是有用”</strong> 。且准备将其引入自己的项目。因一旦选定具体的库作为，后面就不准备更改了，慎重调研一番，做好选型，亦给后来者参考</p>
<br>

<h3 id="日志库调研"><a href="#日志库调研" class="headerlink" title="日志库调研"></a>日志库调研</h3><p>　　我的需求，能够都满足最佳：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 能够支持跨平台（Win &#x2F; Mac &#x2F; Linux）</li>
<li><input checked="" disabled="" type="checkbox"> 可滚动日志，保存多份日志，可自定义日志级别</li>
<li><input checked="" disabled="" type="checkbox"> 读写快速，性能较好即可</li>
<li><input checked="" disabled="" type="checkbox"> 最好是知名、易用、且有人维护的开源库</li>
<li><input checked="" disabled="" type="checkbox"> 许可证比较宽松</li>
</ul>
<br>

<p>　　需求已经明确，那么问题来了，又如何去寻找自己所需呢？世界那么大，资源那么多，如何快速🔍自己所需的有效信息？</p>
<p>① Google 搜索框输入第一反应关键词；② GitHub 输入关键词；③ Google + GitHub 寻找现有的框架榜单，精选集和，学会借力。</p>
<br>

<h4 id="Google-关键词"><a href="#Google-关键词" class="headerlink" title="Google 关键词"></a>Google 关键词</h4><p>　　第一反应，在 Google 搜索框中，输入”C++ Log 推荐” 后回车，看他人文章推荐后，逐个了解和其库的现有状态去核对。会遇到，数年前文章，时效性可能已有较大变化。 <strong>事后总结：</strong> 此类文章快速浏览扫描一遍即可，获取信息耗时比较高。</p>
<br>

<h5 id="表格总结"><a href="#表格总结" class="headerlink" title="表格总结"></a>表格总结</h5><table>
<thead>
<tr>
<th>Log 库</th>
<th>Star</th>
<th>License</th>
<th>Last  Commit (截至 2022.03.10)</th>
<th>采纳标记</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/apache/logging-log4cxx">log4cxx</a></td>
<td>163</td>
<td>Apache-2.0</td>
<td>5 天前</td>
<td></td>
</tr>
<tr>
<td><a href="http://log4c.sourceforge.net/">log4c</a></td>
<td></td>
<td>LGPL</td>
<td>2016.01.20</td>
<td>✘</td>
</tr>
<tr>
<td><a href="https://github.com/HardySimpson/zlog">z-log </a></td>
<td>1.6k</td>
<td>LGPL2.1</td>
<td>2021.12.28</td>
<td></td>
</tr>
<tr>
<td><a href="https://github.com/0xmalloc/c-log">c-log</a></td>
<td>226</td>
<td>Apache 2.0</td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="https://github.com/syslog-ng/syslog-ng">syslog-ng</a></td>
<td>1.6k</td>
<td>GPL + LGPL</td>
<td>昨天</td>
<td></td>
</tr>
<tr>
<td><a href="https://github.com/synesissoftware/Pantheios">Pantheios</a></td>
<td>35</td>
<td></td>
<td>2020.07.05</td>
<td>✘</td>
</tr>
<tr>
<td><a href="https://github.com/MEONMedical/Log4Qt">Log4Qt</a></td>
<td>388</td>
<td>Apache-2.0</td>
<td>2022.01.09</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="https://github.com/3Hren/blackhole">blackhole</a></td>
<td>184</td>
<td>MIT</td>
<td>2018.12.12</td>
<td>✘</td>
</tr>
<tr>
<td><a href="https://github.com/boostorg/log">Boost.Log v2</a></td>
<td>142</td>
<td><a href="https://www.boost.org/LICENSE_1_0.txt">LICENSE</a></td>
<td>11 天前</td>
<td></td>
</tr>
<tr>
<td><a href="https://github.com/amrayn/easyloggingpp">easyloggingpp</a></td>
<td>3.1K</td>
<td>MIT</td>
<td>2021.02.03</td>
<td></td>
</tr>
<tr>
<td><a href="https://github.com/MengRao/fmtlog">fmtlog</a></td>
<td>291</td>
<td>MIT</td>
<td>19 天前</td>
<td></td>
</tr>
<tr>
<td><a href="https://github.com/KjellKod/g3log">g3log</a></td>
<td>735</td>
<td>The Unlicense</td>
<td>昨天</td>
<td></td>
</tr>
<tr>
<td><a href="https://github.com/google/glog">google glog</a></td>
<td>5.1k</td>
<td><a href="https://github.com/google/glog/blob/master/COPYING">COPYING</a></td>
<td>2 天前</td>
<td></td>
</tr>
<tr>
<td><a href="http://log4cpp.sourceforge.net/">log4cpp</a></td>
<td></td>
<td>LGPL</td>
<td>2017.04.18</td>
<td>✘</td>
</tr>
<tr>
<td><a href="https://github.com/log4cplus/log4cplus">log4cplus</a></td>
<td>1.3k</td>
<td>Log4cplus license</td>
<td>2021.12.30</td>
<td>✘</td>
</tr>
<tr>
<td><a href="https://github.com/emilk/loguru">loguru</a></td>
<td>1.3k</td>
<td>public domain</td>
<td>17 天前</td>
<td></td>
</tr>
<tr>
<td><a href="https://github.com/SergiusTheBest/plog">plog</a></td>
<td>1.3k</td>
<td>MPL2.0</td>
<td>2022.02.07</td>
<td></td>
</tr>
<tr>
<td><a href="https://github.com/mattiasflodin/reckless">reckless</a></td>
<td>412</td>
<td><a href="https://github.com/mattiasflodin/reckless/blob/master/LICENSE.txt">LICENSE</a></td>
<td>2021.04.10</td>
<td>✘</td>
</tr>
<tr>
<td><a href="https://github.com/gabime/spdlog">spdlog</a></td>
<td>14k</td>
<td>MIT</td>
<td>4 天前</td>
<td>✔</td>
</tr>
<tr>
<td><a href="http://www.templog.org/"><em>templog</em> </a></td>
<td></td>
<td><a href="https://www.boost.org/LICENSE_1_0.txt">boost 1.0</a></td>
<td>2013.04.24</td>
<td>✘</td>
</tr>
<tr>
<td><a href="https://github.com/odygrd/quill">quill</a></td>
<td>573</td>
<td>MIT</td>
<td>2021.08.31</td>
<td></td>
</tr>
</tbody></table>
<br>

<h5 id="log4cxx"><a href="#log4cxx" class="headerlink" title="log4cxx"></a>log4cxx</h5><p><a href="https://github.com/apache/logging-log4cxx">https://github.com/apache/logging-log4cxx</a></p>
<p>Log4cxx 是开放源代码项目 Apache Logging Service 的子项目之一，是 Java 社区著名的 log4j 的 c++ 移植版，用于为 C++ 程序提供日志功能，以便开发者对目标程序进行调试和审计。 </p>
<br>

<h5 id="Log4cpp"><a href="#Log4cpp" class="headerlink" title="Log4cpp"></a>Log4cpp</h5><p><a href="http://log4cpp.sourceforge.net/">http://log4cpp.sourceforge.net</a></p>
<p>Log4cpp 是用于灵活记录文件、系统日志、IDSA 和其他目标的 C++ 类库。它以<a href="http://jakarta.apache.org/log4j">Log4j</a> Java 库为模型，尽可能接近其 API。</p>
<br>

<h5 id="log4c"><a href="#log4c" class="headerlink" title="log4c"></a>log4c</h5><p><a href="http://log4c.sourceforge.net/">http://log4c.sourceforge.net</a></p>
<p> log4c 现已不再有人维护了。不是面向对象的，不支持流式log输入。有配置文件。最新版本（log4c-1.2.4.tar.gz）存在内存泄露。不建议使用</p>
<br>

<h5 id="log4cplus"><a href="#log4cplus" class="headerlink" title="log4cplus"></a>log4cplus</h5><p><a href="https://github.com/log4cplus/log4cplus">https://github.com/log4cplus/log4cplus</a></p>
<p>log4cplus 是 C++ 编写的开源的日志系统，前身是 java 编写的 log4j 系统，受 Apache Software License 保护。 </p>
<p>作者是Tad E. Smith。log4cplus具有线程安全、灵活、以及多粒度控制的特点，通过将信息划分优先级使其可以面向程序调试、运行、测试、和维护等全生命周期； 你可以选择将信息输出到屏幕、文件、 NT event log、甚至是远程服务器；通过指定策略对日志进行定期备份等等。 </p>
<p>补充：log4cplus 默认 8 字节对齐结构，其他对齐结构会内存泄漏</p>
<br>

<h5 id="google-glog"><a href="#google-glog" class="headerlink" title="google glog"></a>google glog</h5><p><a href="https://github.com/google/glog">https://github.com/google/glog</a></p>
<p>Google Logging (glog) 是一个实现应用程序级日志记录的 C++98 库。该库提供基于 C++ 风格的流和各种帮助宏的日志记录 API，编程使用方式与 c++ 的 stream 操作类似，例：</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">LOG(INFO) &lt;&lt; &quot;Found &quot; &lt;&lt; num_cookies &lt;&lt; &quot; cookies&quot;;  &#x2F;&#x2F; LOG”宏为日志输出关键字，“INFO”为严重性程度。 主要支持功能： <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> 1， 参数设置，以命令行参数的方式设置标志参数来控制日志记录行为； 2， 严重性分级，根据日志严重性分级记录日志； 3， 可有条件地记录日志信息； 4， 条件中止程序。丰富的条件判定宏，可预设程序终止条件； 5， 异常信号处理。程序异常情况，可自定义异常处理过程； 6， 支持debug功能。可只用于debug模式； 7， 自定义日志信息； 8， 线程安全日志记录方式； 9， 系统级日志记录； 10， google perror风格日志信息； 11， 精简日志字符串信息。 </p>
<p>补充：虽大厂出品，但 google log 不能每天产生一个log或者需要修改里面源码 </p>
<br>

<h5 id="z-log"><a href="#z-log" class="headerlink" title="z-log"></a>z-log</h5><p><a href="https://github.com/HardySimpson/zlog">https://github.com/HardySimpson/zlog</a></p>
<p>zlog 是一个可靠、高性能、线程安全、灵活、模型清晰的纯 C 日志库。</p>
<p>实际上，在 C 世界中，对于像 java 中的 logback 或 c++ 中的 log4cxx 这样的应用程序，没有好的日志库。使用 printf 可以工作，但不能轻易重定向或重新格式化。syslog 很慢，专为系统使用而设计。所以我写了zlog。它比 log4c 更快、更安全、更强大。所以可以广泛使用。</p>
<br>

<h5 id="spdlog"><a href="#spdlog" class="headerlink" title="spdlog"></a>spdlog</h5><p><a href="https://github.com/gabime/spdlog">https://github.com/gabime/spdlog</a></p>
<p>spdlog 是一个快速的 C++ 日志库，只包含头文件，兼容 C++11。 </p>
<p>特性： </p>
<p>非常快只包含头文件无需依赖第三方库支持跨平台 - Linux &#x2F; Windows on 32&#x2F;64 bits支持多线程可对日志文件进行循环输出可每日生成日志文件支持控制台日志输出可选的异步日志支持日志输出级别可自定义日志格式 </p>
<br>

<h5 id="c-log"><a href="#c-log" class="headerlink" title="c-log"></a>c-log</h5><p><a href="https://github.com/0xmalloc/c-log">https://github.com/0xmalloc/c-log</a></p>
<p>c-log是一个稳定，高效，多线程安全，易用，简单的C&#x2F;C++ 日志库，在github主页上有丰富的测试case，后续将会推迟直接输出到scribe等集中式日志收集<a href="https://cloud.tencent.com/product/tdmq?from=10680">中间件</a>上，帮助用户更好的收集，分析日志 。2017 停止更新。</p>
<br>


<h5 id="syslog-ng"><a href="#syslog-ng" class="headerlink" title="syslog-ng"></a>syslog-ng</h5><p><a href="https://github.com/syslog-ng/syslog-ng">https://github.com/syslog-ng/syslog-ng</a></p>
<p>syslog-ng 是一个增强的日志守护程序，支持广泛的输入和输出方法：syslog、非结构化文本、消息队列、数据库（SQL 和 NoSQL 等）等等。</p>
<p>特征：</p>
<p>接收和发送 RFC3164 和 RFC5424 样式的系统日志消息</p>
<p>接收和发送 JSON 格式的消息</p>
<p>处理任何类型的非结构化数据</p>
<p>使用内置解析器（csv-parser()、db-parser()、kv-parser() 等）对日志进行分类和结构化</p>
<p>规范化、处理和处理流经系统的日志</p>
<p>使用文件、消息队列 （如AMQP）或数据库（如 PostgreSQL 或 MongoDB）移交日志以进行进一步处理</p>
<p>将日志转发到大数据工具（如 Elasticsearch、Apache Kafka 或 Apache Hadoop）</p>
<br>

<p>　　<strong>总结：</strong> 多年无人维护的不采纳，优先采用接近于现代 C++ 设计理念，使用人数比较多，文档齐全，，使用方便，许可证宽松的的来日志库来使用。此前是使用 <a href="https://github.com/MEONMedical/Log4Qt">Log4Qt</a> 作为三方库，早期看重可以融合于 Qt ，应该会比较便于开发；后来发更新比慢、使用也比较麻烦，还需要配置文件，昨日已经移除了此模块。改为投入 <a href="https://github.com/gabime/spdlog">spdlog</a> 的怀抱，且只需要添加头文件使用，极大的提升了开发的满足感。</p>
<br>

<h4 id="GitHub-搜索"><a href="#GitHub-搜索" class="headerlink" title="GitHub 搜索"></a>GitHub 搜索</h4><p>　　这也是一个<strong>大道至简</strong> 的方式，效率之高、时效性之强，使用人数之多的一个可靠榜单；优先选择 ⭐ 最多的  <a href="https://github.com/gabime/spdlog">spdlog</a> 。且结果来看也和上面方式交叉验证，结论一致。为啥要使用上面那种愚笨的方式获取信息呢？氪！！！</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202203131043603.png" width="50%"/ loading="lazy">

<br>

<h4 id="GItHub-村外有村"><a href="#GItHub-村外有村" class="headerlink" title="GItHub 村外有村"></a>GItHub 村外有村</h4><p>　　还有一种方式搜索，遇到网友前辈指点，结合 <code>Google 关键词 + GitHub</code> 搜索，会发现这么一个东西：</p>
<br>

<blockquote>
<p><a href="https://github.com/fffaraz/awesome-cpp#debugger">https://github.com/fffaraz/awesome-cpp</a>   『36.3 K ⭐』 </p>
<p>A curated list of awesome C++ (or C) frameworks, libraries, resources, and shiny things. Inspired by awesome-… stuff.</p>
<p>一个很棒的 c++(或C) 框架、库、资源和闪亮的东西的列表。灵感来自棒-…的东西。 </p>
</blockquote>
<br>

<p>哇塞(o゜▽゜)o☆，不愧是村外有村，连这种榜单都有，下拉到 <a href="https://github.com/fffaraz/awesome-cpp#Logging">#Logging</a> 章节，省时省力，从精选中点进去看一下即可，快速找到符合自己的库。简直点燃了。</p>
<br>

<br>

<blockquote>
<p><a href="https://github.com/sindresorhus/awesome">https://github.com/sindresorhus/awesome</a>   『193 K ⭐』 </p>
<p>😎 Awesome lists about all kinds of interesting topics</p>
<p>😎关于各种有趣主题的精彩列表（和计算有关的主题分类学习资料）</p>
</blockquote>
<br>

<p>更像是一个宏大的知识面，每一个你所想的资料或者可以在这里找到相关或者启发、但对于我这个 C++ 来说，但还是上面这个 C++ 框架精选目录更适合自己。</p>
<br>

<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　此次搜索总结，除了收获找到了 <a href="https://github.com/gabime/spdlog">spdlog</a> 日志库，还感觉到了获取检索方式不同，其能力的所带来的耗时占比差异巨大，虽然此番偶然发现了，但是日后应该刻意练习，使之成思维惯性，此篇文章做完，于我甚是欢心。亦共享之。</p>
<br>

<h3 id="成系列地址"><a href="#成系列地址" class="headerlink" title="成系列地址"></a>成系列地址</h3><p> <a href="https://github.com/XMuli/QtExamples">QtExamples</a> </p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序二 经验</category>
      </categories>
      <tags>
        <tag>spdlog</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS 安装 Parallels Desktop，再安装 UOS 20 + QtCreaor，及搭建 DTK 开发环境</title>
    <url>/posts/404b32f/</url>
    <content><![CDATA[<p><strong>简 述：</strong> 本篇讲述和演示和如下的几个知识📚：</p>
<ul>
<li>在 <code>MacOS10.14</code> 上面安装<code>Parallels_Desktop14.0.1</code>虚拟机</li>
<li>再在 <code>Parallels_Desktop</code> 上面安装<code>uos20 x64</code> </li>
<li>PD 给虚拟机里面的系统安装 <code>Parallels Tools</code>；解决最大化非全屏的现象（调整分辨率后也是一个正方形的窗口）</li>
<li>在 <code>uos20</code> 操作系统上，安装和配置最新的 <code>Qt Creator</code> 集成环境IDE</li>
<li>配置 <strong>dtk</strong> 的开发环境，</li>
<li>在 <code>uso20</code> 上使用 <code>openVPN</code> 从家庭外网连接到公司内网，实现远程办公</li>
<li>在 <code>uos20</code> 获取开发者权限，拥有 <code>sudo</code> 命令的权限</li>
</ul>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="关联博文："><a href="#关联博文：" class="headerlink" title="关联博文："></a>关联博文：</h2><p><strong>Linux 系统</strong></p>
<ul>
<li><p><a href="https://blog.csdn.net/qq_33154343/article/details/103733327">Win10 的 VMware 中安装 UOS 20，在 UOS 中安装 QtCreator 及搭建 DTK 开发环境</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_33154343/article/details/104180794">MacOS 安装 Parallels Desktop，再安装 UOS 20 + QtCreaor，及搭建 DTK 开发环境</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_33154343/article/details/102789047">MacOS 的 VMware Fusionlimian 中安装 Linux Deepin15.11</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_33154343/article/details/112239518">Deepin &#x2F; UOS 中配置 DTK 开发环境</a></p>
</li>
<li><p><a href="https://xmuli.blog.csdn.net/article/details/106510975">重装 UOS &#x2F; Deepin V20 后必安装软件（个人习惯）</a></p>
</li>
<li><p><a href="https://xmuli.blog.csdn.net/article/details/107696563">ArchLinux + DDE 安装教程</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_33154343/article/details/108378441">对 GNU&#x2F;Linux 介绍、ArchLinux社区氛围、DDE移植Arch流程</a></p>
</li>
</ul>
<br>

<h2 id="前期准备："><a href="#前期准备：" class="headerlink" title="前期准备："></a>前期准备：</h2><p>所要使用到的一些软件和具体版本号，前期需要准备的工作如下：</p>
<ul>
<li><p><strong>硬件：</strong> 一台的笔记本或者一体机</p>
</li>
<li><p><strong>软件</strong>：</p>
<ul>
<li><strong>系统环境：</strong> <code>MacOS 10.14.6 (18G103)</code>  </li>
<li>**虚拟机软件： **<code>Parallels_Desktop14.0.1.dmg</code></li>
<li><strong>uos20 镜像：</strong> <code>uos-20-desktop-amd64.iso</code></li>
</ul>
</li>
<li><p>其它(可选)：</p>
<ul>
<li><strong>opnvpn 配置文件：</strong> 联系自己的管理员获取</li>
<li>或者自备梯子或其他工具</li>
</ul>
</li>
</ul>
<br>

<h2 id="安装虚拟机-Parallels-Desktop："><a href="#安装虚拟机-Parallels-Desktop：" class="headerlink" title="安装虚拟机 Parallels_Desktop："></a>安装虚拟机 Parallels_Desktop：</h2><p>查看 MacOS操作系统版本：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194831.png" width="50%"/ loading="lazy">



<ul>
<li>双击<code>Parallels_Desktop14.0.1.dmg</code> 运行程序</li>
</ul>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200203_120547.png" width="25%" / loading="lazy">

<ul>
<li>再次双击运行程序</li>
</ul>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194755.png" width="50%"/ loading="lazy">

<br>

<ul>
<li>点击 <strong>打开</strong></li>
</ul>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194740.png" width="50%"/ loading="lazy">

<ul>
<li>点击<strong>跳过该版本</strong></li>
</ul>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194723.png" width="50%"/ loading="lazy">

<ul>
<li><p>还会弹出一个小的窗口，提示建议安装更新的版本，点击<strong>不，使用现有的</strong>，这里这个图截掉了。</p>
</li>
<li><p>弹出软件许可协议窗口，点击请<strong>接受</strong>， 等待几秒钟，虚拟机自动安装成功。</p>
<p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194705.png" width="50%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194653.png" width="50%"/ loading="lazy"> </p>
</li>
<li><p>看到安装成功</p>
</li>
</ul>
<br>

<h2 id="禁止-Parallels-Desktop-🚫更新-，外加优化-PD"><a href="#禁止-Parallels-Desktop-🚫更新-，外加优化-PD" class="headerlink" title="禁止 Parallels_Desktop 🚫更新 ，外加优化 PD"></a>禁止 Parallels_Desktop 🚫更新 ，外加优化 PD</h2><h3 id="优化-PD，赋予权限："><a href="#优化-PD，赋予权限：" class="headerlink" title="优化 PD，赋予权限："></a>优化 PD，赋予权限：</h3><p>第一次启动，会提示如下，按照提示，打开<code>偏好设置</code></p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194617.png" width="50%"/ loading="lazy">



<p>点击<code>允许</code>即可</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194558.png" width="50%"/ loading="lazy">



<p>且这里也赋予 PD 相应的权限，且➕🔐避免被再次更改。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194541.png" width="50%"/ loading="lazy">



<ul>
<li>都操作完成之后，点击查看版本信息，发现已经是激活的版本了。</li>
</ul>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194524.png" width="50%"/ loading="lazy">



<h3 id="禁止-PD-更新："><a href="#禁止-PD-更新：" class="headerlink" title="禁止 PD 更新："></a>禁止 PD 更新：</h3><p>这里按照个人喜好，我是不喜欢如下改动的，且不想检测自动更新。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194507.png" width="50%"/ loading="lazy">

<br>

<h2 id="安装-uos20-操作系统："><a href="#安装-uos20-操作系统：" class="headerlink" title="安装 uos20 操作系统："></a>安装 uos20 操作系统：</h2><ul>
<li><p>将 uos20 的镜像，拖曳于这里点击打开</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194438.png" width="50%"/ loading="lazy">


</li>
<li><p>若是弹出，无法检测到镜像，不予理会即可，实际会检测到</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194414.png" width="50%"/ loading="lazy">


</li>
<li><p>因为 uos20 和 deepin15 都是基于 Debian 系统，选中如下</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194348.png" width="50%"/ loading="lazy">


</li>
<li><p>选择安装路径（可以更改）</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194328.png" width="50%"/ loading="lazy">
</li>
<li><p>点击创建，即可进入安装 uos20 的界面</p>
</li>
</ul>
<br>

<h2 id="配置uos20操作系统："><a href="#配置uos20操作系统：" class="headerlink" title="配置uos20操作系统："></a>配置uos20操作系统：</h2><ul>
<li><p>按照提示，选择即可，下面👇只显示出重要的步骤：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194302.png" width="50%"/ loading="lazy">


</li>
<li><p>这里不会的话，就默认全盘安装，不作任何修改；<strong>加密磁盘</strong> 没有必要勾选☑️，如果你的系统没有存放什么国家机密文件的话，普通人是用不着的。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194235.png" width="50%"/ loading="lazy">


</li>
<li><p>等待进度条进行 100% 即可</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194205.png" width="50%"/ loading="lazy">


</li>
<li><p>显示安装成功</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194144.png" width="50%"/ loading="lazy"></li>
</ul>
<br>

<h2 id="安装-Parallels-Tools："><a href="#安装-Parallels-Tools：" class="headerlink" title="安装 Parallels Tools："></a>安装 Parallels Tools：</h2><p><font color=#D0087E size=4 face="幼圆">因为在 macOS 系统里面，将 uos20 全屏的话，会发现总是一个正方形的窗口，即使更改分辨率也不可以，反正就是不是全屏效果，让人抓狂💥💥💥；</font></p>
<p><strong>解决方法如下：</strong></p>
<ul>
<li><p>只需要选中当前开启的虚拟机，打开<code>操作-Parallels Tools</code>， 然后在本目录路径下，</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419193415.png" width="50%"/ loading="lazy">
</li>
<li><p>打开终端，执行命令</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ./install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><p>即可，会出现如下终端的可视化界面，依次点击<code>确定</code>和<code>下一步</code>，然后耐心等待，等待界面如下图</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419193443.png" width="50%"/ loading="lazy">

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419193508.png" width="50%"/ loading="lazy">

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419193548.png" width="50%"/ loading="lazy">


</li>
<li><p>再次重启该虚拟机即可，点击最大化（可选择觉得舒服的分辨率），发现窗口已经占满整块屏幕了。 </p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419193738.png" width="50%"/ loading="lazy"></li>
</ul>
<br>

<h2 id="安装-qtcrator-环境："><a href="#安装-qtcrator-环境：" class="headerlink" title="安装 qtcrator 环境："></a>安装 qtcrator 环境：</h2><p>参考<a href="https://blog.csdn.net/qq_33154343/article/details/103733327">在win10里面的VMware安装UOS20，在uos20里面安装QtCreator，配置dtk开发环境</a> 一文， 中间的<a href="https://blog.csdn.net/qq_33154343/article/details/103733327#QtCretordtk_148">在<code>QtCretor</code>里面配置<code>dtk</code>开发环境和工程模板： </a> 部分；此部分有着详细的描述</p>
<br>

<h2 id="配置-dtk-的开发环境："><a href="#配置-dtk-的开发环境：" class="headerlink" title="配置 dtk 的开发环境："></a>配置 dtk 的开发环境：</h2><p>运行命令，然后重启QtCretor：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qtcreator-template-dt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>

<h2 id="配置-openVPN-回到公司内网："><a href="#配置-openVPN-回到公司内网：" class="headerlink" title="配置 openVPN 回到公司内网："></a>配置 openVPN 回到公司内网：</h2><ul>
<li><p>向管理员获取 openVPN 的配置文件，比如<code>wh-vpn.conf</code></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419193850.png" width="50%"/ loading="lazy">


</li>
<li><p>将其导入到 uos20 系统里面，具体位置如下：<strong>控制中心-网络-vpn-导入</strong> </p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419193938.png" width="50%"/ loading="lazy"></li>
</ul>
<p>若是连接成功之后，仍然无法访问内网资源，请将<strong>“使用相对应的网络的资源”</strong> 开启☑️</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194002.png" width="50%"/ loading="lazy">

<br>

<h2 id="打开开发者模式，获取-sudo-权限："><a href="#打开开发者模式，获取-sudo-权限：" class="headerlink" title="打开开发者模式，获取 sudo 权限："></a>打开开发者模式，获取 sudo 权限：</h2><ul>
<li><p><strong>控制中心-系统信息-关于本机-版本授权</strong> 中，点击激活，若是没有永久激活码，可以点击试用激活，这个有 90 天的时间</p>
</li>
<li><p>在<strong>控制中心-通用-开发者模式</strong> 中，点击到处机器码到桌面上，默认是 1.json 文件</p>
</li>
<li><p>登录网址 <a href="https://www.chinauos.com/applyfor">https://www.chinauos.com/applyfor</a> ，注册用户为 uos 账号</p>
</li>
<li><p><font color=#D0087E size=4 face="幼圆">在登录状态下</font> 点击“<strong>请参与内测-点击<u>这里</u>了解如何开启开发者模式</strong>”，</p>
</li>
<li><p>上传机器码文件，点击下载注册码文件，然后<strong>控制中心-通用-开发者模式</strong> 中导入注册码</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194055.png" width="50%"/ loading="lazy"></li>
</ul>
]]></content>
      <categories>
        <category>学习 - MacOS</category>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>MacOS 安装 QtCreator 5.9.8 作 C++ 的 IDE 开发工具</title>
    <url>/posts/35a6c6f4/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  在<code>MacOS10.14.6 </code>环境下安装 <code>QtCreator5.9.8</code> 作为 C++ 的 IDE 开发工具，学习和使用 QT</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="下载-QtCreator"><a href="#下载-QtCreator" class="headerlink" title="下载 QtCreator"></a>下载 QtCreator</h2><p><strong>qt官网下载地址：</strong> <a href="https://download.qt.io/archive/qt/">https://download.qt.io/archive/qt/</a></p>
<p>推荐下载⬇️的版本：使用的<code>Neat Download manager</code>多线程工具下载，相当于<strong>win</strong>的<strong>IDM</strong>下载工具，有此工具，何愁速度不满带宽下限？</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191124232717.png"/ loading="lazy">

<br>

<h2 id="安装-QtCreator-步骤"><a href="#安装-QtCreator-步骤" class="headerlink" title="安装 QtCreator 步骤"></a>安装 QtCreator 步骤</h2><p>下载之后，直接双击，打开，按照如下的操作运行即可，下面为完成的每一每一个详细所有的步骤截图</p>
<ul>
<li>点击<strong>Next</strong>下一步</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191124232821.png"/ loading="lazy">

<ul>
<li>点击<code>Skip</code>跳过，可以不用填写注册信息的</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191124232838.png"/ loading="lazy">

<ul>
<li>点击<code>继续</code></li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191125000735.png"/ loading="lazy">

<ul>
<li>点击<code>继续</code>，使用默认安装路径即可【后面会用到这个路径】</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191125000750.png"/ loading="lazy">

<ul>
<li>勾选如下图所示的模块，一般安装<strong>MacOS+Sources+QtCreator</strong>（我所认为的必须安装）学习使用够了，但是为了系统的学习一些新的模块，推荐将如下的也都勾选项上</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-11-24_23-38-36.png"/ loading="lazy">

<ul>
<li>点击<code>同意</code>和<code>继续</code>，认同这些没有人会仔细看的这些条款</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191124234217.png"/ loading="lazy">

<ul>
<li>已经正式开始安装了，点击<code>显示详细信息</code>可以查看当前安装到哪里细节的部分（等待时间可以去喝杯咖啡）</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191124234353.png"/ loading="lazy">

<ul>
<li>安装完成，点击<code>完成</code>，即可成功运行QtCreaot来愉快的编码了</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191124234538.png"/ loading="lazy">

<br>

<h2 id="启动-QtCreator"><a href="#启动-QtCreator" class="headerlink" title="启动 QtCreator"></a>启动 QtCreator</h2><p>打开启动，发现并没有我熟悉的那个图标，搜索🔍也没有看到；打开<code>/Users/yuanyi/Qt5.9.8/Qt Creator.app</code>，其中yuanyi为你自己电脑的用户名</p>
<p><strong>启动QtCreator和多开QtCreator的方法在下图中</strong>：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-11-24_23-52-09_mark.png"/ loading="lazy">

<p>开始编码：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-11-24_23-59-56_mark.png"/ loading="lazy">]]></content>
      <categories>
        <category>学习 - MacOS</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>MacOS 的 VMware Fusionlimian 中安装 Linux Deepin15.11</title>
    <url>/posts/129bf9f1/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  在<code>macOS 10.14.6 (18G103)</code> 的虚拟机<code> VMware Fusionlimian</code> 里面安装<code>deepin v15.11</code>。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="关联博文："><a href="#关联博文：" class="headerlink" title="关联博文："></a>关联博文：</h2><p><strong>Linux 系统</strong></p>
<ul>
<li><p><a href="https://blog.csdn.net/qq_33154343/article/details/103733327">Win10 的 VMware 中安装 UOS 20，在 UOS 中安装 QtCreator 及搭建 DTK 开发环境</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_33154343/article/details/104180794">MacOS 安装 Parallels Desktop，再安装 UOS 20 + QtCreaor，及搭建 DTK 开发环境</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_33154343/article/details/102789047">MacOS 的 VMware Fusionlimian 中安装 Linux Deepin15.11</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_33154343/article/details/112239518">Deepin &#x2F; UOS 中配置 DTK 开发环境</a></p>
</li>
<li><p><a href="https://xmuli.blog.csdn.net/article/details/106510975">重装 UOS &#x2F; Deepin V20 后必安装软件（个人习惯）</a></p>
</li>
<li><p><a href="https://xmuli.blog.csdn.net/article/details/107696563">ArchLinux + DDE 安装教程</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_33154343/article/details/108378441">对 GNU&#x2F;Linux 介绍、ArchLinux社区氛围、DDE移植Arch流程</a></p>
</li>
</ul>
<br>

<h2 id="下载镜像："><a href="#下载镜像：" class="headerlink" title="下载镜像："></a>下载镜像：</h2><p>破解<code> VMware Fusionlimian</code>下载：<a href="https://xclient.info/s/vmware-fusion.html">VMware Fusion Pro 11.5.0 强大的虚拟机应用</a></p>
<p>官方<code>deepin</code>镜像下载：<a href="https://www.deepin.org/download/">https://www.deepin.org/download/</a></p>
<p>不过鉴于<code>deepin</code>的服务器是在国外， 推荐（在官方网页上）使用选择 <code>ios仓库 - 清华大学 http  </code>提供的镜像下载；也可以直接选择链接：<a href="https://www.deepin.org/mirrors/releases/">https://www.deepin.org/mirrors/releases</a></p>
<br>

<h2 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h2><ul>
<li>打开虚拟机<code> VMware Fusionlimian</code>：</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191028194117.png"/ loading="lazy">



<ul>
<li>选择悬着安装介质<code>从光盘裹着映像中安装</code></li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191028193511.png"/ loading="lazy">



<ul>
<li>打开访达（文件资源管理器），选中前面下载的<strong>deepin</strong>的 <strong>.ios</strong>镜像</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191028193720.png"/ loading="lazy">

<ul>
<li>选择操作系统，我其他一台机器使用<strong>deepin v20</strong>查了一下， 还没有发布的<strong>deepin20</strong>是基于<code>Debian 8.x </code>的操作系统，所以这里我选择的这个</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191028193738.png"/ loading="lazy">



<ul>
<li>选择默认启动方<code>传统BIOS</code>：</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191028193755.png"/ loading="lazy">



<ul>
<li>选择所需要的语言<code>简体中文</code>， 有英文需求也可以选择英文；国人开发的，翻译还是很到位的</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191028193901.png"/ loading="lazy">



<ul>
<li>直接点击继续，后期系统安装完成了， 配置和硬盘空间不够，也是可以扩展（处于关闭状态才能更改）</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191028193911.png"/ loading="lazy">



<ul>
<li>等待中间的安装过程（这期间会内置安装一些常用的软件，google浏览器，网易云音乐等，搜狗输入法）；是的你开机即可使用</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191028193945.png"/ loading="lazy">



<ul>
<li>提示安装成功</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191028193953.png"/ loading="lazy">



<ul>
<li>开始享受这个新的Linux系统， 带给你清爽，专注于注意力和好看的系统的不一样享受</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191028194007.png"/ loading="lazy">

<br>

<h2 id="其他软件下载："><a href="#其他软件下载：" class="headerlink" title="其他软件下载："></a>其他软件下载：</h2><p>若是还有一些其他的软件需要自己下载， 直接在在系统商店下载安装即可；若是开发人员， 可以自己来，我再说也是就有点废话了</p>
]]></content>
      <categories>
        <category>学习 - MacOS</category>
      </categories>
      <tags>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac的邮件客户端使用--登录GMail邮箱和QQ邮箱的解决方案</title>
    <url>/posts/7c9c6ccc/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　在 MacOS 中使用 <strong>邮件</strong> （邮箱） 登录 <strong>GMail</strong> 邮箱和 <strong>QQ</strong> 邮箱</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 </code> 📎 <code>邮件 12.4 </code> </p>
<br>

<h3 id="邮件上登录-谷歌邮箱（GMail）："><a href="#邮件上登录-谷歌邮箱（GMail）：" class="headerlink" title="邮件上登录 谷歌邮箱（GMail）："></a>邮件上登录 谷歌邮箱（GMail）：</h3><ul>
<li><p>谷歌邮箱要开启 IMAP 设置，然后在 V2rayU 的 PAC 中添加一条规则即可。</p>
</li>
<li><p><strong>解决方案：</strong></p>
<ol>
<li><p>登录网页版的谷歌邮箱 <a href="https://accounts.google.com/">https://accounts.google.com</a></p>
</li>
<li><p>点击右上角的设置，进入 <code>设置 - 转发和 POP/IMAP - IMAP 访问</code>， 开启 <code>启用 IMAP</code> 设置</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_223505.png" width="70%"/ loading="lazy">
</li>
<li><p>点击保存；</p>
</li>
<li><p>点击你自己的设置自由上网的，修改 PAC 规则，在这里添加这样一行 <code>||*.gmail.com</code></p>
<p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_225500.png" width="25%"/ loading="lazy">  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_225556.png" width="60%"/ loading="lazy"></p>
</li>
<li><p>然后进入邮件输入 google gmail 的账号和密码。即可登录成功</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_222942.png" width="70%"/ loading="lazy"></li>
</ol>
</li>
</ul>
<br>

<h3 id="邮件上登录-QQ-邮箱（qq-com）："><a href="#邮件上登录-QQ-邮箱（qq-com）：" class="headerlink" title="邮件上登录 QQ 邮箱（qq.com）："></a>邮件上登录 QQ 邮箱（qq.com）：</h3><ul>
<li><p>实际操作中，会发现，直接输入 QQ 邮箱的账号密码即使是正确的，也会提示登录失败，也会提示是错误的。因为密码不是 QQ 邮箱密码，而是你开启的 POP3&#x2F;IMAP 验证之后的密码。 否则会提示如下：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_185458.png" width="50%"/ loading="lazy"></li>
</ul>
<br>

<ul>
<li><p><strong>解决方法：</strong></p>
<ol>
<li><p>登录网页版 QQ 邮箱： <a href="https://mail.qq.com/">https://mail.qq.com</a></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_185205.png" width="70%"/ loading="lazy">
</li>
<li><p>进入到 <code>主页-设置-账户</code> </p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_185235.png" width="70%"/ loading="lazy">
</li>
<li><p>然后往下拉，找到设置 POP3&#x2F;IMAP 服务的地方，开启如下两个服务（若是开启时候，系统给的密码没有显示，可以刷新，或者退出后再次尝试，即可刷新出来）</p>
<ul>
<li><p>POP3&#x2F;SMTP服务 (<a href="http://service.mail.qq.com/cgi-bin/help?subtype=1&&id=28&&no=371">如何使用 Foxmail 等软件收发邮件？</a>)</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_184900.png" width="50%"/ loading="lazy">
</li>
<li><p>MAP&#x2F;SMTP服务 (<a href="http://service.mail.qq.com/cgi-bin/help?subtype=1&&id=28&&no=331">什么是 IMAP，它又是如何设置？</a>)</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_185104.png" width="50%"/ loading="lazy"></li>
</ul>
</li>
<li><p>开启之后，然后再次输入你的邮箱，密码一栏输入 IMAP 的授权密码。即可登陆成功。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_223704.png" width="70%"/ loading="lazy"></li>
</ol>
</li>
</ul>
<br>

<h3 id="邮件上登录-Gmail-和-QQ-Mail-成功："><a href="#邮件上登录-Gmail-和-QQ-Mail-成功：" class="headerlink" title="邮件上登录 Gmail 和 QQ Mail 成功："></a>邮件上登录 Gmail 和 QQ Mail 成功：</h3> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_224144.png" width="70%"/ loading="lazy">]]></content>
      <categories>
        <category>学习 - MacOS</category>
      </categories>
  </entry>
  <entry>
    <title>Make、Makefile、Cmake、QMake 的区别</title>
    <url>/posts/8eca9061/</url>
    <content><![CDATA[<p><strong>简介：</strong>   <code>make</code> <code>makefile</code> <code>cmake</code>   <code>qmake</code>都是什么，有什么区别？</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​	  <code>make</code> <code>makefile</code> <code>cmake</code>   <code>qmake</code>都是什么，有什么区别？</p>
<p>​         查了一下好像是编译用的，既然是编译为什么我们不用g++ javac 来编译呢？我猜答案是方便一点，但是具体方便在哪呢，请明示。还有它们之间如果有相似性的话，也帮我比较一下吧，谢谢各位大神。<strong>觉得写的比较好，所以在这里搬运过来了</strong> </p>
<br>

<h2 id="答一（比较写的好）："><a href="#答一（比较写的好）：" class="headerlink" title="答一（比较写的好）："></a>答一（比较写的好）：</h2><p>作者：辉常哥</p>
<p>链接：<a href="https://www.zhihu.com/question/27455963/answer/89770919">https://www.zhihu.com/question/27455963/answer/89770919</a></p>
<p>来源：知乎</p>
<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p>1.<code>gcc</code>是<code>GNU Compiler Collection（就是GNU编译器套件）</code>，也可以简单认为是编译器，它可以编译很多种编程语言（括<code>C</code>、<code>C++</code>、<code>Objective-C</code>、<code>Fortran</code>、<code>Java</code>等等）。</p>
<p>2.当你的程序只有一个源文件时，直接就可以用gcc命令编译它。</p>
<p>3.但是当你的程序包含很多个源文件时，用<code>gcc</code>命令逐个去编译时，你就很容易混乱而且工作量大</p>
<p>4.所以出现了<code>make</code>工具， <code>make</code>工具可以看成是一个智能的批处理工具，它本身并没有编译和链接的功能，而是用类似于批处理的方式—通过调用<code>makefile</code>文件中用户指定的命令来进行编译和链接的。</p>
<p>5.<code>makefile</code>是什么？简单的说就像一首歌的乐谱，make工具就像指挥家，指挥家根据乐谱指挥整个乐团怎么样演奏，<code>make</code>工具就根据<code>makefile</code>中的命令进行编译和链接的。</p>
<p>6.<code>makefile</code>命令中就包含了调用gcc（也可以是别的编译器）去编译某个源文件的命令。</p>
<p>7.<code>makefile</code>在一些简单的工程完全可以人工手下，但是当工程非常大的时候，手写<code>makefile</code>也是非常麻烦的，如果换了个平台<code>makefile</code>又要重新修改。</p>
<p>8.这时候就出现了<code>Cmake</code>这个工具，cmake就可以更加简单的生成<code>makefile</code>文件给上面那个<code>make</code>用。当然<code>cmake</code>还有其他功能，就是可以跨平台生成对应平台能用的<code>makefile</code>，你不用再自己去修改了。</p>
<p>9.可是cmake根据什么生成<code>makefile</code>呢？它又要根据一个叫<code>CMakeLists.txt</code>文件（学名：组态档）去生成<code>makefile</code>。</p>
<p>10.到最后<code>CMakeLists.txt</code>文件谁写啊？亲，是你自己手写的。</p>
<p>11.当然如果你用IDE，类似VS这些一般它都能帮你弄好了，<strong>你只需要按一下那个三角形</strong>。<font color=#FE7207  size=4 face="幼圆">（以前从来没研究过这个邪恶的三角形，所以这那天翻来这两篇文章）</font></p>
<p>12.接着是<code>qmake</code>，<code>qmake</code>是什么，先说一下Qt这个东西。Qt是跨平台C++图形用户界面应用程序开发框架。它既可以开发GUI程序，也可用于开发非<code>GUI</code>程序，比如控制台工具和服务器。简单的说就是C++的第三方库，使用这个库你可以很容易生成<code>windows</code>，<code>Linux</code>，<code>MAC os</code>等等平台的图形界面。现在的<code>Qt</code>还包含了开发各种软件一般需要用到的功能模块（网络，数据库，<code>XML</code>，多线程啊等等），比你直接用<code>C++</code>（只带标准内裤那种）要方便和简单。</p>
<p>13.你可以用<code>Qt</code>简简单单就实现非常复杂的功能，是因为<code>Qt</code>对<code>C++</code>进行了扩展，你写一行代码，Qt在背后帮你写了几百上千行，而这些多出来的代码就是靠<code>Qt</code>专有的<code>moc</code>编译器（<code>The Meta-Object Compiler</code>）和<code>uic</code>编译器（<code>User Interface Complier</code>）来重新翻译你那一行代码。问题来了，你在进行程序编译前就必须先调用<code>moc</code>和<code>uic</code>对<code>Qt</code>源文件进行预处理，然后再调用编译器进行编译。上面说的那种普通<code>makefile</code>文件是不适用的，它没办法对<code>qt</code>源文件进行预处理。所以<code>qmake</code>就产生了。</p>
<p>14.<code>qmake</code>工具就是Qt公司制造出来，用来生成Qt 专用<code>makefile</code>文件，这种<code>makefile</code>文件就能自动智能调用<code>moc</code>和<code>uic</code>对源程序进行预处理和编译。<code>qmake</code>当然必须也是跨平台的，跟<code>cmake</code>一样能对应各种平台生成对应<code>makefile</code>文件。</p>
<p>15.<code>qmake</code>是根据<code>Qt</code> 工程文件<code>（.pro）</code>来生成对应的<code>makefile</code>的。工程文件（<code>.pro</code>）相对来说比较简单，一般工程你都可以自己手写，但是一般都是由<code>Qt</code>的开发环境 <code>Qt Creato</code>r自动生成的，你<strong>还是只需要按下那个邪恶三角形就完事了</strong>。</p>
<p>16.还没有完，由于qmake很简单很好用又支持跨平台，而且是可以独立于它的IDE，所以你也可以用在非Qt工程上面，照样可以生成普通的<code>makefile</code>，只要在pro文件中加入<code>CONFIG -= qt</code>  就可以了。</p>
<ol start="17">
<li><p>这样<code>qmake</code>和<code>cmake</code>有什么区别？</p>
<p>  不好意思，<code>cmake</code>也是同样支持<code>Qt</code>程序的，<code>cmake</code>也能生成针对<code>qt</code> 程序的那种特殊<code>makefile</code>，</p>
<p> 只是<code>cmake</code>的<code>CMakeLists.txt</code> 写起来相对与<code>qmake</code>的<code>pro</code>文件复杂点。</p>
<p> <code>qmake</code> 是为 <code>Qt</code> 量身打造的，使用起来非常方便，但是cmake功能比qmake强大。</p>
<p> 一般的<code>Qt</code>工程你就直接使用<code>qmake</code>就可以了，<code>cmake</code>的强大功能一般人是用不到的。</p>
<p> 当你的工程非常大的时候，又有<code>qt</code>部分的子工程，又有其他语言的部分子工程，据说用<code>cmake</code>会 方便，我也没试过。</p>
</li>
</ol>
<h2 id="答二（图很好）"><a href="#答二（图很好）" class="headerlink" title="答二（图很好）:"></a>答二（图很好）:</h2><p>作者：玟清</p>
<p>链接：<a href="https://www.zhihu.com/question/27455963/answer/36722992">https://www.zhihu.com/question/27455963/answer/36722992</a></p>
<p>来源：知乎</p>
<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<ol>
<li><p><code>make</code> 是用来执行<code>makefile</code>的</p>
</li>
<li><p><code>makefile</code>是类unix环境下(比如Linux)的类似于批处理的”脚本”文件。其基本语法是: 目标+依赖+命令，只有在目标文件不存在，或目标比依赖的文件更旧，命令才会被执行。由此可见，<code>makefile</code>和make可适用于任意工作，不限于编程。比如，可以用来管理latex。</p>
</li>
<li><p><code>makefile</code>+<code>make</code>可理解为类<code>unix</code>环境下的项目管理工具，但它太基础了，抽象程度不高，而且在<code>windows</code>下不太友好(针对<code>visual studio</code>用户)，于是就有了跨平台项目管理工具<code>cmake</code></p>
</li>
<li><p>cmake是跨平台项目管理工具，它用更抽象的语法来组织项目。虽然，仍然是目标，依赖之类的东西，但更为抽象和友好，比如你可用math表示数学库，而不需要再具体指定到底是math.dll还是libmath.so，在windows下它会支持生成<code>visual studio</code>的工程，在linux下它会生成<code>makefile</code>，甚至它还能生成eclipse工程文件。也就是说，从同一个抽象规则出发，它为各个编译器定制工程文件。</p>
</li>
<li><p>cmake是抽象层次更高的项目管理工具，cmake命令执行的CMakeLists.txt文件</p>
</li>
<li><p>qmake是Qt专用的项目管理工具，对应的工程文件是*.pro，在Linux下面它也会生成<code>makefile</code>，当然，在命令行下才会需要手动执行qmake，完全可以在qtcreator这个专用的IDE下面打开*.pro文件，使用qmake命令的繁琐细节不用你管了。</p>
</li>
</ol>
<p>总结一下，make用来执行<code>makefile</code>，<code>cmake</code>用来执行<code>CMakeLists.txt</code>，<code>qmake</code>用来处理<code>*.pro</code>工程文件。<code>makefile</code>的抽象层次最低，<code>cmake</code>和<code>qmake</code>在<code>Linux</code>等环境下最后还是会生成一个<code>makefile</code>。<code>cmake</code>和<code>qmake</code>支持跨平台，<code>cmake</code>的做法是生成指定编译器的工程文件，而qmake完全自成体系。</p>
<p>具体使用时，<code>Linux</code>下，小工程可手动写<code>makefile</code>，大工程用automake来帮你生成<code>makefile</code>，要想跨平台，就用<code>cmake</code>。如果<code>GUI</code>用了<code>Qt</code>，也可以用<code>qmake</code> + <code>*.pro</code>来管理工程，这也是跨平台的。当然，<code>cmake</code>中也有针对<code>Qt</code>的一些规则，并代替<code>qmake</code>帮你将<code>qt</code>相关的命令整理好了。</p>
<p>另外，需要指出的是，<code>make</code>和<code>cmake</code>主要命令只有一条，<code>make</code>用于处理<code>makefile</code>，cmake用来转译<code>CMakeLists.txt</code>，而<code>qmake</code>是一个体系，用于支撑一个编程环境，它还包含除<code>qmake</code>之外的其它多条命令(比如<code>uic</code>，<code>rcc</code>,<code>moc</code>)。</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190801221230.png"/ loading="lazy">

<p>上个简图，其中<code>cl</code>表示<code>visual studio</code>的编译器，<code>gcc</code>表示<code>linux</code>下的编译器</p>
<br>

<h2 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a>参考博文：</h2><p>因为有着热心网友的无私分享，</p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序一 技法</category>
        <category>学习 - 底层兼架构</category>
      </categories>
      <tags>
        <tag>原理</tag>
      </tags>
  </entry>
  <entry>
    <title>MateBoook x pro 2020 升级 1T 固态</title>
    <url>/posts/14c67397/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　将 <code>MateBoook x pro 2020</code> 替换为 1T 固态。对于刚买的新笔记本，昨晚上到货， 今天早上就将其拆机，将 512 G 固态升级为 1T ；顺便想看看是无风扇还是有风扇扇热。附上拆机图解。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/Image26.jpg" width="80%"/ loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p>刚买的 <code>MateBoook x pro 2020</code> ，其配置是 <code>i5-10210U</code> + <code>16G</code> 内存 + <code>512G</code> SSD，本欲直接买 i7 十代的 CPU，但是做了一下功课，都是 U 开头，且 i7 十代只比 i5 十代 提升 10%，但是价格要贵💰 1000  ，而 固态的话直接购买 1T 的，相比 512G 的话，会额外消耗 💰 3000 元。<strong>属于那种可以买，但是没有必要</strong> 系列。 自己花钱买一个 1T 的 SSD （买的西部数据的，最后稳了）替换上即可，不贵还能动手看看。</p>
<br>

<p>也是目前拆机记录，到手 12 h 不到，就被拆开了。 </p>
<br>

<h2 id="开封："><a href="#开封：" class="headerlink" title="开封："></a>开封：</h2><p>先拆机保佑🙏： </p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/Image00.jpg" width="80%"/ loading="lazy">

<br>

<h2 id="拆笔记本后盖："><a href="#拆笔记本后盖：" class="headerlink" title="拆笔记本后盖："></a>拆笔记本后盖：</h2><p>去下螺丝，使用撬片，然后发现中间区域一直很紧，扯不开，猜测只是双面胶粘住了，实际发现只有一个卡扣，所以可以放心大力出奇迹。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201008231939.png" width="80%"/ loading="lazy">

<br>

<p>拆开后盖，不可以此处直接拆卸螺丝，抽出 ssd， 应为它有黏胶贴在扇热上。看到一些视频有说，它是 2020 机型是无风扇、被动扇热，我不信，觉得应该作不了这么强，打开果然还是有风扇的，（本想做功课的，结果网上都是同样一篇的营销，浪费时间看广告，还都是错误的，机型和文章或者视频 都不符合，全靠标题 🙄🙄，氪）</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201008232236.png" width="80%"/ loading="lazy">

<br>

<p>将扇热铜管拆开，可以看到内部结构。换上自购的 1T 固态（HUAWEI 官网写理论最大支持 1T。没有尝试 2T，也暂无需求，不过我猜测实际也是支持的）</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201008232442.png" width="80%"/ loading="lazy">

<br>

<h2 id="扇热模块："><a href="#扇热模块：" class="headerlink" title="扇热模块："></a>扇热模块：</h2><p>对于  <code>MateBoook x pro 2020</code> 机型的扇热能力，在这里也放上图，实际体验，感觉还行。毕竟还有小风扇， <code>十代 CPU</code> 好像也是可以是智能调频的。应该也还行</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201008233906.png" width="80%"/ loading="lazy">

<br>

<h2 id="重装系统："><a href="#重装系统：" class="headerlink" title="重装系统："></a>重装系统：</h2><p>插上早已经准备好的 PE U盘，先不合盖，看能否顺利重装系统。HUAWEI 笔记本进入 bios 是 F2。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201008233216.png" width="80%"/ loading="lazy">

<br>

<p>要格式化一下新的 SSD，才能够被 PE 系统识别。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201008233437.png" width="80%"/ loading="lazy">



<br>

<h2 id="成功："><a href="#成功：" class="headerlink" title="成功："></a>成功：</h2><p>然后就是常见的创建分区表、分区、格式化、重装系统等步骤，就不再展开。成功，然后组装好后盖板。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/Image01.jpg" width="80%"/ loading="lazy">

<br>

<h2 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h2><p>顺带出一个 原装 的 512G 的 SSD，用不着了，，价格合适，可以带走，联系方式博客左侧任选，其详细参数如下：512 GB 的 M2.0 接口， NVMe PCIe 协议的固态硬盘</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/Image0111.jpg" width="70%"/ loading="lazy">]]></content>
      <categories>
        <category>生活 - 闲暇的趣闻</category>
      </categories>
      <tags>
        <tag>拆机</tag>
      </tags>
  </entry>
  <entry>
    <title>Misleading indentation; statement is not part of the previous &#39;if&#39;</title>
    <url>/posts/28b03c75/</url>
    <content><![CDATA[<p><strong>简  述:</strong> 使用的 Qt 升级到了 5.15.2，然后 IDE 编译报警告⚠如下，强迫症犯了，得消除掉。</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202208071916076.png" width="100%"/ loading="lazy">



<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">screenshot.cpp:164:2: Misleading indentation; statement is not part of the previous &#39;if&#39;
screenshot.cpp:161:5: previous statement is here<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>PS：💻  <code>win10 21H2</code> 📎 <code>Qt 5.15.2</code> 📎  <code>QtCreator 8.0.0 </code> </p>
<br>

<h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>修改，将其修改为 <code>Tab</code> 按键或者 <code>回车自动对齐</code>，即可消除此警告⚠；改动如下</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202208071917192.png" width="80%"/ loading="lazy">

<br>

<h3 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h3><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a></p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序二 经验</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Model-View-Delegate:&quot;模型-视图-代理&quot;的讲解</title>
    <url>/posts/4a7ed5d1/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  在Qt中，有一种将数据和和视图进行串通起来，就像网页和数据库的关系一样；而这就是<strong>“Model-View-Delegate”</strong>（<strong>模型-视图-代理</strong>）的结构。</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-09_22-34-00_mark.png"/ loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="Model-x2F-View-模型-x2F-视图"><a href="#Model-x2F-View-模型-x2F-视图" class="headerlink" title="Model&#x2F;View(模型&#x2F;视图):"></a>Model&#x2F;View(模型&#x2F;视图):</h2><p>在GUI界面交互的时候，用户在（软件&#x2F;网页的）界面进行查看数据的时候，看到这个这个就被称之为<strong>视图</strong>；而视图展示出来的数据，是从<strong>模型</strong>里面取出来的，你可以将它看做看做一个专门存放数据的容器（黑匣子）；</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-10_23-53-09_mark.png"/ loading="lazy">

<br>

<h3 id="数据（Data）："><a href="#数据（Data）：" class="headerlink" title="数据（Data）："></a>数据（Data）：</h3><p>实际的数据，比如是数据表里面的一个项，也或许是一个QStringList，也许只是一个数字或者字母或者字符串:abc:</p>
<br>

<h3 id="视图（或视图组件-View）："><a href="#视图（或视图组件-View）：" class="headerlink" title="视图（或视图组件 View）："></a>视图（或视图组件 View）：</h3><p>客户端的界面，用来查看数据的控件，比如表格Table或者树形图目录结构Tree；<strong>视图从数据模型获取得到每一个数据项的模型索引（modelindex），然后通过模型索引获取数据；</strong> Qt提供一些现成的数据模型视图组件：  </p>
<ul>
<li><p><strong>主要的数据模型：</strong> QListView &#x2F; QTreeView &#x2F; QTableView</p>
</li>
<li><p><strong>其对应的简便利类：</strong>  QListWidget &#x2F; QTreeWidget &#x2F; QTableWidget</p>
</li>
</ul>
<br>

<h3 id="模型（数据模型-Model）"><a href="#模型（数据模型-Model）" class="headerlink" title="模型（数据模型 Model）:"></a>模型（数据模型 Model）:</h3><p>与实际数据数据进行同行，并且为视图组件提供数据结构</p>
<br>

<h2 id="代理-Delegate"><a href="#代理-Delegate" class="headerlink" title="代理(Delegate):"></a>代理(Delegate):</h2><p>代理是可以让用户，自己更加细致定义绘画自己所需要的窗口的；比如说，可以在一个Table的控件里面，将一个item的项替换成一个QCheckBox或者一个下拉列表表框的控件之类的（eg：让你填表时候，选择年龄等）</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-09_23-03-07_mark.png"/ loading="lazy">

<p><font color=#D0087E size=4 face="幼圆">由于数据和模型实际相互分离开，所以是<strong>可以一个数据模型对应⇒多个数据模型</strong>的</font></p>
<br>

<h2 id="数据模型："><a href="#数据模型：" class="headerlink" title="数据模型："></a>数据模型：</h2><p>所有基于<strong>项数据</strong>（item Data）的<strong>数据模型</strong>（Model）都是基于<code>QAbstractItemModel</code>这个抽象类的。</p>
<p>其几个主要的类的层次结构如下：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-10_23-39-22_mark.png"/ loading="lazy">

<p>其中：</p>
<ul>
<li><code>QStringList Model：</code>用于处理字符串列表数据的数据模型类</li>
<li><code>QStandardltem Model：</code>标准的基于项数据的数据模型类，每个数据项数据都可以是任意数据类型</li>
<li><code>QFileSystem Model：</code>计算机上文件系统的数据模型类</li>
<li><code>QSortFilterProxy Model：</code> 用于其他数据模型的结合，提供排序和过滤功能的数据模型类</li>
<li><code>QSqlQuery Model:</code> 用于数据库SQL查询结果的数据模型类</li>
<li><code>QSqlTable Model:</code>  用于数据库的一个数据表的数据模型类</li>
<li><code>QSqlRelationalTable Model：</code>用于关系型数据表的数据模型类</li>
</ul>
<br>

<h2 id="视图模型："><a href="#视图模型：" class="headerlink" title="视图模型："></a>视图模型：</h2><p>其中它们的关系如下，在使用的时候，往往只是需要调用setModel()，就可以实现一个数据模型和视图组件和数据模型之间的关联；<strong>对视图组件的数据修改，将会直到自动保存到关联的数据模型里面，且一个数据模型是可以在多个视图组件里面显示数据的。</strong></p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-10_23-44-41_mark.png"/ loading="lazy">

<p>其中的详细说明如下：</p>
<ul>
<li><code>QListView:</code> 用于显示单列的列表数据模型，适用于一维数据的操作</li>
<li><code>QTreeView:</code>  用于显示树状结构，使用与树状结构数据的操作</li>
<li><code>QTableView:</code>  用于显示表格状数据，适用于二维型数据的操作</li>
<li><code>QColumnView:</code>  用于多个QListView显示树状层次结构，树状结构的一层用一个QLIstView显示</li>
<li><code>QHeaderView:</code>  提供行表头或者列表头的视图组件</li>
</ul>
<br>

<h2 id="模型索引："><a href="#模型索引：" class="headerlink" title="模型索引："></a>模型索引：</h2><p><strong>模型索引（Model Index）</strong>：是来保证数据和其存取方式的隔离。</p>
<p><code>QModeIndex</code>是（临时的）一个索引类。模型索引提供数据存取的一个临时指针，用于通过数据模型的提取或者修改，因为模型内部组织结构的数据很容易变化，所以这个模型索引是临时的；</p>
<p><code>QPersistentModeIndex</code>是持久性的模型索引。</p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>OpenMesh入门，安装，运行示例Hello World</title>
    <url>/posts/8b2d5fcb/</url>
    <content><![CDATA[<p><strong>简述：</strong>  了解OpenMesh，学会安装，尝试在c++里面使用OpenMesh，书写一个简单地例子。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​		了解OpenMesh，学会安装，尝试在c++里面使用OpenMesh，书写一个简单地例子。</p>
<p><strong>编程环境：</strong>Win10 x64 专业版</p>
<p><strong>编程软件：</strong> visual studio 2015</p>
<h2 id="下载OpenMesh库："><a href="#下载OpenMesh库：" class="headerlink" title="下载OpenMesh库："></a>下载OpenMesh库：</h2><p>进入OpenMesh官网<a href="http://www.openmesh.org/"><strong>OpenMesh官网</strong></a>，下载下面的文件：</p>
<p>备用github直接下载：<a href="https://github.com/xmuli/openMesh/blob/master/software/OpenMesh-8.0-VS2015-64-Bit-no-apps.exe"><strong>OpenMesh-8.0-VS2015-64-Bit-no-apps.exe</strong></a></p>
<h2 id="配置OpenMesh运行环境："><a href="#配置OpenMesh运行环境：" class="headerlink" title="配置OpenMesh运行环境："></a>配置OpenMesh运行环境：</h2><h3 id="安装OpenMesh程序："><a href="#安装OpenMesh程序：" class="headerlink" title="安装OpenMesh程序："></a>安装OpenMesh程序：</h3><p>安装OpenMesh-8.0-VS2015-64-Bit-no-apps.exe程序</p>
<p>标准安装：<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190621135333.png" loading="lazy"></p>
<h3 id="创建工程："><a href="#创建工程：" class="headerlink" title="创建工程："></a>创建工程：</h3><p>创建一个新的（空的 项目工程）解决方案：比如项目名称叫<code>TestOpenMesh</code><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/1561096684097.png" loading="lazy"></p>
<h3 id="配置OpenMesh的运行环境"><a href="#配置OpenMesh的运行环境" class="headerlink" title="配置OpenMesh的运行环境:"></a>配置OpenMesh的运行环境:</h3><p><strong>在Debug模式 选择x64:</strong></p>
<ul>
<li><strong>配置<include>头文件：</strong></li>
</ul>
<p>打开<code>项目属性-VC++目录-包含目录</code>，添加包含目录<code>C:\Program Files\OpenMesh 8.0\include</code>如下：</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/1561097612511.png" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190621165309.png" loading="lazy"></p>
<ul>
<li><strong>配置库<lib>文件：</strong></li>
</ul>
<p>打开<code>项目属性-链接器-常规-附加依赖库目录</code>，添加附加库目录<code>C:\Program Files\OpenMesh 8.0\lib</code>如下：</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190621141706.png" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190621141801.png" loading="lazy"></p>
<ul>
<li><em><em>配置附加依赖项</em>.lib文件：</em>*</li>
</ul>
<p>打开<code>项目属性-链接器-输入-附加依赖项</code>，添加附加库目录<code>OpenMeshCored.lib </code>和 <code>OpenMeshToolsd.lib</code>如下：</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/1561098167619.png" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190621165622.png" loading="lazy"></p>
<ul>
<li><strong>配置预处理器添加宏</strong></li>
</ul>
<p>(可能有的第三方库需要，有的第三方库不需要这一步操作)：</p>
<p>打开<code>项目属性-V/c++-预处理器</code>，添加附加宏<code>_USE_MATH_DEFINES</code></p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/1561098274278.png" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190621142613.png" loading="lazy"></p>
<p>一共经过这三步骤，就全部配置好了，接下来就是添加具体的代码了。</p>
<h2 id="添加示例程序："><a href="#添加示例程序：" class="headerlink" title="添加示例程序："></a>添加示例程序：</h2><p>添加如下代码到创建的<code>TestOpenMesh.cpp</code>下面：</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
&#x2F;&#x2F; -------------------- OpenMesh
#include &lt;OpenMesh\&#x2F;Core&#x2F;IO&#x2F;MeshIO.hh&gt;
#include &lt;OpenMesh&#x2F;Core&#x2F;Mesh&#x2F;PolyMesh_ArrayKernelT.hh&gt;
using namespace std;
 
typedef OpenMesh::PolyMesh_ArrayKernelT&lt;&gt;  MyMesh;
int main()
&#123;
	MyMesh mesh;
	MyMesh::VertexHandle vhandle[8];
	vhandle[0] &#x3D; mesh.add_vertex(MyMesh::Point(-1, -1, 1));
	vhandle[1] &#x3D; mesh.add_vertex(MyMesh::Point(1, -1, 1));
	vhandle[2] &#x3D; mesh.add_vertex(MyMesh::Point(1, 1, 1));
	vhandle[3] &#x3D; mesh.add_vertex(MyMesh::Point(-1, 1, 1));
	vhandle[4] &#x3D; mesh.add_vertex(MyMesh::Point(-1, -1, -1));
	vhandle[5] &#x3D; mesh.add_vertex(MyMesh::Point(1, -1, -1));
	vhandle[6] &#x3D; mesh.add_vertex(MyMesh::Point(1, 1, -1));
	vhandle[7] &#x3D; mesh.add_vertex(MyMesh::Point(-1, 1, -1));
	&#x2F;&#x2F; generate (quadrilateral) faces
	std::vector&lt;MyMesh::VertexHandle&gt;  face_vhandles;
	face_vhandles.clear();
	face_vhandles.push_back(vhandle[0]);
	face_vhandles.push_back(vhandle[1]);
	face_vhandles.push_back(vhandle[2]);
	face_vhandles.push_back(vhandle[3]);
	mesh.add_face(face_vhandles);
 
	face_vhandles.clear();
	face_vhandles.push_back(vhandle[7]);
	face_vhandles.push_back(vhandle[6]);
	face_vhandles.push_back(vhandle[5]);
	face_vhandles.push_back(vhandle[4]);
	mesh.add_face(face_vhandles);
 
	face_vhandles.clear();
	face_vhandles.push_back(vhandle[1]);
	face_vhandles.push_back(vhandle[0]);
	face_vhandles.push_back(vhandle[4]);
	face_vhandles.push_back(vhandle[5]);
	mesh.add_face(face_vhandles);
 
	face_vhandles.clear();
	face_vhandles.push_back(vhandle[2]);
	face_vhandles.push_back(vhandle[1]);
	face_vhandles.push_back(vhandle[5]);
	face_vhandles.push_back(vhandle[6]);
	mesh.add_face(face_vhandles);
 
	face_vhandles.clear();
	face_vhandles.push_back(vhandle[3]);
	face_vhandles.push_back(vhandle[2]);
	face_vhandles.push_back(vhandle[6]);
	face_vhandles.push_back(vhandle[7]);
	mesh.add_face(face_vhandles);
 
	face_vhandles.clear();
	face_vhandles.push_back(vhandle[0]);
	face_vhandles.push_back(vhandle[3]);
	face_vhandles.push_back(vhandle[7]);
	face_vhandles.push_back(vhandle[4]);
	mesh.add_face(face_vhandles);
 
	&#x2F;&#x2F; write mesh to output.obj
	try
	&#123;
		if (!OpenMesh::IO::write_mesh(mesh, &quot;output.off&quot;))
		&#123;
			std::cerr &lt;&lt; &quot;Cannot write mesh to file &#39;output.off&#39;&quot; &lt;&lt; std::endl;
			return 1;
		&#125;
	&#125;
	catch (std::exception&amp; x)
	&#123;
		std::cerr &lt;&lt; x.what() &lt;&lt; std::endl;
		return 1;
	&#125;
	
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="运行该项目："><a href="#运行该项目：" class="headerlink" title="运行该项目："></a>运行该项目：</h2><p>在vs 2015 里面按下<code>Ctrl + F5</code>，运行该项目</p>
<p>看到运行成功：</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190621143426.png" loading="lazy"></p>
<h2 id="验证成功："><a href="#验证成功：" class="headerlink" title="验证成功："></a>验证成功：</h2><p>打开<code>D:\programming\OpenMesh\TestOpenMesh\TestOpenMesh</code>目录下，查看是否生成<code>output.off</code>文件</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190621143552.png" loading="lazy"></p>
<p>使用MeshLab打开这个<code>output.off</code>文件，看看时候加载之后，显示是否成功</p>
<p>MeshLab官网下载地址：<a href="http://www.meshlab.net/#download">MeshLab官网</a></p>
<p>备用github直接下载：<a href="https://github.com/touwoyimuli/2019_06_OpenMesh/blob/master/software/MeshLab2016.12.exe"><strong>MeshLab2016.12.exe</strong></a></p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190621144002.png" loading="lazy"></p>
<p>选中该<code>output.off</code>文件，打开：</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190621144405.png" loading="lazy"></p>
<p>发现运行成功：</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190621144507.png" loading="lazy"></p>
<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p>源码：<a href="https://github.com/xmuli/openMesh/tree/master/TestOpenMesh"><strong>TestOpenMesh源码</strong></a></p>
<h2 id="心得："><a href="#心得：" class="headerlink" title="心得："></a>心得：</h2><p>OpenMesh的网上教程感觉都是十分的少，唯一比较全面的话，可能就是相关的英文文档，然鹅，里面涉及的概念很多，且在现在工作了发现都是直接上手，根本不会让你去系统的学习OpenMesh的相关知识，时间仓促，且系统学习，所耗费的时间和精力，也容易使得人比较倦怠。故此好的解决方法就是，就是直接在项目中直接上手；</p>
<p>可以按照如下步骤实现：</p>
<ol>
<li>-&gt;从了解OpenMesh</li>
<li>-&gt;你所需要的项目需求的实现</li>
<li>-&gt;需要完成的什么任务</li>
<li>-&gt;百度、谷歌、Bing轮着搜索怎么实现</li>
<li>-&gt;查找函数或者迭代器的或者属性实例的使用</li>
<li>-&gt;自己项目移植尝试</li>
<li>-&gt;多次尝试</li>
<li>-&gt;还是有问题，向<del>大佬</del>（划掉，巨佬）们求助</li>
<li>-&gt;仍然无果;歇一天再按照上面的步骤尝试</li>
<li>-&gt;仍然无果;建议放弃，学习其他。或者日后有机会在学</li>
</ol>
<h2 id="资源："><a href="#资源：" class="headerlink" title="资源："></a>资源：</h2><p>提供一个良好的中文入门手册：<a href="https://github.com/txmuli/openMesh/tree/master/docORpdf"><strong>OpenMesh入门文档.pdf</strong></a> （可以帮助弄清楚OpenMesh基本概念，值得一读）</p>
<p><strong>参考博文：</strong><a href="https://blog.csdn.net/chaojiwudixiaofeixia/article/details/50460887">OpenMesh学习笔记1 安装 配置 入门示例</a></p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序一 技法</category>
        <category>学习 - OpenMesh</category>
      </categories>
  </entry>
  <entry>
    <title>OpenMesh模型分割：区域增长实现</title>
    <url>/posts/93376726/</url>
    <content><![CDATA[<p>​		将一个数据结构的模型OpenMesh进行分割，用区域增长的方式，来遍历所有，且此算法耗时比较短。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​		将一个数据结构的模型OpenMesh进行分割，用区域增长的方式，来遍历所有，且此算法耗时比较短。</p>
<p><strong>编程环境：</strong>Win10 x64 专业版</p>
<p><strong>编程软件：</strong> visual studio 2015</p>
<h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><ol>
<li>将所有的面进行标记为-1(表示没有属于那一块)和false(表示还没有遍历过)</li>
<li>选择一个种子面fhSeed，然后向它的周边相邻的(三个）面进行区域增长，也给做上标</li>
<li>对于这三个面，也把它作为一个新的面，然后向自己周边进行增长（然后辐射周边）</li>
<li>然后用一个小的容器储存，正在增长的面，每次增长结束，就把自己这个已经遍历过的面，从容器中删除，当容器值为0的时候，便是一块完整的被遍历出来了</li>
<li>重复以上2-3-4步骤</li>
<li>将已经遍历了的面，打上标记，已经标记了的，不在标记；当所有的面全部都遍历结束，也就分割开了（这样的话，一个物体的面，属于哪一块，都被标记出来了）。</li>
</ol>
<h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><p>​	假设其中的一个模型变量为 ：<code>RefineMesh refineMeshNew</code>;</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">OpenMesh::FPropHandleT&lt;int&gt; FPropTriMark;    &#x2F;&#x2F;属于那一块
	OpenMesh::FPropHandleT&lt;bool&gt; FPropTriFlag;   &#x2F;&#x2F;是否遍历过

	refineMeshNew.add_property(FPropTriMark, &quot;FPropTriMark&quot;);
	refineMeshNew.add_property(FPropTriFlag, &quot;FPropTriFlag&quot;);

	for (auto f_it &#x3D; refineMeshNew.faces_begin(); f_it !&#x3D; refineMeshNew.faces_end(); f_it++)
	&#123;
		refineMeshNew.property(FPropTriMark, *f_it) &#x3D; -1;
		refineMeshNew.property(FPropTriFlag, *f_it) &#x3D; false;
	&#125;

	int nMark &#x3D; 0; &#x2F;&#x2F;标记属于哪一块Mesh

	&#x2F;&#x2F;外层循环------------------------------------------------------------------------------
	while (true)
	&#123;
		&#x2F;&#x2F;外层结束标志
		OpenMesh::FaceHandle fhSeed;
		for (auto f_itTemp &#x3D; refineMeshNew.faces_begin(); f_itTemp !&#x3D; refineMeshNew.faces_end(); f_itTemp++)
		&#123;
			if (!refineMeshNew.property(FPropTriFlag, *f_itTemp))
			&#123;
				fhSeed &#x3D; *f_itTemp;
				break;
			&#125;
		&#125;
		
		if (!fhSeed.is_valid())
			break;

		refineMeshNew.property(FPropTriFlag, fhSeed) &#x3D; true;
		refineMeshNew.property(FPropTriMark, fhSeed) &#x3D; nMark;
		
		vector&lt;OpenMesh::FaceHandle&gt; vecMarkFH;
		vecMarkFH.push_back(fhSeed);

		&#x2F;&#x2F;内层循环------------------------------------------------------------------------------
		while (true)
		&#123;
			if (vecMarkFH.size() &#x3D;&#x3D; 0)
				break;

			OpenMesh::FaceHandle fhTemp &#x3D; vecMarkFH[0];

			for (auto ff_it &#x3D; refineMeshNew.ff_iter(fhTemp); ff_it !&#x3D; refineMeshNew.ff_end(fhTemp); ff_it++)
			&#123;
				if (!refineMeshNew.property(FPropTriFlag, *ff_it))
				&#123;
					refineMeshNew.property(FPropTriFlag, *ff_it) &#x3D; true;
					refineMeshNew.property(FPropTriMark, *ff_it) &#x3D; nMark;
				&#125;
			&#125;

			vecMarkFH.erase(vecMarkFH.begin());

		&#125;
		
		nMark++;

	&#125;
	&#x2F;&#x2F;外层循环结束------------------------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="效率："><a href="#效率：" class="headerlink" title="效率："></a>效率：</h2><p>​		经过测试，用此算法，遍历一个有四千多万（40, 000, 000多）个面的数据模型，只需要耗费时间约<code>6s</code>，比我自己先前写的一个思路，耗时效率要高得多</p>
<p>&#x2F;&#x2F;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</p>
<h2 id="更新："><a href="#更新：" class="headerlink" title="更新："></a>更新：</h2><p><font color=#D0087E size=4 face="幼圆"><strong>更新时间：</strong> 2019-7-9 17:35:43</font></p>
<p><font color=#D0087E size=4 face="幼圆"><strong>更新内容：</strong> </font>增加有分割后的多个模型导出的代码分享</p>
<p>将下面的<code>mesh</code>替换成分割之后的pMesh,分割成为多个的时候，建议使用<code>Vector&lt;pMesh&gt; v</code>来存储，然后使用1行里面的代码替换掉<code>mesh</code>为<code>v[i]</code>即可；</p>
<p><strong>提示：</strong> 因为上面代码已经将模型做了区分，然后使用for循环，直接按照标记所属于的，直接输出；亦可以即可将各自的点、面、半边、纹理等属性赋值给一个新的<code>pMesh</code>即可；</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>OpenMesh<span class="token operator">::</span>IO<span class="token operator">::</span><span class="token function">write_mesh</span><span class="token punctuation">(</span>mesh<span class="token punctuation">,</span> <span class="token string">"output.off"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    std<span class="token operator">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"Cannot write mesh to file 'output.off'"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<hr>
<p><strong>本博文同步到csdn博客：</strong> <a href="https://blog.csdn.net/qq_33154343/article/details/93505922#comments">OpenMesh模型分割：区域增长实现</a></p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序一 技法</category>
        <category>学习 - OpenMesh</category>
      </categories>
  </entry>
  <entry>
    <title>PicGo在uos&amp;&amp;deepin系统运行失败：chrome-sandbox is owned by root and has mode 4755</title>
    <url>/posts/b6a7912e/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　在 <code>uos / deepin v20</code> 系统中，使用 <code>picGo</code> 图床上传工具，直接运行会失败：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">☁  softIns  ./PicGo-2.3.0-beta.0.AppImage                  
<span class="token punctuation">[</span><span class="token number">4722</span>:0527/095648.836952:FATAL:setuid_sandbox_host.cc<span class="token punctuation">(</span><span class="token number">157</span><span class="token punctuation">)</span><span class="token punctuation">]</span> The SUID sandbox helper binary was
found, but is not configured correctly. Rather than run without sandboxing I'm aborting now. You
need to <span class="token function">make</span> sure that /tmp/.mount_PicGo-GVLhJS/chrome-sandbox is owned by root and has mode <span class="token number">4755</span>.
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token number">4722</span> trace <span class="token builtin class-name">trap</span>  ./PicGo-2.3.0-beta.0.AppImage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20 amd64</code> 📎 <code>Qt 5.11.3</code> 📎 <code>gcc/g++ 9.0</code> 📎 <code>gdb8.0</code> </p>
<br>

<h3 id="报错如下："><a href="#报错如下：" class="headerlink" title="报错如下："></a>报错如下：</h3>   <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200527_102212.png" width="90%"/ loading="lazy">

<br>

<h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>今天在谷歌上找到问题了，这是Linux内核的问题，解决方法四种，推荐第四种，一劳永逸</p>
<ol>
<li>启用用户名称空间： <code>sudo sysctl kernel.unprivileged_userns_clone=1</code>，但每次开机都要运行该命令。</li>
<li>给报错信息给出的文件授权：<code>sudo chown root /chrome-sandbox &amp;&amp; sudo chmod 4755 /chrome-sandbox</code>，但不适用于picgo，因为会自动删除。</li>
<li>运行的时候加上免沙箱命令：<code>--no-sandbox</code></li>
<li>开机时自启动用户名称空间：<code>echo &#39;kernel.unprivileged_userns_clone=1&#39; &gt; /etc/sysctl.d/userns.conf</code></li>
</ol>
<p>只适用于Debian&#x2F;Ubuntu系列Linux发行版。</p>
<br>

<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul>
<li><a href="https://github.com/Molunerfinn/PicGo/issues/467"># 467</a></li>
</ul>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>QComboBox和QPlainTextEdit的讲解和使用</title>
    <url>/posts/8158b3d5/</url>
    <content><![CDATA[<p><strong>简介：</strong>  下拉列表框<code>QComboBox</code>和富文本编辑器<code>QPlainTextEdit</code>的介绍和使用</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="配置环境："><a href="#配置环境：" class="headerlink" title="配置环境："></a>配置环境：</h2><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p>
<p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p>
<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>先上一个最终的运行效果图：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190921170623.gif"/ loading="lazy">

<br>

<h2 id="QComboBox属性："><a href="#QComboBox属性：" class="headerlink" title="QComboBox属性："></a>QComboBox属性：</h2><p><code>QComboBox</code>是下拉列表框组件类，它提供一个下拉列表供用户选择，也可以直接当作一个<code>QLineEdit</code> 用作输入。<code>QComboBox</code>除了显示可见下拉列表外，每个项（<strong>item</strong>，或称列表项）还可以关联一个<strong>QVariant</strong>类型的变量，用于存储一些不可见数据。</p>
<p><code>QComboBox</code>存储的项是一个列表，但是<code>QComboBox</code>不提供整个列表用于访问，可以通过索引访问某个项。访问项的一些函数主要有以下几种。其一些基本属性和常用函数介绍：</p>
<table>
<thead>
<tr>
<th>常用函数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>int currentIndex( )</td>
<td>返回当前项的序号，第一个项的序号为0</td>
</tr>
<tr>
<td>QString currentText( )</td>
<td>返回当前项的文字</td>
</tr>
<tr>
<td>QVariant currentData(int role&#x3D;Qt:UserRole)</td>
<td>返回当前项的关联数据，数据的缺省角色role&#x3D;Qt:UserRole</td>
</tr>
<tr>
<td>QString itemText(int index)</td>
<td>返回指定索引号的项的文字</td>
</tr>
<tr>
<td>QVariant itemData(int index,int role&#x3D;Qt::UserRole)</td>
<td>返回指定索引号的项的关联数据</td>
</tr>
<tr>
<td>int count（)</td>
<td>返回项的个数</td>
</tr>
</tbody></table>
<p><strong>在一个QComboBox组件上选择项发生变化时，会发射如下两个信号：</strong></p>
<p>这两个信号只是传递的参数不同，一个传递的是当前项的索引号，一个传递的当前项的文字。</p>
<blockquote>
<p>void currentIndexChanged(int index)<br>void currentIndexChanged(const QString &amp;text)</p>
</blockquote>
<br>

<h2 id="QPlain-TextEdit属性："><a href="#QPlain-TextEdit属性：" class="headerlink" title="QPlain TextEdit属性："></a>QPlain TextEdit属性：</h2><p><code>QPlainTextEdit</code>是一个多行文本编辑器，用于显示和编辑多行简单文本。另外，还有一个<strong>QTextEdit</strong><br>组件，是一个所见即所得的可以编辑带格式文本的组件，以<strong>HTML</strong>格式标记符定义文本格式。</p>
<p><code>QPlainTextEdit</code> 提供**cut( )、copy( )、paste( )、undo( )、redo( )、clear( )、selectAll( )**等标准编辑功<br>能的槽函数，<code>QPlainTextEdit</code>还提供一个标准的右键快捷菜单。</p>
<p><font color=#D0087E size=4 face="幼圆"><code>QPlainTextEdit</code>的文字内容以<strong>QTextDocument</strong>类型存储，函数<code>document()</code>返回这个文档对象的<br>指针。<br><strong>QTextDocument</strong>是内存中的文本对象，以文本块的方式存储，一个文本块就是一个段落，每<br>个段落以回车符结束。<strong>QTextDocument</strong>提供一些函数实现对文本内容的存取。</font></p>
<table>
<thead>
<tr>
<th>常用函数</th>
<th>含义()</th>
</tr>
</thead>
<tbody><tr>
<td>appendPlainText()</td>
<td>向QPlain TextEdit添加一行话</td>
</tr>
<tr>
<td>int blockCount()</td>
<td>获得文本块个数</td>
</tr>
<tr>
<td>QTextBlock findBlockByNumber(int blockNumber)</td>
<td>读取某一个文本块，序号从0开始，至blockCount()-1结束。</td>
</tr>
</tbody></table>
<p>一个<strong>document</strong>有多个<strong>TextBlock</strong>，从<strong>document</strong>中读取出的一个文本块类型为<strong>QTextBlock</strong>，通过<code>QTextBlock.：text()</code>函数可以获取其纯文本文字。</p>
<br>

<h2 id="核心源码："><a href="#核心源码：" class="headerlink" title="核心源码："></a>核心源码：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//左上角区域+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="token comment">//初始化简单的QComboBox控件</span>
<span class="token keyword">void</span> <span class="token class-name">ExQcomboBox</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnLeftInit_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QIcon ico<span class="token punctuation">;</span>
    ico<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/images/github.ico"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    ui<span class="token operator">-></span>comBoxLeft<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ui<span class="token operator">-></span>comBoxLeft<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span>ico<span class="token punctuation">,</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"第%1个item项"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//带有ico图标的项</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//清除简单的QComboBox控件</span>
<span class="token keyword">void</span> <span class="token class-name">ExQcomboBox</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnLeftClear_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>comBoxLeft<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//勾选QComboBox为可以编辑状态</span>
<span class="token keyword">void</span> <span class="token class-name">ExQcomboBox</span><span class="token double-colon punctuation">::</span><span class="token function">on_checkBoxOnlyWrite_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>checkBoxOnlyWrite<span class="token operator">-></span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        ui<span class="token operator">-></span>comBoxLeft<span class="token operator">-></span><span class="token function">setEditable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        ui<span class="token operator">-></span>comBoxLeft<span class="token operator">-></span><span class="token function">setEditable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//右上角区域+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="token comment">//初始化复杂的QComboBox控件（给每一项都添加一个对应的自定义数据[不显示]）</span>
<span class="token keyword">void</span> <span class="token class-name">ExQcomboBox</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnRightInit_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QIcon ico<span class="token punctuation">;</span>
    ico<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/images/gril.ico"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    QMap<span class="token operator">&lt;</span>QString<span class="token punctuation">,</span> QString<span class="token operator">></span> map<span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"张投"</span><span class="token punctuation">,</span> <span class="token string">"16岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"张我"</span><span class="token punctuation">,</span> <span class="token string">"17岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"张以"</span><span class="token punctuation">,</span> <span class="token string">"18岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"张木"</span><span class="token punctuation">,</span> <span class="token string">"19岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"张李"</span><span class="token punctuation">,</span> <span class="token string">"20岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"张，"</span><span class="token punctuation">,</span> <span class="token string">"21岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"张报"</span><span class="token punctuation">,</span> <span class="token string">"22岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"张之"</span><span class="token punctuation">,</span> <span class="token string">"23岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"张以"</span><span class="token punctuation">,</span> <span class="token string">"24岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"张琼"</span><span class="token punctuation">,</span> <span class="token string">"25岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"张玖"</span><span class="token punctuation">,</span> <span class="token string">"26岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"张。"</span><span class="token punctuation">,</span> <span class="token string">"27岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    ui<span class="token operator">-></span>comBoxRight<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">foreach</span><span class="token punctuation">(</span>QString str<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        ui<span class="token operator">-></span>comBoxRight<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span>ico<span class="token punctuation">,</span> str<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//因为有Map，所以QComboBox显示会按照key排序，而非上面的定义顺序,注意不是map.key(str)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//底部区域+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="token comment">//文本框内容每次读取一行，添加到ComboBox作为item项</span>
<span class="token keyword">void</span> <span class="token class-name">ExQcomboBox</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnBottomAdd_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QTextDocument<span class="token operator">*</span> doc <span class="token operator">=</span> ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//获取文本对象</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> doc<span class="token operator">-></span><span class="token function">blockCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment">//回车符是一个block</span>
    QIcon ico<span class="token punctuation">;</span>
    ico<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/images/github.ico"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>comBoxLeft<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>comBoxRight<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        QTextBlock text <span class="token operator">=</span> doc<span class="token operator">-></span><span class="token function">findBlockByNumber</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//获取文本中一段（以换行为标志）</span>
        ui<span class="token operator">-></span>comBoxLeft<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span>ico<span class="token punctuation">,</span> text<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>comBoxRight<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span>ico<span class="token punctuation">,</span> text<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"附加内容:%1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//清除可编辑的富文本的编辑器的所有内容</span>
<span class="token keyword">void</span> <span class="token class-name">ExQcomboBox</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnBottomClear_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//设置富文本的编辑器(plainTextEdit)只可读</span>
<span class="token keyword">void</span> <span class="token class-name">ExQcomboBox</span><span class="token double-colon punctuation">::</span><span class="token function">on_checkBoxOnlyRead_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>checkBoxOnlyRead<span class="token operator">-></span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//公共的槽函数区域+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="token comment">//显示当前选中的ComboBox的item项的内容</span>
<span class="token keyword">void</span> <span class="token class-name">ExQcomboBox</span><span class="token double-colon punctuation">::</span><span class="token function">onSelectDisplay</span><span class="token punctuation">(</span>QString str<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString strData <span class="token operator">=</span> ui<span class="token operator">-></span>comBoxRight<span class="token operator">-></span><span class="token function">currentData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 获取当前item的关联数据的内容</span>
    ui<span class="token operator">-></span>labDisplay<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> strData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> strData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a>【QtQlistWidgetEx】</p>
<br>



]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>QFileSystemModel数据模型获取本机文件系统的使用</title>
    <url>/posts/7273b472/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  <code>QFileSystemModel</code>是可<strong>用于访问本机系统的文件系统</strong>的<strong>数据模型</strong>；其的属性和功能的使用介绍；然后写了一个例子，用来实现和验证它的功能的一些属性和功能的用法。这里主要是数据的读取部分是使用到了<code>QFileSystemModel</code>类，然后分别使用<code>QTreeView</code>和<code>QListView</code>和<code>ColumnView</code>和<code>QTableView</code>这四种视图控件来显示。</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191208_233142_5.jpg"/ loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p><strong>相关博客：</strong>  <a href="https://blog.csdn.net/qq_33154343/article/details/103501667">Model-View-Delegate:”模型-视图-代理”的讲解</a></p>
<br>

<h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>   <strong>编程软件：</strong>  <code>Qt 5.9.8，Qt Creator 4.8.2 (Enterprise)</code></p>
<p><strong>编程软件：</strong>  <code>Qt 5.9.8</code>，<code>Qt Creator 4.8.2 (Enterprise)</code></p>
<br>

<h2 id="QFileSystemModel属性："><a href="#QFileSystemModel属性：" class="headerlink" title="QFileSystemModel属性："></a>QFileSystemModel属性：</h2><p> <code>QFileSystemModel</code>是可<strong>用于访问本机系统的文件系统</strong>的<strong>数据模型</strong>；一开始是需要使用设置一个根目录的；</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QString currPath <span class="token operator">=</span> <span class="token class-name">QDir</span><span class="token double-colon punctuation">::</span><span class="token function">currentPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取当前路径</span>
m_model<span class="token operator">-></span><span class="token function">setRootPath</span><span class="token punctuation">(</span>currPath<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//设置根目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>和<code>QFileSystemModel</code>一样，可以获取磁盘文件目录的数据模型的还有<code>QDirModel</code>，但是<code>QFileSystemModel</code>是使用单独的线程来获取目录的文件的结构的，而<code>QDirModel</code>不是采用的单独的线程</p>
<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191208_233142.gif"/ loading="lazy">

<br>

<h2 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h2><p>这个例子，主要是根据<strong>”Mode-View-Delegate（模型-视图-代理）”</strong> 来实现，我会在前面将其仔细的写出来；这个例子得益于Qt自带的这些模型的强大，看起来需要写好多代码，但是实际只需要的代码量不算多，所以这里我就是将实现的部分源码，直接放在下面：</p>
<p><strong>.h</strong>头文件的实现：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXQFILESYSTEMMODEL_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXQFILESYSTEMMODEL_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMainWindow></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QLabel></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QCheckBox></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QFileSystemModel></span></span>

<span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span>
<span class="token keyword">class</span> <span class="token class-name">ExQFileSystemModel</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">ExQFileSystemModel</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span>
<span class="token punctuation">&#123;</span>
    Q_OBJECT

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">ExQFileSystemModel</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">ExQFileSystemModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//初始化，以及初始化状态栏</span>

<span class="token keyword">private</span> slots<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">on_treeView_clicked</span><span class="token punctuation">(</span><span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//单击treeView，会在状态栏显示当前节点的信息</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    Ui<span class="token double-colon punctuation">::</span>ExQFileSystemModel <span class="token operator">*</span>ui<span class="token punctuation">;</span>

    QLabel<span class="token operator">*</span> m_labFileName<span class="token punctuation">;</span>       <span class="token comment">//文件名</span>
    QLabel<span class="token operator">*</span> m_labFileSize<span class="token punctuation">;</span>       <span class="token comment">//文件大小</span>
    QLabel<span class="token operator">*</span> m_labFileType<span class="token punctuation">;</span>       <span class="token comment">//文件类型</span>
    QLabel<span class="token operator">*</span> m_labPath<span class="token punctuation">;</span>           <span class="token comment">//路径</span>
    QCheckBox<span class="token operator">*</span> m_chkBoxIsFile<span class="token punctuation">;</span>   <span class="token comment">//当前是否为文件或文件夹</span>
    QFileSystemModel<span class="token operator">*</span> m_model<span class="token punctuation">;</span>   <span class="token comment">//设置文件系统的模型</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXQFILESYSTEMMODEL_H</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>.cpp文件的实现：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExQFileSystemModel.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExQFileSystemModel.h"</span></span>

<span class="token class-name">ExQFileSystemModel</span><span class="token double-colon punctuation">::</span><span class="token function">ExQFileSystemModel</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>
    <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token double-colon punctuation">::</span>ExQFileSystemModel<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"文件系统模型QFileSystemModel的介绍和使用"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>treeView<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QTreeView<span class="token double-colon punctuation">::</span>clicked<span class="token punctuation">,</span> ui<span class="token operator">-></span>listView<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QListView<span class="token double-colon punctuation">::</span>setRootIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>treeView<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QTreeView<span class="token double-colon punctuation">::</span>clicked<span class="token punctuation">,</span> ui<span class="token operator">-></span>tableView<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QTableView<span class="token double-colon punctuation">::</span>setRootIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">ExQFileSystemModel</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">ExQFileSystemModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//初始化，以及初始化状态栏</span>
<span class="token keyword">void</span> <span class="token class-name">ExQFileSystemModel</span><span class="token double-colon punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//设置数据模型，且加载到各个视图上面</span>
    m_model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QFileSystemModel</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString currPath <span class="token operator">=</span> <span class="token class-name">QDir</span><span class="token double-colon punctuation">::</span><span class="token function">currentPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取当前路径</span>
    m_model<span class="token operator">-></span><span class="token function">setRootPath</span><span class="token punctuation">(</span>currPath<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//设置根目录</span>
    ui<span class="token operator">-></span>treeView<span class="token operator">-></span><span class="token function">setModel</span><span class="token punctuation">(</span>m_model<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//设置数据模型</span>
    ui<span class="token operator">-></span>listView<span class="token operator">-></span><span class="token function">setModel</span><span class="token punctuation">(</span>m_model<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>tableView<span class="token operator">-></span><span class="token function">setModel</span><span class="token punctuation">(</span>m_model<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>columnView<span class="token operator">-></span><span class="token function">setModel</span><span class="token punctuation">(</span>m_model<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//初始化状态栏</span>
    m_labFileName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"名称："</span><span class="token punctuation">,</span> ui<span class="token operator">-></span>statusBar<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labFileName<span class="token operator">-></span><span class="token function">setMinimumWidth</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labFileSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"大小："</span><span class="token punctuation">,</span> ui<span class="token operator">-></span>statusBar<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labFileSize<span class="token operator">-></span><span class="token function">setFixedWidth</span><span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labFileType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"类型："</span><span class="token punctuation">,</span> ui<span class="token operator">-></span>statusBar<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labFileType<span class="token operator">-></span><span class="token function">setFixedWidth</span><span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"路径："</span> <span class="token operator">+</span> currPath<span class="token punctuation">,</span> ui<span class="token operator">-></span>statusBar<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_chkBoxIsFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QCheckBox</span><span class="token punctuation">(</span><span class="token string">"当前为文件夹"</span><span class="token punctuation">,</span> ui<span class="token operator">-></span>statusBar<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_chkBoxIsFile<span class="token operator">-></span><span class="token function">setFixedWidth</span><span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//各种QLable添加到状态栏</span>
    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labFileSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labFileType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_chkBoxIsFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//单击treeView，会在状态栏显示当前节点的信息</span>
<span class="token keyword">void</span> <span class="token class-name">ExQFileSystemModel</span><span class="token double-colon punctuation">::</span><span class="token function">on_treeView_clicked</span><span class="token punctuation">(</span><span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_chkBoxIsFile<span class="token operator">-></span><span class="token function">setChecked</span><span class="token punctuation">(</span>m_model<span class="token operator">-></span><span class="token function">isDir</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//是否是目录</span>
    m_labFileName<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"名称："</span> <span class="token operator">+</span> m_model<span class="token operator">-></span><span class="token function">fileName</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//文件名称</span>
    <span class="token keyword">double</span> size <span class="token operator">=</span> m_model<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024.0</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> <span class="token number">1024</span><span class="token punctuation">)</span>
        m_labFileSize<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"类型："</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">number</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token char">'f'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"KB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">&lt;=</span> size <span class="token operator">&amp;&amp;</span> size <span class="token operator">&lt;</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span>
        m_labFileSize<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"类型："</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">number</span><span class="token punctuation">(</span>size <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token char">'f'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"MB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        m_labFileSize<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"类型："</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">number</span><span class="token punctuation">(</span>size <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">'f'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"GB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_labFileType<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>m_model<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labPath<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>m_model<span class="token operator">-></span><span class="token function">filePath</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a>【QtQFileSystemModelEx】</p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>QNetworkAccessManager，QNetworkReply，QNetworkRequest实现高层网络的操作http</title>
    <url>/posts/9b0e3e4b/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  了解<code>QNetworkAccessManager</code>&#x2F;<code>QNetworkReply</code>&#x2F;<code>QNetworkRequest</code>实现高层网络的操作<code>http</code>，书写一个简单地例子；然后写了一个小的 <strong>Qt</strong>例子，用来实现和验证它的空间的一些属性和功能的用法。</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191230_223624_mark.png"/ loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><p><strong>编程环境：</strong>  <code>MacOS 10.14.6 (18G103)</code>   <strong>编程软件：</strong> <code>Qt 5.9.8</code>， <code>Qt Creator 4.8.2</code></p>
<br>

<h2 id="http请求以及应答："><a href="#http请求以及应答：" class="headerlink" title="http请求以及应答："></a>http请求以及应答：</h2><p>将上面的三个类进行一个关系图的梳理，可以得到如下如图，看到网络上面都是一些基本介绍不全，连一个图都没有，理解起来会比较抽象，所以这里画上一个图帮助大家理解他们三者之间的关系：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191230_225736_mark.png"/ loading="lazy">



<h3 id="QNetworkRequest："><a href="#QNetworkRequest：" class="headerlink" title="QNetworkRequest："></a>QNetworkRequest：</h3><p><code>QNetworkRequest</code>通过一个URL地址发送网络请求协议请求，也保存网络请求的信息，目前是支持HTTP，FTP，和局部的URLs的下载和上传；</p>
<br>

<h3 id="QNetworkAccessManager："><a href="#QNetworkAccessManager：" class="headerlink" title="QNetworkAccessManager："></a>QNetworkAccessManager：</h3><p><code>QNetworkAccessManager</code>类用于协调网络操作，在<code>QNetworkRequest</code>发送一个网络请求之后，<code>QNetworkAccessManager</code>类负责发送网络请求，创建网络响应。</p>
<br>

<h3 id="QNetworkReply："><a href="#QNetworkReply：" class="headerlink" title="QNetworkReply："></a>QNetworkReply：</h3><p><code>QNetworkReply</code>类表示网络请求的响应。由<code>QNetworkAccessManager</code>在发送一个网络请求后创建一个网络响应；<code>QNetworkReply</code>提供信号finish(), readyRead(), downloadProgress()可以监测网络执行的情况，执行响应的操作。其<code>QNetworkReply</code>也是<code>QIODevice</code>的子类，所以<code>QNetworkReply</code>支持流读写功能，也支持异步或者同步的工作模式。</p>
<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>这里先放一张运行效果图：</p>
<p>此例子下载的是qtcretor的校验文件.txt；其中若是将下载链接替换为QtCreator的下载·连接（本是想下载exe、dmg文件的）；但是却会发现下载不是预料中，而是另外一个文件，指向另外的一个真实地址的下载文件；但是浏览器可以识别们直接跳转下载之后的地址，但若是这个程序想要直接下载从定向的文件的真实地址的文件，就需要再次做处理。</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191230_224505.gif"/ loading="lazy">

<br>

<h2 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h2><p>其中核心部分的源码，重点和一些难点以及需要注意的一些地方，贴出来如下：</p>
<p>其中.h头文件源码：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXHTTP_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXHTTP_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMainWindow></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QNetworkAccessManager></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QNetworkReply></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QFile></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QUrl></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QDir></span></span>

<span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span>
<span class="token keyword">class</span> <span class="token class-name">ExHttp</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">ExHttp</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span>
<span class="token punctuation">&#123;</span>
    Q_OBJECT

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">ExHttp</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">ExHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> slots<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">on_btnDown_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//下载文件</span>
    <span class="token keyword">void</span> <span class="token function">on_btnFile_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//默认的保存路径</span>
    <span class="token keyword">void</span> <span class="token function">on_lineEditUrl_textChanged</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">onFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//网络响应结束</span>
    <span class="token keyword">void</span> <span class="token function">onReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//读取下载的数据</span>
    <span class="token keyword">void</span> <span class="token function">onDownloadProgress</span><span class="token punctuation">(</span>qint64 bytesRea<span class="token punctuation">,</span> qint64 totalBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//下载进程</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    Ui<span class="token double-colon punctuation">::</span>ExHttp <span class="token operator">*</span>ui<span class="token punctuation">;</span>

    QNetworkAccessManager<span class="token operator">*</span> m_networkManager<span class="token punctuation">;</span>   <span class="token comment">//网络管理</span>
    QNetworkReply<span class="token operator">*</span> m_reply<span class="token punctuation">;</span>                    <span class="token comment">//网络响应</span>
    QFile<span class="token operator">*</span> m_file<span class="token punctuation">;</span>                             <span class="token comment">//下载保存的临时文件</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXHTTP_H</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>其中.cpp源文件源码：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExHttp.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExHttp.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMessageBox></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QDir></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QDesktopServices></span></span>

<span class="token class-name">ExHttp</span><span class="token double-colon punctuation">::</span><span class="token function">ExHttp</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>
    <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token double-colon punctuation">::</span>ExHttp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token string">"QNetworkAccessManager 网络管理使用 Http 协议下载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_networkManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QNetworkAccessManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_reply <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    m_file <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">ExHttp</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">ExHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//下载文件</span>
<span class="token keyword">void</span> <span class="token class-name">ExHttp</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnDown_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString urlSpec <span class="token operator">=</span> ui<span class="token operator">-></span>lineEditUrl<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trimmed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//去掉字符串的首尾的空格</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>urlSpec<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> <span class="token string">"下载地址URL为NULL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    QUrl url <span class="token operator">=</span> <span class="token class-name">QUrl</span><span class="token double-colon punctuation">::</span><span class="token function">fromUserInput</span><span class="token punctuation">(</span>urlSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>url<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"无效URL: %1 \n 错误信息: %2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>urlSpec<span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">errorString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    QString dir <span class="token operator">=</span> ui<span class="token operator">-></span>lineEditFile<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trimmed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> <span class="token string">"保存地址为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    QString fileFileName <span class="token operator">=</span> dir <span class="token operator">+</span> url<span class="token punctuation">.</span><span class="token function">fileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//文件保存地址 + 文件名</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">QFile</span><span class="token double-colon punctuation">::</span><span class="token function">exists</span><span class="token punctuation">(</span>fileFileName<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token class-name">QFile</span><span class="token double-colon punctuation">::</span><span class="token function">remove</span><span class="token punctuation">(</span>fileFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QFile</span><span class="token punctuation">(</span>fileFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建临时文件</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_file<span class="token operator">-></span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token double-colon punctuation">::</span>WriteOnly<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> <span class="token string">"打开临时文件错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    ui<span class="token operator">-></span>btnDown<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_reply <span class="token operator">=</span> m_networkManager<span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">QNetworkRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//发送get网络请求，创建网络响应</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>m_reply<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">finished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>m_reply<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">readyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>m_reply<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">downloadProgress</span><span class="token punctuation">(</span>qint64<span class="token punctuation">,</span>qint64<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onDownloadProgress</span><span class="token punctuation">(</span>qint64<span class="token punctuation">,</span>qint64<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//默认的保存路径</span>
<span class="token keyword">void</span> <span class="token class-name">ExHttp</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnFile_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString currPath <span class="token operator">=</span> <span class="token class-name">QDir</span><span class="token double-colon punctuation">::</span><span class="token function">currentPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QDir <span class="token function">dir</span><span class="token punctuation">(</span>currPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dir<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">"temp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    ui<span class="token operator">-></span>lineEditFile<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>currPath <span class="token operator">+</span> <span class="token string">"/temp/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//网络响应结束</span>
<span class="token keyword">void</span> <span class="token class-name">ExHttp</span><span class="token double-colon punctuation">::</span><span class="token function">onFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QFileInfo fileInfo<span class="token punctuation">;</span>
    fileInfo<span class="token punctuation">.</span><span class="token function">setFile</span><span class="token punctuation">(</span>m_file<span class="token operator">-></span><span class="token function">fileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_file<span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">delete</span> m_file<span class="token punctuation">;</span>
    m_file <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>

    m_reply<span class="token operator">-></span><span class="token function">deleteLater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_reply <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ui<span class="token operator">-></span>checkBox<span class="token operator">-></span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//勾选了，下载完成之后，打开下载的文件               //absoluteFilePath() 返回包含文件名的绝对路径。</span>
        <span class="token class-name">QDesktopServices</span><span class="token double-colon punctuation">::</span><span class="token function">openUrl</span><span class="token punctuation">(</span><span class="token class-name">QUrl</span><span class="token double-colon punctuation">::</span><span class="token function">fromLocalFile</span><span class="token punctuation">(</span>fileInfo<span class="token punctuation">.</span><span class="token function">absoluteFilePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//使用默认软件的打开下载的文件</span>

    ui<span class="token operator">-></span>btnDown<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//读取下载的数据</span>
<span class="token keyword">void</span> <span class="token class-name">ExHttp</span><span class="token double-colon punctuation">::</span><span class="token function">onReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_file<span class="token operator">-></span><span class="token function">write</span><span class="token punctuation">(</span>m_reply<span class="token operator">-></span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//将返回的数据进行读取，写入到临时文件中</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//下载进程</span>
<span class="token keyword">void</span> <span class="token class-name">ExHttp</span><span class="token double-colon punctuation">::</span><span class="token function">onDownloadProgress</span><span class="token punctuation">(</span>qint64 bytesRea<span class="token punctuation">,</span> qint64 totalBytes<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>progressBar<span class="token operator">-></span><span class="token function">setMaximum</span><span class="token punctuation">(</span>totalBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>progressBar<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span>bytesRea<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExHttp</span><span class="token double-colon punctuation">::</span><span class="token function">on_lineEditUrl_textChanged</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>arg1<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>progressBar<span class="token operator">-></span><span class="token function">setMaximum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>progressBar<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a> 【QtHttpEx】</p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>QPushButton使用从右往左的显示之LayoutDirection</title>
    <url>/posts/68300fb3/</url>
    <content><![CDATA[<p><strong>简介：</strong>  QPushButton使用从右往左的显示控件，设置属性<code>LayoutDirection</code></p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p><strong>编程环境：</strong>  <code>deepin 15.11 x64 专业版 </code>    <strong>Kernel：</strong>  <code>x86_64 Linux 4.15.0-30deepin-generic</code></p>
<br>

<h2 id="QPushButton-使用-从右往左-的文字："><a href="#QPushButton-使用-从右往左-的文字：" class="headerlink" title="QPushButton 使用 从右往左 的文字："></a>QPushButton 使用 从右往左 的文字：</h2><p>在绘画自定义控件<code>QPushButton</code>的时候,发现有一个问题：需要考虑到一些少数地区的人使用的文字,是属于从右往左写,比如说 “阿文”等(忘记是哪一篇文章看到过,说的是有这种文字,反正鹅没有见过,哪一位见过的,贴个图我看一下, 滑稽)~~~</p>
<p>在绘画<code>QPushButton</code>控件时候,我有写类似如下一段代码,专门照顾这这种情况</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>button<span class="token operator">-></span>direction <span class="token operator">==</span> Qt<span class="token double-colon punctuation">::</span>LeftToRight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	textRect<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>rectArrowAndLine<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> frameRadius<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
	textRect<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>rectArrowAndLine<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> frameRadius<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QPushButton <span class="token function">btn2</span><span class="token punctuation">(</span><span class="token string">"abcdefghijk2222220000000022000011111222222a"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>wTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>
btn2<span class="token punctuation">.</span><span class="token function">setLayoutDirection</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>RightToLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设定下拉标志在左边，打开时候是在右边</span>
btn2<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
QMenu<span class="token operator">*</span> menu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QMenu</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>btn2<span class="token punctuation">)</span><span class="token punctuation">;</span>
btn2<span class="token punctuation">.</span><span class="token function">setMenu</span><span class="token punctuation">(</span>menu2<span class="token punctuation">)</span><span class="token punctuation">;</span>
menu2<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token string">"act测试一b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
menu2<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token string">"act测试2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
menu2<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token string">"act测试23"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>实际若是想使用<code>QPushButton</code>,使用如上面代码,可以看到效果(图中为<code>deepin</code>系统的风格中)</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925190005.jpg"/ loading="lazy">

<p>查看效果可知，实际上<code>btn2.setLayoutDirection(Qt::RightToLeft);</code>并不是指文字从右往左书写显示，而是，控件排列顺序是从右往左</p>
]]></content>
      <categories>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>QSlider、QScrollBar、QProgressBar控件的联动</title>
    <url>/posts/9433a2b/</url>
    <content><![CDATA[<p><strong>简介：</strong>  <code>QSlider</code>移动条、<code>QScrollBar</code>滚动条、<code>QProgressBar</code>进度条控件的联动，讲解和的使用</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​		<strong>详情：</strong>  见简介</p>
<br>

<p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p>
<p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p>
<br>

<h2 id="系列博文："><a href="#系列博文：" class="headerlink" title="系列博文："></a>系列博文：</h2><p><strong>比较紧密的关联博文参考：</strong></p>
<ul>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/100944831">滑动条<code>QSlider</code>和<code>QAbstractSlider</code>的介绍和用法</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/101003081"><code>QSlider</code>、<code>QScrollBar</code>、<code>QProgressBar</code>控件的联动</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/101003115">仪表盘<code>QSlider</code>的讲解和使用</a></li>
</ul>
<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>先放一张运行效果</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190918191905.gif"/ loading="lazy">

<br>

<h2 id="继承关系："><a href="#继承关系：" class="headerlink" title="继承关系："></a>继承关系：</h2><p><code>QSlider</code>移动条、<code>QScrollBar</code>滚动条、进度条这三个控件，都是继承于<code>QAbstractSlider</code>类，其中关于<strong>QSlider和QAbstractSlider属性</strong>讲解，参考已经发过的文章<a href="https://blog.csdn.net/qq_33154343/article/details/100944831">https://blog.csdn.net/qq_33154343&#x2F;article&#x2F;details&#x2F;100944831</a> ；关于这几个控件的继承关系如下图：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190918192923.png"/ loading="lazy">

<br>

<h2 id="滚动条QScrollBar："><a href="#滚动条QScrollBar：" class="headerlink" title="滚动条QScrollBar："></a>滚动条QScrollBar：</h2><ul>
<li>QScrollBar 从QAbstractSlider继承而来的，具有QAbstractSlider的基本属性，没有专有属性。</li>
</ul>
<br>

<h2 id="进度条QProgressBar："><a href="#进度条QProgressBar：" class="headerlink" title="进度条QProgressBar："></a>进度条QProgressBar：</h2><ul>
<li>QProgressBar的父类是QWidget，一般用于进度显示，常用属性如下。</li>
</ul>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">minimum</td>
<td align="center">最小值</td>
</tr>
<tr>
<td align="center">maximum</td>
<td align="center">最大值</td>
</tr>
<tr>
<td align="center">value</td>
<td align="center">当前值，可以设定或读取当前值</td>
</tr>
<tr>
<td align="center">textVisible</td>
<td align="center">是否显示文字，文字一般是百分比表示的进度。</td>
</tr>
<tr>
<td align="center">orientation</td>
<td align="center">可以设置为水平或垂直方向。</td>
</tr>
<tr>
<td align="center">format</td>
<td align="center">显示文字的格式，“%p%”显示百分比，“%v”显示当前值，“%m”显示总步数。缺省为“%p%”。</td>
</tr>
</tbody></table>
<br>

<h2 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h2><p>此处实现了，信号于槽函数的<strong>多对一</strong>，从而避免了槽函数的重复写多遍</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//ui->progressBarHor->setOrient1ation(Qt::Horizontal /*(the default)  Qt::Vertical*/);  设置进度条水平或竖直</span>

<span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>sliderHor<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onValChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>scrollBarHor<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onValChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>scrollBarHor<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onValChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>sliderVer<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onValChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>scrollBarVer<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onValChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>progressBarVer<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onValChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>

<span class="token comment">//对应的槽函数</span>
<span class="token keyword">void</span> <span class="token class-name">ExQProgressBar</span><span class="token double-colon punctuation">::</span><span class="token function">onValChange</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>sliderHor<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>scrollBarHor<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>progressBarHor<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>sliderVer<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>scrollBarVer<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>progressBarVer<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a> 【QtQProgressBarEx】</p>
<br>



]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>QString在2,8,10,16进制之间转换</title>
    <url>/posts/75166a24/</url>
    <content><![CDATA[<p><strong>简述：</strong> 初探字符串<code>QString</code>的输入和输出，和数值在2 ／8／10／16<strong>进制</strong>之间相互转换。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​		<strong>详情：</strong>  见简述</p>
<br>

<p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p>
<p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p>
<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190914221639.gif"/ loading="lazy">

<br>

<h2 id="同系列文章："><a href="#同系列文章：" class="headerlink" title="同系列文章："></a>同系列文章：</h2><p><a href="https://blog.csdn.net/qq_33154343/article/details/100860270">QString常用的功能函数的介绍和用法</a> </p>
<br>

<h2 id="字符串QString："><a href="#字符串QString：" class="headerlink" title="字符串QString："></a>字符串QString：</h2><p>字符串有<code>QString</code>， <code>char *</code>, <code>char a[]</code>, <code>string</code>,其中后面三个都是属于c++的，而只有<strong>QString</strong>是属于<strong>Qt</strong>所特有的；<strong>其中QString内部是以utf8存储的</strong>，而c自带的后面三个却不是同样以utf8存储的，所以会经常遇到情况，<strong>乱码原因和解决方法参考：</strong>补充部分的<a href="https://github.com/touwoyimuli/QtExamples">乱码相关</a>的系内文章</p>
<br>

<h2 id="String转化为整-x2F-浮点数："><a href="#String转化为整-x2F-浮点数：" class="headerlink" title="String转化为整&#x2F;浮点数："></a>String转化为整&#x2F;浮点数：</h2><p>下面列举一些比较常用的转换函数:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span>    <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token keyword">bool</span> <span class="token operator">*</span><span class="token operator">*</span>ok<span class="token operator">*</span> <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token keyword">float</span>     <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">toFloat</span><span class="token punctuation">(</span><span class="token keyword">bool</span> <span class="token operator">*</span>ok <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token keyword">int</span>       <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token keyword">bool</span> <span class="token operator">*</span>ok <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">,</span> <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token keyword">long</span>      <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">toLong</span><span class="token punctuation">(</span><span class="token keyword">bool</span> <span class="token operator">*</span>ok <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">,</span> <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
qlonglong <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">toLongLong</span><span class="token punctuation">(</span><span class="token keyword">bool</span> <span class="token operator">*</span>ok <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">,</span> <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token keyword">short</span>     <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">toShort</span><span class="token punctuation">(</span><span class="token keyword">bool</span> <span class="token operator">*</span>ok <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">,</span> <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">const</span>

<span class="token comment">//转换为带u开头的</span>
uint      <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">toUInt</span><span class="token punctuation">(</span><span class="token keyword">bool</span> <span class="token operator">*</span>ok <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">,</span> <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="整-x2F-浮点数转化为String："><a href="#整-x2F-浮点数转化为String：" class="headerlink" title="整&#x2F;浮点数转化为String："></a>整&#x2F;浮点数转化为String：</h2><p>下面列举一些比较常用的转换函数:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span><span class="token keyword">static</span><span class="token punctuation">]</span> QString <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token keyword">double</span> n<span class="token punctuation">,</span> <span class="token keyword">char</span> format <span class="token operator">=</span> <span class="token char">'g'</span><span class="token punctuation">,</span> <span class="token keyword">int</span> precision <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token keyword">static</span><span class="token punctuation">]</span> QString <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">asprintf</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>cformat<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>

QString <span class="token operator">&amp;</span><span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">setNum</span><span class="token punctuation">(</span><span class="token keyword">float</span> n<span class="token punctuation">,</span> <span class="token keyword">char</span> format <span class="token operator">=</span> <span class="token char">'g'</span><span class="token punctuation">,</span> <span class="token keyword">int</span> precision <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中使用如下：</p>
<p>eg:<code>str = QString::number(n, &#39;f&#39;, 2);</code>    其中2为保留小数点后两位</p>
<br>

<h2 id="进制之间的转换："><a href="#进制之间的转换：" class="headerlink" title="进制之间的转换："></a>进制之间的转换：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QString str <span class="token operator">=</span> ui<span class="token operator">-></span>edit2<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> ok<span class="token punctuation">;</span>
<span class="token keyword">int</span> val <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ok<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//获取二进制</span>

str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">setNum</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//显示八进制</span>
ui<span class="token operator">-></span>edit8<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">setNum</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//显示十进制</span>
ui<span class="token operator">-></span>edit10<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">setNum</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//显示十六进制</span>
ui<span class="token operator">-></span>edit16<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a>【QtQStringEx】</p>
<br>





]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>QString常用的功能函数的介绍和用法</title>
    <url>/posts/38c82/</url>
    <content><![CDATA[<p><strong>简介：</strong>  <code>QString</code>常用的功能函数的介绍和用法。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​		<strong>详情：</strong>  见简介</p>
<br>

<p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p>
<p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p>
<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190914233130.gif"/ loading="lazy">

<br>

<h2 id="同系列文章："><a href="#同系列文章：" class="headerlink" title="同系列文章："></a>同系列文章：</h2><p><a href="https://blog.csdn.net/qq_33154343/article/details/100860030"><code>QString</code>在2 ／8／10／16进制之间转换</a> </p>
<br>

<h2 id="QString："><a href="#QString：" class="headerlink" title="QString："></a>QString：</h2><p><code>QString</code>存储字符串采用的是<strong>Unicode</strong>码，每一个字符是一个16位的<code>QChar</code>，而不是8位的<code>char</code>，所以<code>QString</code>处理中文字符没有问题，而且一个汉字算作是一个字符。</p>
<br>

<h2 id="常用函数："><a href="#常用函数：" class="headerlink" title="常用函数："></a>常用函数：</h2><p><font color=#70AD47 size=4 face="幼圆"><strong>注意：QString只要赋值，就在字符串的末尾自动加上“\0”</strong></font></p>
<h3 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关:"></a>字符串相关:</h3><ul>
<li>append()        在字符串后面添加字符串</li>
<li>perpend()      在字符串的前面添加字符串</li>
<li>toUpper()      将字符串的字母全部转换为大写字母</li>
<li>toLower()      将字符串的字母全部转换为大写字母</li>
<li>left()               返回包含字符串中最左n个字符的子字符串。如果n大于或等于size()或小于零，则返回整个字符串。</li>
<li>right()            返回包含字符串中最右n个字符的子字符串。如果n大于或等于size()或小于零，则返回整个字符串。</li>
<li>section()        从字符串中提取以“子字符串”作为分隔符，从start到end端的字符串</li>
<li>simplified()   不仅去掉字符串的所首尾空格，中间连续的空格也用一个空格替换</li>
<li>trimmed        去掉字符串首尾的空格</li>
</ul>
<br>

<h3 id="数字相关："><a href="#数字相关：" class="headerlink" title="数字相关："></a>数字相关：</h3><ul>
<li><p>count()               返回字符串的字符个数。函数同size()、同length()。(字符串中若有汉字，一个汉字算一个字符）</p>
</li>
<li><p>size()                  同上</p>
</li>
<li><p>indexOf()           在字符串中查找子字符串str出现的位置。（Qt::CaseSensitivity cs 参数指定是否区分大小写）</p>
</li>
<li><p>lastIndexOf()    在字符串中查找子字符串str最后出现的位置</p>
</li>
</ul>
<br>

<h3 id="逻辑判断："><a href="#逻辑判断：" class="headerlink" title="逻辑判断："></a>逻辑判断：</h3><ul>
<li>startsWith()     判断是否以某个字符串开头</li>
<li>endsWith()      判断是否以某个字符串结尾</li>
<li>contains()        判断某个字符串中是否包含某个字符串</li>
<li>isNull()             判断字符串是否为空。（若是只有“\0”，isNull返回false； 只有未赋值的字符串，isNull返回true）</li>
<li>isEmpty()         判断字符串是否为空.（若是只有“\0”，isEmpty返回true）</li>
</ul>
<p><font color=#FE7207  size=4 face="幼圆"><strong>isNull()和isEmpty()的区别：</strong></font></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span>和<span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
两个函数都判读字符串是否为空，但是稍有差别。如果一个空字符串，只有“<span class="token number">0</span>”，isNull<span class="token punctuation">)</span>
返回<span class="token boolean">false</span>，而isEmpty0返回<span class="token boolean">true</span>；只有未赋值的字符串，isNull（）才返回<span class="token boolean">true</span>。
QString strl<span class="token punctuation">,</span>str2<span class="token operator">=</span><span class="token string">""</span>；
N<span class="token operator">=</span>str1<span class="token punctuation">.</span><span class="token function">isNul1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；     <span class="token comment">//N=true未赋值字符串变量</span>
N<span class="token operator">=</span>str2<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；     <span class="token comment">//N=false只有“\\0”的字符串，也不是Nul1</span>
N<span class="token operator">=</span>strl<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//N=true</span>
N<span class="token operator">=</span>str2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；    <span class="token comment">//N=true</span>

QString只要赋值，就在字符串的末尾自动加上“<span class="token number">10</span>”，所以，如果只是要判断字符串内容是
否为空，常用isEmptyO。
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a> 【QtQStringFunEx】</p>
<br>


]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>QStyle/DTK重绘Qt-GUI已有控件,举例QScrollBar</title>
    <url>/posts/9514c440/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　使用 QStyle &#x2F; DTK 来实现重绘 Qt-GUI 已有的控件，此处以重绘 QScrollBar 举例。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>MacOS10.14 (18G103)</code> 📎 <code>Qt 5.12.6</code></p>
<p>　　<strong>💻：</strong>  <code>win10 x64 专业版 (1803)</code> 📎 <code>Qt 5.9.8</code></p>
<p>　　<strong>💻：</strong>  <code>uos20 amd64 专业版 (Kernel 4.19)</code> 📎 <code>Qt 5.11.3</code></p>
<br>

<h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p>　　由<a href="https://blog.csdn.net/qq_33154343/article/details/104367878">上一篇</a> 的文章已经可理解 <code>QStyle</code> 、 <code>QCommonStyle</code> 和自定义的 <code>MyStyle</code> 三者之间的关系；对于基础的风格控件也有所学习了。本篇承接上文，开始尝试，自己绘画一个新的风格（样式）的控件，为了本篇的简洁，这里就以 <code>QScrollBar</code> 为例。</p>
<br>

<h3 id="查看-QScrollBar-的构成，如何查找源码？"><a href="#查看-QScrollBar-的构成，如何查找源码？" class="headerlink" title="查看 QScrollBar 的构成，如何查找源码？"></a>查看 QScrollBar 的构成，如何查找源码？</h3><p>　　想要绘画某一个 GUI 控件，必须了解它是由那些小部件组成的，换言之，在前面的重载函数里面，需要的指导重绘哪一些枚举参数❓</p>
<p>　　此处提供另外一篇比的先写的重绘文章: <a href="https://blog.csdn.net/qq_33154343/article/details/100943187">QStyle自定义重绘QScrollBar</a>，里面是从另外一个角度来解析 <code>QScrollBar</code> 控件的构成；可以结合着来看；</p>
<br>

<h3 id="解析绘画控件的步骤："><a href="#解析绘画控件的步骤：" class="headerlink" title="解析绘画控件的步骤："></a><strong>解析绘画控件的步骤：</strong></h3><ol>
<li><p><strong>打开 QtCreator 此 IDE，在自己的左侧的工程项目中，再打开qt-core–gui-base 源码的工程，便于查找和🔍所需的源码</strong></p>
<p><code>src</code> 工程打开，只是为了便于在下面搜索框里面查找需要的 qt 源码文件所在的路径在 <code>/Users/muli/Qt5.12.6/5.12.6/Src/qtbase/src/src.pro</code>；</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200227_142504.png"  / loading="lazy">



<p>win 系统下的路径也差不多；Linux 系统路径则是在自定义安装 qt 源码地方（<strong>命令安装</strong>）或者默认安装的地方（***.run安装** ）。</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200227_142952.png" width="50%" / loading="lazy">

<br>
</li>
<li><p><strong>搜索 qcommonstyle.cpp 这个文件，查看缺省风格是如何写成的</strong></p>
<p>通过查看 qcommonstyle.cpp 这个文件，来🔍  <code>QScrollBar</code> 在默认缺省风格下面的的绘画方式；其中参考最多的就是 <code>qcommonstyle</code> 风格，在某些情况下也可以参考 <code>qfusionstyle</code> 风格的绘画思路；两者可以思路互相印衬，得到聊暗花明又一村的柑橘；</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200227_143821.png" width="50%" / loading="lazy">

<br>
</li>
<li><p><strong>提取关键元素枚举</strong></p>
<p>打开上面的文件，点击 command + F 进行🔍 <code>ScrooBar</code> 这个单词，将所有的枚举都绘画记录下来；用来重构这个元素</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200227_144929.png" width="80%" / loading="lazy">



<p>找到对应的 </p>
<p>CC_ScrollBar， CC_ScrollBar， SC_ScrollBarSubLine ， SC_ScrollBarAddLine， SC_ScrollBarSubPage， SC_ScrollBarAddPage， SC_ScrollBarGroove， SC_ScrollBarSlider，PM_ScrollBarSliderMin， PM_ScrollBarExtent， SH_ScrollBar_ContextMenu， SH_ScrollBar_RollBetweenButtons， SH_ScrollBar_Transient</p>
<p>这些枚举；初看，这么多的枚举貌似还挺多（划掉貌似）；可以按照你想完成的工足量，其中有些是重要的，属于必不可少；有些是不那么重要的，可以先不用重绘使用到的；<strong>要能按照 CC_ ，SC_， 来组装该控件，组装完成发现各自带边的部分如下；</strong> </p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190910224200.png" style="zoom: 67%;" / loading="lazy">

<br>
</li>
<li><p><strong>找到对应的重载函数，开始重写此虚函数</strong></p>
<p>为了比较简单的写出这个🌰，简化处理；只需重新绘画里面的五个枚举，顺着 <code>CE_</code> 的作为参数，逆向推函数，发现需要只要调用 <code>drawControl()</code> 即可。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">drawControl</span><span class="token punctuation">(</span>ControlElement element<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<br>
</li>
<li><p><strong>按照 风格 + 需求，来进行绘画</strong></p>
<p>这里重绘代码如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">MyStyle</span><span class="token double-colon punctuation">::</span><span class="token function">drawControl</span><span class="token punctuation">(</span>QStyle<span class="token double-colon punctuation">::</span>ControlElement element<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    p<span class="token operator">-></span><span class="token function">setRenderHint</span><span class="token punctuation">(</span>QPainter<span class="token double-colon punctuation">::</span>Antialiasing<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> CE_ScrollBarAddPage<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//增加滑槽</span>
        p<span class="token operator">-></span><span class="token function">fillRect</span><span class="token punctuation">(</span>opt<span class="token operator">-></span>rect<span class="token punctuation">,</span> <span class="token function">QColor</span><span class="token punctuation">(</span><span class="token string">"#bfe9ff"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">case</span> CE_ScrollBarSubPage<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//减少滑槽</span>
        p<span class="token operator">-></span><span class="token function">fillRect</span><span class="token punctuation">(</span>opt<span class="token operator">-></span>rect<span class="token punctuation">,</span> <span class="token function">QColor</span><span class="token punctuation">(</span><span class="token string">"#EC6EAD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">case</span> CE_ScrollBarSlider<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//滑块</span>
        p<span class="token operator">-></span><span class="token function">fillRect</span><span class="token punctuation">(</span>opt<span class="token operator">-></span>rect<span class="token punctuation">,</span> <span class="token function">QColor</span><span class="token punctuation">(</span><span class="token string">"#A8BFFF"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">case</span> CE_ScrollBarAddLine<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//增加按钮</span>
        p<span class="token operator">-></span><span class="token function">fillRect</span><span class="token punctuation">(</span>opt<span class="token operator">-></span>rect<span class="token punctuation">,</span> <span class="token function">QColor</span><span class="token punctuation">(</span><span class="token string">"#21d4fd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">case</span> CE_ScrollBarSubLine<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//减少按钮</span>
        p<span class="token operator">-></span><span class="token function">fillRect</span><span class="token punctuation">(</span>opt<span class="token operator">-></span>rect<span class="token punctuation">,</span> <span class="token function">QColor</span><span class="token punctuation">(</span><span class="token string">"#de6161"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token class-name">QCommonStyle</span><span class="token double-colon punctuation">::</span><span class="token function">drawControl</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> p<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>
</li>
<li><p><strong>查看最终效果，若是成功，则项目成功结束🔚</strong></p>
<p>这里这里最后的效果如下，其同一个控件在 MacOS 和 Linux(uos20) 下面的表现样式是一样的；可以见其已经绘画成功.</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/Snip20200227_152044.png" width="100%" / loading="lazy"></li>
</ol>
<h3 id="自定义风格完整代码如下："><a href="#自定义风格完整代码如下：" class="headerlink" title="自定义风格完整代码如下："></a>自定义风格完整代码如下：</h3><p>　　回顾一下代码和绘画流程；创建一个自定义的风格 <code>class MyStyle : public QCommonStyle</code>，其中选择自己需要的继承的函数进行重写；然后重写 虚函数。</p>
<p><strong>MyStyle：MyStyle 的完整声明：</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">MYSTYLE_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MYSTYLE_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QCommonStyle></span></span>

<span class="token keyword">class</span> <span class="token class-name">MyStyle</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QCommonStyle</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MyStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// QStyle interface</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">drawControl</span><span class="token punctuation">(</span>ControlElement element<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// MYSTYLE_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="项目分析："><a href="#项目分析：" class="headerlink" title="项目分析："></a>项目分析：</h3><p>　　这里，对整个简单的项目进行分析一下，为后面绘画一个复杂的 Qt 没有的控件做准备，也就是绘画自定义控件；在这里再次梳理一下，下一篇提升就是在此文章基础上进行绘画重写。</p>
<ul>
<li><strong>QtStyle</strong><ul>
<li><strong>QStyleEx.pro：</strong> 用 qmake 来生成的 makefile 文件的配置文件</li>
<li>myshtyle.h: 自定义风格的类的声明</li>
<li>myshtyle.cpp: 自定义风格的类的定义</li>
<li>widget.h: 用来衬托 <code>ScrollBar</code> 的背景控件类的声明</li>
<li>widget.cpp: 用来衬托 <code>ScrollBar</code> 的背景控件类的定义</li>
<li>main.cpp: 整个项目启动的入口</li>
</ul>
</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200227_153044.png" width="65%" / loading="lazy">

<br>

<h3 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h3><p><a href="https://github.com/xmuli/QtExamples/tree/master/QtMyStyleEx/QtExample02/QtStyleEx">QtExample02</a></p>
<br>

<h3 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章:"></a>系列文章:</h3><ol>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/104367878">QStyle设置界面的外观和QCommonStyle继承关系图讲解和使用</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/104537944">QStyle&#x2F;DTK重绘Qt-GUI已有控件,举例QScrollBar</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/104987446">QStyle&#x2F;DTK重绘自定义需求控件,举例MySwitchButton</a></li>
</ol>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>QStyle/DTK重绘自定义需求控件,举例MySwitchButton</title>
    <url>/posts/70928d69/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　使用 QStyle &#x2F; DTK 来实现重绘自定义需求控件（Qt-GUI 没有的），此处以重绘 ios 的控件 MySwitchButton 举例。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos 20 amd64 </code> 📎 <code>Qt 5.11.3</code></p>
<p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 </code> 📎 <code>Qt 5.12.6</code></p>
<p>　　<strong>💻：</strong>  <code>win10 x64 </code> 📎 <code>Qt 5.9.8</code></p>
<br>

<h3 id="背景铺垫："><a href="#背景铺垫：" class="headerlink" title="背景铺垫："></a>背景铺垫：</h3><p>​    由<a href="https://blog.csdn.net/qq_33154343/article/details/104367878">上上一篇</a> 的文章，已理解 <code>QStyle</code> 、 <code>QCommonStyle</code> 和自定义的 <code>MyStyle</code> 三者的关系；对基础的风格控件也有所学习了；</p>
<p>​    和<a href="https://blog.csdn.net/qq_33154343/article/details/104537944">上一篇</a> 文章中，已理解如何使用 <code>MyStyle</code> 来绘画 Qt 自带的控件的风格，也有一次的实战重绘 <code>QCommonStyle</code> 里面的虚函数的项目；</p>
<p>​    在此，本文收尾，分析开源社区精神小伙们，它们是怎么对 DTK 的库进行重绘控件的。想到的新学习的框架，良心说，<strong>开源，真的能够学习到很多知识。</strong> 本篇重点介绍，如何创建一个新的自定义的控件，并且对其进行绘画，写一个简单工程，进行示范。</p>
<br>

<h3 id="需求分析："><a href="#需求分析：" class="headerlink" title="需求分析："></a>需求分析：</h3><p>​    因 <code>DTk/QStyle</code> 绘画的这个系列的完整性，得自己想一个比较好的控件啊，挠了挠头，iPhone 给了我感觉。<code>SwitchButton</code> 控件是 ios &#x2F; Andiroad 📱的控件，不属于 PC 的控件，更非是 Qt 自带的一个控件；用电脑进行绘画，正好是妙哉。其 UI 原型图如下；功能就是点击一下，就会在 开&#x2F;关 状态之间来回切换，且展示不同的颜色背景。</p>
  <img src='https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200320_122334b.png' width="30%"/ loading="lazy">

<br>

<h3 id="工程文件分析："><a href="#工程文件分析：" class="headerlink" title="工程文件分析："></a>工程文件分析：</h3><p>​    这里分析下，整个项目的构成组成；这里还是再次简单梳理一番：</p>
 <img src='https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200320_122343a.png' width="50%"/ loading="lazy">

<ul>
<li><font color=#FE7207  size=4 face="Courier">QtStyleEx:</font><ul>
<li><font color=#FE7207  size=4 face="Courier">main.cpp:</font> 程序的总入口</li>
<li><font color=#FE7207  size=4 face="Courier">widget.h:</font> 显示 GUI 控件的背景窗口，继承于 QWidget 的<strong>类的声明</strong> </li>
<li><font color=#FE7207  size=4 face="Courier">widget.cpp:</font> 显示 GUI 控件的背景窗口，继承于 QWidget 的<strong>类定义</strong> </li>
<li><font color=#FE7207  size=4 face="Courier">mystyle.h:</font> 自定义风格（不属于 OS 自带风格）<strong>类的声明</strong> </li>
<li><font color=#FE7207  size=4 face="Courier">mystyle.cpp:</font> 自定义风格（不属于 OS 自带风格）的<strong>类定义</strong> </li>
<li><font color=#FE7207  size=4 face="Courier">myswitchbutton.h：</font> 自定义需求的控件<strong>类的声明</strong> </li>
<li><font color=#FE7207  size=4 face="Courier">myswitchbutton_p.h:</font> 自定义需求的控件类<strong>的数据类 Private 的声明</strong> </li>
<li><font color=#FE7207  size=4 face="Courier">myswitchbutton.cpp:</font> 自定义需求的控件<strong>类和变量 Private 类的实现</strong></li>
</ul>
</li>
</ul>
<p>其中主要涉及的几个类如下：</p>
<br>

<h3 id="整理所有类的思维导图："><a href="#整理所有类的思维导图：" class="headerlink" title="整理所有类的思维导图："></a>整理所有类的思维导图：</h3><p>​    这上面的这些问题，顺其自然的找到它们对应的类。按照各自的功能划分，可以得到如下的思维导图。提纲挈领，写代码不会迷失在细节👩‍💻；</p>
 <img src='https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/axsrJt.png' width="100%"/ loading="lazy">

<br>

<h3 id="实现流程图："><a href="#实现流程图：" class="headerlink" title="实现流程图："></a>实现流程图：</h3><p>​    有了 UI 设计图，和熟悉的功能，已经进行重绘控件；通过以上的代码逻辑流程，复盘一下 DTK 绘画自定义需求的源码思路。将自己的逻辑插入到 Qt 原本的绘画架构中，利用已经有的 QStyle 架构来进行绘画。梳理出来的流程图如下。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200320_115759.png" width="100%"/ loading="lazy">

<br>

<h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><p>​    其中代码实现的地方，有几处是的设计很精妙，可能我是才眼界初看开，很有必要的🌶出来单独讲；看着代码来实现复现一个功能很容易，属于借鉴技巧与学习，但容易让自己上钩思想懒惰，不去思考原理。有一些细节是含糊过去的地方；在正式实现之前，<strong>主要解决的问题有如下难点：</strong></p>
<ul>
<li>如何创建 MySwitchButton 控件？ 需要继承哪些类❓<ul>
<li>控件矩形大小❓</li>
<li>控件的 UI 样式❓</li>
<li>控件如何拆分部件 MyStyle::CE_SwitchButton ❓</li>
</ul>
</li>
<li>如何进入到绘画步骤中❓<ul>
<li>QPainter 如何绘画该小部件？进入到控件的 paintEvent()函数❓</li>
</ul>
</li>
<li>MyStyle 如何区分 Qt 原生控件和自定义的控件❓<ul>
<li>如何增加自定义枚举 CE_ , SE_ , PM_ , PE_ 等❓</li>
<li>如何区分重绘画的控件是 Qt 自带的还是自定义枚举元素❓</li>
</ul>
</li>
<li>以及 MyStyle 如何调用这些重载的函数❓</li>
</ul>
<p>​    上面👆这些想的清楚了，那么这个架构也清楚了很多。也知晓了绘画的流程。</p>
<br>

<h4 id="添加自定义的枚举："><a href="#添加自定义的枚举：" class="headerlink" title="添加自定义的枚举："></a>添加自定义的枚举：</h4><p>​    这里新增加的枚举，是属于 MyStyle:: , 而非 QStyle:: 范围。</p>
<p>且要从 <code>CE_CustomBase</code> &#x3D; <code>QStyle::CE_CustomBase + 0xf00000</code> 开始，新的枚举按照 int 类型依次加一。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyStyle</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QCommonStyle</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">//这里新增加的枚举，是属于 MyStyle:: , 而非 QStyle:: 范围</span>
    <span class="token keyword">enum</span> <span class="token class-name">ControlElement</span> <span class="token punctuation">&#123;</span>
        CE_SwitchButton <span class="token operator">=</span> QStyle<span class="token double-colon punctuation">::</span>CE_CustomBase <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                   <span class="token comment">//switchButton 控件</span>
        CE_CustomBase <span class="token operator">=</span> QStyle<span class="token double-colon punctuation">::</span>CE_CustomBase <span class="token operator">+</span> <span class="token number">0xf00000</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="重写-QCommonStyle-的虚函数："><a href="#重写-QCommonStyle-的虚函数：" class="headerlink" title="重写 QCommonStyle 的虚函数："></a>重写 QCommonStyle 的虚函数：</h4><p>​    这里的快捷方式创建的枚举,都是不带QStyle::， 但是快捷方式的定义是带是QStyle:: , 此处声明的地方必须加上 QStyle::，后面改写更复杂的得写上MyStyle:: 因添加自定义的枚举。</p>
<p>​    这里 override 的虚函数，只能够调用旧有的  QStyle:: 的函数。主要用来绘画 Qt 、 自定义新增 的控件枚举。</p>
<p>​    后面改写更复杂的得写上MyStyle:: 因添加自定义的枚举  </p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyStyle</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QCommonStyle</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">drawControl</span><span class="token punctuation">(</span>QStyle<span class="token double-colon punctuation">::</span>ControlElement element<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> QRect <span class="token function">subElementRect</span><span class="token punctuation">(</span>QStyle<span class="token double-colon punctuation">::</span>SubElement subElement<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>option<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>widget<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">drawComplexControl</span><span class="token punctuation">(</span>QStyle<span class="token double-colon punctuation">::</span>ComplexControl cc<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOptionComplex <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>widget<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> QSize <span class="token function">sizeFromContents</span><span class="token punctuation">(</span>QStyle<span class="token double-colon punctuation">::</span>ContentsType ct<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> <span class="token keyword">const</span> QSize <span class="token operator">&amp;</span>contentsSize<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">polish</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>widget<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">unpolish</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>widget<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="内敛函数调用-MyStyle-强制转换为-QStyle-调用："><a href="#内敛函数调用-MyStyle-强制转换为-QStyle-调用：" class="headerlink" title="内敛函数调用 MyStyle:: 强制转换为 QStyle:: 调用："></a>内敛函数调用 MyStyle:: 强制转换为 QStyle:: 调用：</h4><p>​    新增加的枚举属 MyStyle:: , 之能够在此内敛函数里面调用；主要用来绘画 自定义新增 的控件枚举 –&gt; 实际调用在 下面的 virtual 里面绘画。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyStyle</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QCommonStyle</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>  <span class="token comment">//声明如下：</span>
    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">drawPrimitive</span><span class="token punctuation">(</span>MyStyle<span class="token double-colon punctuation">::</span>PrimitiveElement pe<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">drawControl</span><span class="token punctuation">(</span>MyStyle<span class="token double-colon punctuation">::</span>ControlElement element<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//定义如下：</span>
<span class="token keyword">void</span> <span class="token class-name">MyStyle</span><span class="token double-colon punctuation">::</span><span class="token function">drawPrimitive</span><span class="token punctuation">(</span>MyStyle<span class="token double-colon punctuation">::</span>PrimitiveElement pe<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">drawPrimitive</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>QStyle<span class="token double-colon punctuation">::</span>PrimitiveElement<span class="token operator">></span></span></span><span class="token punctuation">(</span>pe<span class="token punctuation">)</span><span class="token punctuation">,</span> opt<span class="token punctuation">,</span> p<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">MyStyle</span><span class="token double-colon punctuation">::</span><span class="token function">drawControl</span><span class="token punctuation">(</span>MyStyle<span class="token double-colon punctuation">::</span>ControlElement element<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">drawControl</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>QStyle<span class="token double-colon punctuation">::</span>ControlElement<span class="token operator">></span></span></span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span> opt<span class="token punctuation">,</span> p<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="设计静态函数同名接口让-MyStylrHelp-调用："><a href="#设计静态函数同名接口让-MyStylrHelp-调用：" class="headerlink" title="设计静态函数同名接口让 MyStylrHelp 调用："></a>设计静态函数同名接口让 MyStylrHelp 调用：</h4><p>​    static 函数，供 MyStylrHelp 调用 [用来绘画自增加的控件枚举]。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyStyle</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QCommonStyle</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>  <span class="token comment">//声明如下：</span>
  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">drawPrimitive</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStyle <span class="token operator">*</span>style<span class="token punctuation">,</span> MyStyle<span class="token double-colon punctuation">::</span>PrimitiveElement pe<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">drawControl</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStyle <span class="token operator">*</span>style<span class="token punctuation">,</span> MyStyle<span class="token double-colon punctuation">::</span>ControlElement element<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//定义如下：</span>
<span class="token keyword">void</span> <span class="token class-name">MyStyle</span><span class="token double-colon punctuation">::</span><span class="token function">drawPrimitive</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStyle <span class="token operator">*</span>style<span class="token punctuation">,</span> MyStyle<span class="token double-colon punctuation">::</span>PrimitiveElement pe<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
		<span class="token comment">//没有使用到，因为具体的设计因为每个人的思路设计不同，决定的具体的绘画地方也不一样；这里我是放到 重写的虚函数里面，和绘画 Qt 的虚函数的框架里面一起绘画</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="辅助类-MyStyleHelp-，-区分绘画控件："><a href="#辅助类-MyStyleHelp-，-区分绘画控件：" class="headerlink" title="辅助类 MyStyleHelp ， 区分绘画控件："></a>辅助类 MyStyleHelp ， 区分绘画控件：</h4><p>​    辅助类 MyStyleHelp ， 帮助区分绘画到底是绘画 MyStyle::PrimitiveElement 还是，它的类的实现如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyStyleHelp</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">inline</span> <span class="token function">MyStyleHelp</span> <span class="token punctuation">(</span><span class="token keyword">const</span> QStyle<span class="token operator">*</span> style <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">drawPrimitive</span><span class="token punctuation">(</span>MyStyle<span class="token double-colon punctuation">::</span>PrimitiveElement pe<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">drawControl</span><span class="token punctuation">(</span>MyStyle<span class="token double-colon punctuation">::</span>ControlElement element<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">const</span> QStyle<span class="token operator">*</span> m_qStyle<span class="token punctuation">;</span>
    <span class="token keyword">const</span> MyStyle<span class="token operator">*</span> m_myStyle<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    其中放一个函数的实现，会简单发现这个 三目表达式，很是精华，属于一段点睛之笔；设计上面，既可以专门绘画自定义的新增加的控件，也可以绘画 Qt 的控件；有着很好的扩展性和代码的健壮性。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">MyStyleHelp</span><span class="token double-colon punctuation">::</span><span class="token function">drawPrimitive</span><span class="token punctuation">(</span>MyStyle<span class="token double-colon punctuation">::</span>PrimitiveElement pe<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    m_myStyle <span class="token operator">?</span> m_myStyle<span class="token operator">-></span><span class="token function">drawPrimitive</span><span class="token punctuation">(</span>pe<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> p<span class="token punctuation">,</span> w<span class="token punctuation">)</span>
              <span class="token operator">:</span> <span class="token class-name">MyStyle</span><span class="token double-colon punctuation">::</span><span class="token function">drawPrimitive</span><span class="token punctuation">(</span>m_qStyle<span class="token punctuation">,</span> pe<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> p<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="MyStylePainter-画家，在指定的“画板”上绘画："><a href="#MyStylePainter-画家，在指定的“画板”上绘画：" class="headerlink" title="MyStylePainter 画家，在指定的“画板”上绘画："></a>MyStylePainter 画家，在指定的“画板”上绘画：</h4><p>​    其直接继承于 class MyStylePainter : public QPainter；本也可以不这样再单独设计一个画家类，为了展现此架构的可扩展性，此处会再封装一下，是的分风格更为统一。其类的设计如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyStylePainter</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QPainter</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MyStylePainter</span><span class="token punctuation">(</span>QWidget<span class="token operator">*</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">drawPrimitive</span><span class="token punctuation">(</span>MyStyle<span class="token double-colon punctuation">::</span>PrimitiveElement pe<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">drawPrimitive</span><span class="token punctuation">(</span>QStyle<span class="token double-colon punctuation">::</span>PrimitiveElement pe<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    QWidget<span class="token operator">*</span> m_widget<span class="token punctuation">;</span>
    QStyle<span class="token operator">*</span> m_qStyle<span class="token punctuation">;</span>
    MyStyleHelp m_myStyleHelp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>这里面，相反，我觉得最重要的除了三个成员变量之外，就是这个构造函数，里面调用父类的函数 <code>QPainter::begin(w);</code>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">MyStylePainter</span><span class="token double-colon punctuation">::</span><span class="token function">MyStylePainter</span><span class="token punctuation">(</span>QWidget<span class="token operator">*</span> w<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_widget <span class="token operator">=</span> w<span class="token punctuation">;</span>
    m_qStyle <span class="token operator">=</span> w<span class="token operator">-></span><span class="token function">style</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_myStyleHelp<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>m_qStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">QPainter</span><span class="token double-colon punctuation">::</span><span class="token function">begin</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//是调用父类的 begin(), 调试半天才发现</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="控件-MySwitchButton-设计："><a href="#控件-MySwitchButton-设计：" class="headerlink" title="控件 MySwitchButton 设计："></a>控件 MySwitchButton 设计：</h4><p>​    作为新的控件，使用 xxx 和它的数据类 xxxPrivate 进行构建，两个类之间依靠宏 Q_D 和 Q_Q 来进行互相的调用；</p>
<ul>
<li>MySwitchButton &amp;&amp; MySwitchButtonPrivate</li>
<li>Q_D(MySwitchButton) &amp;&amp; Q_Q(MySwitchButton)</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MySwitchButtonPrivate</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">MySwitchButton</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QAbstractButton</span></span>
<span class="token punctuation">&#123;</span>
    Q_OBJECT
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">MySwitchButton</span><span class="token punctuation">(</span>QWidget<span class="token operator">*</span> parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">MySwitchButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">virtual</span> QSize <span class="token function">sizeHint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">paintEvent</span><span class="token punctuation">(</span>QPaintEvent <span class="token operator">*</span>event<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">initStyleOption</span><span class="token punctuation">(</span>QStyleOptionButton <span class="token operator">*</span>opt<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    <span class="token function">Q_DECLARE_PRIVATE</span><span class="token punctuation">(</span>MySwitchButton<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    </p>
<p>​    <strong>这里的自定义控件， 在 paintEvent 函数里面，通过画笔进行绘画，与 MyStyle::CE_SwitchButton 关联上。</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">MySwitchButton</span><span class="token double-colon punctuation">::</span><span class="token function">paintEvent</span><span class="token punctuation">(</span>QPaintEvent <span class="token operator">*</span>event<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">Q_UNUSED</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>

    QStyleOptionButton opt<span class="token punctuation">;</span>
    <span class="token function">initStyleOption</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span>

    MyStylePainter <span class="token function">painter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    painter<span class="token punctuation">.</span><span class="token function">setRenderHint</span><span class="token punctuation">(</span>QPainter<span class="token double-colon punctuation">::</span>Antialiasing<span class="token punctuation">)</span><span class="token punctuation">;</span>
    painter<span class="token punctuation">.</span><span class="token function">drawControl</span><span class="token punctuation">(</span>MyStyle<span class="token double-colon punctuation">::</span>CE_SwitchButton<span class="token punctuation">,</span> <span class="token operator">&amp;</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//重点</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h3><p>​    附上一张完整的 gif 的动图：当然是重点看的 switchButton 控件效果，咳咳，👀 不要跟着鼠标乱动。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200227175734.gif" width="90%"/ loading="lazy">

<br>

<h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><a href="https://github.com/xmuli/QtExamples/tree/master/QtMyStyleEx/QtExample03/QtStyleEx">QtExample03</a></p>
<p>欢迎 star 和 fork 这个系列的 qt&#x2F;dtk 学习，附学习由浅入深的目录。</p>
<br>

<h3 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章:"></a>系列文章:</h3><ol>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/104367878">QStyle设置界面的外观和QCommonStyle继承关系图讲解和使用</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/104537944">QStyle&#x2F;DTK重绘Qt-GUI已有控件,举例QScrollBar</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/104987446">QStyle&#x2F;DTK重绘自定义需求控件,举例MySwitchButton</a></li>
</ol>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>QStyle之PenStyle的CustomDashLine使用</title>
    <url>/posts/70612500/</url>
    <content><![CDATA[<p><strong>简介：</strong>  <code>QStyle</code>之<code>PenStyle</code>的<code>CustomDashLine</code>使用，使用自定义风格样式的画笔；本篇例子来自绘画 <code>Deepin v20</code> 的 <code>DTK</code> 的 <code>DSlider</code> 控件滑槽。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p><strong>编程环境：</strong>  <code>deepin 15.11 x64 专业版 </code>    <strong>Kernel：</strong> <code>x86_64 Linux 4.15.0-30deepin-generic</code></p>
<p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p>
<br>

<h2 id="系列博文："><a href="#系列博文：" class="headerlink" title="系列博文："></a>系列博文：</h2><ul>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/100545769"><code>QStyle</code>自定义重绘<code>QSlider</code>控件</a> </li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/100659576">QStyle之PenStyle的CustomDashLine使用</a> 【更新：更加精准的绘画滑槽】</li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/100941134">重绘的QStyle中sizeFromContents()没有被调用</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/100942637">QStyle自定义重绘QSlider控件二</a>（重要）</li>
</ul>
<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><ul>
<li>设计师给的图片：</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190909205624.jpg"/ loading="lazy">



<ul>
<li>第一次绘画效果（2019-09-01）:</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190909205925.png"/ loading="lazy">

<ul>
<li>第二次修改效果（2019-09-03）：</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190909205749.png"/ loading="lazy">

<ul>
<li><p>第三次修改效果（更新2020-07-25：重绘滑动槽细节）：</p>
  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200903112012.png" width="90%"/ loading="lazy"></li>
</ul>
<br>

<h2 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h2><p>其中第一次绘画，和第二次绘画滑槽，都是使用划线<strong>void QPainter::drawLine(const <a href="../qtcore/qlinef.html">QLineF</a> &amp;<em>line</em>)</strong> 来进行绘画的，之前是使用系统自带的<strong>Qt::DotLine</strong>风格，而现在是使用自定义样式的<strong>Qt::CustomDashLine</strong>风格绘画；原因是系统自带Qt::DotLine的虽可以控制<code>pen.setWidthF(3);</code>线的粗细，但是不能控制其高度（保持宽度和间隔不变的情况下）；很难长得和设计图一样。</p>
<br>

<h2 id="PenStyle介绍："><a href="#PenStyle介绍：" class="headerlink" title="PenStyle介绍："></a>PenStyle介绍：</h2><p>想看一下<strong>enum Qt::PenStyle</strong>的官方文档：一共有7（统风格）+1（自定义风格）的样式：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190909205515.jpg"/ loading="lazy">

<br>

<h2 id="CustomDashLine使用方法："><a href="#CustomDashLine使用方法：" class="headerlink" title="CustomDashLine使用方法："></a>CustomDashLine使用方法：</h2><p>官方教程如下：使用<strong>void setDashPattern(const <a href="../qtcore/qvector.html">QVector</a>&lt;<a href="../qtcore/qtglobal.html#qreal-typedef">qreal</a>&gt; &amp;<em>dashPattern</em>)</strong> 函数</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190909211752.png"/ loading="lazy">

<blockquote>
<p>译文如下：</p>
<p>将此笔的虚线模式设置为给定模式。这隐式地将笔的样式转换为Qt :: CustomDashLine。<br>必须将模式指定为偶数个正条目，其中条目1,3,5 …是短划线，而2,4,6 ……是空格。例如：</p>
<p>QPen pen;<br>QVector<qreal> dashes;<br>qreal space &#x3D; 4;<br>dashes &lt;&lt; 1 &lt;&lt; space &lt;&lt; 3 &lt;&lt; space &lt;&lt; 9 &lt;&lt; space &lt;&lt; 27 &lt;&lt; space;<br>pen.setDashPattern(dashes);</p>
<p>仪表板图案以笔宽度为单位指定;例如宽度为10的长度为5的长度为50像素。请注意，宽度为零的笔相当于宽度为1像素的化妆笔。<br>每个破折号也受制于帽子样式，因此带有方帽设置的短划线将在每个方向上延伸0.5像素，从而导致总宽度为2。<br>请注意，默认的上限样式是Qt :: SquareCap，这意味着方形线末端覆盖终点并超出线宽的一半。<br>另请参见setStyle（），dashPattern（），setCapStyle（）和setCosmetic（）。</p>
</blockquote>
<p><strong>其中具体使用如下：</strong></p>
<p>其中便是绘画一条（自定义）的线：其<strong>线的一个完整的周期</strong>为（单位为像素）：</p>
<blockquote>
<p>1(线段)       4(间隔)       3(线段)       4(间隔)       9(线段)       4(间隔)       27(线段)       4(间隔)  </p>
</blockquote>
<p>注意：其中<strong>dashes</strong>只能够出现为偶数对，不可为奇数个；</p>
<br>

<h2 id="用于项目："><a href="#用于项目：" class="headerlink" title="用于项目："></a>用于项目：</h2><p>首先贴出第一次的”<strong>绘画滑槽</strong>“代码(局部):</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QPen pen<span class="token punctuation">;</span>
<span class="token comment">//绘画 滑槽(线)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>opt<span class="token operator">-></span>subControls <span class="token operator">&amp;</span> SC_SliderGroove<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    pen<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>DotLine<span class="token punctuation">)</span><span class="token punctuation">;</span>
    pen<span class="token punctuation">.</span><span class="token function">setWidthF</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pen<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">getColor</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> QPalette<span class="token double-colon punctuation">::</span>Highlight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span>pen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token operator">-></span><span class="token function">setRenderHint</span><span class="token punctuation">(</span>QPainter<span class="token double-colon punctuation">::</span>Antialiasing<span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token function">QPointF</span><span class="token punctuation">(</span>rectGroove<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rectHandle<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">QPointF</span><span class="token punctuation">(</span>rectHandle<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rectHandle<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pen<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">getColor</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> QPalette<span class="token double-colon punctuation">::</span>Foreground<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span>pen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token function">QPointF</span><span class="token punctuation">(</span>rectGroove<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rectHandle<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">QPointF</span><span class="token punctuation">(</span>rectHandle<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rectHandle<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>另外一个绘画方法是，在规定大小矩形内，绘画n多个小矩形，充当滑槽，但是可能需绘画多个小矩形来实现(考虑到效率开销),得到细密的线的效果；其使用for循环 遍历绘画很多次 (同样也是大的)，所以此方法被否定了。</p>
<p>只需要上面的<code>pen.setStyle(Qt::DotLine);（第四行）</code>修改为如下代码</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pen<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>CustomDashLine<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QVector<span class="token operator">&lt;</span>qreal<span class="token operator">></span> dashes<span class="token punctuation">;</span>
    qreal space <span class="token operator">=</span> <span class="token number">1.3</span><span class="token punctuation">;</span>
    dashes <span class="token operator">&lt;&lt;</span> <span class="token number">0.1</span> <span class="token operator">&lt;&lt;</span> space<span class="token punctuation">;</span>
    pen<span class="token punctuation">.</span><span class="token function">setDashPattern</span><span class="token punctuation">(</span>dashes<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>即可得到这次的效果：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190909205749.png"/ loading="lazy">

<br>

<h2 id="更新2020-07-25：重绘滑动槽细节"><a href="#更新2020-07-25：重绘滑动槽细节" class="headerlink" title="更新2020-07-25：重绘滑动槽细节"></a>更新2020-07-25：重绘滑动槽细节</h2><p>前面一段时间，<code>Slider</code> 实际上是没有完全 100%  达到设计图的样式要求的（惭愧），后腾出手来，决定将其改一下，还原设计图的滑槽样式：其中具体的详细提交如下：<a href="https://github.com/linuxdeepin/qt5integration/commit/8895abb777996700d9c5ccadda66654eb9325a8c">#8895abb7</a></p>
<p>其中的困难点是，设置画笔的高度、宽度、实线与虚线的间隔（要求在苹果的高分屏放大看细节后，且不会出现错误的模糊偏移）；</p>
<p>在开发的普通屏幕中，可以安装 <a href="https://wiki.gnome.org/Apps/EyeOfGnome">eog</a>， 然后左上角的设置里关掉平滑，再次查看图片放大看，就不会糊掉了，可以清晰的看到下面的实先和虚线偏移重叠；</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200903112427.png" width="60%"/ loading="lazy">


<p>给上最后的解决参数方案。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pen<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>CustomDashLine<span class="token punctuation">)</span><span class="token punctuation">;</span>
pen<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pen<span class="token punctuation">.</span><span class="token function">setBrush</span><span class="token punctuation">(</span><span class="token punctuation">(</span>opt<span class="token operator">-></span>activeSubControls <span class="token operator">&amp;</span> SC_SliderHandle<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">getColor</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> QPalette<span class="token double-colon punctuation">::</span>Highlight<span class="token punctuation">)</span> <span class="token operator">:</span> opt<span class="token operator">-></span>palette<span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pen<span class="token punctuation">.</span><span class="token function">setDashOffset</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pen<span class="token punctuation">.</span><span class="token function">setDashPattern</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">QVector</span><span class="token generic class-name"><span class="token operator">&lt;</span>qreal<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span> <span class="token number">0.5</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 这个数值是最接近其原图， 且放大之后，不会有模糊偏移</span>
pen<span class="token punctuation">.</span><span class="token function">setCapStyle</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>FlatCap<span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span>pen<span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token operator">-></span><span class="token function">setRenderHint</span><span class="token punctuation">(</span>QPainter<span class="token double-colon punctuation">::</span>Antialiasing<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>放上一张最后的效果图：</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200903112012.png" width="70%"/ loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200903112317.png" width="70%"/ loading="lazy">



<br>

<h2 id="系列地址："><a href="#系列地址：" class="headerlink" title="系列地址："></a>系列地址：</h2><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a></p>
<p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 QT &#x2F; DTK 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>DTK</tag>
        <tag>QStyle</tag>
      </tags>
  </entry>
  <entry>
    <title>QStyle自定义重绘QRubberBand控件</title>
    <url>/posts/59510126/</url>
    <content><![CDATA[<p><strong>简介：</strong> 根据<code>QStyle</code>的继承关系和重绘原理；通过实现一个继承<code>QCommonStyle</code>类的实现，实现自己的自定义控件<code>QRubberBand</code>控件。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​		<strong>详情：</strong>  见简介</p>
<br>

<p><strong>编程环境：</strong>  <code>deepin 15.11 x64 专业版 </code>    Kernel： <code>x86_64 Linux 4.15.0-30deepin-generic</code></p>
<p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p>
<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>先上一张最终的重绘运行效果图：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190904195212.png"/ loading="lazy">

<br>

<h2 id="QRubberBand重绘："><a href="#QRubberBand重绘：" class="headerlink" title="QRubberBand重绘："></a>QRubberBand重绘：</h2><p>这几就不翻开官方简介了，话说初次看到QRubberBand这个名字的时候，我一脸的懵逼。这个控件，我怎么听都没有听说过，更没有见过。</p>
<p><strong>但是</strong>: 如果有人和你讲，这就是windows的这个东西，那就很大家都见过了，就是<strong>多选文件时候的那个高亮矩形</strong>，如下图</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190904195656.png"/ loading="lazy">

<p><strong>绘画思路：</strong></p>
<ul>
<li>对应的重载函数里面，case 这个控件，然后绘画一个矩形（其画刷和边框的颜色是不一样的）</li>
</ul>
<p>代码如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> CE_RubberBand<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">const</span> QStyleOptionRubberBand <span class="token operator">*</span>rubber <span class="token operator">=</span> <span class="token generic-function"><span class="token function">qstyleoption_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">const</span> QStyleOptionRubberBand <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            QColor color <span class="token operator">=</span> opt<span class="token operator">-></span>palette<span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            color<span class="token punctuation">.</span><span class="token function">setAlphaF</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            p<span class="token operator">-></span><span class="token function">setBrush</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>
            color<span class="token punctuation">.</span><span class="token function">setAlphaF</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            p<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span><span class="token function">QPen</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            p<span class="token operator">-></span><span class="token function">drawRect</span><span class="token punctuation">(</span>opt<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">adjusted</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token class-name">QCommonStyle</span><span class="token double-colon punctuation">::</span><span class="token function">drawControl</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> p<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>



]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>QStyle</tag>
      </tags>
  </entry>
  <entry>
    <title>QStyle自定义重绘QScrollBar</title>
    <url>/posts/5b63d25/</url>
    <content><![CDATA[<p><strong>简介：</strong>  <code>QStyle</code>自定义重绘<code>QScrollBar</code>（滚动条）样式。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p>
<p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p>
<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><br>

<h2 id="QScrollbar官方教程"><a href="#QScrollbar官方教程" class="headerlink" title="QScrollbar官方教程:"></a>QScrollbar官方教程:</h2><p>QScrollBar小部件提供垂直或水平滚动条。</p>
<p>滚动条是一种控件，使用户能够访问比用于显示文档的小部件更大的文档部分。它提供了用户在文档中的当前位置和可见文档数量的可视化指示。滚动条通常配备了其他控件，以支持更精确的导航。Qt以适合每个平台的方式显示滚动条。</p>
<p>如果需要在另一个小部件上提供滚动视图，使用QScrollArea类可能更方便，因为它提供了一个viewport小部件和滚动条。如果您需要为使用QAbstractScrollArea的特定小部件实现类似的功能，QScrollBar非常有用;例如，如果您决定子类化QAbstractItemView。对于使用滑块控件在给定范围内获取值的大多数其他情况，QSlider类可能更适合您的需要。</p>
<p>￼<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190910224730.png"/ loading="lazy"></p>
<blockquote>
<p>滚动条通常包括四个单独的控件:滑块、滚动箭头和页面控件。</p>
<p>滑块提供了快速进入文档任何部分的方法，但不支持在大型文档中精确导航。</p>
<p>b.滚动箭头是按钮，可以用来精确地导航到文档中的特定位置。对于连接到文本编辑器的垂直滚动条，它们通常将当前位置向上或向下移动一个“行”，并少量调整滑块的位置。在编辑器和列表框中，“行”可能表示一行文本;在图像查看器中，它可能意味着20个像素。</p>
<p>页面控件是拖动滑块的区域(滚动条的背景)。点击这里将滚动条移动到单击一个“页面”。这个值通常与滑块的长度相同。</p>
</blockquote>
<p>每个滚动条都有一个值，该值指示滑块距滚动条起点的距离;这是通过value()和setValue()获得的。此值始终位于为滚动条定义的值范围内，从最小()到包含最大值()。可以使用setMinimum()和setMaximum()设置可接受值的范围。在最小值处，滑块的顶部边缘(垂直滚动条)或左侧边缘(水平滚动条)将位于滚动条的顶部(或左侧)。在最大值处，滑块的底部(或右侧)边缘将位于滚动条的底部(或右侧)末端。</p>
<p>滑块的长度通常与页面步骤的值相关，通常表示滚动视图中显示的文档区域的比例。page step是当用户按下页面向上和向下键时值的变化量，并使用setPageStep()设置。使用游标键对行步骤定义的值进行更小的更改，这个数量由setSingleStep()设置。</p>
<p>注意，使用的值范围与滚动条小部件的实际大小无关。在为范围和页步骤选择值时，不需要考虑这一点。</p>
<p>为滚动条指定的值范围通常与为QSlider指定的值范围不同，因为需要考虑滑块的长度。如果我们有一个100行文档，而我们只能在一个小部件中显示20行，那么我们可能希望构造一个滚动条，其中页面步骤为20，最小值为0，最大值为80。这将为我们提供一个包含五个“页面”的滚动条。</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190910224805.png"/ loading="lazy">

<blockquote>
<p>在许多常见情况下，文档长度、滚动条中使用的值范围和页面步骤之间的关系很简单。滚动条的值范围是通过从表示文档长度的值中减去选定的页面步骤来确定的。在这种情况下，下面的公式很有用:文档长度&#x3D; maximum() - minimum() + pageStep()。</p>
</blockquote>
<p>QScrollBar只提供整数范围。注意，尽管QScrollBar处理非常大的数字，但是当前屏幕上的滚动条不能有效地表示超过100,000像素的范围。除此之外，用户很难使用键盘或鼠标来控制滑块，滚动箭头的使用也很有限。</p>
<br>

<h2 id="QScrollbar属性理解："><a href="#QScrollbar属性理解：" class="headerlink" title="QScrollbar属性理解："></a>QScrollbar属性理解：</h2><p>若是需要重绘，查看Qt源码，有如下几个<code>enum QStyle::ControlElement</code>是关于滚动条的元素：</p>
<table>
<thead>
<tr>
<th align="center">Constant</th>
<th align="center">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CE_ScrollBarAddPage</td>
<td align="center">增加页(在滑槽)</td>
</tr>
<tr>
<td align="center">CE_ScrollBarSubPage</td>
<td align="center">减少页(在滑槽)</td>
</tr>
<tr>
<td align="center">CE_ScrollBarSlider</td>
<td align="center">滑块</td>
</tr>
<tr>
<td align="center">CE_ScrollBarAddLine</td>
<td align="center">增加按钮</td>
</tr>
<tr>
<td align="center">CE_ScrollBarSubLine</td>
<td align="center">减少按钮</td>
</tr>
<tr>
<td align="center">CE_ScrollBarFirst</td>
<td align="center">未测出来</td>
</tr>
<tr>
<td align="center">CE_ScrollBarLast</td>
<td align="center">未测出来</td>
</tr>
</tbody></table>
<p>使用代码显示如下：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190910224200.png"/ loading="lazy">

<br>

]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>QStyle</tag>
      </tags>
  </entry>
  <entry>
    <title>QStyle自定义重绘QSlider控件</title>
    <url>/posts/dd3bbc4c/</url>
    <content><![CDATA[<p><strong>简介：</strong>  根据<code>QStyle</code>的继承关系和重绘原理；通过实现一个继承<code>QCommonStyle</code>类的实现，实现自己的自定义控件<code>QSlider</code>控件。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p><strong>编程环境：</strong>  <code>deepin 15.11 x64 专业版 </code>    <strong>Kernel：</strong>  <code>x86_64 Linux 4.15.0-30deepin-generic</code></p>
<p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p>
<br>

<h2 id="系列博文："><a href="#系列博文：" class="headerlink" title="系列博文："></a>系列博文：</h2><ul>
<li><a href="https://xmuli.tech/posts/dd3bbc4c"><code>QStyle</code>自定义重绘<code>QSlider</code>控件</a> </li>
<li><a href="https://xmuli.tech/posts/70612500">QStyle之PenStyle的CustomDashLine使用</a> 【更新：更加精准的绘画滑槽】</li>
<li><a href="https://xmuli.tech/posts/e4408abd/">重绘的QStyle中sizeFromContents()没有被调用</a></li>
<li><a href="https://xmuli.tech/posts/2b7554be">QStyle自定义重绘QSlider控件二</a>（重要）</li>
</ul>
<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>先上一张最终的重绘运行效果图</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190910213128.png"/ loading="lazy">

<p>运行代码，在 <strong>main（）</strong>函数里面：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QApplication <span class="token function">app</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    qApp<span class="token operator">-></span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token string">"chameleon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    QWidget wTemp<span class="token punctuation">;</span>
    wTemp<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token comment">//    NoTicks = 0,</span>
<span class="token comment">//    TicksAbove = 1,</span>
<span class="token comment">//    TicksLeft = TicksAbove,</span>
<span class="token comment">//    TicksBelow = 2,</span>
<span class="token comment">//    TicksRight = TicksBelow,</span>
<span class="token comment">//    TicksBothSides = 3</span>

	QHBoxLayout <span class="token operator">*</span>layout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QHBoxLayout</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QSlider <span class="token operator">*</span>slider1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QSlider</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//竖直刻度在右侧的Slider</span>
    slider1<span class="token operator">-></span><span class="token function">setOrientation</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>Vertical<span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider1<span class="token operator">-></span><span class="token function">setTickPosition</span><span class="token punctuation">(</span>QSlider<span class="token double-colon punctuation">::</span>TicksRight<span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider1<span class="token operator">-></span><span class="token function">setTickInterval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider1<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    QSlider <span class="token operator">*</span>slider2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QSlider</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//竖直刻度在左侧的Slider</span>
    slider2<span class="token operator">-></span><span class="token function">setOrientation</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>Vertical<span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider2<span class="token operator">-></span><span class="token function">setTickPosition</span><span class="token punctuation">(</span>QSlider<span class="token double-colon punctuation">::</span>TicksLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider2<span class="token operator">-></span><span class="token function">setTickInterval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider2<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider2<span class="token operator">-></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    QSlider <span class="token operator">*</span>slider3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QSlider</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//水平刻度在下侧的Slider</span>
    slider3<span class="token operator">-></span><span class="token function">setOrientation</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>Horizontal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider3<span class="token operator">-></span><span class="token function">setTickPosition</span><span class="token punctuation">(</span>QSlider<span class="token double-colon punctuation">::</span>TicksBelow<span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider3<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider3<span class="token operator">-></span><span class="token function">setTickInterval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider3<span class="token operator">-></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    QSlider <span class="token operator">*</span>slider4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QSlider</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//水平刻度在上侧的Slider</span>
    slider4<span class="token operator">-></span><span class="token function">setOrientation</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>Horizontal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider4<span class="token operator">-></span><span class="token function">setTickPosition</span><span class="token punctuation">(</span>QSlider<span class="token double-colon punctuation">::</span>TicksAbove<span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider4<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider4<span class="token operator">-></span><span class="token function">setTickInterval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider4<span class="token operator">-></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    QSlider <span class="token operator">*</span>slider5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QSlider</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//竖直刻度在两侧的Slider</span>
    slider5<span class="token operator">-></span><span class="token function">setOrientation</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>Vertical<span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider5<span class="token operator">-></span><span class="token function">setTickPosition</span><span class="token punctuation">(</span>QSlider<span class="token double-colon punctuation">::</span>TicksBothSides<span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider5<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider5<span class="token operator">-></span><span class="token function">setTickInterval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider5<span class="token operator">-></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    QSlider <span class="token operator">*</span>slider6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QSlider</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//水平刻度在两侧的Slider</span>
    slider6<span class="token operator">-></span><span class="token function">setOrientation</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>Horizontal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider6<span class="token operator">-></span><span class="token function">setTickPosition</span><span class="token punctuation">(</span>QSlider<span class="token double-colon punctuation">::</span>TicksBothSides<span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider6<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider6<span class="token operator">-></span><span class="token function">setTickInterval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider6<span class="token operator">-></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    wTemp<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> app<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="QSlider属性："><a href="#QSlider属性：" class="headerlink" title="QSlider属性："></a>QSlider属性：</h2><ul>
<li><strong>Qt文档：</strong></li>
</ul>
<p>先看<strong>Qt</strong>官方文档介绍，我搽，就这么两个属性？？？然后大致浏览完了整篇。怎么给我一点，怎么只有这么一点讲解的内容啊！！！这可不行，谁受得了啊 ，然后继续看源码，看其继承的基类<strong>QAbstractSlider</strong>等之后。这还差不多。不然我怎么使用<strong>QStyle</strong>重绘这个控件</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190904183814.png"/ loading="lazy">

<ul>
<li><strong>tickInterval : int</strong><br>此属性保存tickmarks之间的间隔这是一个值间隔，而不是像素间隔。如果为0，滑块将在singleStep和pageStep之间进行选择。</li>
<li><strong>tickPosition : TickPosition</strong><br>此属性保存此滑块的tickmark位置，有效值由QSlider::TickPosition enum描述。默认值是QSlider:: notice。</li>
</ul>
<p><strong>刻度条绘画方向：</strong></p>
<table>
<thead>
<tr>
<th>Constant</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>QSlider::NoTicks</td>
<td>不显示刻度</td>
</tr>
<tr>
<td>QSlider::TicksBothSides</td>
<td>两边都显示刻度</td>
</tr>
<tr>
<td>QSlider::TicksAbove</td>
<td>刻度显示在上边(水平)</td>
</tr>
<tr>
<td>QSlider::TicksBelow</td>
<td>刻度显示在下边(水平)</td>
</tr>
<tr>
<td>QSlider::TicksLeft</td>
<td>刻度显示在左边(竖直)</td>
</tr>
<tr>
<td>QSlider::TicksRight</td>
<td>刻度显示在右边(竖直)</td>
</tr>
</tbody></table>
<p><strong>QSlider的摆放方向：</strong></p>
<table>
<thead>
<tr>
<th>orientation : Qt::Orientation</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>Qt::Vertical</td>
<td>滑动条竖直绘画</td>
</tr>
<tr>
<td>Qt::Horizontal</td>
<td>滑动条水平绘画</td>
</tr>
</tbody></table>
<p>其他几个涉及<strong>QStyle</strong>重绘的重要属性：</p>
<table>
<thead>
<tr>
<th>val</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>minimum</td>
<td>滑动条最小值</td>
</tr>
<tr>
<td>maximum</td>
<td>滑动条最大值</td>
</tr>
<tr>
<td>singleStep</td>
<td>在min-max之间显示的步长,移动一步的改变数值</td>
</tr>
<tr>
<td>pageStep</td>
<td>用于计算刻度的个数(有阈值限制,不完全按这个来,没详细研究,柑橘用来有点迷);</td>
</tr>
<tr>
<td>value</td>
<td>当前的显示数值(在min-max之间,也是本信号的槽的参数的数值)</td>
</tr>
<tr>
<td>sliderPosition</td>
<td>？？</td>
</tr>
<tr>
<td>tickInterval</td>
<td>两个刻度之间的间隔数值（重绘使用）</td>
</tr>
<tr>
<td>tickPosition</td>
<td>刻度的位置</td>
</tr>
</tbody></table>
<p><font color=#70AD47 size=3 face="幼圆">注意：</font> pageStep   这个用于计算刻度的个数(有阈值限制,不完全按这个来,没详细研究,柑橘用来有点迷);  <font color=#D0087E size=4 face="幼圆"><strong>刻度个数 - 1 &#x3D; 刻度间隔的个数 &#x3D; (span - 0) &#x2F; pageStep</strong></font>; 关于0, span, min, max, val 的关系,参见<strong>sliderPositionFromValue()<strong>的实现 [此处特指</strong>qfusionstyle.cpp</strong> 里面的, 不知道qcommstyle.cpp实现原理是否相同?]</p>
<br>

<h2 id="理解属性步长sigleStep、pageSteop："><a href="#理解属性步长sigleStep、pageSteop：" class="headerlink" title="理解属性步长sigleStep、pageSteop："></a>理解属性步长sigleStep、pageSteop：</h2><p>因为<strong>QSlider &#x3D; 滑块（句柄）+ 滑槽 + 刻度（矩形）</strong>；</p>
<p>创建一个简单的小例子，核心代码如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">Widget</span><span class="token double-colon punctuation">::</span><span class="token function">on_sliderHor_valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> minimum <span class="token operator">=</span> ui<span class="token operator">-></span>sliderHor<span class="token operator">-></span><span class="token function">minimum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//滑动条最小值</span>
    <span class="token keyword">int</span> maximum <span class="token operator">=</span> ui<span class="token operator">-></span>sliderHor<span class="token operator">-></span><span class="token function">maximum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//滑动条最大值</span>
    <span class="token keyword">int</span> sigleStep <span class="token operator">=</span> ui<span class="token operator">-></span>sliderHor<span class="token operator">-></span><span class="token function">singleStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//在min~max之间显示的步长,移动一步的改变数值</span>
    <span class="token keyword">int</span> pageSteop <span class="token operator">=</span> ui<span class="token operator">-></span>sliderHor<span class="token operator">-></span><span class="token function">pageStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//用于计算刻度的个数(有阈值限制,不完全按这个来）</span>
    <span class="token keyword">int</span> val <span class="token operator">=</span> ui<span class="token operator">-></span>sliderHor<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">//当前的显示数值(在min~max之间,也是本信号的槽的参数的数值)</span>
    <span class="token keyword">int</span> sliderPosition <span class="token operator">=</span> ui<span class="token operator">-></span>sliderHor<span class="token operator">-></span><span class="token function">sliderPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//?? 不是很清楚</span>
    <span class="token keyword">int</span> tickinterval <span class="token operator">=</span> ui<span class="token operator">-></span>sliderHor<span class="token operator">-></span><span class="token function">tickInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//两个刻度之间的间隔数值（重绘使用）</span>
    <span class="token keyword">int</span> tickPosition <span class="token operator">=</span> ui<span class="token operator">-></span>sliderHor<span class="token operator">-></span><span class="token function">tickPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//刻度的位置</span>

    QString str <span class="token operator">=</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"value:%1,  minimum:%2,  maximum:%3,  sigleStep:%4,  pageSteop:%5,  val:%6,  sliderPosition:%7,  tickinterval:%8,  tickPosition:%9"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>minimum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>maximum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>sigleStep<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>pageSteop<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>sliderPosition<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>tickinterval<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>tickPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>
                       
    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>str<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其效果如下：有<strong>qDebug</strong>可以查看每一个数值的含义，以及变化可以看出其含义（每次按下按下一个方向→或←按键）；就会显示一行数据， 重点观察sigleStep、sigleStep、pageSteop的数值；</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190904185953.png"/ loading="lazy">

<p>感觉其上面这些矩形，大多是使用时候，而非更底层的重绘该空间使用的；而<strong>sliderPosition</strong>、<strong>tickPosition</strong>才是重绘使用得。有了上面的基础之后,下面开始正经的重绘：</p>
<br>

<h2 id="重绘QSlider："><a href="#重绘QSlider：" class="headerlink" title="重绘QSlider："></a>重绘QSlider：</h2><p><strong>重绘思路：</strong></p>
<ul>
<li>先预先计算好<strong>滑块（矩形）+ 滑槽（矩形） + 刻度（矩形）</strong></li>
<li>对该部分矩形进行绘画</li>
</ul>
<h3 id="计算所需要的三个部分的矩形："><a href="#计算所需要的三个部分的矩形：" class="headerlink" title="计算所需要的三个部分的矩形："></a>计算所需要的三个部分的矩形：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QRect <span class="token class-name">CustomStyle</span><span class="token double-colon punctuation">::</span><span class="token function">subControlRect</span><span class="token punctuation">(</span>QStyle<span class="token double-colon punctuation">::</span>ComplexControl cc<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOptionComplex <span class="token operator">*</span>opt<span class="token punctuation">,</span>
                                     QStyle<span class="token double-colon punctuation">::</span>SubControl sc<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>cc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> CC_Slider<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">const</span> QStyleOptionSlider <span class="token operator">*</span>option <span class="token operator">=</span> <span class="token generic-function"><span class="token function">qstyleoption_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">const</span> QStyleOptionSlider <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            QRectF rect <span class="token operator">=</span> option<span class="token operator">-></span>rect<span class="token punctuation">;</span>                                                    <span class="token comment">//Slider控件总的大小矩形</span>
            <span class="token keyword">int</span> slider_size <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>PM_SliderControlThickness<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//滑块的高度</span>
<span class="token comment">//            int tick_size = proxy()->pixelMetric(PM_SliderTickmarkOffset, opt, w);         //刻度的高度</span>
            QRectF slider_handle_rect <span class="token operator">=</span> rect<span class="token punctuation">;</span>                                              <span class="token comment">//滑块和滑漕的的最小公共矩形 (后面被用作临时且被改变的)</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>orientation <span class="token operator">==</span> Qt<span class="token double-colon punctuation">::</span>Horizontal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                slider_handle_rect<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span>slider_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token double-colon punctuation">::</span>TicksAbove<span class="token punctuation">)</span> slider_handle_rect<span class="token punctuation">.</span><span class="token function">moveBottom</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">bottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token double-colon punctuation">::</span>TicksBelow<span class="token punctuation">)</span> slider_handle_rect<span class="token punctuation">.</span><span class="token function">moveTop</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token double-colon punctuation">::</span>TicksBothSides<span class="token punctuation">)</span> slider_handle_rect<span class="token punctuation">.</span><span class="token function">moveCenter</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                slider_handle_rect<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span>slider_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token double-colon punctuation">::</span>TicksRight<span class="token punctuation">)</span>  slider_handle_rect<span class="token punctuation">.</span><span class="token function">moveLeft</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token double-colon punctuation">::</span>TicksLeft<span class="token punctuation">)</span>   slider_handle_rect<span class="token punctuation">.</span><span class="token function">moveRight</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token double-colon punctuation">::</span>TicksBothSides<span class="token punctuation">)</span> slider_handle_rect<span class="token punctuation">.</span><span class="token function">moveCenter</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            QRectF rectStatic <span class="token operator">=</span>  slider_handle_rect<span class="token punctuation">;</span>   <span class="token comment">//rectStatic作为 滑块和滑漕的的最小公共矩形(不改变)</span>

            <span class="token keyword">switch</span> <span class="token punctuation">(</span>sc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">case</span> SC_SliderGroove<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//滑漕</span>
                qreal groove_size <span class="token operator">=</span> slider_size <span class="token operator">/</span> <span class="token number">4.0</span><span class="token punctuation">;</span>
                QRectF groove_rect<span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>orientation <span class="token operator">==</span> Qt<span class="token double-colon punctuation">::</span>Horizontal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    groove_rect<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span>slider_handle_rect<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    groove_rect<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span>groove_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                    groove_rect<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span>groove_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    groove_rect<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span>slider_handle_rect<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>

                groove_rect<span class="token punctuation">.</span><span class="token function">moveCenter</span><span class="token punctuation">(</span>slider_handle_rect<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> groove_rect<span class="token punctuation">.</span><span class="token function">toRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">case</span> SC_SliderHandle<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//滑块</span>
                <span class="token keyword">int</span> sliderPos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>PM_SliderLength<span class="token punctuation">,</span> option<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">bool</span> horizontal <span class="token operator">=</span> option<span class="token operator">-></span>orientation <span class="token operator">==</span> Qt<span class="token double-colon punctuation">::</span>Horizontal<span class="token punctuation">;</span>
                sliderPos <span class="token operator">=</span> <span class="token function">sliderPositionFromValue</span><span class="token punctuation">(</span>option<span class="token operator">-></span>minimum<span class="token punctuation">,</span> option<span class="token operator">-></span>maximum<span class="token punctuation">,</span> option<span class="token operator">-></span>sliderPosition<span class="token punctuation">,</span>
                                                    <span class="token punctuation">(</span>horizontal <span class="token operator">?</span> slider_handle_rect<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> slider_handle_rect<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> len<span class="token punctuation">,</span> option<span class="token operator">-></span>upsideDown<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>horizontal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    slider_handle_rect<span class="token punctuation">.</span><span class="token function">moveLeft</span><span class="token punctuation">(</span>slider_handle_rect<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> sliderPos<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    slider_handle_rect<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    slider_handle_rect<span class="token punctuation">.</span><span class="token function">moveTop</span><span class="token punctuation">(</span>rectStatic<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                    slider_handle_rect<span class="token punctuation">.</span><span class="token function">moveTop</span><span class="token punctuation">(</span>slider_handle_rect<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> sliderPos<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    slider_handle_rect<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    slider_handle_rect<span class="token punctuation">.</span><span class="token function">moveLeft</span><span class="token punctuation">(</span>rectStatic<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>

                <span class="token keyword">return</span> slider_handle_rect<span class="token punctuation">.</span><span class="token function">toRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">case</span> SC_SliderTickmarks<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//刻度的矩形</span>
                QRectF tick_rect <span class="token operator">=</span> rect<span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>orientation <span class="token operator">==</span> Qt<span class="token double-colon punctuation">::</span>Horizontal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    tick_rect<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> slider_handle_rect<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token double-colon punctuation">::</span>TicksAbove<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        tick_rect<span class="token punctuation">.</span><span class="token function">moveTop</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token double-colon punctuation">::</span>TicksBelow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        tick_rect<span class="token punctuation">.</span><span class="token function">moveBottom</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">bottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                    tick_rect<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> slider_handle_rect<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token double-colon punctuation">::</span>TicksLeft<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        tick_rect<span class="token punctuation">.</span><span class="token function">moveLeft</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token double-colon punctuation">::</span>TicksRight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        tick_rect<span class="token punctuation">.</span><span class="token function">moveRight</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>

                <span class="token keyword">return</span> tick_rect<span class="token punctuation">.</span><span class="token function">toRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> <span class="token class-name">QCommonStyle</span><span class="token double-colon punctuation">::</span><span class="token function">subControlRect</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> sc<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="再对其中每一个矩形（一共3个）进行重绘："><a href="#再对其中每一个矩形（一共3个）进行重绘：" class="headerlink" title="再对其中每一个矩形（一共3个）进行重绘："></a>再对其中每一个矩形（一共3个）进行重绘：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">ChameleonStyle</span><span class="token double-colon punctuation">::</span><span class="token function">drawComplexControl</span><span class="token punctuation">(</span>QStyle<span class="token double-colon punctuation">::</span>ComplexControl cc<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOptionComplex <span class="token operator">*</span>opt<span class="token punctuation">,</span>
                                        QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>cc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> CC_Slider <span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">const</span> QStyleOptionSlider <span class="token operator">*</span>slider <span class="token operator">=</span> <span class="token generic-function"><span class="token function">qstyleoption_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">const</span> QStyleOptionSlider <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//各个使用的矩形大小和位置</span>
            QRectF rect <span class="token operator">=</span> opt<span class="token operator">-></span>rect<span class="token punctuation">;</span>                                                                            <span class="token comment">//Slider控件最大的矩形(包含如下三个)</span>
            QRectF rectHandle <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">subControlRect</span><span class="token punctuation">(</span>CC_Slider<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> SC_SliderHandle<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//滑块矩形</span>
            QRectF rectSliderTickmarks <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">subControlRect</span><span class="token punctuation">(</span>CC_Slider<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> SC_SliderTickmarks<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//刻度的矩形</span>
            QRect rectGroove <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">subControlRect</span><span class="token punctuation">(</span>CC_Slider<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> SC_SliderGroove<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">//滑槽的矩形</span>

<span class="token comment">//            qDebug()&lt;&lt;"____04_____Slider控件最大的矩形(包含如下三个):"&lt;&lt;rect&lt;&lt;"  滑块矩形:"&lt;&lt;rectHandle&lt;&lt;"  刻度的矩形:"&lt;&lt;rectSliderTickmarks&lt;&lt;"   滑槽的矩形:"&lt;&lt;rectGroove&lt;&lt;endl;</span>

<span class="token comment">//            //测试(保留不删)</span>
            p<span class="token operator">-></span><span class="token function">fillRect</span><span class="token punctuation">(</span>rect<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>gray<span class="token punctuation">)</span><span class="token punctuation">;</span>
            p<span class="token operator">-></span><span class="token function">fillRect</span><span class="token punctuation">(</span>rectSliderTickmarks<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span>
            p<span class="token operator">-></span><span class="token function">fillRect</span><span class="token punctuation">(</span>rectGroove<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>
            p<span class="token operator">-></span><span class="token function">fillRect</span><span class="token punctuation">(</span>rectHandle<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>green<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"---rect:"</span><span class="token operator">&lt;&lt;</span>rect<span class="token operator">&lt;&lt;</span><span class="token string">"  rectHandle:"</span><span class="token operator">&lt;&lt;</span>rectHandle<span class="token operator">&lt;&lt;</span><span class="token string">"   rectSliderTickmarks:"</span><span class="token operator">&lt;&lt;</span>rectSliderTickmarks<span class="token operator">&lt;&lt;</span><span class="token string">"   rectGroove:"</span><span class="token operator">&lt;&lt;</span>rectGroove<span class="token punctuation">;</span>

            QPen pen<span class="token punctuation">;</span>
            <span class="token comment">//绘画 滑槽(线)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>opt<span class="token operator">-></span>subControls <span class="token operator">&amp;</span> SC_SliderGroove<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                pen<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>CustomDashLine<span class="token punctuation">)</span><span class="token punctuation">;</span>
                QVector<span class="token operator">&lt;</span>qreal<span class="token operator">></span> dashes<span class="token punctuation">;</span>
                qreal space <span class="token operator">=</span> <span class="token number">1.3</span><span class="token punctuation">;</span>
                dashes <span class="token operator">&lt;&lt;</span> <span class="token number">0.1</span> <span class="token operator">&lt;&lt;</span> space<span class="token punctuation">;</span>
                pen<span class="token punctuation">.</span><span class="token function">setDashPattern</span><span class="token punctuation">(</span>dashes<span class="token punctuation">)</span><span class="token punctuation">;</span>
                pen<span class="token punctuation">.</span><span class="token function">setWidthF</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                pen<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">getColor</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> QPalette<span class="token double-colon punctuation">::</span>Highlight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                p<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span>pen<span class="token punctuation">)</span><span class="token punctuation">;</span>
                p<span class="token operator">-></span><span class="token function">setRenderHint</span><span class="token punctuation">(</span>QPainter<span class="token double-colon punctuation">::</span>Antialiasing<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>slider<span class="token operator">-></span>orientation <span class="token operator">==</span> Qt<span class="token double-colon punctuation">::</span>Horizontal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    p<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token function">QPointF</span><span class="token punctuation">(</span>rectGroove<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rectHandle<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">QPointF</span><span class="token punctuation">(</span>rectHandle<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rectHandle<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    pen<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">getColor</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> QPalette<span class="token double-colon punctuation">::</span>Foreground<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    p<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span>pen<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    p<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token function">QPointF</span><span class="token punctuation">(</span>rectGroove<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rectHandle<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">QPointF</span><span class="token punctuation">(</span>rectHandle<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rectHandle<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                    p<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token function">QPointF</span><span class="token punctuation">(</span>rectGroove<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rectGroove<span class="token punctuation">.</span><span class="token function">bottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">QPointF</span><span class="token punctuation">(</span>rectGroove<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  rectHandle<span class="token punctuation">.</span><span class="token function">bottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    pen<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">getColor</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> QPalette<span class="token double-colon punctuation">::</span>Foreground<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    p<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span>pen<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    p<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token function">QPointF</span><span class="token punctuation">(</span>rectGroove<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  rectGroove<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">QPointF</span><span class="token punctuation">(</span>rectGroove<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  rectHandle<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token comment">//绘画 滑块</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>opt<span class="token operator">-></span>subControls <span class="token operator">&amp;</span> SC_SliderHandle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                pen<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>SolidLine<span class="token punctuation">)</span><span class="token punctuation">;</span>
                p<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>NoPen<span class="token punctuation">)</span><span class="token punctuation">;</span>
                p<span class="token operator">-></span><span class="token function">setBrush</span><span class="token punctuation">(</span><span class="token function">getColor</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> QPalette<span class="token double-colon punctuation">::</span>Highlight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                p<span class="token operator">-></span><span class="token function">drawRoundedRect</span><span class="token punctuation">(</span>rectHandle<span class="token punctuation">,</span> <span class="token class-name">DStyle</span><span class="token double-colon punctuation">::</span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>DStyle<span class="token double-colon punctuation">::</span>PM_FrameRadius<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">DStyle</span><span class="token double-colon punctuation">::</span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>DStyle<span class="token double-colon punctuation">::</span>PM_FrameRadius<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token comment">//绘画 刻度,绘画方式了参考qfusionstyle.cpp</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>opt<span class="token operator">-></span>subControls <span class="token operator">&amp;</span> SC_SliderTickmarks<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> slider<span class="token operator">-></span>tickInterval<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                   <span class="token comment">//需要绘画刻度</span>
                p<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span>opt<span class="token operator">-></span>palette<span class="token punctuation">.</span><span class="token function">foreground</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> available <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>PM_SliderSpaceAvailable<span class="token punctuation">,</span> slider<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//可用空间</span>
                <span class="token keyword">int</span> interval <span class="token operator">=</span> slider<span class="token operator">-></span>tickInterval<span class="token punctuation">;</span>                                       <span class="token comment">//标记间隔</span>
<span class="token comment">//                int tickSize = proxy()->pixelMetric(PM_SliderTickmarkOffset, opt, w);      //标记偏移</span>
<span class="token comment">//                int ticks = slider->tickPosition;                                          //标记位置</span>

                <span class="token keyword">int</span> v <span class="token operator">=</span> slider<span class="token operator">-></span>minimum<span class="token punctuation">;</span>
                <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>PM_SliderLength<span class="token punctuation">,</span> slider<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>v <span class="token operator">&lt;=</span> slider<span class="token operator">-></span>maximum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                          <span class="token comment">//此处不添加+1的话, 会少绘画一根线</span>
                    <span class="token keyword">const</span> <span class="token keyword">int</span> v_ <span class="token operator">=</span> <span class="token function">qMin</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> slider<span class="token operator">-></span>maximum<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">sliderPositionFromValue</span><span class="token punctuation">(</span>slider<span class="token operator">-></span>minimum<span class="token punctuation">,</span> slider<span class="token operator">-></span>maximum<span class="token punctuation">,</span> v_<span class="token punctuation">,</span> available<span class="token punctuation">)</span> <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span>slider<span class="token operator">-></span>orientation <span class="token operator">==</span> Qt<span class="token double-colon punctuation">::</span>Horizontal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>slider<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token double-colon punctuation">::</span>TicksBothSides<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">//两侧都会绘画, 总的矩形-中心滑槽滑块最小公共矩形</span>
                            p<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> rect<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token punctuation">,</span> rectHandle<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            p<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> rect<span class="token punctuation">.</span><span class="token function">bottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token punctuation">,</span> rectHandle<span class="token punctuation">.</span><span class="token function">bottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                            p<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> rectSliderTickmarks<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token punctuation">,</span> rectSliderTickmarks<span class="token punctuation">.</span><span class="token function">bottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>slider<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token double-colon punctuation">::</span>TicksBothSides<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            p<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token punctuation">,</span> rectHandle<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            p<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token punctuation">,</span> rectHandle<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                            p<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span>rectSliderTickmarks<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token punctuation">,</span> rectSliderTickmarks<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token comment">// in the case where maximum is max int</span>
                    <span class="token keyword">int</span> nextInterval <span class="token operator">=</span> v <span class="token operator">+</span> interval<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextInterval <span class="token operator">&lt;</span> v<span class="token punctuation">)</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    v <span class="token operator">=</span> nextInterval<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>

        <span class="token punctuation">&#125;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token class-name">DStyle</span><span class="token double-colon punctuation">::</span><span class="token function">drawComplexControl</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> p<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="若刻度异常情况-非bug-："><a href="#若刻度异常情况-非bug-：" class="headerlink" title="若刻度异常情况(非bug)："></a>若刻度异常情况(非bug)：</h2><p><strong>注意：</strong>  下图中是使用<code>pen.setStyle(Qt::DotLine);</code>来绘画的，上面的代码修改为了<code>pen.setStyle(Qt::CustomDashLine);</code>来绘画，所以会<strong>（看到的滑槽）</strong>略有不一样；</p>
<p>当显示区域比较小的时候,而刻度条的个数又比较多的时候(密密麻麻的那种),当超过某一阈值时候,系统会自动压缩显示,一个变成**”胖瘦相间隔”**,此时如果将该粗窗口放大,则会被重绘画显示正常,刻度条均匀相间隔。</p>
<p>原图效果：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190904192819.png"/ loading="lazy">







<p>本来还以为是自己重新绘画的效果造成的,后面确定是过密形成的显示异常情况.就想着有没有能够的解决方法,能够重新绘画显示.想着参考<code>QFusion</code> 风格的实现,于是翻看源码，<strong>只看绘画刻度部分</strong>的Qt源码：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>subControls <span class="token operator">&amp;</span> SC_SliderTickmarks<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                painter<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span>outline<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> tickSize <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>PM_SliderTickmarkOffset<span class="token punctuation">,</span> option<span class="token punctuation">,</span> widget<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> available <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>PM_SliderSpaceAvailable<span class="token punctuation">,</span> slider<span class="token punctuation">,</span> widget<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> interval <span class="token operator">=</span> slider<span class="token operator">-></span>tickInterval<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>interval <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    interval <span class="token operator">=</span> slider<span class="token operator">-></span>singleStep<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">QStyle</span><span class="token double-colon punctuation">::</span><span class="token function">sliderPositionFromValue</span><span class="token punctuation">(</span>slider<span class="token operator">-></span>minimum<span class="token punctuation">,</span> slider<span class="token operator">-></span>maximum<span class="token punctuation">,</span> interval<span class="token punctuation">,</span>
                                                        available<span class="token punctuation">)</span>
                            <span class="token operator">-</span> <span class="token class-name">QStyle</span><span class="token double-colon punctuation">::</span><span class="token function">sliderPositionFromValue</span><span class="token punctuation">(</span>slider<span class="token operator">-></span>minimum<span class="token punctuation">,</span> slider<span class="token operator">-></span>maximum<span class="token punctuation">,</span>
                                                              <span class="token number">0</span><span class="token punctuation">,</span> available<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>
                        interval <span class="token operator">=</span> slider<span class="token operator">-></span>pageStep<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>interval <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    interval <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

                <span class="token keyword">int</span> v <span class="token operator">=</span> slider<span class="token operator">-></span>minimum<span class="token punctuation">;</span>
                <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>PM_SliderLength<span class="token punctuation">,</span> slider<span class="token punctuation">,</span> widget<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>v <span class="token operator">&lt;=</span> slider<span class="token operator">-></span>maximum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> slider<span class="token operator">-></span>maximum <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> interval <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">const</span> <span class="token keyword">int</span> v_ <span class="token operator">=</span> <span class="token function">qMin</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> slider<span class="token operator">-></span>maximum<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">sliderPositionFromValue</span><span class="token punctuation">(</span>slider<span class="token operator">-></span>minimum<span class="token punctuation">,</span> slider<span class="token operator">-></span>maximum<span class="token punctuation">,</span>
                                                      v_<span class="token punctuation">,</span> <span class="token punctuation">(</span>horizontal
                                                           <span class="token operator">?</span> slider<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                                           <span class="token operator">:</span> slider<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> len<span class="token punctuation">,</span>
                                                      slider<span class="token operator">-></span>upsideDown<span class="token punctuation">)</span> <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
                    <span class="token keyword">int</span> extra <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v_ <span class="token operator">==</span> slider<span class="token operator">-></span>minimum <span class="token operator">||</span> v_ <span class="token operator">==</span> slider<span class="token operator">-></span>maximum<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span>horizontal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticksAbove<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            painter<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> slider<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> extra<span class="token punctuation">,</span>
                                              pos<span class="token punctuation">,</span> slider<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> tickSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticksBelow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            painter<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> slider<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">bottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> extra<span class="token punctuation">,</span>
                                              pos<span class="token punctuation">,</span> slider<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">bottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> tickSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticksAbove<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            painter<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span>slider<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> extra<span class="token punctuation">,</span> pos<span class="token punctuation">,</span>
                                              slider<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> tickSize<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticksBelow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            painter<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span>slider<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> extra<span class="token punctuation">,</span> pos<span class="token punctuation">,</span>
                                              slider<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> tickSize<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token comment">// in the case where maximum is max int</span>
                    <span class="token keyword">int</span> nextInterval <span class="token operator">=</span> v <span class="token operator">+</span> interval<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextInterval <span class="token operator">&lt;</span> v<span class="token punctuation">)</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    v <span class="token operator">=</span> nextInterval<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>等等， 这根本没有考虑这个问题，好不好。而且感觉绘画刻度的方法，是对一个矩形矩形多次精确的计算，eeemmmmmmmmmm，这样子是不是有点复杂了了。感觉没有我的将这一个超大矩形，分割成为三个小矩形这一思路简单，然后在对每一块小矩形进行相应的绘画。</p>
<br>

<h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>决定尝试一下其原生**<code>QFusion</code><strong>风格（）是怎么解决这个效果,当设置刻度间隔比较小的时候,显示宽度比较窄时候,这个东西出现了”胖瘦相互间隔”，然后利用上面的一开始创建的小例子</strong>，改变步长和刻度间个和max值，看看效果**</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190904191258.png"/ loading="lazy">

<p>甚至再次改变步长和刻度间个和max值，看看效果。过于密集，成了线</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190904192704.jpg"/ loading="lazy">



<p>握草,握了个草,我握了个大草.hhhhhhhhhhhhhhhhhh,原来老哥你也没有设置这个问题啊,果断的出结论,这不是bug.果断不再继续修改了重绘画了.坏坏的笑了几下之后。</p>
<p>于是将一开始出现问题的地方，将该窗口最大化，然后局部拉大，看到这个效果（果然得到了验证）：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190904192930.png"/ loading="lazy">



<p><strong>最后总结：</strong>这个不是bug，或者显示异常。冷静下来是思考:如此窄的矩形里面,显示如此多根刻度线,由于像素限制,只能后绘画的比较密集,当这个数值更大的时候,会发现,这个会变成一条直线(放大拉开显示,才会显示其实是均匀相间隔的).</p>
<br>

<h2 id="思考总结："><a href="#思考总结：" class="headerlink" title="思考总结："></a>思考总结：</h2><ul>
<li>首先检查代码，是否是相关部分的代码逻辑有问题</li>
<li>仍然觉得不应该之后，试一下Qt自带的是否会重现，排除是自己还是非自己原因</li>
<li>改变相关的值，写小例子验证，查看效果</li>
<li>发现经验：+1；  完美结束</li>
</ul>
<br>

<h2 id="更新：更加精准的绘画滑槽"><a href="#更新：更加精准的绘画滑槽" class="headerlink" title="更新：更加精准的绘画滑槽"></a>更新：更加精准的绘画滑槽</h2><p>更新于2019-09-09   </p>
<ul>
<li><a href="https://xmuli.tech/posts/dd3bbc4c">QStyle自定义重绘QSlider控件</a></li>
<li><a href="https://xmuli.tech/posts/2b7554be">QStyle自定义重绘QSlider控件二</a></li>
</ul>
<br>

<h2 id="思考分享："><a href="#思考分享：" class="headerlink" title="思考分享："></a>思考分享：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>QStyle</tag>
      </tags>
  </entry>
  <entry>
    <title>QStyle自定义重绘QSlider控件二</title>
    <url>/posts/2b7554be/</url>
    <content><![CDATA[<p><strong>简介：</strong>  修改创建控件时候，的默认矩形大小，重写<code>sizeFromContents()</code>函数，给定默认控件大小</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p><strong>编程环境：</strong>  <code>deepin 15.11 x64 专业版 </code>    <strong>Kernel：</strong>  <code>x86_64 Linux 4.15.0-30deepin-generic</code></p>
<p><strong>编程软件：</strong>   <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p>
<br>

<h2 id="系列博文："><a href="#系列博文：" class="headerlink" title="系列博文："></a>系列博文：</h2><ul>
<li><a href="https://xmuli.tech/posts/dd3bbc4c"><code>QStyle</code>自定义重绘<code>QSlider</code>控件</a> </li>
<li><a href="https://xmuli.tech/posts/70612500">QStyle之PenStyle的CustomDashLine使用</a> 【更新：更加精准的绘画滑槽】</li>
<li><a href="https://xmuli.tech/posts/e4408abd/">重绘的QStyle中sizeFromContents()没有被调用</a></li>
<li><a href="https://xmuli.tech/posts/2b7554be">QStyle自定义重绘QSlider控件二</a>（重要）</li>
</ul>
<br>

<h2 id="更新原因："><a href="#更新原因：" class="headerlink" title="更新原因："></a>更新原因：</h2><p>因为前一个版本，出现了一个小的bug：那就是，遗漏了当<code>QSlider</code>无需刻度的时候（枚举值为<code>QSlider::NoTicks</code>），会发生<strong>opt-&gt;rect</strong>仍然会比矩形（滑块和滑槽的最小公共矩形）要大；即：没有去除掉用来保留绘画刻度的矩形区域。</p>
<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>上一张最终的运行效果：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190917231536.png"/ loading="lazy">

<br>

<h2 id="QSlider枚举含义："><a href="#QSlider枚举含义：" class="headerlink" title="QSlider枚举含义："></a>QSlider枚举含义：</h2><p>下面对一些枚举进行一些含义的解释：</p>
<table>
<thead>
<tr>
<th align="center">枚举</th>
<th align="center">中文含义</th>
<th align="center">Qt文档（其英文含义比较模糊，此处以约定中文含义为准）</th>
</tr>
</thead>
<tbody><tr>
<td align="center">PM_SliderThickness</td>
<td align="center">Slider总的高度　＝　滑块高度＋刻度高度</td>
<td align="center">Total slider thickness.</td>
</tr>
<tr>
<td align="center">PM_SliderControlThickness</td>
<td align="center">只是滑块的单独高度</td>
<td align="center">Thickness of the slider handle.</td>
</tr>
<tr>
<td align="center">PM_SliderLength</td>
<td align="center">只是滑块的长度</td>
<td align="center">Thickness of the slider handle.</td>
</tr>
<tr>
<td align="center">PM_SliderLength</td>
<td align="center">只是滑块的长度</td>
<td align="center">Length of the slider.</td>
</tr>
<tr>
<td align="center">PM_SliderTickmarkOffset</td>
<td align="center">用作slider的刻度线的高度</td>
<td align="center">The offset between the tickmarks and the slider.</td>
</tr>
<tr>
<td align="center">PM_SliderSpaceAvailable</td>
<td align="center">暂时未用到</td>
<td align="center">The available space for the slider to move.</td>
</tr>
</tbody></table>
<p>上面表格参考出处代码：<strong>qcommonstyle.cpp</strong>　 4526行</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">case</span> PM_SliderTickmarkOffset<span class="token operator">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">const</span> QStyleOptionSlider<span class="token operator">*</span> sl <span class="token operator">=</span> <span class="token generic-function"><span class="token function">qstyleoption_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">const</span> QStyleOptionSlider<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> space <span class="token operator">=</span> <span class="token punctuation">(</span>sl<span class="token operator">-></span>orientation <span class="token operator">==</span> Qt<span class="token double-colon punctuation">::</span>Horizontal<span class="token punctuation">)</span> <span class="token operator">?</span> sl<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token operator">:</span> sl<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> thickness <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>PM_SliderControlThickness<span class="token punctuation">,</span> sl<span class="token punctuation">,</span> widget<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> ticks <span class="token operator">=</span> sl<span class="token operator">-></span>tickPosition<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticks <span class="token operator">==</span> QSlider<span class="token double-colon punctuation">::</span>TicksBothSides<span class="token punctuation">)</span>
            ret <span class="token operator">=</span> <span class="token punctuation">(</span>space <span class="token operator">-</span> thickness<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ticks <span class="token operator">==</span> QSlider<span class="token double-colon punctuation">::</span>TicksAbove<span class="token punctuation">)</span>
            ret <span class="token operator">=</span> space <span class="token operator">-</span> thickness<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="绘画思路："><a href="#绘画思路：" class="headerlink" title="绘画思路："></a>绘画思路：</h2><p>上一篇的思路是：</p>
<ul>
<li>将矩形拆分为三个小矩形</li>
<li>对于每一个矩形进行单独的判断（是否有无），若是有则绘画</li>
</ul>
<p>而这一篇则是，在第一步骤之前，就进行修改，在<code>sizeFromContents()</code>里面进行初始的矩形计算；</p>
<p>先绘制默认大小，给出默认opt-&gt;rect矩形的大小（此时还没有开始计算每一个矩形的大小:将这个最大的矩形进行拆分）：</p>
<p>在**virtual QSize sizeFromContents(ContentsType ct, const QStyleOption *opt, const QSize &amp;contentsSize, const QWidget *w) const override;**里面，填写如下代码：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> sliderContHeight <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>PM_SliderControlThickness<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> widget<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//单独滑块高度</span>
            <span class="token keyword">int</span> tickMarkHeight <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>PM_SliderTickmarkOffset<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> widget<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//单独刻度线高度</span>
            sliderContHeight <span class="token operator">+=</span> tickMarkHeight<span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>slider<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token double-colon punctuation">::</span>NoTicks<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                sliderContHeight <span class="token operator">-=</span> tickMarkHeight<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>slider<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token double-colon punctuation">::</span>TicksBothSides<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                sliderContHeight <span class="token operator">+=</span> tickMarkHeight<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>slider<span class="token operator">-></span>orientation <span class="token operator">==</span> Qt<span class="token double-colon punctuation">::</span>Horizontal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                size<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token function">qMax</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sliderContHeight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                size<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token function">qMax</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sliderContHeight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">case</span> CT_MenuBarItem<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> frame_margins <span class="token operator">=</span> <span class="token class-name">DStyle</span><span class="token double-colon punctuation">::</span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>PM_FrameMargins<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> widget<span class="token punctuation">)</span><span class="token punctuation">;</span>
        size <span class="token operator">+=</span> <span class="token function">QSize</span><span class="token punctuation">(</span>frame_margins <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> frame_margins <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> size<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>


]]></content>
      <categories>
        <category>学习 - C/C++ 序一 技法</category>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>QStyle</tag>
      </tags>
  </entry>
  <entry>
    <title>QStyle设置界面的外观和QCommonStyle继承关系图讲解和使用</title>
    <url>/posts/f6acd9d8/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  本文章讲解类容如下</p>
<ul>
<li><p>讲述绘画自定义风格的 Style 的框架结构；</p>
</li>
<li><p>使用 QStyle 设置界面的外观</p>
</li>
<li><p>QStyle &#x2F; QCommonStyle 继承关系图</p>
</li>
<li><p>如何继承 QCommonStyle 类来创建自己的自定义的风格样式 xxStyle</p>
</li>
<li><p>讲解如下函数：polish()，unpolish()，drawPrimitive()，drawControl()，subElementRect()，drawComplexControl()，subControlRect()，pixelMetric()，styleHint()</p>
</li>
</ul>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="QStyle-设置界面的外观："><a href="#QStyle-设置界面的外观：" class="headerlink" title="QStyle 设置界面的外观："></a>QStyle 设置界面的外观：</h2><p>　　因 Qt 本身即是跨平台的一个类库，其中 GUI 的控件，在不同的操作系统下，会有着不同的显示效果，就是默认缺省效果。其中 <code>QApplication::style()</code> 可以返回应用程序的缺省样式。Qt 内置了一系列样式，windows 样式和 fusion 样式默认是可用的，而有些样式需在特定平台上才有用，比如 windowsxp 样式、window svisata 样式、gtk 样式、macintosh 样式等。</p>
<p>　　Qt 内置的界面的控件都是使用 <code>QStyle</code> 来进行绘画的，来确保它们在运行平台的界面效果是一致的。下面以 <code>QTableWidget</code>（含<code>QScrollBar</code>） 在不同的操作系统上面的样式效果：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_20200216185631.png"/ loading="lazy">



<p>　　可以看到，即使是相同的控件，使用同一个主题 Style 在不同的操作系统下，其样式也是一样的。严谨说，有那么一丢丢的细节差异，但是整体风格基本是保持一致的。</p>
<br>

<h2 id="QCommonStyle-继承关系图："><a href="#QCommonStyle-继承关系图：" class="headerlink" title="QCommonStyle 继承关系图："></a>QCommonStyle 继承关系图：</h2><p>　　下面给出 <code>QCommonStyle</code> 类的继承关系图；这个类是一个比较完整的基类的「eg：某一具体风格 QWindowsStyle、QMacStyle」的基类。<strong>它非常重要</strong></p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200216_231155.jpeg"/ loading="lazy">

<br>

<h2 id="QCommonStyle："><a href="#QCommonStyle：" class="headerlink" title="QCommonStyle："></a>QCommonStyle：</h2><h3 id="Qt-文档理解："><a href="#Qt-文档理解：" class="headerlink" title="Qt 文档理解："></a>Qt 文档理解：</h3><p>首先参看 Qt 官方资料：</p>
<blockquote>
<h2 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h2><p>这个抽象类实现了一些小部件的外观，这些外观是Qt提供和提供的所有GUI样式所共有的。</p>
<p>由于QCommonStyle继承了<a href="https://doc.qt.io/qt-5/qstyle.html">QStyle</a>，因此其所有功能都在<a href="https://doc.qt.io/qt-5/qstyle.html">QStyle</a>文档中进行了充分记录。</p>
<p><strong>另请参见</strong><a href="https://doc.qt.io/qt-5/qstyle.html">QStyle</a>和<a href="https://doc.qt.io/qt-5/qproxystyle.html">QProxyStyle</a>。</p>
</blockquote>
<h3 id="项目中理解："><a href="#项目中理解：" class="headerlink" title="项目中理解："></a>项目中理解：</h3><p><strong>接着，就是实际项目中，对此 QCommonStyle 类的理解：</strong></p>
<p>　　<code>QCommonStyle</code> 是一个已经比较完备的基础类，言外之意是，已经可以看成某一个具体的样式风格了，但是具体的某些细节还是需要打磨（即再派生一个子类）；但是这并不妨碍什么(🐶头)，可以作为我们在写自定义风格时候的一个 <strong>最重要的、也是最经常翻看源码的参考类</strong> ；像具体的控件 QSlider，QProgressBar、QPushButton 等 GUI 控件的界面样式，都是在这里面实现的。</p>
<p>　　而 QStyle 是一个纯虚抽象基类。是所有风格的源头祖上，查看他的 .h 文件会收获风格的框架，初看可以看出一个模糊框架，后续有一定实战代码再来反复回味，体会框架。</p>
<br>

<h2 id="创建一种自定义-Style-风格："><a href="#创建一种自定义-Style-风格：" class="headerlink" title="创建一种自定义 Style 风格："></a>创建一种自定义 Style 风格：</h2><p>　　觉得所有控件的风格样式都是不满足你的审美，那又如何创建一个自定义的风格类型，属于和 MacOS，Windows，Linux 平级的那种风格该如何创建呢？</p>
<p>　　<strong>这里我创建一个自定义风格 <font color=#D0087E size=4 face="幼圆">class: MyStyle</font></strong></p>
<p>　　因为希望能够跨平台使用该风格，由上图的继承关系图可看，一般有三种继承方式：</p>
<p>　　QCommonStyle 类实现了 GUI 控件的共同界面外观， 因此该类实现的界面并不一定完整，而 QProxyStyle 类则实现了一个 QStyle(通常是默认 的系统样式)，因此该类的实现比较完整。</p>
<ul>
<li><p>继承于 QCommonStyle ：</p>
<ul>
<li>优点一：接口很全面，不需要写过多地代码（相对直接继承 QStyle 而言）</li>
<li>优点二：可以跨平台使用该风格（相对直接继承于 QMacStyle）</li>
</ul>
</li>
<li><p>继承于 QProxyStyle ：</p>
<ul>
<li>优点：QCommonStyle 的子类 QProxyStyle</li>
</ul>
</li>
<li><p>继承于 QStyle :</p>
<ul>
<li>缺点明显：里面虚函数超级多，整个工作量庞大无比</li>
</ul>
</li>
</ul>
<p>　　然后在该 <font color=#D0087E size=4 face="幼圆">class: MyStyle</font> 里面，重写如下的虚函数即可：👇的是必不可少</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// QStyle interface</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">polish</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">unpolish</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">drawPrimitive</span><span class="token punctuation">(</span>PrimitiveElement pe<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">drawControl</span><span class="token punctuation">(</span>ControlElement element<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    QRect <span class="token function">subElementRect</span><span class="token punctuation">(</span>SubElement subElement<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>option<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>widget<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">drawComplexControl</span><span class="token punctuation">(</span>ComplexControl cc<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOptionComplex <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>widget<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    QRect <span class="token function">subControlRect</span><span class="token punctuation">(</span>ComplexControl cc<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOptionComplex <span class="token operator">*</span>opt<span class="token punctuation">,</span> SubControl sc<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>widget<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">pixelMetric</span><span class="token punctuation">(</span>PixelMetric metric<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>option<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>widget<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    QSize <span class="token function">sizeFromContents</span><span class="token punctuation">(</span>ContentsType ct<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> <span class="token keyword">const</span> QSize <span class="token operator">&amp;</span>contentsSize<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">styleHint</span><span class="token punctuation">(</span>StyleHint stylehint<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>widget<span class="token punctuation">,</span> QStyleHintReturn <span class="token operator">*</span>returnData<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="继承-QStyle-x2F-QCommonStyle-的虚函数的含义："><a href="#继承-QStyle-x2F-QCommonStyle-的虚函数的含义：" class="headerlink" title="继承 QStyle&#x2F;QCommonStyle 的虚函数的含义："></a>继承 QStyle&#x2F;QCommonStyle 的虚函数的含义：</h2><p>　　因为需要在 <font color=#D0087E size=4 face="幼圆"><strong>class: MyStyle</strong></font> 里面继承重写如 QStyle&#x2F;QCommonStyle 的虚函数；这里讲述它们的基本作用。以及调用顺序，犹记得，网上这一块的教程基本没有，只有那么一篇的文章讲解的很棒，反复揣摩十遍以上，也总是是是而非的感觉，朦胧且模糊。这也算是我出该文章的一个很大原因。</p>
<p>　　这些函数之间的调用顺序如下「并不是是💯的严谨」，为了理解框架和脉络结构，在一个比较短的时间内入门，可以这样理解，在没有大的错误下：</p>
<h3 id="控件的行为的流程图："><a href="#控件的行为的流程图：" class="headerlink" title="控件的行为的流程图："></a>控件的行为的流程图：</h3><ul>
<li><strong>插件相关</strong><ol>
<li>安装指定控件的指定功能</li>
<li>卸载指定控件的指定功能</li>
<li>预先预备（开启）指定控件的指定功能，准备开启</li>
</ol>
</li>
</ul>
<p>　　此三个函数摆放一起，其执行顺序相似，用来初始化控件的附加功能。</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6%E7%9A%84%E5%89%AF%E6%9C%AC.png"/ loading="lazy">

<h3 id="控件的绘画流程："><a href="#控件的绘画流程：" class="headerlink" title="控件的绘画流程："></a>控件的绘画流程：</h3><ul>
<li><strong>绘画相关：</strong><ol>
<li><strong>Qt 原生</strong> 或  <strong>自定义需求</strong> 定义好一些基础的宽度，用枚举值记录📝一些基本的像素值（一般 int 类型）</li>
<li>定义该 GUI 控件的矩形大小，给它一个系统的初始化大小 QSize</li>
<li>根据该 QRect 大小分为多个小的 QRect（这个是有 Qt 本生就将一个<strong>复杂控件</strong> 用枚举值来划分好了为若干个<strong>简单地控件</strong> ）</li>
<li>通过<code>drawComplexControl()</code>或<code>drawControl()</code>向下分派划分任务</li>
<li>对 GUI 控件进行风格的重绘</li>
</ol>
</li>
</ul>
<p><font color=#FF0000  size=4 face="幼圆">这里的箭黑色→，是指调用顺序，有时候也可以代指 A 调用了 B 的函数；而棕色➡︎表示也可以跳过黑色一部分，直接跳着调用下面的。</font></p>
<ul>
<li><font color=#FF0000  size=4 face="幼圆">当遇到简单控件时候，可以直接按照褐色，直接进行具体的绘画，而没有拆分步骤。</font></li>
<li><font color=#FF0000  size=4 face="幼圆">而遇到复杂控件时候就可以按照黑色→依顺序拆分为多个简单控件，进行绘画</font></li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_IMG_1584.PNG"/ loading="lazy">

<br>

<h2 id="虚函数作用-："><a href="#虚函数作用-：" class="headerlink" title="虚函数作用:："></a>虚函数作用:：</h2><p>　　上面继承的一些需要重写的虚函数的，它们大致的功能如下，调用步骤也是如下面所讲。犹记得，当初初看代码懵逼，查阅 Qt 文档 Assistant 里面什么都没写，wtf❓❓❓</p>
<p>　　再来回顾感受一下官方没有说明外加套娃的骚操作：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200218_003815.jpeg"/ loading="lazy">

<br>

<h3 id="polish"><a href="#polish" class="headerlink" title="polish():"></a>polish():</h3><blockquote>
<p><font color=#D0087E size=4 face="幼圆">&#x2F;&#x2F;polish():</font>  安装 GUI 的某控件的某一功能，启用该行为<br>virtual void polish(QWidget *widget) override;</p>
</blockquote>
<p><strong>分析：</strong> </p>
<p>　　用于初始化部件的外观，会在部件创建完成之后，在第一次显示之前被调用，默 认实现什么也不做。子类化 QStyle 时，可利用以上函数的调用时机，对部件的一些属性 进行初始化。</p>
<p>　　这个函数理解起来有困难，至少一开始是，那么就举一个实际需求的栗子：</p>
<p><strong>如果检测到该控件是 QScrollBar 的话，就设置其为透明；</strong></p>
<p> <font color=#FE7207  size=4 face="幼圆"><em>Qt::WA_OpaquePaintEvent枚举含义：</em></font></p>
<p><font color=#FE7207  size=4 face="幼圆"> 注意：与WA_NoSystemBackground不同，WA_OpaquePaintEvent努力避免透明的窗口背景。 </font></p>
<p>注：可以想象为 MacOS 系统的滚动条，鼠标离开就会逐渐消失（隐藏、透明）的效果。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">MyStyle</span><span class="token double-colon punctuation">::</span><span class="token function">polish</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">QCommonStyle</span><span class="token double-colon punctuation">::</span><span class="token function">polish</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token generic-function"><span class="token function">qobject_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>QComboBox <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>
            <span class="token operator">||</span> <span class="token generic-function"><span class="token function">qobject_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>QScrollBar <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        w<span class="token operator">-></span><span class="token function">setAttribute</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>WA_Hover<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> scrollBar <span class="token operator">=</span> <span class="token generic-function"><span class="token function">qobject_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>QScrollBar <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span>
        scrollBar<span class="token operator">-></span><span class="token function">setAttribute</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>WA_OpaquePaintEvent<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="unpolish"><a href="#unpolish" class="headerlink" title="unpolish():"></a>unpolish():</h3><blockquote>
<p><font color=#D0087E size=4 face="幼圆">&#x2F;&#x2F;unpolish():</font>  卸载 GUI 的某控件的某一功能，禁用该行为 </p>
<p>virtual void unpolish(QWidget *widget) override;</p>
</blockquote>
<p><strong>分析：</strong> </p>
<p>　　作用和　polish()　相似，但只有在部件被销毁时才会被调用。举一个实际需求的栗子：</p>
<p><strong>如果检测到该控件是 QScrollBar 的话，就设置其不透明；</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">MyStyle</span><span class="token double-colon punctuation">::</span><span class="token function">unpolish</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">QCommonStyle</span><span class="token double-colon punctuation">::</span><span class="token function">unpolish</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token generic-function"><span class="token function">qobject_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>QScrollBar <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span>
      w<span class="token operator">-></span><span class="token function">setAttribute</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>WA_Hover<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> scrollBar <span class="token operator">=</span> <span class="token generic-function"><span class="token function">qobject_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>QScrollBar <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span>
      scrollBar<span class="token operator">-></span><span class="token function">setAttribute</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>WA_OpaquePaintEvent<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="styleHint"><a href="#styleHint" class="headerlink" title="styleHint():"></a>styleHint():</h3><blockquote>
<p><font color=#D0087E size=4 face="幼圆">&#x2F;&#x2F;styleHint():</font>  开启或关闭某一 GUI 的控件的行为，或开启选择指定的某种特性</p>
<p>virtual int styleHint(StyleHint stylehint, const QStyleOption *opt, const QWidget *widget, QStyleHintReturn *returnData) const override;</p>
</blockquote>
<p><strong>分析：</strong></p>
<p>　　这个同样是不怎么好理解。举一🍐：</p>
<p><strong>对 QSlider 控件，开启鼠标左键和中键，鼠标🖱的中键(和⬅️键)指滑槽哪一个刻度，其游标就跳转到该刻度值的地方</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token class-name">MyStyle</span><span class="token double-colon punctuation">::</span><span class="token function">styleHint</span><span class="token punctuation">(</span>QStyle<span class="token double-colon punctuation">::</span>StyleHint sh<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">,</span> QStyleHintReturn <span class="token operator">*</span>shret<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>sh<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> SH_Slider_AbsoluteSetButtons<span class="token operator">:</span>
        <span class="token keyword">return</span> Qt<span class="token double-colon punctuation">::</span>LeftButton <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>MidButton<span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token class-name">QCommonStyle</span><span class="token double-colon punctuation">::</span><span class="token function">styleHint</span><span class="token punctuation">(</span>sh<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> w<span class="token punctuation">,</span> shret<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="subControlRect"><a href="#subControlRect" class="headerlink" title="subControlRect():"></a>subControlRect():</h3><blockquote>
<p><font color=#D0087E size=4 face="幼圆">&#x2F;&#x2F;subControlRect():</font>  返回一个 GUI 的复杂控件 cc 的子控件 subControl 的矩形</p>
<p>virtual QRect subControlRect(ComplexControl cc, const QStyleOptionComplex *opt, SubControl sc, const QWidget *widget) const override;</p>
</blockquote>
<br>

<h3 id="sizeFromContents"><a href="#sizeFromContents" class="headerlink" title="sizeFromContents():"></a>sizeFromContents():</h3><blockquote>
<p><font color=#D0087E size=4 face="幼圆">&#x2F;&#x2F;sizeFromContents():</font>  返回某一 GUI 控件的中心矩形的大小</p>
<p>virtual QSize sizeFromContents(ContentsType ct, const QStyleOption *opt, const QSize &amp;contentsSize, const QWidget *w) const override;</p>
</blockquote>
<br>

<h3 id="subElementRect"><a href="#subElementRect" class="headerlink" title="subElementRect():"></a>subElementRect():</h3><blockquote>
<p><font color=#D0087E size=4 face="幼圆">&#x2F;&#x2F;subElementRect():</font>  返回<strong>某一个元素</strong>的矩形大小；由样式选项 option 所描述的控件的子元素 subElement 的矩形；</p>
<p>virtual QRect subElementRect(SubElement subElement, const QStyleOption *option, const QWidget *widget) const override;</p>
<p><strong>「补充：某一个元素 ≈ 某一个枚举 ≈ 具体控件的某一个部分」</strong></p>
</blockquote>
<br>

<h3 id="pixelMetric"><a href="#pixelMetric" class="headerlink" title="pixelMetric():"></a>pixelMetric():</h3><blockquote>
<p><font color=#D0087E size=4 face="幼圆">&#x2F;&#x2F;pixelMetric():</font> 返回<strong>某一个元素</strong>的长度</p>
<p>virtual int pixelMetric(PixelMetric metric, const QStyleOption *option, const QWidget *widget) const override;</p>
<p><strong>「补充：某一个元素 ≈ 某一个枚举 ≈ 具体控件的某一个部分」</strong></p>
</blockquote>
<p><strong>分析：</strong></p>
<p>　　获取菜单栏的 item 之间的竖直之间的间隔 PM_MenuVMargin &#x3D; 8 px；**</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pixelMetric</span><span class="token punctuation">(</span>PixelMetric metric<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>option<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>widget<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">switch</span> <span class="token punctuation">(</span>metric<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">case</span> PM_MenuVMargin<span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token number">8</span><span class="token punctuation">;</span>
  <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  
  <span class="token keyword">return</span> <span class="token class-name">QCommonStyle</span><span class="token double-colon punctuation">::</span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>metric<span class="token punctuation">,</span> option<span class="token punctuation">,</span> widget<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="drawComplexControl"><a href="#drawComplexControl" class="headerlink" title="drawComplexControl():"></a>drawComplexControl():</h3><blockquote>
<p><font color=#D0087E size=4 face="幼圆">&#x2F;&#x2F;drawComplexControl():</font> 绘画 GUI 某一浮渣控件的元素，将该控件的每一个部分都绘画分派出去，调用 drawControl() 里面对应的枚举。</p>
<p>virtual void drawComplexControl(ComplexControl cc, const QStyleOptionComplex *opt, QPainter *p, const QWidget *widget) const override;</p>
</blockquote>
<p>可参考drawControl();但是是比它更上一层。</p>
<br>

<h3 id="drawControl"><a href="#drawControl" class="headerlink" title="drawControl():"></a>drawControl():</h3><blockquote>
<p><font color=#D0087E size=4 face="幼圆">&#x2F;&#x2F;drawControl():</font>  绘画 GUI 某一控件的某一部分(控制元素)</p>
<p>virtual void drawControl(ControlElement element, const QStyleOption *opt, QPainter *p, const QWidget *w) const override;</p>
</blockquote>
<p><strong>分析：</strong></p>
<p>　　此处以绘画复杂解GUI 控件，进度条 QProgressBar 为例子：</p>
<p>其为复杂控件，用一张图来表示，</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200217_235136.jpeg"/ loading="lazy">

<p>其中实现代码（局部）如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">ChameleonStyle</span><span class="token double-colon punctuation">::</span><span class="token function">drawControl</span><span class="token punctuation">(</span>QStyle<span class="token double-colon punctuation">::</span>ControlElement element<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> CE_ProgressBar<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//显示进度区域</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">const</span> QStyleOptionProgressBar <span class="token operator">*</span>progBar <span class="token operator">=</span>  <span class="token generic-function"><span class="token function">qstyleoption_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">const</span> QStyleOptionProgressBar <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            QStyleOptionProgressBar progGroove <span class="token operator">=</span> <span class="token operator">*</span>progBar<span class="token punctuation">;</span>
            <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">drawControl</span><span class="token punctuation">(</span>CE_ProgressBarGroove<span class="token punctuation">,</span> <span class="token operator">&amp;</span>progGroove<span class="token punctuation">,</span> p<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            QStyleOptionProgressBar subopt <span class="token operator">=</span> <span class="token operator">*</span>progBar<span class="token punctuation">;</span>
            subopt<span class="token punctuation">.</span>rect <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">subElementRect</span><span class="token punctuation">(</span>SE_ProgressBarContents<span class="token punctuation">,</span> progBar<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">drawControl</span><span class="token punctuation">(</span>CE_ProgressBarContents<span class="token punctuation">,</span> <span class="token operator">&amp;</span>subopt<span class="token punctuation">,</span> p<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
          subopt<span class="token punctuation">.</span>rect <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">subElementRect</span><span class="token punctuation">(</span>SE_ProgressBarLabel<span class="token punctuation">,</span> progBar<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">drawControl</span><span class="token punctuation">(</span>CE_ProgressBarLabel<span class="token punctuation">,</span> <span class="token operator">&amp;</span>subopt<span class="token punctuation">,</span> p<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">case</span> CE_ProgressBarGroove<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//滑槽显示</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>实际绘画
    <span class="token punctuation">&#125;</span>
	  <span class="token keyword">case</span> CE_ProgressBarContents<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">//进度滑块显示</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">&#125;</span>
	  <span class="token keyword">case</span> CE_ProgressBarLabel<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>此处放一个曾经绘画的🌰最终效果图：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191008224313.png"/ loading="lazy">

<br>

<h3 id="drawPrimitive"><a href="#drawPrimitive" class="headerlink" title="drawPrimitive():"></a>drawPrimitive():</h3><blockquote>
<p><font color=#D0087E size=4 face="幼圆">&#x2F;&#x2F;drawPrimitive():</font>  绘画 GUI 某一控件的某一部分（原始元素），通常为详细绘画；表示使用 p，样式选项 opt 绘制元素 pe</p>
<p>virtual void drawPrimitive(PrimitiveElement pe, const QStyleOption *opt, QPainter *p, const QWidget *w) const override;</p>
</blockquote>
<p>实际的具体的一个元素的矩形，在此范围内绘画圆角矩形，圆形，三角形等等等，按照需求绘画即可。</p>
<br>

<h2 id="规律归纳："><a href="#规律归纳：" class="headerlink" title="规律归纳："></a>规律归纳：</h2><p>　　以上函数的形参带有 CE_ CC_ PE_ SC_ SE_ 这些前缀开头的。都是表示一个矩形 QRect 的范围。SC_ (子控件)和 SE_ (子元素)是用来返回 subControlRect()和 subElementRect() 的矩形 QRect 的。</p>
<p>　　 最终，通过这些复杂控件、控件、元素的枚举，可以自己在草纸上面绘画出来一个拼装的完好的控件。</p>
<br>

<h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章:"></a>系列文章:</h2><ol>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/104367878">QStyle设置界面的外观和QCommonStyle继承关系图讲解和使用</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/104537944">QStyle&#x2F;DTK重绘Qt-GUI已有控件,举例QScrollBar</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/104987446">QStyle&#x2F;DTK重绘自定义需求控件,举例MySwitchButton</a></li>
</ol>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>QTableView和QStandardItemModel(以及代理的例子)的用法</title>
    <url>/posts/43c8e40a/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  继续学习<code>QTableView</code>和<code>QStandardItemModel</code>的用法，以及这里例子里面有具体使用代理的例子（<strong>模型-视图-代理）</strong>，其中专门给代理写一成一个类来实现他们；书写一个简单的<code>Qt</code>例子🌰，用来实现和验证它的控件的一些属性和功能的用法。</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-12_23-59-14_mark.png"/ loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p><strong>相关博文：</strong>   <a href="https://blog.csdn.net/qq_33154343/article/details/103501667">Model-View-Delegate:”模型-视图-代理”的讲解</a></p>
<br>

<h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><p><strong>编程环境：</strong>  <code>MacOS 10.14.6 (18G103)</code>   <strong>编程软件：</strong> <code>Qt 5.9.8</code>， <code>Qt Creator 4.8.2</code></p>
<br>

<h2 id="QStandardItemModel："><a href="#QStandardItemModel：" class="headerlink" title="QStandardItemModel："></a>QStandardItemModel：</h2><p><code>QStandardItemModel</code>是<font color=#D0087E size=4 face="幼圆">标准的以<strong>项数据（item data）</strong>为基础</font>的 <strong>数据模型类</strong>；</p>
<br>

<h2 id="QTableView："><a href="#QTableView：" class="headerlink" title="QTableView："></a>QTableView：</h2><p><code>QTableView</code>是一个二维数据表视图组件，当通过<code>setModel（）</code>的设置一个<code>QStandardItemModel</code>的时候，一个单元格显示<code>QStandardItemModel</code>数据模型的一个项。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">m_model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QStandardItemModel</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//设置数据模型，一开始设置为默认的2行6列表的一个表</span>
m_selectModet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QItemSelectionModel</span><span class="token punctuation">(</span>m_model<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//设置选择模型</span>

ui<span class="token operator">-></span>tableView<span class="token operator">-></span><span class="token function">setModel</span><span class="token punctuation">(</span>m_model<span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment">//设置数据模型</span>
ui<span class="token operator">-></span>tableView<span class="token operator">-></span><span class="token function">setSelectionModel</span><span class="token punctuation">(</span>m_selectModet<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//设置选择模型</span>
ui<span class="token operator">-></span>tableView<span class="token operator">-></span><span class="token function">setSelectionMode</span><span class="token punctuation">(</span>QAbstractItemView<span class="token double-colon punctuation">::</span>ExtendedSelection<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置选择模式</span>
ui<span class="token operator">-></span>tableView<span class="token operator">-></span><span class="token function">setSelectionBehavior</span><span class="token punctuation">(</span>QAbstractItemView<span class="token double-colon punctuation">::</span>SelectItems<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//设置选择行为</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="QItemSelectionModel"><a href="#QItemSelectionModel" class="headerlink" title="QItemSelectionModel:"></a>QItemSelectionModel:</h2><p><code>QItemSelectionModel</code>是一个用于跟踪视图组建的单元格选择状态类；当在QTableView选择某一个或者一些单元格的时候，可以通过<code>QItemSelectionModel</code>获取选中的单元格的模型索引，为单元格的选择系统方便；</p>
<br>

<h2 id="设计思路："><a href="#设计思路：" class="headerlink" title="设计思路："></a>设计思路：</h2><p>在 <strong>ExQStandardItemModel.h</strong>和 <strong>ExQStandardItemModel.cpp</strong>里面，使用中规中矩的Table视图和数据进行修改，可以显示出来下面的这些数据等；然后再就单独设计一个代理来实现，在 <strong>ExDelegate.h</strong>和  <strong>ExDelegate.cpp</strong> 里面，单独写一个代理组件（eg：创建用于编辑的模型数据的widget组件，如一个QComboBox组件），将QComboBox插入到Table控件里面。这样就可以将所有“视图-模型-代理”这三个全部都使用小例子的方式显示出来。</p>
<p><font color=#FE7207 size=4 face="幼圆">若是想要使用代理部分，就必须重在如下的4个函数</font></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">virtual</span> QWidget<span class="token operator">*</span> <span class="token function">createEditor</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOptionViewItem <span class="token operator">&amp;</span>option<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>      <span class="token comment">//创建用于编辑的模型数据的widget组件，如一个QComboBox组件</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setEditorData</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>editor<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>                                             <span class="token comment">//从数据模型获取数据，显示在代理组件editor之中，让其编辑</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setModelData</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>editor<span class="token punctuation">,</span> QAbstractItemModel <span class="token operator">*</span>model<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>                   <span class="token comment">//代理组件editor上的数据更新到数据模型</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">updateEditorGeometry</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>editor<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOptionViewItem <span class="token operator">&amp;</span>option<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>  <span class="token comment">//用于给widget组件设置一个合适的大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191213_00.gif"/ loading="lazy">

<br>

<h2 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h2><p>其中核心部分的源码，重点和一些难点以及需要注意的一些地方，贴出来如下:</p>
<h3 id="模型-视图部分："><a href="#模型-视图部分：" class="headerlink" title="模型-视图部分："></a>模型-视图部分：</h3><p>在 <strong>.h</strong>头文件</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">ExQStandardItemModel</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>QStringList<span class="token operator">&amp;</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//从list初始化数据模型</span>

<span class="token keyword">private</span> slots<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">onCurrentChanged</span><span class="token punctuation">(</span><span class="token keyword">const</span> QModelIndex<span class="token operator">&amp;</span> current<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex<span class="token operator">&amp;</span> previous<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//当前单元格发生变化时</span>
    <span class="token keyword">void</span> <span class="token function">on_actOpen_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//打开和导入文件，并且在plainTextEdit里面显示</span>
    <span class="token keyword">void</span> <span class="token function">on_actAppend_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//在表格的最后一行添加一行</span>
    <span class="token keyword">void</span> <span class="token function">on_actSave_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//保存文件</span>
    <span class="token keyword">void</span> <span class="token function">on_actInsert_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//在当前选中的一行，其前面插入一行</span>
    <span class="token keyword">void</span> <span class="token function">on_actDelete_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//删除一行</span>
    <span class="token keyword">void</span> <span class="token function">on_actExit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//关闭退出</span>
    <span class="token keyword">void</span> <span class="token function">on_actModelData_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//预览模型</span>
    <span class="token keyword">void</span> <span class="token function">on_actAlignLeft_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//左对齐</span>
    <span class="token keyword">void</span> <span class="token function">on_actAlignCenter_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//文本居中</span>
    <span class="token keyword">void</span> <span class="token function">on_actAlingRight_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//文本右对齐</span>
    <span class="token keyword">void</span> <span class="token function">on_actBold_triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//文本加粗</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    QLabel  <span class="token operator">*</span>m_labCurrFile<span class="token punctuation">;</span>                 <span class="token comment">//当前文件</span>
    QLabel <span class="token operator">*</span>m_labCellPos<span class="token punctuation">;</span>                   <span class="token comment">//当前单元格行列号</span>
    QLabel <span class="token operator">*</span>m_labCellText<span class="token punctuation">;</span>                  <span class="token comment">//当前单元格数据内容</span>
    QStandardItemModel <span class="token operator">*</span>m_model<span class="token punctuation">;</span>            <span class="token comment">//数据模型</span>
    QItemSelectionModel <span class="token operator">*</span>m_selectModet<span class="token punctuation">;</span>     <span class="token comment">//选择模型</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 <strong>.cpp</strong>源文件里面</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">COLUMN</span> <span class="token expression"><span class="token number">6</span>  </span><span class="token comment">//数据表的列数</span></span>

<span class="token class-name">ExQStandardItemModel</span><span class="token double-colon punctuation">::</span><span class="token function">ExQStandardItemModel</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>
    <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token double-colon punctuation">::</span>ExQStandardItemModel<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"QTableView和QStandardItemModel的用法"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    ui<span class="token operator">-></span>mainToolBar<span class="token operator">-></span><span class="token function">setToolButtonStyle</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>ToolButtonTextUnderIcon<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//设置主工具栏的图标样式风格</span>

    m_labCurrFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"当前文件："</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//设置状态栏</span>
    m_labCellPos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"当前单元格："</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labCellText <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"单元格内容："</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labCurrFile<span class="token operator">-></span><span class="token function">setMinimumWidth</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labCellPos<span class="token operator">-></span><span class="token function">setMinimumWidth</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labCellText<span class="token operator">-></span><span class="token function">setMinimumWidth</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labCurrFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labCellPos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labCellText<span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QStandardItemModel</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> COLUMN<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//设置数据模型，一开始设置为默认的2行6列表的一个表</span>
    m_selectModet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QItemSelectionModel</span><span class="token punctuation">(</span>m_model<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//设置选择模型</span>

    ui<span class="token operator">-></span>tableView<span class="token operator">-></span><span class="token function">setModel</span><span class="token punctuation">(</span>m_model<span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment">//设置数据模型</span>
    ui<span class="token operator">-></span>tableView<span class="token operator">-></span><span class="token function">setSelectionModel</span><span class="token punctuation">(</span>m_selectModet<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//设置选择模型</span>
    ui<span class="token operator">-></span>tableView<span class="token operator">-></span><span class="token function">setSelectionMode</span><span class="token punctuation">(</span>QAbstractItemView<span class="token double-colon punctuation">::</span>ExtendedSelection<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置选择模式</span>
    ui<span class="token operator">-></span>tableView<span class="token operator">-></span><span class="token function">setSelectionBehavior</span><span class="token punctuation">(</span>QAbstractItemView<span class="token double-colon punctuation">::</span>SelectItems<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//设置选择行为</span>

    <span class="token function">connect</span><span class="token punctuation">(</span>m_selectModet<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">currentChanged</span><span class="token punctuation">(</span>QModelIndex<span class="token punctuation">,</span> QModelIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onCurrentChanged</span><span class="token punctuation">(</span>QModelIndex<span class="token punctuation">,</span> QModelIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//选择当前单元格变化时的信号与槽</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">ExQStandardItemModel</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">ExQStandardItemModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//从list初始化数据模型QTableView里面</span>
<span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token double-colon punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span>QStringList <span class="token operator">&amp;</span>list<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> rowCount <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                           <span class="token comment">//文本行数，第一行为表头</span>
    m_model<span class="token operator">-></span><span class="token function">setRowCount</span><span class="token punctuation">(</span>rowCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    QString header <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList headerList <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token function">QRegExp</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> QString<span class="token double-colon punctuation">::</span>SkipEmptyParts<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过一个或者多个空格或者tab按键切割</span>
    m_model<span class="token operator">-></span><span class="token function">setHorizontalHeaderLabels</span><span class="token punctuation">(</span>headerList<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//设置表头</span>

    QStandardItem <span class="token operator">*</span>item <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>                                        <span class="token comment">//此处开始，设置表格数据</span>
    QStringList tempList<span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rowCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        QString aLineText <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tempList <span class="token operator">=</span> aLineText<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token function">QRegExp</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> QString<span class="token double-colon punctuation">::</span>SkipEmptyParts<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正则表达式中\s匹配任何空白字符，包括空格、制表符、换页符等等, 等价于[ \f\n\r\t\v]</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> COLUMN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                     <span class="token comment">//设置前5列的item</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                ExDelegate <span class="token operator">*</span>itemDelegate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ExDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                ui<span class="token operator">-></span>tableView<span class="token operator">-></span><span class="token function">setItemDelegateForColumn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> itemDelegate<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QStandardItem</span><span class="token punctuation">(</span>tempList<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            m_model<span class="token operator">-></span><span class="token function">setItem</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>



        item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QStandardItem</span><span class="token punctuation">(</span>tempList<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//最后一列的item</span>
        item<span class="token operator">-></span><span class="token function">setCheckable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                          <span class="token comment">//设置有检查框</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span> tempList<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"https://www.google.com"</span><span class="token punctuation">)</span>
            item<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            item<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>Checked<span class="token punctuation">)</span><span class="token punctuation">;</span>

        m_model<span class="token operator">-></span><span class="token function">setItem</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> COLUMN <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//当前单元格发生变化时</span>
<span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token double-colon punctuation">::</span><span class="token function">onCurrentChanged</span><span class="token punctuation">(</span><span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>current<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>previous<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                               <span class="token comment">//当前模型索性有效</span>
        m_labCellPos<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"当前单元格：%1行, %2列"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span><span class="token function">column</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QStandardItem <span class="token operator">*</span>item <span class="token operator">=</span> m_model<span class="token operator">-></span><span class="token function">itemFromIndex</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//从模型索引获得Item</span>
        m_labCellText<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"当前文件：%1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>item<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//显示item的文字内容</span>

        QFont font <span class="token operator">=</span> item<span class="token operator">-></span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>actBold<span class="token operator">-></span><span class="token function">setChecked</span><span class="token punctuation">(</span>font<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment">//更新actFontBold的check状态</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//action+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="token comment">//打开和导入文件，并且在plainTextEdit里面显示</span>
<span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token double-colon punctuation">::</span><span class="token function">on_actOpen_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString currPath <span class="token operator">=</span> <span class="token class-name">QCoreApplication</span><span class="token double-colon punctuation">::</span><span class="token function">applicationDirPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString fileName <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getOpenFileName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"打开一个文件"</span><span class="token punctuation">,</span> currPath<span class="token punctuation">,</span> <span class="token string">"导入数据文件(*txt);;所有文件(*.*)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    QStringList list<span class="token punctuation">;</span>
    QFile <span class="token function">file</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token double-colon punctuation">::</span>ReadOnly <span class="token operator">|</span> QIODevice<span class="token double-colon punctuation">::</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//只读形式打开文本文件</span>
        QTextStream <span class="token function">stream</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>                                         <span class="token comment">//用文本流读取文件</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stream<span class="token punctuation">.</span><span class="token function">atEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                          <span class="token comment">//读取文本中文本的内容</span>
            QString str <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
            list<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                      <span class="token comment">//关闭</span>
        m_labCurrFile<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"当前文件："</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//设置状态栏</span>

        ui<span class="token operator">-></span>actAppend<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                   <span class="token comment">//设置action的Enabled的属性</span>
        ui<span class="token operator">-></span>actInsert<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>actDelete<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>actSave<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">init</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                            <span class="token comment">//初始化.txt的数据</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//在表格的最后一行添加一行</span>
<span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token double-colon punctuation">::</span><span class="token function">on_actAppend_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QList<span class="token operator">&lt;</span>QStandardItem <span class="token operator">*</span><span class="token operator">></span> list<span class="token punctuation">;</span>
    QStandardItem <span class="token operator">*</span>item<span class="token punctuation">;</span>

    <span class="token comment">//获取表头前五列</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> COLUMN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QStandardItem</span><span class="token punctuation">(</span><span class="token string">"添加一行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token operator">&lt;&lt;</span>item<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//获取最后一列</span>
    QString str <span class="token operator">=</span> m_model<span class="token operator">-></span><span class="token function">headerData</span><span class="token punctuation">(</span>m_model<span class="token operator">-></span><span class="token function">columnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>Horizontal<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>DisplayRole<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QStandardItem</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">"添加一行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setCheckable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token operator">&lt;&lt;</span>item<span class="token punctuation">;</span>

    m_model<span class="token operator">-></span><span class="token function">insertRow</span><span class="token punctuation">(</span>m_model<span class="token operator">-></span><span class="token function">rowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QModelIndex currIndex <span class="token operator">=</span> m_model<span class="token operator">-></span><span class="token function">index</span><span class="token punctuation">(</span>m_model<span class="token operator">-></span><span class="token function">rowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建最后一行的ModelIndex</span>
    m_selectModet<span class="token operator">-></span><span class="token function">clearSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_selectModet<span class="token operator">-></span><span class="token function">setCurrentIndex</span><span class="token punctuation">(</span>currIndex<span class="token punctuation">,</span> QItemSelectionModel<span class="token double-colon punctuation">::</span>Select<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//保存文件</span>
<span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token double-colon punctuation">::</span><span class="token function">on_actSave_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString path <span class="token operator">=</span> <span class="token class-name">QCoreApplication</span><span class="token double-colon punctuation">::</span><span class="token function">applicationDirPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString fileName <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getSaveFileName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"选择一个文件"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token string">"另存数据(*.txt);;所有数据(*.*)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> fileName<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    QFile <span class="token function">file</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token double-colon punctuation">::</span>ReadWrite <span class="token operator">|</span> QIODevice<span class="token double-colon punctuation">::</span>Text <span class="token operator">|</span> QIODevice<span class="token double-colon punctuation">::</span>Truncate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//读写，文本，覆盖原有内容打开</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    QTextStream <span class="token function">stream</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token comment">//用文本流读取文件</span>
    QStandardItem <span class="token operator">*</span>item<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    QString str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//获取表头文字</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_model<span class="token operator">-></span><span class="token function">columnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        item <span class="token operator">=</span>  m_model<span class="token operator">-></span><span class="token function">horizontalHeaderItem</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        str <span class="token operator">=</span> str <span class="token operator">+</span> item<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t\t"</span><span class="token punctuation">;</span>                                 <span class="token comment">//以TAB按键隔开</span>
    <span class="token punctuation">&#125;</span>
    stream<span class="token operator">&lt;&lt;</span>str<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//获取数据区文字</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_model<span class="token operator">-></span><span class="token function">rowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m_model<span class="token operator">-></span><span class="token function">columnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            item <span class="token operator">=</span> m_model<span class="token operator">-></span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            str <span class="token operator">=</span> str <span class="token operator">+</span> item<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t\t"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        stream<span class="token operator">&lt;&lt;</span>str<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//在当前选中的一行，其前面插入一行</span>
<span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token double-colon punctuation">::</span><span class="token function">on_actInsert_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QList<span class="token operator">&lt;</span>QStandardItem <span class="token operator">*</span><span class="token operator">></span> list<span class="token punctuation">;</span>
    QStandardItem <span class="token operator">*</span>item<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> COLUMN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QStandardItem</span><span class="token punctuation">(</span><span class="token string">"插入一行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token operator">&lt;&lt;</span>item<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    QString str <span class="token operator">=</span> m_model<span class="token operator">-></span><span class="token function">headerData</span><span class="token punctuation">(</span>m_model<span class="token operator">-></span><span class="token function">columnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>Horizontal<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>DisplayRole<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QStandardItem</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">"插入一行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setCheckable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token operator">&lt;&lt;</span>item<span class="token punctuation">;</span>

    QModelIndex currIndex <span class="token operator">=</span> m_selectModet<span class="token operator">-></span><span class="token function">currentIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_model<span class="token operator">-></span><span class="token function">insertRow</span><span class="token punctuation">(</span>currIndex<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//在当前行的前面插入一行</span>
    m_selectModet<span class="token operator">-></span><span class="token function">clearSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_selectModet<span class="token operator">-></span><span class="token function">setCurrentIndex</span><span class="token punctuation">(</span>currIndex<span class="token punctuation">,</span> QItemSelectionModel<span class="token double-colon punctuation">::</span>Select<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//删除一行</span>
<span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token double-colon punctuation">::</span><span class="token function">on_actDelete_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QModelIndex currIndex <span class="token operator">=</span> m_selectModet<span class="token operator">-></span><span class="token function">currentIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_model<span class="token operator">-></span><span class="token function">removeRow</span><span class="token punctuation">(</span>currIndex<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//关闭退出</span>
<span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token double-colon punctuation">::</span><span class="token function">on_actExit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//预览数据模型:模型数据导出到PlainTextEdit显示</span>
<span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token double-colon punctuation">::</span><span class="token function">on_actModelData_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>                                          <span class="token comment">//用文本流读取文件</span>
    QStandardItem <span class="token operator">*</span>item<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    QString str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//获取表头文字</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_model<span class="token operator">-></span><span class="token function">columnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        item <span class="token operator">=</span>  m_model<span class="token operator">-></span><span class="token function">horizontalHeaderItem</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        str <span class="token operator">=</span> str <span class="token operator">+</span> item<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t\t"</span><span class="token punctuation">;</span>                                 <span class="token comment">//以TAB按键隔开</span>
    <span class="token punctuation">&#125;</span>

    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//获取数据区文字</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_model<span class="token operator">-></span><span class="token function">rowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m_model<span class="token operator">-></span><span class="token function">columnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            item <span class="token operator">=</span> m_model<span class="token operator">-></span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            str <span class="token operator">=</span> str <span class="token operator">+</span> item<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t\t"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//左对齐</span>
<span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token double-colon punctuation">::</span><span class="token function">on_actAlignLeft_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_selectModet<span class="token operator">-></span><span class="token function">hasSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    QModelIndexList list <span class="token operator">=</span> m_selectModet<span class="token operator">-></span><span class="token function">selectedIndexes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//获得选中的List&lt;item></span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        QModelIndex index <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        QStandardItem <span class="token operator">*</span>item <span class="token operator">=</span> m_model<span class="token operator">-></span><span class="token function">itemFromIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        item<span class="token operator">-></span><span class="token function">setTextAlignment</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>AlignLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//设置文本左对齐</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//文本居中</span>
<span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token double-colon punctuation">::</span><span class="token function">on_actAlignCenter_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_selectModet<span class="token operator">-></span><span class="token function">hasSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    QModelIndexList list <span class="token operator">=</span> m_selectModet<span class="token operator">-></span><span class="token function">selectedIndexes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//获得选中的List&lt;item></span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        QModelIndex index <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//获取一个模型索引</span>
        QStandardItem <span class="token operator">*</span>item <span class="token operator">=</span> m_model<span class="token operator">-></span><span class="token function">itemFromIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        item<span class="token operator">-></span><span class="token function">setTextAlignment</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>AlignCenter<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//设置文本居中</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//文本右对齐</span>
<span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token double-colon punctuation">::</span><span class="token function">on_actAlingRight_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_selectModet<span class="token operator">-></span><span class="token function">hasSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    QModelIndexList list <span class="token operator">=</span> m_selectModet<span class="token operator">-></span><span class="token function">selectedIndexes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        QModelIndex index <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        QStandardItem <span class="token operator">*</span>item <span class="token operator">=</span> m_model<span class="token operator">-></span><span class="token function">itemFromIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        item<span class="token operator">-></span><span class="token function">setTextAlignment</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>AlignRight<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//文本加粗</span>
<span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token double-colon punctuation">::</span><span class="token function">on_actBold_triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_selectModet<span class="token operator">-></span><span class="token function">hasSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    QModelIndexList list <span class="token operator">=</span> m_selectModet<span class="token operator">-></span><span class="token function">selectedIndexes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        QModelIndex index <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        QStandardItem <span class="token operator">*</span>item <span class="token operator">=</span> m_model<span class="token operator">-></span><span class="token function">itemFromIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        QFont font <span class="token operator">=</span> item<span class="token operator">-></span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        font<span class="token punctuation">.</span><span class="token function">setBold</span><span class="token punctuation">(</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span>
        item<span class="token operator">-></span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="代理部分："><a href="#代理部分：" class="headerlink" title="代理部分："></a>代理部分：</h3><p>在 <strong>.h</strong>头文件</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXDELEGATE_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXDELEGATE_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QStyledItemDelegate></span></span>

<span class="token keyword">class</span> <span class="token class-name">ExDelegate</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QStyledItemDelegate</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">ExDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">//若是写代理的组件，那么必须要有下面这是个重写这四个函数</span>
    <span class="token keyword">virtual</span> QWidget<span class="token operator">*</span> <span class="token function">createEditor</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOptionViewItem <span class="token operator">&amp;</span>option<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>      <span class="token comment">//创建用于编辑的模型数据的widget组件，如一个QComboBox组件</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setEditorData</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>editor<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>                                             <span class="token comment">//从数据模型获取数据，显示在代理组件editor之中，让其编辑</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setModelData</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>editor<span class="token punctuation">,</span> QAbstractItemModel <span class="token operator">*</span>model<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>                   <span class="token comment">//代理组件editor上的数据更新到数据模型</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">updateEditorGeometry</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>editor<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOptionViewItem <span class="token operator">&amp;</span>option<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>  <span class="token comment">//用于给widget组件设置一个合适的大小</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXDELEGATE_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 <strong>.cpp</strong>头文件</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExDelegate.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QComboBox></span></span>

<span class="token class-name">ExDelegate</span><span class="token double-colon punctuation">::</span><span class="token function">ExDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//创建用于编辑的模型数据的widget组件，如一个QComboBox组件</span>
QWidget <span class="token operator">*</span><span class="token class-name">ExDelegate</span><span class="token double-colon punctuation">::</span><span class="token function">createEditor</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOptionViewItem <span class="token operator">&amp;</span>option<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    QComboBox <span class="token operator">*</span>comboBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QComboBox</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    comboBox<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"github：https://github.com/touwoyimuli"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    comboBox<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"csdn博客：https://blog.csdn.net/qq_33154343"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    comboBox<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"github.io博客：https://touwoyimuli.github.io/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    comboBox<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"https://www.google.com/ qt 学习 加油 2019-09-30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span>  comboBox<span class="token punctuation">;</span>                      <span class="token comment">//返回此编辑器</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//从数据模型获取数据，显示在代理组件之中，让其编辑</span>
<span class="token keyword">void</span> <span class="token class-name">ExDelegate</span><span class="token double-colon punctuation">::</span><span class="token function">setEditorData</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>editor<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    QString str <span class="token operator">=</span> index<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">data</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>EditRole<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QComboBox <span class="token operator">*</span>comboBox <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>QComboBox <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>editor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    comboBox<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//其他组件的话， 此处可以设定写的值一类，eg：setText(str)  setValue()</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//将widget上的数据更新到数据模型</span>
<span class="token keyword">void</span> <span class="token class-name">ExDelegate</span><span class="token double-colon punctuation">::</span><span class="token function">setModelData</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>editor<span class="token punctuation">,</span> QAbstractItemModel <span class="token operator">*</span>model<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    QComboBox <span class="token operator">*</span>comboBox <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>QComboBox <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>editor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString str <span class="token operator">=</span> comboBox<span class="token operator">-></span><span class="token function">currentText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    model<span class="token operator">-></span><span class="token function">setData</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> str<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>EditRole<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//用于给widget组件设置一个合适的大小</span>
<span class="token keyword">void</span> <span class="token class-name">ExDelegate</span><span class="token double-colon punctuation">::</span><span class="token function">updateEditorGeometry</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>editor<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOptionViewItem <span class="token operator">&amp;</span>option<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    editor<span class="token operator">-></span><span class="token function">setGeometry</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//设置组件的大小</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a>【QtQStandardItemModelEx】</p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>QTableWidget表格组件的属性介绍和使用</title>
    <url>/posts/61173bfc/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  <code>QTableWidget</code>表格，组件的属性介绍和使用，这里写一个简单小例子的使用介绍它的基本属性的使用</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-08_22-42-50_mark.png"/ loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="开发环境："><a href="#开发环境：" class="headerlink" title="开发环境："></a>开发环境：</h2><p><strong>编程环境：</strong>  <code>MacOS 10.14.6 (18G103)</code>   <strong>编程软件：</strong> <code>Qt 5.9.8</code>， <code>Qt Creator 4.8.2</code></p>
<br>

<h2 id="QTableWidget属性："><a href="#QTableWidget属性：" class="headerlink" title="QTableWidget属性："></a>QTableWidget属性：</h2><p><code>QTableWidget</code>是 <strong>表格组件</strong> ；其属于显示窗口的控件，只是将数据以表格的形式展示出来， </p>
<p>其主要属性是：</p>
<ul>
<li>row行</li>
</ul>
<p>行号</p>
<ul>
<li>Colum列</li>
</ul>
<p>列号</p>
<ul>
<li>Item项</li>
</ul>
<p><code>QTableWidgetItem</code>是具体的某一个项item，就是表格中间的具体一个项（小长方块）；还可以用来存储数据（但是在界面该数据是不显示的），每一个item都可以存储一个自己的<code>QVariant</code>数据；</p>
<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>来一张运行效果图：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/2019-12-08-22-56-38.gif"/ loading="lazy">

<br>

<h2 id="核心源码讲解："><a href="#核心源码讲解：" class="headerlink" title="核心源码讲解："></a>核心源码讲解：</h2><p>因为这个控件属于比较简单，所以此处直接将部分**.h**源码贴出来:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">ExQTableWidget</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span>
<span class="token punctuation">&#123;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">void</span> <span class="token function">createItemsARow</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span> QString name<span class="token punctuation">,</span> QString sex<span class="token punctuation">,</span> QDate birth<span class="token punctuation">,</span> QString nation<span class="token punctuation">,</span> <span class="token keyword">int</span> score<span class="token punctuation">,</span> <span class="token keyword">bool</span> isAnime<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//为某一行创建items</span>

<span class="token keyword">private</span> slots<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">on_btnSetHeader_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">//设置表头</span>
    <span class="token keyword">void</span> <span class="token function">on_btnInitTable_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">//初始化数据表</span>
    <span class="token keyword">void</span> <span class="token function">on_btnSetRow_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">//设置表格的行数</span>
    <span class="token keyword">void</span> <span class="token function">on_btnInsertRow_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">//插入行</span>
    <span class="token keyword">void</span> <span class="token function">on_btnAddRow_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">//在最后一行添加一行</span>
    <span class="token keyword">void</span> <span class="token function">on_btnDelRow_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">//删除当前行</span>
    <span class="token keyword">void</span> <span class="token function">on_btnAutoHeight_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">//自动设置行高</span>
    <span class="token keyword">void</span> <span class="token function">on_btnAutoWidth_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">//自动设置列高</span>
    <span class="token keyword">void</span> <span class="token function">on_btnReadToEdit_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">//读取表格内容到文本</span>
    <span class="token keyword">void</span> <span class="token function">on_chkBoxHeadEdit_clicked</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//表格可编辑模式</span>
    <span class="token keyword">void</span> <span class="token function">on_chkBoxRowColor_clicked</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//间隔行底色</span>
    <span class="token keyword">void</span> <span class="token function">on_chkBoxHeadRow_clicked</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//显示行表头</span>
    <span class="token keyword">void</span> <span class="token function">on_chkBoxHeadCol_clicked</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//显示列表头</span>
    <span class="token keyword">void</span> <span class="token function">on_radioBtnSelectItem_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//单元格选择</span>
    <span class="token keyword">void</span> <span class="token function">on_radioBtnSelectRow_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//行选择</span>
    <span class="token keyword">void</span> <span class="token function">on_tableWidget_currentCellChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span> currentRow<span class="token punctuation">,</span> <span class="token keyword">int</span> currentColumn<span class="token punctuation">,</span> <span class="token keyword">int</span> previousRow<span class="token punctuation">,</span> <span class="token keyword">int</span> previousColumn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取当前item和前一个(点击)item的行列号</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    QLabel <span class="token operator">*</span>m_labCellIndex<span class="token punctuation">;</span>                              <span class="token comment">//状态栏上用来显示单元格的行号、列号</span>
    QLabel <span class="token operator">*</span>m_labCellType<span class="token punctuation">;</span>                               <span class="token comment">//状态栏上用来显示单元格的type</span>
    QLabel <span class="token operator">*</span>m_labStudID<span class="token punctuation">;</span>                                 <span class="token comment">//状态栏上用来显示单元格的学号</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其对应的**.cpp**文件：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">ExQTableWidget</span><span class="token double-colon punctuation">::</span><span class="token function">ExQTableWidget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>
    <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token double-colon punctuation">::</span>ExQTableWidget<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"QTableWidget的讲解和使用"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_labCellIndex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"当前单元格坐标："</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//状态栏初始化</span>
    m_labCellIndex<span class="token operator">-></span><span class="token function">setMinimumWidth</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labCellType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"当前单元格类型："</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labCellType<span class="token operator">-></span><span class="token function">setMinimumWidth</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labStudID <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"学生ID："</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labStudID<span class="token operator">-></span><span class="token function">setMinimumWidth</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labCellIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labCellType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labStudID<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>chkBoxHeadEdit<span class="token operator">-></span><span class="token function">setChecked</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">setCentralWidget</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>splitter_2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">on_btnSetHeader_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//为某一行创建items</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token double-colon punctuation">::</span><span class="token function">createItemsARow</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span> QString name<span class="token punctuation">,</span> QString sex<span class="token punctuation">,</span> QDate birth<span class="token punctuation">,</span> QString nation<span class="token punctuation">,</span> <span class="token keyword">int</span> score<span class="token punctuation">,</span> <span class="token keyword">bool</span> isAnime<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QTableWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> stunID <span class="token operator">=</span> <span class="token number">20190913</span><span class="token punctuation">;</span>
    QString str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>

    item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTableWidgetItem</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> cellType<span class="token double-colon punctuation">::</span>ctName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建name 坐标为(0, 0)的item</span>
    item<span class="token operator">-></span><span class="token function">setTextAlignment</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>AlignHCenter <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>AlignVCenter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//文本显示居中</span>
    stunID <span class="token operator">+=</span> row<span class="token punctuation">;</span>                                                  <span class="token comment">//学号 = 基数 + 行号</span>
    item<span class="token operator">-></span><span class="token function">setData</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>UserRole<span class="token punctuation">,</span> <span class="token function">QVariant</span><span class="token punctuation">(</span>stunID<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//设置stunID为data</span>
    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setItem</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> fieldColNum<span class="token double-colon punctuation">::</span>colName<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//插入item到tableWidget里面</span>

    item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTableWidgetItem</span><span class="token punctuation">(</span>sex<span class="token punctuation">,</span> cellType<span class="token double-colon punctuation">::</span>ctSex<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//性别</span>
    QIcon icon<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sex <span class="token operator">==</span> <span class="token string">"男"</span><span class="token punctuation">)</span>
        icon<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/images/Image002.ico"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        icon<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/images/Image003.ico"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setIcon</span><span class="token punctuation">(</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setTextAlignment</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>AlignHCenter <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>AlignVCenter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setItem</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> fieldColNum<span class="token double-colon punctuation">::</span>colSex<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>

    item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTableWidgetItem</span><span class="token punctuation">(</span>birth<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cellType<span class="token double-colon punctuation">::</span>ctBirth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//出生日期</span>
    item<span class="token operator">-></span><span class="token function">setTextAlignment</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>AlignHCenter <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>AlignVCenter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setItem</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> fieldColNum<span class="token double-colon punctuation">::</span>colBirth<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>

    item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTableWidgetItem</span><span class="token punctuation">(</span>nation<span class="token punctuation">,</span> cellType<span class="token double-colon punctuation">::</span>ctNation<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//籍贯</span>
    item<span class="token operator">-></span><span class="token function">setTextAlignment</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>AlignHCenter <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>AlignVCenter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setItem</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> fieldColNum<span class="token double-colon punctuation">::</span>colNation<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>

    item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTableWidgetItem</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">setNum</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">,</span> cellType<span class="token double-colon punctuation">::</span>ctScore<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//成绩</span>
    item<span class="token operator">-></span><span class="token function">setTextAlignment</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>AlignHCenter <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>AlignVCenter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setItem</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> fieldColNum<span class="token double-colon punctuation">::</span>colScore<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>

    item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTableWidgetItem</span><span class="token punctuation">(</span><span class="token string">"喜欢"</span><span class="token punctuation">,</span> cellType<span class="token double-colon punctuation">::</span>ctLikeAnime<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//喜欢二次元否?</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isAnime<span class="token punctuation">)</span>
        item<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>Checked<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        item<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setTextAlignment</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>AlignHCenter <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>AlignVCenter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setBackgroundColor</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>gray<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setItem</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> fieldColNum<span class="token double-colon punctuation">::</span>colLikeAnime<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="token comment">//设置表头</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnSetHeader_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QTableWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    QStringList list<span class="token punctuation">;</span>
    list <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"性别"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"出生日期"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"籍贯"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"分数"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"是否喜欢二次元"</span><span class="token punctuation">;</span>

<span class="token comment">//    ui->tableWidget->setHorizontalHeaderLabels(list);            //只是初始化表头的每一列的名字</span>
    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setColumnCount</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">columnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTableWidgetItem</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//创建一个item</span>
        QFont font<span class="token punctuation">;</span>
        font<span class="token punctuation">.</span><span class="token function">setBold</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        font<span class="token punctuation">.</span><span class="token function">setPointSize</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        item<span class="token operator">-></span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token comment">//设置item的字体，颜色，粗体，大小</span>
        item<span class="token operator">-></span><span class="token function">setTextColor</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setHorizontalHeaderItem</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//添加item到tableWidget</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//初始化数据表</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnInitTable_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QTime time<span class="token punctuation">;</span>
    time <span class="token operator">=</span> <span class="token class-name">QTime</span><span class="token double-colon punctuation">::</span><span class="token function">currentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qsrand</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>uint<span class="token operator">></span></span></span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">msec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> time<span class="token punctuation">.</span><span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    QString name <span class="token operator">=</span> <span class="token string">"学生"</span><span class="token punctuation">;</span>
    QString sex <span class="token operator">=</span> <span class="token string">"保密"</span><span class="token punctuation">;</span>
    QDate <span class="token function">birth</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString nation <span class="token operator">=</span> <span class="token string">"武汉"</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">87</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> isAnime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">clearContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment">//清除工作区，不清除表头</span>
    <span class="token keyword">int</span> row <span class="token operator">=</span> ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">rowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                <span class="token comment">//初始化一行行的数据</span>
        name <span class="token operator">=</span> <span class="token string">"学生"</span><span class="token punctuation">;</span>
        name <span class="token operator">+=</span> <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">number</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n  <span class="token operator">=</span> <span class="token function">qrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>                                      <span class="token comment">//产生随机数小于2</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            sex <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span>
            isAnime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            sex <span class="token operator">=</span> <span class="token string">"女"</span><span class="token punctuation">;</span>
            isAnime <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        score <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        birth <span class="token operator">=</span> birth<span class="token punctuation">.</span><span class="token function">addDays</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">createItemsARow</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> birth<span class="token punctuation">,</span> nation<span class="token punctuation">,</span> score<span class="token punctuation">,</span> isAnime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//设置表格的行数</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnSetRow_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> ui<span class="token operator">-></span>spinBoxRow<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setRowCount</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//插入行</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnInsertRow_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> currRow <span class="token operator">=</span> ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">currentRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">insertRow</span><span class="token punctuation">(</span>currRow<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">//插入一行，不会自动为单元格创建item</span>
    <span class="token function">createItemsARow</span><span class="token punctuation">(</span>currRow<span class="token punctuation">,</span> <span class="token string">"插入学生"</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token function">QDate</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">07</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"楚国"</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//在最后一行添加一行</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnAddRow_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> row <span class="token operator">=</span> ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">rowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">insertRow</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">createItemsARow</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token string">"添加学生"</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token function">QDate</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">07</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"唐朝"</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//删除当前行</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnDelRow_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> currRow <span class="token operator">=</span> ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">currentRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">removeRow</span><span class="token punctuation">(</span>currRow<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">//删除当前行以及其他items</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//自动设置行高</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnAutoHeight_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">resizeRowsToContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//自动调整所有行的内容，以适应内容高度</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//自动设置列高</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnAutoWidth_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">resizeColumnsToContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//自动调整所有列的内容，以适应内容宽度</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//读取表格内容到文本</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnReadToEdit_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QTableWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    QString str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">rowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">columnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            item <span class="token operator">=</span> ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            str <span class="token operator">+=</span> item<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        item <span class="token operator">=</span> ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> fieldColNum<span class="token double-colon punctuation">::</span>colLikeAnime<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token operator">-></span><span class="token function">checkState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Qt<span class="token double-colon punctuation">::</span>Checked<span class="token punctuation">)</span>
            str <span class="token operator">+=</span> <span class="token string">"喜欢二次元"</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            str <span class="token operator">+=</span> <span class="token string">"不喜欢二次元"</span><span class="token punctuation">;</span>

        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//表格可编辑模式</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_chkBoxHeadEdit_clicked</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>checked<span class="token punctuation">)</span>
        ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setEditTriggers</span><span class="token punctuation">(</span>QAbstractItemView<span class="token double-colon punctuation">::</span>DoubleClicked <span class="token operator">|</span> QAbstractItemView<span class="token double-colon punctuation">::</span>SelectedClicked<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setEditTriggers</span><span class="token punctuation">(</span>QAbstractItemView<span class="token double-colon punctuation">::</span>DoubleClicked<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//间隔行底色</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_chkBoxRowColor_clicked</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setAlternatingRowColors</span><span class="token punctuation">(</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//显示行表头</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_chkBoxHeadRow_clicked</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">horizontalHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">setVisible</span><span class="token punctuation">(</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//显示列表头</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_chkBoxHeadCol_clicked</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">verticalHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">setVisible</span><span class="token punctuation">(</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//单元格选择</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_radioBtnSelectItem_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setSelectionBehavior</span><span class="token punctuation">(</span>QAbstractItemView<span class="token double-colon punctuation">::</span>SelectItems<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//行选择</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_radioBtnSelectRow_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setSelectionBehavior</span><span class="token punctuation">(</span>QAbstractItemView<span class="token double-colon punctuation">::</span>SelectRows<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//获取当前item和前一个(点击)item的行列号</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_tableWidget_currentCellChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span> currentRow<span class="token punctuation">,</span> <span class="token keyword">int</span> currentColumn<span class="token punctuation">,</span> <span class="token keyword">int</span> previousRow<span class="token punctuation">,</span> <span class="token keyword">int</span> previousColumn<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_labCellIndex<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"当前单元格坐标：["</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">number</span><span class="token punctuation">(</span>currentRow<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"行, "</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">number</span><span class="token punctuation">(</span>currentColumn<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"列]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QTableWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">item</span><span class="token punctuation">(</span>currentRow<span class="token punctuation">,</span> currentColumn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> type <span class="token operator">=</span> item<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labCellType<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"当前单元格类型："</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">number</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QTableWidgetItem<span class="token operator">*</span> item2 <span class="token operator">=</span> ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">item</span><span class="token punctuation">(</span>currentRow<span class="token punctuation">,</span> fieldColNum<span class="token double-colon punctuation">::</span>colName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labStudID<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"学生ID："</span> <span class="token operator">+</span> item2<span class="token operator">-></span><span class="token function">data</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>UserRole<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a> 【QtQTableWidgetEx】</p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>QTimer和QDateTime的讲解和使用</title>
    <url>/posts/2e2d5144/</url>
    <content><![CDATA[<p><strong>简介：</strong>  讲解<code>QTimer</code> 定时器（不可见控件）和 <code>QDateTime</code>日期时间的控件</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​		<strong>详情：</strong>  见简介</p>
<br>

<p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p>
<p><strong>编程软件：</strong>  <code>visual studio 2015</code>， <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p>
<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>先上一个最终的运行效果图：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190918202243.gif"/ loading="lazy">

<br>

<h2 id="时间日期相关的类："><a href="#时间日期相关的类：" class="headerlink" title="时间日期相关的类："></a>时间日期相关的类：</h2><p><strong>时间日期是经常遇到的数据类型，Qt中时间日期类型的类如下。</strong></p>
<ul>
<li><strong>QTime</strong>：时间数据类型，仅表示时间，如15:23：13。</li>
<li><strong>QDate</strong>：日期数据类型，仅表示日期，如2017-4-5。</li>
<li><strong>QDateTime</strong>:日期时间数据类型，表示日期和时间，如2017-03-2308：12:43。</li>
</ul>
<br>

<p><strong>Qt中有专门用于日期、时间编辑和显示的界面组件，介绍如下。</strong></p>
<ul>
<li><strong>QTimeEdit</strong>:编辑和显示时间的组件。</li>
<li><strong>QDateEdit</strong>:编辑和显示日期的组件。</li>
<li><strong>QDateTimeEdit</strong>：编辑和显示日期时间的组件。</li>
<li><strong>OCalendarWidget</strong>:一个用日历形式选择日期的组件。</li>
</ul>
<br>

<h2 id="QDateTimeEdit时间属性"><a href="#QDateTimeEdit时间属性" class="headerlink" title="QDateTimeEdit时间属性:"></a>QDateTimeEdit时间属性:</h2><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">datetime</td>
<td align="center">日期时间</td>
</tr>
<tr>
<td align="center">date</td>
<td align="center">日期</td>
</tr>
<tr>
<td align="center">time</td>
<td align="center">时间</td>
</tr>
<tr>
<td align="center">maximumDate Time、minimumDate Time</td>
<td align="center">最大、最小日期</td>
</tr>
<tr>
<td align="center">maximumDate、minimumDate</td>
<td align="center">最大、最小时间</td>
</tr>
<tr>
<td align="center">currentSection</td>
<td align="center">当前输入光标所在的时间日期数据段，是枚举类型QDateTimeEdit：:Section</td>
</tr>
<tr>
<td align="center">QDateTimeEdit</td>
<td align="center">显示日期时间数据时分为多个段，单击编辑框右侧的上下按钮可修改当前段的值</td>
</tr>
<tr>
<td align="center">currentSectionIndex</td>
<td align="center">用序号表示的输入光标所在的段</td>
</tr>
<tr>
<td align="center">calendarPopup</td>
<td align="center">是否允许弹出一个日历选择框</td>
</tr>
<tr>
<td align="center">displayFormat</td>
<td align="center">显示格式，日期时间数据的显示格式</td>
</tr>
</tbody></table>
<p><strong>date</strong>和<strong>time</strong>设置其中一个，就会自动修改其中另外一个。</p>
<p><strong>QDateTimeEdit</strong>：如输入光标在YearSection段，就修改“年”的值。</p>
<p><strong>calendarPopup</strong>：当取值为true时，右侧的输入按钮变成与QComboBox类似的下拉按钮，单击按钮时出现一个日历选择框，用于在日历上选择日期。对于QTimeEdit，此属性无效。</p>
<p><strong>displayFormat</strong>：例如设置为“yyyy-MM-dd HH：mm：ss”，一个日期时间数据就显示为“2016-11-0208:23：46”</p>
<br>

<h2 id="QTimer属性："><a href="#QTimer属性：" class="headerlink" title="QTimer属性："></a>QTimer属性：</h2><p>定时器是用来处理周期性事件的一种对象，类似于硬件定时器。例如设置一个定时器的定时。周期为1000毫秒，那么每1000毫秒就会发射定时器的timeout）信号，在信号关联的槽函数里就，可以做相应的处理。Qt中的定时器类是QTimer，它直接从QObject类继承而来，不是界面组件类。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QTimer<span class="token operator">*</span> m_timer<span class="token punctuation">;</span>     <span class="token comment">//定时器（不可见控件）</span>
QTime   m_time<span class="token punctuation">;</span>      <span class="token comment">//计时器（此处用作）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br>

<h2 id="DateTime转QString："><a href="#DateTime转QString：" class="headerlink" title="DateTime转QString："></a>DateTime转QString：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//获取当前时间</span>
QDateTime currDateTime <span class="token operator">=</span> <span class="token class-name">QDateTime</span><span class="token double-colon punctuation">::</span><span class="token function">currentDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//QString转为DateTime</span>
ui<span class="token operator">-></span>editDateTime<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>currDateTime<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss:zzz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//DateTime转为QString</span>
ui<span class="token operator">-></span>labCurrDataTime<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>currDateTime<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss:zzz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="常用日期显示格式："><a href="#常用日期显示格式：" class="headerlink" title="常用日期显示格式："></a>常用日期显示格式：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190920000600.png"/ loading="lazy">

<br>

<h2 id="核心源码："><a href="#核心源码：" class="headerlink" title="核心源码："></a>核心源码：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//editDate控件在UI设计师里面，选中了calendarPopup （日历弹出的属性）和displayFormat显示格式</span>

    m_timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTimer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_timer<span class="token operator">-></span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//关闭定时器</span>
    m_timer<span class="token operator">-></span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//设定定时周期， 单位 毫秒</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>m_timer<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onTimerOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="token comment">//获取当前日期和时间，该日期时间栏里面显示</span>
<span class="token keyword">void</span> <span class="token class-name">ExDateTime</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnGetDateTime_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QDateTime currDateTime <span class="token operator">=</span> <span class="token class-name">QDateTime</span><span class="token double-colon punctuation">::</span><span class="token function">currentDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>timeEdit<span class="token operator">-></span><span class="token function">setTime</span><span class="token punctuation">(</span>currDateTime<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>editTime<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>currDateTime<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"hh:mm:ss:zzz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>dateEdit<span class="token operator">-></span><span class="token function">setDate</span><span class="token punctuation">(</span>currDateTime<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>editDate<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>currDateTime<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>dateTimeEdit<span class="token operator">-></span><span class="token function">setDateTime</span><span class="token punctuation">(</span>currDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>editDateTime<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>currDateTime<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss:zzz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>labCurrDataTime<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>currDateTime<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss:zzz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="token comment">//计时器开始</span>
<span class="token keyword">void</span> <span class="token class-name">ExDateTime</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnStatrt_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_time<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment">//计时器开始</span>
    m_timer<span class="token operator">-></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">//定时器开始</span>
    ui<span class="token operator">-></span>btnStatrt<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//开始按下之后，开始按钮禁用</span>
    ui<span class="token operator">-></span>btnStop<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//同时结束按钮可用</span>
    ui<span class="token operator">-></span>btnPeriod<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//设定周期的按钮为禁用</span>
    ui<span class="token operator">-></span>labGo<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"时间流逝在后台计算中..."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//计时器结束</span>
<span class="token keyword">void</span> <span class="token class-name">ExDateTime</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnStop_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_timer<span class="token operator">-></span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment">//定时器停止</span>
    ui<span class="token operator">-></span>btnStop<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//结束按下之后，结束按钮禁用</span>
    ui<span class="token operator">-></span>btnStatrt<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//同时开始按钮可用</span>

    <span class="token keyword">int</span> tmMsec <span class="token operator">=</span> m_time<span class="token punctuation">.</span><span class="token function">elapsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//计时器Time没有对应的stop(), elapsed获取它的毫秒数</span>
    <span class="token keyword">int</span> ms <span class="token operator">=</span> tmMsec <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">;</span>                          <span class="token comment">//经过的毫秒</span>
    <span class="token keyword">int</span> sec <span class="token operator">=</span> tmMsec <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>                         <span class="token comment">//经过的秒</span>
    ui<span class="token operator">-></span>btnPeriod<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//设定周期的按钮为可用</span>
    ui<span class="token operator">-></span>labGo<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"时间已经流逝：%1 秒 %2 毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>sec<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//处理定时器的槽函数</span>
<span class="token keyword">void</span> <span class="token class-name">ExDateTime</span><span class="token double-colon punctuation">::</span><span class="token function">onTimerOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QTime currTime <span class="token operator">=</span> <span class="token class-name">QTime</span><span class="token double-colon punctuation">::</span><span class="token function">currentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>lcdHH<span class="token operator">-></span><span class="token function">display</span><span class="token punctuation">(</span>currTime<span class="token punctuation">.</span><span class="token function">hour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//多种显示时间方法</span>
    ui<span class="token operator">-></span>lcdmm<span class="token operator">-></span><span class="token function">display</span><span class="token punctuation">(</span>currTime<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"mm"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>lcdSS<span class="token operator">-></span><span class="token function">display</span><span class="token punctuation">(</span>currTime<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> val <span class="token operator">=</span> ui<span class="token operator">-></span>progressBar<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//设置进度条同时增加</span>
    val<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span>
        val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>progressBar<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="token comment">//选择日历时间</span>
<span class="token keyword">void</span> <span class="token class-name">ExDateTime</span><span class="token double-colon punctuation">::</span><span class="token function">on_calendarWidget_selectionChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QDate date <span class="token operator">=</span>ui<span class="token operator">-></span>calendarWidget<span class="token operator">-></span><span class="token function">selectedDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>editChoose<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//设定定时器QTimer周期</span>
<span class="token keyword">void</span> <span class="token class-name">ExDateTime</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnPeriod_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_timer<span class="token operator">-></span><span class="token function">setInterval</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>spinBox<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a>【QtDateTimeEx】</p>
<br>



]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>QTreeWidget和QDockWidget的讲解和使用</title>
    <url>/posts/945f8d10/</url>
    <content><![CDATA[<p><strong>简述：</strong>  目录树组件<code>QTreeWidget</code>和停靠区域组件<code>QDockWidget</code>的讲解和使用</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p>
<p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p>
<br>

<h2 id="QTreeWidget属性："><a href="#QTreeWidget属性：" class="headerlink" title="QTreeWidget属性："></a>QTreeWidget属性：</h2><p><strong><code>QTreeWidget</code>类是创建和管理目录树结构的类；</strong></p>
<p><font color=#FF0000  size=4 face="幼圆">QTreeWidget的每个节点都是一个QTreeWidgetltem对象，添加一个节点前需先创建它，并做<br>好相关设置。</font></p>
<p><strong>创建节点的语句是：</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">item<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>Mainwindow<span class="token double-colon punctuation">::</span>itTopItem<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>QTreeWidgetltem的 **setlcon()<strong>和</strong>setText()**都需要传递一个列号作为参数，指定对哪个列进行设置。列号可以直接用数字，但是为了便于理解代码和统一修改，在MainWindow里定义了枚举类型treeColNum，colltem表示第1列，colltemlype表示第2列。setFlags0函数设置节点的一些属性标记，是Qt:ltemFlag枚举类型常量的组合。setData()函数为节点的某一列设置一个角色数据，setData（）函数原型为：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">QTreewidgetItem</span><span class="token double-colon punctuation">::</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">int</span> column<span class="token punctuation">,</span><span class="token keyword">int</span> role<span class="token punctuation">,</span><span class="token keyword">const</span> QVariant <span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>其中，column是列号，role是角色的值，value是一个QVariant类型的数。</p>
<p><strong>代码中设置节点数据的语句是：</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">item<span class="token operator">-></span><span class="token function">setData</span><span class="token punctuation">(</span>Mainwindow<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span>Qt<span class="token double-colon punctuation">::</span>UserRole<span class="token punctuation">,</span><span class="token function">QVariant</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>它为节点的第1列，角色<strong>Qt：UserRole</strong>，设置了一个字符串数据dataStr。Qt:UserRole是枚举类型Qt::ItemDataRole中一个预定义的值，关于节点的角色和Qt:ItemDataRole在后面文章详细介绍。<br>创建并设置好节点后，<strong>用QTreeWidget::addTopLevelltem()函数将节点作为顶层节点添加到目录树。</strong></p>
<br>

<h2 id="QDockWidget-属性："><a href="#QDockWidget-属性：" class="headerlink" title="QDockWidget 属性："></a>QDockWidget 属性：</h2><p><code>QDockWidget</code> 是可以在<strong>QMainWindow</strong> 窗口停靠，或在桌面最上层浮动的界面组件。本实例将一个<br><strong>QTreeWidget</strong>组件放置在<code>QDockWidget</code>区域上，设置其可以在主窗口的左或右侧停靠，也可以浮动。</p>
<p><strong>主要属性如下：</strong></p>
<ul>
<li><strong>allowedAreas</strong>属性，设置允许停靠区域。由函数setAllowedAreas(Qt：:DockWidgetAreas areas)设置允许停靠区，参数areas是枚举类型</li>
<li><strong>Qt:DockWidgetArea</strong>的值的组合，可以设置在窗口的左、右、顶、底停靠，或所有区域都可停靠，<br>  或不允许停靠。<br>  本实例设置为允许左侧和右侧停靠。</li>
<li><strong>features</strong>属性，设置停靠区组件的特性。由setFeatures（Dock WidgetFeatures features)函数设置停靠区组件的特性，参数features是枚举类型QDockWidget::DockWidgetFeature的值的组合，枚举值如下。</li>
</ul>
<blockquote>
<p>QDockWidget::DockWidgetClosable:停靠区可关闭。<br>QDockWidget:DockWidgetMovable:停靠区可移动。<br>QDock Widget:DockWidgetFloatable:停靠区可浮动。<br>QDock Widget:Dock Widget VerticalTitleBar:在停靠区左侧显示垂直标题栏。<br>QDock Widget::AlDockWidgetFeatures:使用以上所有特征。<br>QDock Widget::NoDockWidgetFeatures:不能停靠、移动和关闭。</p>
</blockquote>
<br>

<h2 id="ScrollArea属性："><a href="#ScrollArea属性：" class="headerlink" title="ScrollArea属性："></a>ScrollArea属性：</h2><p><code>ScrollArea</code>是一个提供了一个滚动视图到另一个部件。</p>
<p>滚动区域用于显示一个画面中的子部件的内容。如果部件超过画面的大小，视图可以提供滚动条，这样就都可以看到部件的整个区域。</p>
<br>

<h2 id="细节注意："><a href="#细节注意：" class="headerlink" title="细节注意："></a>细节注意：</h2><p>在主窗口构造函数里将ScrollArea组件设置为主窗口工作区的中心组件后，<code>DockWidget</code>与<code>ScrollArea</code>之间自动出现分割条，可以分割两个组件的大小。</p>
<br>

<h2 id="部分源码："><a href="#部分源码：" class="headerlink" title="部分源码："></a>部分源码：</h2><p>其中核心部分的源码，功能实现如下：</p>
<p>其中<strong>ExQTreeWidget.h</strong>：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXQTREEWIDGET_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXQTREEWIDGET_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMainWindow></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QLabel></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QTreeWidgetItem></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QFileDialog></span></span>

<span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span>
<span class="token keyword">class</span> <span class="token class-name">ExQTreeWidget</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">ExQTreeWidget</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span>
<span class="token punctuation">&#123;</span>
    Q_OBJECT

<span class="token keyword">public</span><span class="token operator">:</span>

    <span class="token keyword">enum</span> <span class="token class-name">treeItemType</span> <span class="token punctuation">&#123;</span>         <span class="token comment">//枚举，节点类型</span>
        itemRoot<span class="token punctuation">,</span>
        itemFile<span class="token punctuation">,</span>
        itemImage
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">enum</span> <span class="token class-name">treeColNum</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//目录树列表的编号</span>
        colItem <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        colItemType <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">explicit</span> <span class="token function">ExQTreeWidget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">ExQTreeWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">initTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token comment">//初始化根节点（唯一）</span>
    <span class="token keyword">void</span> <span class="token function">addFolderItem</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>parItem<span class="token punctuation">,</span> QString dirName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//添加目录</span>
    <span class="token keyword">void</span> <span class="token function">addImageItem</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>parItem<span class="token punctuation">,</span> QString fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//添加图片文件</span>
    QString <span class="token function">getFinalFolderName</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>pathName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//从完整的路径里面，获取最后的文件夹名称</span>
    <span class="token keyword">void</span> <span class="token function">changeItemCaption</span><span class="token punctuation">(</span>QTreeWidgetItem<span class="token operator">*</span> parItem<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//遍历item下面的所有节点</span>
    <span class="token keyword">void</span> <span class="token function">displayImage</span><span class="token punctuation">(</span>QTreeWidgetItem<span class="token operator">*</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//显示当前item的图片（默认以适配高度）</span>

<span class="token keyword">private</span> slots<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">on_actAddFolder_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">//增加文件夹</span>
    <span class="token keyword">void</span> <span class="token function">on_actAddFile_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment">//添加图片文件</span>
    <span class="token keyword">void</span> <span class="token function">on_actDeleFile_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">//删除节点</span>
    <span class="token keyword">void</span> <span class="token function">on_actScanItems_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">//遍历所有的顶层节点(本处只有一个root顶层节点)</span>
    <span class="token keyword">void</span> <span class="token function">on_actAdaptiveHeight_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//图片自动适应高度</span>
    <span class="token keyword">void</span> <span class="token function">on_actAdaptiveWidth_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">//图片自动适应宽度</span>
    <span class="token keyword">void</span> <span class="token function">on_actAmplification_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">//放大</span>
    <span class="token keyword">void</span> <span class="token function">on_actShrink_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment">//缩小</span>
    <span class="token keyword">void</span> <span class="token function">on_actZoomRealSize_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">//还原</span>
    <span class="token keyword">void</span> <span class="token function">on_actDockFloating_triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span> check<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//设置Dock窗口是否浮动</span>
    <span class="token keyword">void</span> <span class="token function">on_actDockVisible_triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//设置Dock窗口是否隐藏不显示</span>
    <span class="token keyword">void</span> <span class="token function">on_actQiut_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment">//退出</span>
    <span class="token keyword">void</span> <span class="token function">on_treeFiles_currentItemChanged</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>current<span class="token punctuation">,</span> QTreeWidgetItem <span class="token operator">*</span>previous<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//当前节点变化的时候，自动加载当前图片</span>
    <span class="token keyword">void</span> <span class="token function">on_dockWidget_visibilityChanged</span><span class="token punctuation">(</span><span class="token keyword">bool</span> visible<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//单击DockWidget组件的标题栏的关闭按钮时候，会隐藏在停靠区域，并且发射信号visibilityChanged;  停靠区域可见性变化</span>
    <span class="token keyword">void</span> <span class="token function">on_dockWidget_topLevelChanged</span><span class="token punctuation">(</span><span class="token keyword">bool</span> topLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//当拖动DockWidget组件，使其浮动或者停靠时候，会发射信号topLevelChanged;  更新其Action的状态</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    Ui<span class="token double-colon punctuation">::</span>ExQTreeWidget <span class="token operator">*</span>ui<span class="token punctuation">;</span>

    QLabel <span class="token operator">*</span>m_labFlie<span class="token punctuation">;</span>      <span class="token comment">//状态栏显示当前文件路径</span>
    QPixmap m_curPixmap<span class="token punctuation">;</span>    <span class="token comment">//显示当前文件图片</span>
    <span class="token keyword">float</span>   m_ratio<span class="token punctuation">;</span>        <span class="token comment">//图片缩放比例</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXQTREEWIDGET_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>和<strong>ExQTreeWidget.cpp</strong>：如下</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExQTreeWidget.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExQTreeWidget.h"</span></span>

<span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">ExQTreeWidget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>
    <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token double-colon punctuation">::</span>ExQTreeWidget<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"QTreeWidget和QDockWidget的讲解和使用"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">setCentralWidget</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>scrollArea<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//设置scrollArea为中心控件</span>
    <span class="token function">initTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_labFlie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"当前文件的路径:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labFlie<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">ExQTreeWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="token comment">//初始化根节点（只能够有唯一）</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">initTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//准备工作</span>
    ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString dataStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    QIcon icon<span class="token punctuation">;</span>
    icon<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/image/Image001.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//创建唯一root的节点</span>
    QTreeWidgetItem<span class="token operator">*</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>treeItemType<span class="token double-colon punctuation">::</span>itemRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token operator">-></span><span class="token function">setIcon</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> icon<span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"相簿"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItemType<span class="token punctuation">,</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"treeItemType"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsAutoTristate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token operator">-></span><span class="token function">setData</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>UserRole<span class="token punctuation">,</span> <span class="token function">QVariant</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//添加顶层节点</span>
    ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">addTopLevelItem</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//添加目录节点</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">addFolderItem</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>parItem<span class="token punctuation">,</span> QString dirName<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QIcon icon<span class="token punctuation">;</span>
    icon<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/image/Image006.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//添加一个新的节点</span>
    QTreeWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>treeItemType<span class="token double-colon punctuation">::</span>itemFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString folderName <span class="token operator">=</span> <span class="token function">getFinalFolderName</span><span class="token punctuation">(</span>dirName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setIcon</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> icon<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> folderName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItemType<span class="token punctuation">,</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"treeItemType"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsAutoTristate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setData</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>UserRole<span class="token punctuation">,</span> <span class="token function">QVariant</span><span class="token punctuation">(</span>dirName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//添加子节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parItem<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> treeItemType<span class="token double-colon punctuation">::</span>itemFile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">//若是文件节点</span>
        parItem<span class="token operator">-></span><span class="token function">addChild</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parItem<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> treeItemType<span class="token double-colon punctuation">::</span>itemRoot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//若是唯一root节点</span>
        QTreeWidgetItem <span class="token operator">*</span>root <span class="token operator">=</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">topLevelItem</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        root<span class="token operator">-></span><span class="token function">addChild</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//添加图片节点</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">addImageItem</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>parItem<span class="token punctuation">,</span> QString fileName<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parItem <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    QIcon icon<span class="token punctuation">;</span>
    icon<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/image/Image014.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//添加一个新的节点</span>
    QTreeWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>treeItemType<span class="token double-colon punctuation">::</span>itemImage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString folderName <span class="token operator">=</span> <span class="token function">getFinalFolderName</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setIcon</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> icon<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> folderName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItemType<span class="token punctuation">,</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"treeItemType"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsAutoTristate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setData</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>UserRole<span class="token punctuation">,</span> <span class="token function">QVariant</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//添加子节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parItem<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> treeItemType<span class="token double-colon punctuation">::</span>itemFile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">//若是文件节点</span>
        parItem<span class="token operator">-></span><span class="token function">addChild</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parItem<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> treeItemType<span class="token double-colon punctuation">::</span>itemRoot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//若是唯一root节点</span>
        QTreeWidgetItem <span class="token operator">*</span>root <span class="token operator">=</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">topLevelItem</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        root<span class="token operator">-></span><span class="token function">addChild</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//从完整的路径里面，获取最后的文件夹名称</span>
QString <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">getFinalFolderName</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>pathName<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString path <span class="token operator">=</span> pathName<span class="token punctuation">;</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> pathName<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> pathName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString str <span class="token operator">=</span> pathName<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span>cnt <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> str<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//遍历传进来的父节点下的所有子节点；每遍历过该节点，就在其节点的信息加一个#</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">changeItemCaption</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>parItem<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString str <span class="token operator">=</span> <span class="token string">"# "</span> <span class="token operator">+</span> parItem<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    parItem<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>parItem<span class="token operator">-></span><span class="token function">childCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parItem<span class="token operator">-></span><span class="token function">childCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">changeItemCaption</span><span class="token punctuation">(</span>parItem<span class="token operator">-></span><span class="token function">child</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//回调，调用自己</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//显示当前item的图片（默认以适配高度）</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">displayImage</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>item<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString fileName <span class="token operator">=</span> item<span class="token operator">-></span><span class="token function">data</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>UserRole<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labFlie<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_curPixmap<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token comment">//从文件载入图片</span>
    <span class="token function">on_actAdaptiveHeight_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">//自动适应高度显示</span>

    ui<span class="token operator">-></span>actAmplification<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>actShrink<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>actZoomRealSize<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>actAdaptiveHeight<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>actAdaptiveWidth<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="token comment">//增加文件夹</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actAddFolder_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString path <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getExistingDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//选择目录</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> path<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        QTreeWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">currentItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//获取当前节点</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>
            <span class="token function">addFolderItem</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//添加图片</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actAddFile_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QStringList list <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getOpenFileNames</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择多个将要加载的图片"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"Images(*.jpg, *.png, *.*)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//选择目录</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        QTreeWidgetItem<span class="token operator">*</span> parItem <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        QTreeWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">currentItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//获取当前节点</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> treeItemType<span class="token double-colon punctuation">::</span>itemImage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">//获得父节点</span>
            parItem <span class="token operator">=</span> item<span class="token operator">-></span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            parItem <span class="token operator">=</span> item<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            QString strName <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//获得文件名称</span>
            <span class="token function">addImageItem</span><span class="token punctuation">(</span>parItem<span class="token punctuation">,</span> strName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//添加图片文件到文件节点</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//删除节点</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actDeleFile_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QTreeWidgetItem<span class="token operator">*</span> parItem <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    QTreeWidgetItem<span class="token operator">*</span> currItem <span class="token operator">=</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">currentItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>currItem<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> treeItemType<span class="token double-colon punctuation">::</span>itemRoot<span class="token punctuation">)</span>
        parItem <span class="token operator">=</span> currItem<span class="token operator">-></span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment">//只能够由其父节点删除</span>
<span class="token comment">//    else</span>
<span class="token comment">//        ui->treeFiles->takeTopLevelItem(0);                      //删除顶层节点使用这个</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>currItem <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> parItem <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    parItem<span class="token operator">-></span><span class="token function">removeChild</span><span class="token punctuation">(</span>currItem<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">//移除没有从内存中删除，所以delete删除</span>
    <span class="token keyword">delete</span> currItem<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//遍历所有的顶层节点(本处只有一个root顶层节点)</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actScanItems_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">topLevelItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        QTreeWidgetItem<span class="token operator">*</span> currItem <span class="token operator">=</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">topLevelItem</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//顶层item</span>
        <span class="token function">changeItemCaption</span><span class="token punctuation">(</span>currItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//图片自动适应高度</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actAdaptiveHeight_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> height <span class="token operator">=</span> ui<span class="token operator">-></span>scrollArea<span class="token operator">-></span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//得到scrollArea的高度</span>
    <span class="token keyword">int</span> realHeight <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//原始图片的实际高度</span>
    m_ratio <span class="token operator">=</span> height <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> realHeight<span class="token punctuation">;</span>                          <span class="token comment">//当前显示比例，必须转换为浮点数</span>

    QPixmap pixmap <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">scaledToHeight</span><span class="token punctuation">(</span>height <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//图片缩放到指定高度</span>
    ui<span class="token operator">-></span>labDisplay<span class="token operator">-></span><span class="token function">setPixmap</span><span class="token punctuation">(</span>pixmap<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">//设置Label的PixMap</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//图片自动适应宽度</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actAdaptiveWidth_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> width <span class="token operator">=</span> ui<span class="token operator">-></span>scrollArea<span class="token operator">-></span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> realWidth <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_ratio <span class="token operator">=</span> width <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> realWidth<span class="token punctuation">;</span>

    QPixmap pixmap <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">scaledToHeight</span><span class="token punctuation">(</span>width <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>labDisplay<span class="token operator">-></span><span class="token function">setPixmap</span><span class="token punctuation">(</span>pixmap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//当前节点变化的时候，自动加载当前图片</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_treeFiles_currentItemChanged</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>current<span class="token punctuation">,</span> QTreeWidgetItem <span class="token operator">*</span>previous<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> previous <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">displayImage</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//放大</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actAmplification_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_ratio <span class="token operator">*=</span> <span class="token number">1.2</span><span class="token punctuation">;</span>                                             <span class="token comment">//在当前比例基础上乘以0.8</span>
    <span class="token keyword">int</span> height <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> m_ratio<span class="token punctuation">;</span>                <span class="token comment">// 显示宽度</span>
    <span class="token keyword">int</span> widht <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> m_ratio<span class="token punctuation">;</span>                  <span class="token comment">// 显示宽度</span>

    QPixmap pix <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">scaled</span><span class="token punctuation">(</span>widht<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//图片缩放到指定高度和宽度，保持长宽比例</span>
    ui<span class="token operator">-></span>labDisplay<span class="token operator">-></span><span class="token function">setPixmap</span><span class="token punctuation">(</span>pix<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//缩小</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actShrink_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_ratio <span class="token operator">*=</span> <span class="token number">0.8</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> height <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> m_ratio<span class="token punctuation">;</span>
    <span class="token keyword">int</span> widht <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> m_ratio<span class="token punctuation">;</span>

    QPixmap pix <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">scaled</span><span class="token punctuation">(</span>widht<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>labDisplay<span class="token operator">-></span><span class="token function">setPixmap</span><span class="token punctuation">(</span>pix<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//还原</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actZoomRealSize_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_ratio <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> height <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> widht <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    QPixmap pix <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">scaled</span><span class="token punctuation">(</span>widht<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>labDisplay<span class="token operator">-></span><span class="token function">setPixmap</span><span class="token punctuation">(</span>pix<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//设置Dock窗口是否浮动</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actDockFloating_triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span> check<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>dockWidget<span class="token operator">-></span><span class="token function">setFloating</span><span class="token punctuation">(</span>check<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//设置Dock窗口是否隐藏不显示</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actDockVisible_triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>dockWidget<span class="token operator">-></span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token operator">!</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//退出</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actQiut_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//单击DockWidget组件的标题栏的关闭按钮时候，会隐藏在停靠区域，并且发射信号visibilityChanged;  停靠区域可见性变化</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_dockWidget_visibilityChanged</span><span class="token punctuation">(</span><span class="token keyword">bool</span> visible<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>actDockVisible<span class="token operator">-></span><span class="token function">setChecked</span><span class="token punctuation">(</span>visible<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//当拖动DockWidget组件，使其浮动或者停靠时候，会发射信号topLevelChanged;  更新其Action的状态</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_dockWidget_topLevelChanged</span><span class="token punctuation">(</span><span class="token keyword">bool</span> topLevel<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>actDockFloating<span class="token operator">-></span><span class="token function">setChecked</span><span class="token punctuation">(</span>topLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a> 【QtQTreeWidgetEx】</p>
<br>

<h2 id="Deam运行效果："><a href="#Deam运行效果：" class="headerlink" title="Deam运行效果："></a>Deam运行效果：</h2><p>先上最终的效果图:</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191007212020.gif"/ loading="lazy">



]]></content>
      <categories>
        <category>学习 - Qt</category>
        <category>专栏 - 项目实战开发</category>
      </categories>
  </entry>
  <entry>
    <title>QT源码分析QObject</title>
    <url>/posts/72876a90/</url>
    <content><![CDATA[<p><strong>简介：</strong>  <strong>QT</strong>源码分析<code>QObject</code>，由此管中窥豹</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="QT源码分析：QObject："><a href="#QT源码分析：QObject：" class="headerlink" title="QT源码分析：QObject："></a>QT源码分析：QObject：</h2><p><strong>QT</strong>框架里面最大的特色就是在<strong>C++<strong>的基础上增加了元对象系统（<code>Meta-Object System</code>），而元对象系统里面最重要的内容就是信号与槽机制，这个机制是在</strong>C++<strong>语法的基础上实现的，使用了函数、函数指针、回调函数等概念。当然与我们自己去写函数所不同的是槽与信号机制会自动帮我们生成部分代码，比如我们写的信号函数就不需要写它的实现部分，这是因为在我们编译程序的时候，编译器会自动生成这一部分代码，当我们调用<code>connect</code>函数的时候，系统会自动将信号函数与槽函数相连接，于是当我们调用信号函数的时候，系统就会自动回调槽函数，不管你是在同一线程下调用或者在不同线程下调用，系统都会自动评估，并在合理的时候触发函数，以此来保证线程的安全。信号与槽机制是线程安全的，这可以使得我们在调用的时候不用再额外的增加过多保证线程同步的代码，为了实现元对象系统，</strong>QT</strong>把所有相关实现写在了<code>QObject</code>类中，所以当你想使用元对象系统的时候，你所写的类需要继承自<code>QObject</code>，包括<strong>QT</strong>自带的所有类都是继承自<code>QObject</code>，所以分析<code>QObject</code>的代码，对了解<strong>QT</strong>的元对象机制有非常大的帮助，我并不打算把<code>QObject</code>类的每一行代码都写下来，只想把其中比较关键的内容或者对分析<strong>QT</strong>源码有帮助的内容介绍一下。</p>
<br>

<h2 id="1-宏Q-OBJECT"><a href="#1-宏Q-OBJECT" class="headerlink" title="1.宏Q_OBJECT:"></a>1.宏Q_OBJECT:</h2><p>这个宏展开以后是如下定义：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Q_OBJECT</span> <span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
    <span class="token expression">QT_WARNING_PUSH </span><span class="token punctuation">\</span>
    <span class="token expression">Q_OBJECT_NO_OVERRIDE_WARNING </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">static</span> <span class="token keyword">const</span> QMetaObject staticMetaObject<span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">virtual</span> <span class="token keyword">const</span> QMetaObject <span class="token operator">*</span><span class="token function">metaObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">qt_metacast</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">qt_metacall</span><span class="token punctuation">(</span>QMetaObject<span class="token double-colon punctuation">::</span>Call<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression">QT_TR_FUNCTIONS </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">private</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>
    <span class="token expression">Q_OBJECT_NO_ATTRIBUTES_WARNING </span><span class="token punctuation">\</span>
    <span class="token expression">Q_DECL_HIDDEN_STATIC_METACALL <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">qt_static_metacall</span><span class="token punctuation">(</span>QObject <span class="token operator">*</span><span class="token punctuation">,</span> QMetaObject<span class="token double-colon punctuation">::</span>Call<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression">QT_WARNING_POP </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">struct</span> <span class="token class-name">QPrivateSignal</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token function">QT_ANNOTATE_CLASS</span><span class="token punctuation">(</span>qt_qobject<span class="token punctuation">,</span> </span><span class="token string">""</span><span class="token expression"><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>你可以看到这个宏定义了一些函数，并且函数名都带有<code>meta</code>，所以不难猜到这些函数和<strong>QT</strong>的元对象系统是有关系的，实际上你在<code>qobject.cpp</code>里面是找不到这些函数的实现的，它们的实现都在<code>moc_qobject.cpp</code>里面。QT的元对象系统是这样处理的，当你编译你的工程时，它会去遍历所有**C++**文件，当发现某一个类的私有部分有声明<code>Q_OBJECT</code>这个宏时，就会自动生成一个<code>moc_*.cpp</code>的文件，这个文件会生成信号的实现函数，<code>Q_OBJECT</code>宏里面定义的那些函数也会在这个文件里面实现，并生成与类相关的元对象。这就是为什么我们定义一个信号的时候，不需要实现它，因为它的实现已经写在<code>moc_*.cpp</code>文件里面了。</p>
<br>

<h2 id="2-宏Q-PROPERTY"><a href="#2-宏Q-PROPERTY" class="headerlink" title="2.宏Q_PROPERTY:"></a>2.宏Q_PROPERTY:</h2><blockquote>
<p>Q_PROPERTY(QString objectName READ objectName WRITE setObjectName NOTIFY objectNameChanged)</p>
</blockquote>
<p>这个宏的定义如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Q_DECLARE_PRIVATE</span><span class="token expression"><span class="token punctuation">(</span>Class<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">inline</span> Class</span><span class="token punctuation">##</span><span class="token expression">Private<span class="token operator">*</span> <span class="token function">d_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>Class</span><span class="token punctuation">##</span><span class="token expression">Private <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">qGetPtrHelper</span><span class="token punctuation">(</span>d_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">inline</span> <span class="token keyword">const</span> Class</span><span class="token punctuation">##</span><span class="token expression">Private<span class="token operator">*</span> <span class="token function">d_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">const</span> Class</span><span class="token punctuation">##</span><span class="token expression">Private <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">qGetPtrHelper</span><span class="token punctuation">(</span>d_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">Class</span></span><span class="token punctuation">##</span><span class="token expression">Private<span class="token punctuation">;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个宏首先创建了两个内联函数，返回值都是QObjectPrivate ，并且声明QObjectPrivate 为友元类，<code>QObjectPrivate</code>这个类是在qobject_p.h中定义，它继承至QObjectData，你可以看到d_func()是将d_prt强制转换为<code>QObjectPrivate</code> 类型，而d_prt这个指针在QObject里面定义的是<code>QObjectData</code>的指针类型，所以这里可以进行强转，<code>QObjectPrivate</code>这个类主要存放QOject类需要用到的一些子对象，变量等。为什么要介绍这个宏，如果你有看QT源码习惯的话，你会发现几乎每一个类都用到了这个宏，我们自己写的类会经常把类内部用的变量声明在private部分，但是QT源码并不是这样做的，它的做法是给每个类创建一个以<code>类名+Private</code>的类，例如QObject对应的就是<code>QObjectPrivate</code>，这个类实际上就是用来存放QObject需要用到的所有私有变量和私有对象，而<code>QObject</code>更多的是函数实现，你去看其他的源码也是如此，子对象声明在QPrivate中，而本类只实现函数。</p>
<br>

<h2 id="3-宏Q-DECLARE-PRIVATE："><a href="#3-宏Q-DECLARE-PRIVATE：" class="headerlink" title="3.宏Q_DECLARE_PRIVATE："></a>3.宏Q_DECLARE_PRIVATE：</h2><blockquote>
<p>Q_DECLARE_PRIVATE(QObject)</p>
</blockquote>
<p>这个宏的定义如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Q_DECLARE_PRIVATE</span><span class="token expression"><span class="token punctuation">(</span>Class<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
    <span class="token expression">``<span class="token keyword">inline</span>` `Class</span><span class="token punctuation">##</span><span class="token expression">Private<span class="token operator">*</span> <span class="token function">d_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ``<span class="token keyword">return</span>` `<span class="token keyword">reinterpret_cast</span>``<span class="token operator">&lt;</span>Class</span><span class="token punctuation">##</span><span class="token expression">Private <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">qGetPtrHelper</span><span class="token punctuation">(</span>d_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> </span><span class="token punctuation">\</span>
    <span class="token expression">``<span class="token keyword">inline</span>` `<span class="token keyword">const</span>` `Class</span><span class="token punctuation">##</span><span class="token expression">Private<span class="token operator">*</span> <span class="token function">d_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ``<span class="token keyword">const</span>` `<span class="token punctuation">&#123;</span> ``<span class="token keyword">return</span>` `<span class="token keyword">reinterpret_cast</span>``<span class="token operator">&lt;</span>``<span class="token keyword">const</span>` `Class</span><span class="token punctuation">##</span><span class="token expression">Private <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">qGetPtrHelper</span><span class="token punctuation">(</span>d_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> </span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">friend</span>` `<span class="token keyword">class</span>` `Class</span><span class="token punctuation">##</span><span class="token expression">Private<span class="token punctuation">;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个宏首先创建了两个内联函数，返回值都是<code>QObjectPrivate </code>，并且声明<code>QObjectPrivate</code> 为友元类，<code>QObjectPrivate</code>这个类是在qobject_p.h中定义，它继承至<code>QObjectData</code>，你可以看到<code>d_func()</code>是将<code>d_prt</code>强制转换为<code>QObjectPrivate</code> 类型，而<code>d_prt</code>这个指针在QObject里面定义的是QObjectData的指针类型，所以这里可以进行强转，<code>QObjectPrivate</code>这个类主要存放QOject类需要用到的一些子对象，变量等。为什么要介绍这个宏，如果你有看QT源码习惯的话，你会发现几乎每一个类都用到了这个宏，我们自己写的类会经常把类内部用的变量声明在<code>private</code>部分，但是QT源码并不是这样做的，它的做法是给每个类创建一个以类名+Private的类，例如QObject对应的就是QObjectPrivate，这个类实际上就是用来存放QObject需要用到的所有私有变量和私有对象，而QObject更多的是函数实现，你去看其他的源码也是如此，子对象声明在QPrivate中，而本类只实现函数。</p>
<br>

<h2 id="4-构造函数："><a href="#4-构造函数：" class="headerlink" title="4.构造函数："></a>4.构造函数：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">QObject</span><span class="token punctuation">(</span>QObject <span class="token operator">*</span>parent<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">d_ptr</span><span class="token punctuation">(</span><span class="token keyword">new</span> QObjectPrivate<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">Q_D</span><span class="token punctuation">(</span>QObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    d_ptr<span class="token operator">-></span>q_ptr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    d<span class="token operator">-></span>threadData <span class="token operator">=</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>parent<span class="token operator">-></span><span class="token function">thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> parent<span class="token operator">-></span><span class="token function">d_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>threadData <span class="token operator">:</span> <span class="token class-name">QThreadData</span><span class="token double-colon punctuation">::</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d<span class="token operator">-></span>threadData<span class="token operator">-></span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        QT_TRY <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check_parent_thread</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> parent <span class="token operator">?</span> parent<span class="token operator">-></span><span class="token function">d_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>threadData <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> d<span class="token operator">-></span>threadData<span class="token punctuation">)</span><span class="token punctuation">)</span>
                parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token function">setParent</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token function">QT_CATCH</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            d<span class="token operator">-></span>threadData<span class="token operator">-></span><span class="token function">deref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            QT_RETHROW<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">QT_VERSION <span class="token operator">&lt;</span> <span class="token number">0x60000</span></span></span>
    <span class="token function">qt_addObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Q_UNLIKELY</span><span class="token punctuation">(</span>qtHookData<span class="token punctuation">[</span>QHooks<span class="token double-colon punctuation">::</span>AddQObject<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>QHooks<span class="token double-colon punctuation">::</span>AddQObjectCallback<span class="token operator">></span></span></span><span class="token punctuation">(</span>qtHookData<span class="token punctuation">[</span>QHooks<span class="token double-colon punctuation">::</span>AddQObject<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>（1）首先第一步就创建d_ptr指针。</p>
<p>（2）Q_D(QObject);这个宏你可以在QT的很多源码里面看到。它展开以后是下面的样子：#define Q_D(Class) Class##Private * const d &#x3D; d_func();</p>
<p>　　  d_fun()函数前面讲到了，其实就是返回d_ptr了。所以这个宏的意思是定义一个指针d指向d_ptr;</p>
<p>（3）d_ptr-&gt;q_ptr &#x3D; this;</p>
<p>　　 q_ptr是QOject类型，这里把this指针赋给了它，所以使得QObjectPrivate可以回调QOject的函数。</p>
<p>（4）初始化threadData</p>
<br>

<h2 id="5-moveToThread："><a href="#5-moveToThread：" class="headerlink" title="5.moveToThread："></a>5.moveToThread：</h2><h2 id="6-connect函数："><a href="#6-connect函数：" class="headerlink" title="6.connect函数："></a>6.connect函数：</h2><p>这两个部分参见原文：</p>
<p><a href="https://www.cnblogs.com/WushiShengFei/p/9820835.html">QT源码分析：QObject</a></p>
<p>本文同步文章：</p>
<p><a href="https://blog.csdn.net/qq_33154343/article/details/101381410">QT源码分析QObject</a></p>
]]></content>
      <categories>
        <category>学习 - 底层兼架构</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt Creator 关闭.cpp文件右侧的黄色警告</title>
    <url>/posts/63940372/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  在<code>Qt Creator</code>里面，默认打开一个项目文件，点开一个<code>*.cpp</code>文件里面，是很容易在右侧看到成片的黄色警告⚠️或者红颜色的<code>error</code>提示， 总是让看的人比较恐慌，然后在此文章中，给出如何关闭这个黄色、红色警告的的方法</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="关闭黄色警告（和红色）提示："><a href="#关闭黄色警告（和红色）提示：" class="headerlink" title="关闭黄色警告（和红色）提示："></a>关闭黄色警告（和红色）提示：</h2><h3 id="未修改之前："><a href="#未修改之前：" class="headerlink" title="未修改之前："></a>未修改之前：</h3><p><strong>编程环境：</strong>  <code>MacOS 10.14.6 (18G103)</code>  </p>
<p><strong>编程软件：</strong> <code>Qt 5.12.5</code>， <code>Qt Creator 4.10.0</code></p>
<p>有着比较多的黄色（红色）警告，虽然不影响编译， 但是看起来很不爽：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-11-06_20-06-30_mark.png"/ loading="lazy">



<h3 id="修改方法和效果："><a href="#修改方法和效果：" class="headerlink" title="修改方法和效果："></a>修改方法和效果：</h3><p><strong>步骤：</strong> 点击屏幕左上角的<code>Qt Cretor - 关于插件 - Name - c++: ClangcodeModel </code>，将这一栏的对钩✔️取消掉，然后重启<code>Qt Cretor</code>，再次打开之后， 就好了</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191106203719.png"/ loading="lazy">

<p><strong>成功重启后：</strong></p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191106203852.png"/ loading="lazy">





]]></content>
      <categories>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>Qt 信号和槽原理分析</title>
    <url>/posts/a74983e0/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　<code>Qt</code> 的信号和槽原理分析：手写一个 moc 预编译器模拟生成 mo_xxx.cpp 过程</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>　　 最近手工模拟了 Qt 的信号和槽实现原理，用纯 C++ 实现来实现一个 connet 函数。我的 💻 环境为：  <code>uos20 amd64</code> 📎 <code>Qt 5.11.3</code> 📎 <code>gcc/g++ 9.0</code> 📎 <code>gdb8.0</code> 。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">Object</span><span class="token double-colon punctuation">::</span><span class="token function">db_connet</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token string">"sig1()"</span><span class="token punctuation">,</span> obj2<span class="token punctuation">,</span> <span class="token string">"slot1()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>

<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><pre><code>     Qt 的信号和槽解决了 GUI 开发过程中 “对象间通信和共享数据” 问题。属于 Qt 的一个独创解决思路。关于为啥不用 C++ 的标准智能指针或者其它库呢？？那时候 Boost 和 stl 都没诞生呢。所以代价就是通过 moc 预编译器来扩展 C++ 语法。
</code></pre>
<p>​		模拟  object.h 通过 moc 生成 db_object.cpp 的过程中，要想实现如下的一个 connet 函数，很重要就是解决 <strong>“A 对象的 n 信号，映射关联到 B 对象的 m 槽函数”</strong> 。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">db_connet</span><span class="token punctuation">(</span>Object <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sig<span class="token punctuation">,</span> Object <span class="token operator">*</span>receiver<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>slot<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>

<h3 id="object-h"><a href="#object-h" class="headerlink" title="object.h"></a>object.h</h3><p>下图 的<code>object.h</code> 模拟 QObject 类；</p>
<ul>
<li>自定义 C++ 之外的关键字 <code>db_signals</code>、<code>db_slots</code>、<code>db_emit</code>；编译器不报错的？添加为宏预定义处理即可。</li>
<li><code>MetaObject</code> 对象模拟是元对象，用来在 <code>object</code> 中用来存储  <code>db_signals</code> 和  <code>db_slots</code> 标记下面的函数名；对于信号，只需要声明，则不需要定义（通过 moc 自动在db_object.cpp 中生成 ），但是槽函数则需要自己在其它函数中声明和定义</li>
<li><code>Connection</code> 是做作为 ConnectionMap 的 value 使用的。保存本对象所链接的对象和对应的槽函数</li>
<li><code>ConnectionMap</code> “对象 + 信号 ——–映射——&gt; 对象 + 槽” 在代码中存储表现形式。</li>
<li><code>ConnectionMapIt</code> 是 ConnectionMap 遍历的游标。</li>
<li><code>static MetaObject meta</code> 具体的元对象。</li>
<li><code>metacall</code> 通过槽的索引 &#x3D;&#x3D;&gt; 槽函数，然后调用</li>
<li><code>static void db_connet()</code> 静态函数设计，可在任何地方都可以使用，连接信号和槽函数</li>
<li><code>void testSignal()</code> 测试信号函数，看槽函数是否会成功被调用，即 emit signal( )</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">OBJECT_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OBJECT_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">db_signals</span> <span class="token expression"><span class="token keyword">protected</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">db_slots</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">db_emit</span></span>

<span class="token keyword">class</span> <span class="token class-name">Object</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">MetaObject</span>              <span class="token comment">// 元对象</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sig_names<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>slot_names<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">active</span><span class="token punctuation">(</span>Object <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Connection</span>
<span class="token punctuation">&#123;</span>
    Object <span class="token operator">*</span>recviver<span class="token punctuation">;</span>
    <span class="token keyword">int</span> method<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> Connection<span class="token operator">></span> ConnectionMap<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> Connection<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator ConnectionMapIt<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Object</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> MetaObject meta<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">metacall</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">db_connet</span><span class="token punctuation">(</span>Object <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sig<span class="token punctuation">,</span> Object <span class="token operator">*</span>receiver<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>slot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">testSignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

db_signals<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">sig1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//    void sig2();</span>

<span class="token keyword">public</span> db_slots<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">slot1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//    void slot2();</span>

<span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">MetaObject</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    ConnectionMap connectionsMap<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// OBJECT_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="object-cpp"><a href="#object-cpp" class="headerlink" title="object.cpp"></a>object.cpp</h3><p>object 类的实现细节</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"object.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">findSignalIndex</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>subStr<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>str <span class="token operator">||</span> <span class="token operator">!</span>subStr <span class="token operator">||</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>subStr<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> subStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">Object</span><span class="token double-colon punctuation">::</span><span class="token function">db_connet</span><span class="token punctuation">(</span>Object <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sig<span class="token punctuation">,</span> Object <span class="token operator">*</span>receiver<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>slot<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> sig_idx <span class="token operator">=</span> <span class="token function">findSignalIndex</span><span class="token punctuation">(</span>sender<span class="token operator">-></span>meta<span class="token punctuation">.</span>sig_names<span class="token punctuation">,</span> sig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> slot_idx <span class="token operator">=</span> <span class="token function">findSignalIndex</span><span class="token punctuation">(</span>receiver<span class="token operator">-></span>meta<span class="token punctuation">.</span>slot_names<span class="token punctuation">,</span> slot<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>sig_idx <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> slot_idx <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        cout<span class="token operator">&lt;&lt;</span><span class="token string">"signal or slot not found!"</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        Connection c <span class="token operator">=</span> <span class="token punctuation">&#123;</span>receiver<span class="token punctuation">,</span> slot_idx<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        sender<span class="token operator">-></span>connectionsMap<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> Connection<span class="token operator">></span></span></span><span class="token punctuation">(</span>sig_idx<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// connectionsMap 私有成员</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">Object</span><span class="token double-colon punctuation">::</span><span class="token function">testSignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    db_emit <span class="token function">sig1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Object</span><span class="token double-colon punctuation">::</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>

<span class="token class-name">Object</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">// 通过 sender 的信号 idx ==> 槽函数</span>
<span class="token keyword">void</span> <span class="token class-name">MetaObject</span><span class="token double-colon punctuation">::</span><span class="token function">active</span><span class="token punctuation">(</span>Object <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    pair<span class="token operator">&lt;</span>ConnectionMapIt<span class="token punctuation">,</span> ConnectionMapIt<span class="token operator">></span> ret<span class="token punctuation">;</span>
    ret <span class="token operator">=</span> sender<span class="token operator">-></span>connectionsMap<span class="token punctuation">.</span><span class="token function">equal_range</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 寻找[idx,  )</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>ConnectionMapIt it <span class="token operator">=</span> ret<span class="token punctuation">.</span>first<span class="token punctuation">;</span> it <span class="token operator">!=</span> ret<span class="token punctuation">.</span>second<span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        Connection c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>
        c<span class="token punctuation">.</span>recviver<span class="token operator">-></span><span class="token function">metacall</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="db-object-cpp"><a href="#db-object-cpp" class="headerlink" title="db_object.cpp"></a>db_object.cpp</h3><p>  object 类通过 moc 生成 db_object.cpp，一些 moc 所执行的代码扩展在 db_object.cpp 里面。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"object.h"</span></span>

<span class="token comment">//db_object: 是由 moc 编译器 将 object.cpp 展开的内容(此处手写表示)</span>

<span class="token keyword">const</span> <span class="token keyword">char</span> sig_names<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"sig1()"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">char</span> slot_names<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"slot1()"</span><span class="token punctuation">;</span>
MetaObject Object<span class="token double-colon punctuation">::</span>meta <span class="token operator">=</span> <span class="token punctuation">&#123;</span>sig_names<span class="token punctuation">,</span> slot_names<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token class-name">Object</span><span class="token double-colon punctuation">::</span><span class="token function">sig1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">MetaObject</span><span class="token double-colon punctuation">::</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">Object</span><span class="token double-colon punctuation">::</span><span class="token function">slot1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-----------> this is slot1()"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 槽的索引==> 槽函数</span>
<span class="token keyword">void</span> <span class="token class-name">Object</span><span class="token double-colon punctuation">::</span><span class="token function">metacall</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>idx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
        <span class="token function">slot1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"object.h"</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token comment">// 目的：自行构造 moc 编译器，手动将 object.h --> db_bject.cpp (宏 和 moc 编译器处理的部分)</span>
<span class="token comment">// 时间：2021-03-26</span>
<span class="token comment">// 下载：https://github.com/xmuli/QtExamples</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    Object <span class="token operator">*</span>obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Object <span class="token operator">*</span>obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Object</span><span class="token double-colon punctuation">::</span><span class="token function">db_connet</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token string">"sig1()"</span><span class="token punctuation">,</span> obj2<span class="token punctuation">,</span> <span class="token string">"slot1()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj1<span class="token operator">-></span><span class="token function">testSignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 终端输出打印：</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> <span class="token keyword">this</span> is <span class="token function">slot1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文参考 <a href="https://www.cnblogs.com/swarmbees/p/10816139.html">文一</a>、 <a href="https://blog.csdn.net/perfectguyipeng/article/details/78082360">文二</a> ，但实际发现其源码之间有几处错误，实际运行失败，参考思路重写，方便后来者学习，且本文还有改进之处，日后有空改进，修改点如下：</p>
<ul>
<li><code>findSignalIndex</code> 函数重写，使得能够识别信号和槽函数的重载函</li>
<li><code>db_connet</code> 在重构，支持宏方式（Qt4）和 函数指针（Qt5）方式；（当前为使用字符串作为参数）</li>
<li>构建 xxx_p.h，将成员变量都放在此文件中，加快项目的编译速度。</li>
</ul>
<br>

<h3 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a> 【DbSigSlot】</p>
<p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 QT &#x2F; DTK 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt 项目(CMake)设置国际化支持</title>
    <url>/posts/9644ed82/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　准备将我写的悬浮网速窗口上面支持国际化（多语言）；记录一下通过 <code>CMake</code> + <code>Qt</code> 来对项目设置国际化。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/Peek 2021-03-05 17-58.gif" width="80%"/ loading="lazy">





<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p><strong>编程环境：</strong> 　<strong>💻</strong>  <code>uos20 amd64</code> 📎 <code>Qt 5.11.3</code> 📎 <code>cmake 3.13.4</code> 📎 <code>gdb8.0</code> </p>
<br>

<h3 id="国际化原理"><a href="#国际化原理" class="headerlink" title="国际化原理"></a>国际化原理</h3><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/image-20210305165840537.png" width="90%"/ loading="lazy">

<p>​		<code>Qt</code> 实现多语言的关键原理如图，先扫描所有的源码文件 <code>.cpp</code>、<code>.ui</code> 文件，找到被 <code>tr()</code> 包裹的字符串（多国语言混合也可），然后人使用到 <code>Qt5 Lingust</code> 程序来对每一个 <code>.ts</code> 文件进行翻译，再次编译生成所需的 <code>.qm</code> 文件。</p>
<br>

<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>​		因为要对自己的程序完成国际化，先在 <code>CMakeLists.txt</code> 添加如下代码，标明使用 <code>LinguistTools</code> 来生成 <code>*.ts</code> 文件</p>
<pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set</span><span class="token punctuation">(</span>TS_FILES
        ./translations/zh_CN.ts
        ./translations/zh_TW.ts<span class="token punctuation">)</span>
<span class="token keyword">find_package</span><span class="token punctuation">(</span>Qt<span class="token punctuation">$&#123;</span><span class="token variable">QT_VERSION</span><span class="token punctuation">&#125;</span> COMPONENTS <span class="token punctuation">$&#123;</span>REQUIRED_LIBS<span class="token punctuation">&#125;</span> LinguistTools REQUIRED<span class="token punctuation">)</span>
<span class="token function">qt5_create_translation</span><span class="token punctuation">(</span>QM_FILES <span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_CURRENT_SOURCE_DIR</span><span class="token punctuation">&#125;</span> <span class="token punctuation">$&#123;</span>TS_FILES<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>​		后对项目执行 <code>CMake</code>、编译后，会根据 <code>.cpp</code> 和 <code>.ui</code> 文件里面字符串扫描（字符串可以同时为几国语言混合，但必须使用 <code>tr()</code> 包裹）；  会在源码路径的 <code>./translations/</code> 下生成两个 <code>zh_CN.ts、zh_TW.ts</code> 文件；使用 <code>Qt5 Lingust</code> ，手工对源文件翻译本国语言保存。</p>
<br>

<p>​		再次编译一遍，在 <code>build-xxx</code> 文件夹中得到 <code>*.qm</code> 文件，一般而言，然后在源码里面加上如下，即完成。若是没生效的话，则可能没执行 <code>ui-&gt;retranslateUi(this);</code> 函数</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QTranslator trans<span class="token punctuation">;</span>
trans<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"./"</span> <span class="token operator">+</span> <span class="token function">QLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".qm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">QCoreApplication</span><span class="token double-colon punctuation">::</span><span class="token function">installTranslator</span><span class="token punctuation">(</span>m_trans<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br>

<p>但实际其中最后一步要修改一下，结合实际项目，将多语言按钮写在 <code>QComboBox</code> 控件中；在其中添加</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QStringList listLang<span class="token punctuation">;</span>
QStringList listData<span class="token punctuation">;</span>
listLang <span class="token operator">&lt;&lt;</span> <span class="token string">"English"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"简体中文"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"繁體中文(台湾)"</span><span class="token punctuation">;</span>
listData <span class="token operator">&lt;&lt;</span> <span class="token string">"es_US"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"zh_CN"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"zh_TW"</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> listLang<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    ui<span class="token operator">-></span>comboBoxLanguage<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span>listLang<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> listData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>对该控件添加对应的槽函数</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">WinSetting</span><span class="token double-colon punctuation">::</span><span class="token function">onComboBoxLanguage</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString <span class="token function">language</span><span class="token punctuation">(</span><span class="token string">"zh_CN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    language <span class="token operator">=</span> ui<span class="token operator">-></span>comboBoxLanguage<span class="token operator">-></span><span class="token function">itemData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> ok <span class="token operator">=</span> m_trans<span class="token operator">-></span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"./"</span> <span class="token operator">+</span> language <span class="token operator">+</span> <span class="token string">".qm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span> <span class="token string">"---------@1--->"</span> <span class="token operator">&lt;&lt;</span> language <span class="token operator">&lt;&lt;</span> ok<span class="token punctuation">;</span>
    <span class="token class-name">QCoreApplication</span><span class="token double-colon punctuation">::</span><span class="token function">installTranslator</span><span class="token punctuation">(</span>m_trans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><font color=#D0087E size=4 face="幼圆">其中每次运行 <code>installTranslator()</code> 的时候，都会触发 <code>QEvent::LanguageChange</code> 事件信号；故需要在事件过滤器中，添加对应的处理，响应更新界面更新文字。<strong>还要在该 QcomboBox 控件中安装此事件过滤器；</strong>  此时就已经完成了，可以不关闭程序切换多语言了。</font></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token class-name">WinSetting</span><span class="token double-colon punctuation">::</span><span class="token function">eventFilter</span><span class="token punctuation">(</span>QObject <span class="token operator">*</span>watched<span class="token punctuation">,</span> QEvent <span class="token operator">*</span>event<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>watched <span class="token operator">==</span> ui<span class="token operator">-></span>comboBoxLanguage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> QEvent<span class="token double-colon punctuation">::</span>LanguageChange<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            ui<span class="token operator">-></span><span class="token function">retranslateUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> 

    <span class="token keyword">return</span> <span class="token class-name">QWidget</span><span class="token double-colon punctuation">::</span><span class="token function">eventFilter</span><span class="token punctuation">(</span>watched<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li><p>若在 <code>QtCreator</code> 中，点击 “清理”，会删除 <code>/translations</code> 下的所有 <code>.ts</code> 文件，再次编译后的生成是空的未翻译的 <code>.ts</code> 文件；坑坑坑！！！</p>
</li>
<li><p><font color=#FE7207  size=4 face="幼圆">一般使用设计器来设计的界面 UI，也就是程序源码中我们看到的 *.ui文件，在载入翻译器后，我们应该调用 ui-&gt;retranslateUi() ，这个函数实际上就是把 界面 控件的text重新载入一遍，可以在 ui_*.cpp  中看到该函数的实现。</font></p>
</li>
<li><p>当语言进行切换时，需要调用 <code>ui-&gt;retranslateUi(this);</code> 更新主窗口。 如果非主窗口，则这个 <code>installTranslator</code> 函数会触发<code>void changeEvent(QEvent *e)</code> 事件。</p>
<p>原因如下：系统调用完 <code>installTranslator</code> 函数之后，系统会自动给程序中所有的 <code>QWidget</code> 以及其子类发送  <code>QEvent::LanguageChange()</code> 信号，并告知<code>changeEvent</code>槽 <code>event</code> 产生。所以，在要切换语言的每个窗体中都要重写接受 <code>QEvent::LanguageChange()</code> 信号的 <code>changeEvent</code> 函数，从而实现了语言的动态切换。</p>
<p>注意：加载主程序与子插件程序翻译文件时的别名或者路径不要相同，否则子插件程序翻译有可能不生效。</p>
</li>
</ul>
<br>

<h3 id="项目提交"><a href="#项目提交" class="headerlink" title="项目提交"></a>项目提交</h3><p>在 <a href="https://github.com/xmuli/lfxNet">lfxNet</a> 的实时网速程序中，实际提交代码可提供大家参考</p>
<ol>
<li>在 <code>Cmake</code> 添加调用 <code>LinguistTools</code> 的代码： <a href="https://github.com/xmuli/lfxNet/commit/948522d8bf0e4bfd90b6befa5b6f59f76561aac4">#948522d8b</a> </li>
<li>更新翻译 <code>.ts</code> 文件: <a href="https://github.com/xmuli/lfxNet/commit/9602aa3e365b0c43510b6812c4c5209c8f0f8ba1">#9602aa3e3</a> 和 <a href="https://github.com/xmuli/lfxNet/commit/4e659fe139ecc56ee8c2e449dac25ab3512baa19">#4e659fe13</a> </li>
<li>设置多语言切换： <a href="https://github.com/xmuli/lfxNet/commit/31b2561bd2de8bc036a1a836b267f4310d226e3e">#31b2561bd</a></li>
</ol>
<br>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://shouce.jb51.net/qt-beginning/51.html">国际化</a> </li>
<li><a href="https://www.cnblogs.com/apocelipes/p/14355460.html">配置CLion管理Qt项目国际化支持</a> </li>
<li><a href="https://blog.csdn.net/hebbely/article/details/69388763">Qt 多国语言国际化</a> </li>
<li><a href="https://blog.csdn.net/u011857683/article/details/78042102">Qt多语言实现和动态切换（国际化）</a></li>
</ul>
<br>

<h3 id="系列地址："><a href="#系列地址：" class="headerlink" title="系列地址："></a>系列地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a>  </p>
<p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 <code>QT / DTK</code> 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt 项目用 doxygen 生成 .qch，嵌入文档到 Assistants</title>
    <url>/posts/3f6b9501/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　想着，将项目 <code>API</code> 的文档，能够生成离线版嵌入 <code>Qt</code> 助手  那样就方便很多，或者直接在 <code>Qt Creator</code> 里面点击帮助查看。</p>
<p>​		本文讲述如何将 <code>Qt / C++</code> 代码函数注释，解析生成 <code>html</code> 网页，生成 <code>.qhp</code> 后转换为 <code>.qch</code>，然后注册到  <code>Qt Assistants</code>  里面查看。<font color=#D0087E size=4 face="STFangsong">附上集成 DTK 开发手册到 Qt Assistants 的操作。</font></p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/Peek%202021-03-09%2013-08.gif" width="100%"/ loading="lazy">



<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="集成-DTK-开发手册到-Qt-Assistants"><a href="#集成-DTK-开发手册到-Qt-Assistants" class="headerlink" title="集成 DTK 开发手册到 Qt Assistants"></a>集成 DTK 开发手册到 Qt Assistants</h3><p>​		哈哈哈哈哈哈哈哈，如何将 <code>DTK</code> 开发手册集成到 <code>Qt Assistants</code>，命名执行完成后，效果就是文章最上面的预览图，且已自动切换了新皮肤，也会是 <code>Qt</code> 风格的，感兴趣可参见 <a href="https://ifmet.cn/posts/af3370a3/">此文</a>。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> doxygen graphviz                           <span class="token comment"># 安装准备软件</span>
<span class="token function">git</span> clone <span class="token parameter variable">--recursive</span> https://github.com/linuxdeepin/dtk.git <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment"># 克隆代码</span>
<span class="token builtin class-name">cd</span> dtk                                                      <span class="token comment"># 进入项目文件夹</span>
doxygen                                                     <span class="token comment"># 生成 html +  .qhp 和 .qch</span>
<span class="token function">sudo</span> <span class="token function">cp</span> doc/dtk.qch /usr/share/qt5/doc                      <span class="token comment"># 与 Qt 文档存放在一起</span>
assistant <span class="token parameter variable">-register</span> /usr/share/qt5/doc/dtk.qch              <span class="token comment"># 注册集成到 Qt 助手</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>涉及到生成自定义离线文档，定制过程中用到 <code>qhp</code>，<code>qch</code>，<code>qhcp</code>，<code>qhc</code> 四种不同格式的文件：</p>
<table>
<thead>
<tr>
<th>中文</th>
<th>全称</th>
<th>后缀</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://doc.qt.io/archives/qt-4.8/qthelpproject.html">Qt帮助项目</a></td>
<td>Qt Help Project</td>
<td>.qhp</td>
<td>帮助生成器的输入文件，包括目录、索引和对实际文档文件的引用(*.html)；它还为文档定义了一个独特的命名空间。</td>
</tr>
<tr>
<td>Qt压缩帮助</td>
<td>Qt Compressed Help</td>
<td>.qch</td>
<td>帮助生成器的输出文件。这个二进制文件包含了帮助项目文件中指定的所有信息，以及所有压缩的文档文件。</td>
</tr>
<tr>
<td><a href="https://doc.qt.io/archives/qt-4.8/qthelp-framework.html#qt-help-collection-project">Qt帮助收集项目</a></td>
<td>Qt Help Collection Project</td>
<td>.qhcp</td>
<td>帮助集合生成器的输入文件。它包含了应该包含在帮助集合中的压缩帮助文件的引用；它也可能包含了其他用于定制Qt助手的信息。</td>
</tr>
<tr>
<td>Qt帮助集合</td>
<td>Qt Help Collection</td>
<td>.qhc</td>
<td>帮助收集生成器的输出文件。这是QHelpEngine操作的文件。它包含对任何数量的压缩帮助文件的引用，以及附加信息，如自定义过滤器。</td>
</tr>
</tbody></table>
<br>

<p>大致分成如下两类：</p>
<ul>
<li><p><strong>qhp 通过 qhelpgenerator 生成  qch。</strong> qhp文件负责组织实际用到的帮助文件（通常为HTML 文件，即需要在Qt Assistant中浏览的文件），然后通过 qhelpgenerator 是命令生成压缩的qch文件。qch文件是Qt Assistant能够识别的文档最小单元，可以通过 Qt Assistant-&gt;编辑-&gt;首选项-&gt;文档标签页-&gt;添加&#x2F;移除  操作来注册或者注销一个qch文件。也可以通过命令 “assistant -register doc.qch” 来注册qch文件。注册后，即可在Assistant界面中浏览帮助文档。</p>
</li>
<li><p><strong>qhcp 通过 qcollectiongenerator 生成 qhc。</strong> qhcp 其主要作用是将qch二进制文件组织成为一个collection，定制客户化的Assistant；而 qhc 则是通过 qcollectiongenerator 命令生成的二进制文件，启动 Assistant 时需要指定 collection 参数，即 qhc 文件。qhc 文件中是 qch 文件的集合，打开 Assistant 时，通过指定当前collection 即可注册多个帮助文档。</p>
</li>
</ul>
<br>

<h3 id="简洁流程"><a href="#简洁流程" class="headerlink" title="简洁流程"></a>简洁流程</h3><ol>
<li>对一个 <code>C++ / Qt</code> 项目添加 <code>API</code> 函数的注释，是 <code>doxygen</code> 风格</li>
<li>使用 <code>doxygen</code> 修改默认生成模板</li>
<li>解析得到 <code>html</code> 和 <code>.qhp</code> 的两类文件</li>
<li>运行 <code>qhelpgenerator</code> 将 <code>.qhp</code> 转换为 .<code>qch</code> 格式</li>
<li>注册 <code>.qch</code> 到 <code>Qt Assistants</code> ，然后打开观看效果</li>
</ol>
<br>

<h3 id="具体例子"><a href="#具体例子" class="headerlink" title="具体例子"></a>具体例子</h3><h4 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h4><p>​		<code>doxygen 1.8.13</code> &amp;&amp; <code>UOS v20</code> &amp;&amp; <code>Qt Assistants 5.11.3</code></p>
<br>

<h4 id="书写注释"><a href="#书写注释" class="headerlink" title="书写注释"></a>书写注释</h4><p>​		对需要的项目，按照 <code>doxygen</code> 风格写入注释。doxygen 的用法可参考 <a href="https://xmuli.blog.csdn.net/article/details/102809157">此文</a> 。推荐如下风格</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*!
 * \brief main 所有函数的入口
 * \param argc 参数个数
 * \param argv 参数地址（二维）
 * \return 程序运行状态
 */</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QApplication <span class="token function">a</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    IfmetWindow w<span class="token punctuation">;</span>
    w<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="设置-doxygen-参数"><a href="#设置-doxygen-参数" class="headerlink" title="设置 doxygen 参数"></a>设置 doxygen 参数</h4><p>执行 <code>doxygen -g</code> 生成详细注释的 Doxyfile 文件，然后修改如下地方参数</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#---------------生成 .html 文件---------------</span>
PROJECT_NAME           <span class="token operator">=</span> <span class="token string">"My CustomQch"</span>            <span class="token comment"># 生成文档的名称</span>
PROJECT_NUMBER         <span class="token operator">=</span> <span class="token number">1.0</span>.0                     <span class="token comment"># 项目文档的版本号码</span>
OUTPUT_DIRECTORY       <span class="token operator">=</span> ./doc                     <span class="token comment"># 输出存放文档的路径</span>
OUTPUT_LANGUAGE        <span class="token operator">=</span> Chinese                   <span class="token comment"># 生成文档为中/英文 English</span>
RECURSIVE              <span class="token operator">=</span> YES                       <span class="token comment"># 文件递归，包括子文件也要输出为文档</span>
IMAGE_PATH             <span class="token operator">=</span> ./doc/images              <span class="token comment"># 文档里面插入图片的存放路径</span>
DOT_PATH               <span class="token operator">=</span> /usr/local/bin            <span class="token comment"># 安装 graphviz ，在此可找到 dot</span>

<span class="token comment">#---------------生成 .qhp 文件---------------</span>
SHORT_NAMES            <span class="token operator">=</span> YES                       <span class="token comment"># 生成更短的文件名</span>
GENERATE_QHP           <span class="token operator">=</span> YES                       <span class="token comment"># 使用命名空间、生成 .qch ，此必须开启</span>
QCH_FILE               <span class="token operator">=</span> ./doc/my_custom_qch.qch   <span class="token comment"># 通过 html 生成的 qch 路径</span>
QHP_NAMESPACE          <span class="token operator">=</span> ifmet.cn                  <span class="token comment"># 命名空间要是唯一的，才能显示</span>
QHP_CUST_FILTER_NAME   <span class="token operator">=</span> YES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>注意:　如果没有把Qt bin的路径加到 path中, 则 QHG_LOCATION 需要指定 qhelpgenerator 的全路径</p>
<br>

<h4 id="生成-html-qhp"><a href="#生成-html-qhp" class="headerlink" title="生成 html + qhp"></a>生成 html + qhp</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">doxygen Doxyfile   <span class="token comment"># 简写为 doxygen</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>​		执行上面命令生成 <code>.html</code> 网页和 <code>.qhp</code> 文件。若报生成 <code>dot</code>  转换 <code>png</code> 失败，则需要安装  <code>graphviz</code> 包，其安装路径为  <code>/usr/local/bin</code></p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210308162516247.png" width="100%"/ loading="lazy">



<p>一般会直接生成 <code>index.html</code> 、 <code>index.qhp</code>；如参数配置对了，会直接生成 <code>my_custom_qch.qch</code> 文件，若是没有，也可执行生成</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">☁  CustomQch <span class="token punctuation">[</span>master<span class="token punctuation">]</span> ⚡  qhelpgenerator ./doc/html/index.qhp <span class="token parameter variable">-o</span> ./doc/index.qch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210308173339.png" width="70%"/ loading="lazy">

<br>

<h4 id="注册-qch"><a href="#注册-qch" class="headerlink" title="注册 .qch"></a>注册 .qch</h4><p>注册执行成功会如下，点击查看如图。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">☁  doc <span class="token punctuation">[</span>master<span class="token punctuation">]</span> ⚡  assistant <span class="token parameter variable">-register</span> my_custom_qch.qch
Documentation successfully registered.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/image-20210308165123417.png" width="90%"/ loading="lazy">

<br>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://doc.qt.io/archives/qt-4.8/qthelp-framework.html">The Qt Help Framework</a></li>
<li><a href="http://shouce.jb51.net/qt-beginning/52.html">定制Qt帮助系统</a> </li>
<li><a href="https://www.geek-share.com/detail/2515064905.html">利用qt制作帮助文档</a></li>
<li><a href="https://stackoverflow.com/questions/7951776/sh-dot-command-not-found-doxygen-lion">sh: dot: command not found + doxygen + Lion</a></li>
</ul>
<br>

<h3 id="系列地址："><a href="#系列地址：" class="headerlink" title="系列地址："></a>系列地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a>  【CustomQch】，所有步骤直接查看对应 commit 的哈希即可。</p>
<p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 <code>QT / DTK</code> 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
        <category>学习 - Qt</category>
        <category>学习 - Doxygen</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt 编程中 namespace Ui { class Widget; } 解析</title>
    <url>/posts/8cc715c4/</url>
    <content><![CDATA[<p><strong>简介：</strong> Qt 编程中 <code>namespace Ui &#123; class Widget; &#125;</code> 解析的原理</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>



<h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​		 Qt 编程中 namespace Ui { class Widget; } 解析</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"> <span class="token keyword">namespace</span> Ui 
<span class="token punctuation">&#123;</span> 
	<span class="token keyword">class</span> <span class="token class-name">widget</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>的原理，和它背后的东东。</p>
<br>

<p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  操作系统版本：<code>17134.285</code> </p>
<p><strong>编程软件：</strong>  <code>visual studio 2015</code>， <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p>
<br>

<h1 id="理解一："><a href="#理解一：" class="headerlink" title="理解一："></a>理解一：</h1><p>简述：</p>
<p>Qt编程中，会见到类似于如下的声明：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> Ui 
<span class="token punctuation">&#123;</span> 
	<span class="token keyword">class</span> <span class="token class-name">Dialog</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>那么，为何要这样声明，这样声明有什么好处。</p>
<p>这是Designer使用了pimpl手法，pImpl手法主要作用是解开类的使用接口和实现的耦合，即为了减少各个源文件之间的联系。</p>
<p>下面详细讲解一下。</p>
<h2 id="1、新建Qt-设计师界面类"><a href="#1、新建Qt-设计师界面类" class="headerlink" title="1、新建Qt 设计师界面类"></a>1、新建Qt 设计师界面类</h2><h3 id="dialog-h"><a href="#dialog-h" class="headerlink" title="dialog.h"></a>dialog.h</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">DIALOG_H </span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DIALOG_H</span> </span>
   
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QtGui/QDialog></span> </span>
   
<span class="token keyword">namespace</span> Ui 
<span class="token punctuation">&#123;</span> 
	<span class="token keyword">class</span> <span class="token class-name">Dialog</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span> 
  
<span class="token keyword">class</span> <span class="token class-name">Dialog</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QDialog</span></span> 
<span class="token punctuation">&#123;</span> 
	Q_OBJECT 
      
<span class="token keyword">public</span><span class="token operator">:</span> 
	<span class="token function">Dialog</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token operator">~</span><span class="token function">Dialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
      
<span class="token keyword">private</span><span class="token operator">:</span> 
	Ui<span class="token double-colon punctuation">::</span>Dialog <span class="token operator">*</span>ui<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 
  
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// DIALOG_H </span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="dialog-cpp"><a href="#dialog-cpp" class="headerlink" title="dialog.cpp"></a>dialog.cpp</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"dialog.h"</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_dialog.h"</span> </span>
 
<span class="token class-name">Dialog</span><span class="token double-colon punctuation">::</span><span class="token function">Dialog</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> 
	<span class="token operator">:</span> <span class="token function">QDialog</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token double-colon punctuation">::</span>Dialog<span class="token punctuation">)</span> 
<span class="token punctuation">&#123;</span> 
	ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token comment">//QObject::connect(ui->pushButton, SIGNAL(clicked()),this, SLOT(quit())); </span>
<span class="token punctuation">&#125;</span> 
 
<span class="token class-name">Dialog</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Dialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#123;</span> 
	<span class="token keyword">delete</span> ui<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="ui-dialog-h"><a href="#ui-dialog-h" class="headerlink" title="ui_dialog.h"></a>ui_dialog.h</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">UI_DIALOG_H </span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">UI_DIALOG_H</span> </span>
 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QtCore/QVariant></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QtGui/QAction></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QtGui/QApplication></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QtGui/QButtonGroup></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QtGui/QDialog></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QtGui/QHeaderView></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QtGui/QListView></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QtGui/QPushButton></span> </span>
	
QT_BEGIN_NAMESPACE 
 
<span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span> 
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span> 
	QListView <span class="token operator">*</span>listView<span class="token punctuation">;</span> 
	QPushButton <span class="token operator">*</span>pushButton
	           
	            
	<span class="token keyword">void</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>QDialog <span class="token operator">*</span>Dialog<span class="token punctuation">)</span> 
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>Dialog<span class="token operator">-></span><span class="token function">objectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
			Dialog<span class="token operator">-></span><span class="token function">setObjectName</span><span class="token punctuation">(</span><span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">fromUtf8</span><span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		Dialog<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		listView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QListView</span><span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span><span class="token punctuation">;</span> 
		listView<span class="token operator">-></span><span class="token function">setObjectName</span><span class="token punctuation">(</span><span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">fromUtf8</span><span class="token punctuation">(</span><span class="token string">"listView"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		listView<span class="token operator">-></span><span class="token function">setGeometry</span><span class="token punctuation">(</span><span class="token function">QRect</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		pushButton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span><span class="token punctuation">;</span> 
		pushButton<span class="token operator">-></span><span class="token function">setObjectName</span><span class="token punctuation">(</span><span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">fromUtf8</span><span class="token punctuation">(</span><span class="token string">"pushButton"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		pushButton<span class="token operator">-></span><span class="token function">setGeometry</span><span class="token punctuation">(</span><span class="token function">QRect</span><span class="token punctuation">(</span><span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	         
		<span class="token function">retranslateUi</span><span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span><span class="token punctuation">;</span>
	  
		<span class="token class-name">QMetaObject</span><span class="token double-colon punctuation">::</span><span class="token function">connectSlotsByName</span><span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token comment">// setupUi</span>
	   
	<span class="token keyword">void</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>QDialog <span class="token operator">*</span>Dialog<span class="token punctuation">)</span> 
	<span class="token punctuation">&#123;</span> 
		Dialog<span class="token operator">-></span><span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token class-name">QApplication</span><span class="token double-colon punctuation">::</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> <span class="token string">"Dialog"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> QApplication<span class="token double-colon punctuation">::</span>UnicodeUTF8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		pushButton<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">QApplication</span><span class="token double-colon punctuation">::</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> <span class="token string">"bye"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> QApplication<span class="token double-colon punctuation">::</span>UnicodeUTF8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		<span class="token function">Q_UNUSED</span><span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token punctuation">&#125;</span> <span class="token comment">// retranslateUi </span>
	    
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 
 
<span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span> 
	<span class="token keyword">class</span> <span class="token class-name">Dialog</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Ui_Dialog</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span> <span class="token comment">// namespace Ui </span>
 
QT_END_NAMESPACE 
 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// UI_DIALOG_H </span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="2、分析代码"><a href="#2、分析代码" class="headerlink" title="2、分析代码"></a>2、分析代码</h2><p><strong>1 &gt; ui_dialog.h代码中有很多被硬编码的地方。</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">listView<span class="token operator">-></span><span class="token function">setGeometry</span><span class="token punctuation">(</span><span class="token function">QRect</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
pushButton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span><span class="token punctuation">;</span> 
pushButton<span class="token operator">-></span><span class="token function">setObjectName</span><span class="token punctuation">(</span><span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">fromUtf8</span><span class="token punctuation">(</span><span class="token string">"pushButton"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
pushButton<span class="token operator">-></span><span class="token function">setGeometry</span><span class="token punctuation">(</span><span class="token function">QRect</span><span class="token punctuation">(</span><span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<p>Designer生成的这个东西， 如何让程序的其他代码去使用呢？<br>最直接的， 它应该产生一个</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span> <span class="token punctuation">&#123;</span>
    QListView <span class="token operator">*</span>listView<span class="token punctuation">;</span> 
    QPushButton <span class="token operator">*</span>pushButton<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<p>这样的类去让其他代码使用：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// My.h</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_dialog.h"</span></span>
 
<span class="token keyword">class</span> <span class="token class-name">My</span>
<span class="token punctuation">&#123;</span>
	Ui_Dialog dlg<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
 
<span class="token comment">// My.cpp</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"My.h"</span></span>
<span class="token comment">// 实现My</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>但是这样存在问题， 如果ui_dialog.h文件的内容被改变，不但My.cpp会被重新编译，</strong><br><strong>所有包含My.h的文件也都会被重新编译。</strong><br><strong>而且这确实是一个问题： Designer确实经常被拖来拖去</strong></p>
<p><strong>2 &gt; 如果产生ui_dialog.h的那个程序能将如下代码：</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">listView<span class="token operator">-></span><span class="token function">setGeometry</span><span class="token punctuation">(</span><span class="token function">QRect</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
pushButton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span><span class="token punctuation">;</span> 
pushButton<span class="token operator">-></span><span class="token function">setObjectName</span><span class="token punctuation">(</span><span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">fromUtf8</span><span class="token punctuation">(</span><span class="token string">"pushButton"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">namespace</span> Ui  <span class="token punctuation">&#123;</span> 
    <span class="token keyword">class</span> <span class="token class-name">Dialog</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span> 
 
<span class="token keyword">class</span> <span class="token class-name">Dialog</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QDialog</span></span>  <span class="token punctuation">&#123;</span> 
    Ui<span class="token double-colon punctuation">::</span> Dialog <span class="token operator">*</span>ui<span class="token punctuation">;</span>  <span class="token comment">// 使用该类的一个指针</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 
 
 
pushButton<span class="token operator">-></span><span class="token function">setGeometry</span><span class="token punctuation">(</span><span class="token function">QRect</span><span class="token punctuation">(</span><span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>移动到一个ui_dialog.cpp 中， 至少在移动dlg上的那些界面元素时，只会重新编译ui_dialog.cpp。<br>不会修改ui_dialog.h， 也就不会引发另一连串重编译。</p>
<p><strong>3 &gt; 但是， 除了将界面元素拖来拖去， Designer还经常干的一些事就是添加，删除一些界面元素，如</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span> 
<span class="token punctuation">&#123;</span> 
<span class="token keyword">public</span><span class="token operator">:</span> 
    QListView <span class="token operator">*</span>listView<span class="token punctuation">;</span> 
    QPushButton <span class="token operator">*</span>pushButton<span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>4 &gt; 如何让Designer改变GUI外观后， 不会引发工程大范围的重新编译？</strong></p>
<p>所以Designer使用了pimpl手法 ……</p>
<p>前置声明一个 Ui:: Dialog类</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> Ui  <span class="token punctuation">&#123;</span> 
    <span class="token keyword">class</span> <span class="token class-name">Dialog</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span> 
 
<span class="token keyword">class</span> <span class="token class-name">Dialog</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QDialog</span></span>  <span class="token punctuation">&#123;</span> 
    Ui<span class="token double-colon punctuation">::</span> Dialog <span class="token operator">*</span>ui<span class="token punctuation">;</span>  <span class="token comment">// 使用该类的一个指针</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后用户使用 dialog.h 头文件以及 Dialog类。<br>该文件被修改的频率就会低很多很多。</p>
<p>无论是将designer上的界面元素拖来拖去， 还是添加删除， dialog.h文件的内容——Dialog类的定义——都不会改变。<br>然后用户可以使用这个Dialog了：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"dialog.h"</span></span>
<span class="token keyword">class</span> <span class="token class-name">My</span> 
<span class="token punctuation">&#123;</span>
    Dialog dlg<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="3、Ui-创建两种不同的方式"><a href="#3、Ui-创建两种不同的方式" class="headerlink" title="3、Ui 创建两种不同的方式"></a>3、Ui 创建两种不同的方式</h2><p><strong>1 &gt; 在qt4中使用了继承的方式来使用designer创建的窗体，也就是同时继承QDialog和UI_Dialog。</strong></p>
<p><strong>2 &gt; 而在Qt Creator自动创建的项目中，使用了组合的方式来使用Designer创建的窗体，就是集成QDialog，而将UI_Dialog作为一个成员变量来使用，也就是</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">private</span><span class="token operator">:</span>
   Ui<span class="token double-colon punctuation">::</span>Dialog <span class="token operator">*</span>ui<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<p><strong>区别：</strong><br><strong>在前一种方式中，你可以在继承类中直接使用UI_Dialog上的组件。</strong><br><strong>在后一种方式中，你要使用ui-&gt;XXX的方式使用UI_Dialog上的组件。</strong><br><strong>两种方式都可以，但个人感觉第二种好一些，毕竟组合比继承的耦合度来的弱一些，就是稍有点麻烦，要加ui-&gt;，但同时也带来了更清晰的代码结构。</strong></p>
<h2 id="4、pImpl的原理"><a href="#4、pImpl的原理" class="headerlink" title="4、pImpl的原理"></a>4、pImpl的原理</h2><p><strong>1 &gt; pImpl惯用手法的主要作用是解开类的使用接口和实现的耦合。</strong><br><strong>如果不使用pImpl惯用手法，代码会像这样</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;x.hpp></span></span>
<span class="token keyword">class</span> <span class="token class-name">C</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
	X x<span class="token punctuation">;</span> <span class="token comment">//与X的强耦合</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>像上面这样的代码，C与它的实现就是强耦合的，从语义上说，x成员数据是属于C的实现部分，不应该暴露给用户。从语言的本质上来说，在用户的代码中，每一次使用”new C”和”C c1”这样的语句，都会将X的大小硬编码到编译后的二进制代码段中（如果X有虚函数，则还不止这些）——这是因为，对于”new C”这样的语句，其实相当于operator new(sizeof(C))后面再跟上C的构造函数，而”C c1”则是在当前栈上腾出sizeof(C)大小的空间，然后调用C的构造函数。因此，每次X类作了改动，使用c.hpp的源文件都必须重新编译一次，因为X的大小可能改变了。<br>在一个大型的项目中，这种耦合可能会对build时间产生相当大的影响。</p>
<p><strong>pImpl惯用手法可以将这种耦合消除，使用pImpl惯用手法的代码像这样：</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//c.hpp</span>
<span class="token keyword">class</span> <span class="token class-name">X</span><span class="token punctuation">;</span> <span class="token comment">//用前导声明取代include</span>
<span class="token keyword">class</span> <span class="token class-name">C</span>
<span class="token punctuation">&#123;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">private</span><span class="token operator">:</span>
	X<span class="token operator">*</span> pImpl<span class="token punctuation">;</span> <span class="token comment">//声明一个X*的时候，class X不用完全定义</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>2 &gt; 在一个既定平台上，任何指针的大小都是相同的。之所以分为X<em>，Y</em>这些各种各样的指针，主要是提供一个高层的抽象语义，即该指针到底指向的是那个类的对象，并且，也给编译器一个指示，从而能够正确的对用户进行的操作（如调用X的成员函数）决议并检查。但是，如果从运行期的角度来说，每种指针都只不过是个32位的长整型（如果在64位机器上则是64位，根据当前硬件而定）。</strong></p>
<p>正由于<strong>pImpl是个指针</strong>，所以这里X的二进制信息（sizeof(C)等）不会被耦合到C的使用接口上去，也就是说，当用户”new C”或”C c1”的时候，编译器生成的代码中不会掺杂X的任何信息，并且当用户使用C的时候，使用的是C的接口，也与X无关，从而X被这个指针彻底的与用户隔绝开来。只有C知道并能够操作pImpl成员指向的X对象。</p>
<p><strong>3 &gt; 防火墙</strong><br>“修改X的定义会导致所有使用C的源文件重新编译”这种事就好比“城门失火，殃及池鱼”，其原因是“护城河”离“城门”太近了（耦合）。</p>
<p>pImpl惯用手法又被成为“编译期防火墙”，什么是“防火墙”，指针？不是。C++的编译模式为“分离式编译”，即不同的源文件是分开编译的。也就是说，不同的源文件之间有一道天然的防火墙，一个源文件“失火”并不会影响到另一个源文件。<br>但是，这里我们考虑的是<strong>头文件</strong>，如果头文件“失火”又当如何呢？头文件是不能直接编译的，它包含于源文件中，并作为源文件的一部分被一起编译。</p>
<p>这也就是说，如果源文件S.cpp使用了C.hpp，那么class C的（接口部分的）变动将无可避免的导致S.CPP的重新编译。但是作为class C的实现部分的class X却完全不应该导致S.cpp的重新编译。<br>因此，我们需要把class X隔绝在C.hpp之外。这样，每个使用class C的源文件都与class X隔离开来（与class X不在同一个编译单元）。但是，既然class C使用了class X的对象来作为它的实现部分，就无可避免的要“依赖”于class X。只不过，这个“依赖”应该被描述为：“class C的实现部分依赖于class X”，而不应该是“class C的用户使用接口部分依赖于class X”。</p>
<p>如果我们直接将X的对象写在class C的数据成员里面，则显而易见，使用class C的用户“看到”了不该“看到”的东西——class X——它们之间产生了耦合。然而，如果使用一个指向class X的指针，就可以将X的二进制信息“推”到class C的实现文件中去，在那里，我们#include”x.hpp”，定义所有的成员函数，并依赖于X的实现，这都无所谓，因为C的实现本来就依赖于X，重要的是：此时class X的改动只会导致class C的实现文件重新编译，而用户使用class C的源文件则安然无恙！<br>指针在这里充当了一座桥。将依赖信息“推”到了另一个编译单元，与用户隔绝开来。而防火墙是C++编译器的固有属性。</p>
<p><strong>4 &gt; 穿越C++编译期防火墙</strong></p>
<p>是什么穿越了C++编译期防火墙？是指针！使用指针的源文件“知道”指针所指的是什么对象，但是不必直接“看到”那个对象——它可能在另一个编译单元，是指针穿越了编译期防火墙，连接到了那个对象。<br>从某种意义上说，只要是代表地址的符号都能够穿越C++编译期防火墙，而代表结构(constructs)的符号则不能。<br>例如函数名，它指的是函数代码的始地址，所以，函数能够声明在一个编译单元，但定义在另一个编译单元，编译器会负责将它们连接起来。用户只要得到函数的声明就可以使用它。而类则不同，类名代表的是一个语言结构，使用类，必须知道类的定义，否则无法生成二进制代码。变量的符号实质上也是地址，但是使用变量一般需要变量的定义，而使用extern修饰符则可以将变量的定义置于另一个编译单元中。</p>
<p>&#x2F;&#x2F;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</p>
<h1 id="理解二："><a href="#理解二：" class="headerlink" title="理解二："></a>理解二：</h1><h2 id="Qt-编程中-namespace-Ui-class-Widget-解析"><a href="#Qt-编程中-namespace-Ui-class-Widget-解析" class="headerlink" title="Qt 编程中 namespace Ui { class Widget; } 解析"></a>Qt 编程中 namespace Ui { class Widget; } 解析</h2><p>class Widget 里面有个声明 Ui::Widget *ui，这个 ui 是使用 namespace Ui 里的 Widget 类声明的，该类只是简单的继承了 ui_widget.h 里的 Ui_Widget 类（没有添加任何成员）。现在就很清楚了，这两个看起来名字一样的 Widget 其实是两个类，一个是 namespace Ui 里的，另一个是 namespace Ui 之外的 Widget 类，namespace 声明的类其实就是个空壳，它的基类功能是将此窗口上的所有控件的声明、实例化、初始化。声明的原因就是为了使 ui 布局控制和其他的控制代码分离。</p>
<h2 id="用一段-C-代码来说明这一切："><a href="#用一段-C-代码来说明这一切：" class="headerlink" title="用一段 C++ 代码来说明这一切："></a>用一段 C++ 代码来说明这一切：</h2><p>test.h 文件内容：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_TEST_H_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_TEST_H_</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"This is a test!(no namespace)"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"This is a test!(namespace)"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/* 使用 namespace 声明 */</span>
<span class="token keyword">namespace</span> UI <span class="token punctuation">&#123;</span>
    <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>main.cpp 文件内容：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"test.h"</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    Test t<span class="token punctuation">;</span>
    UI<span class="token double-colon punctuation">::</span>Test tt<span class="token punctuation">;</span>
    
    t<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tt<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行结果：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190801230704.png"/ loading="lazy">

<p>感谢花费宝贵的时间浏览。 转载请注明出处，谢谢！</p>
<h2 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a>参考博文：</h2><p>因为有着热心网友的无私分享，</p>
<p><a href="https://blog.csdn.net/hebbely/article/details/79267348">QT namespace UI </a> </p>
<p><a href="https://www.cnblogs.com/GyForever1004/p/9043839.html">Qt 编程中 namespace Ui { class Widget; } 解析</a> </p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序一 技法</category>
        <category>学习 - 底层兼架构</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt4和Qt5的信号和槽的使用差异</title>
    <url>/posts/4b6d9382/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　<code>Qt4</code> 和 <code>Qt5</code> 的信号和槽的连接 <code>connect</code> 与断开 <code>disconnect</code> 区别</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210629231342.png" width="100%"/ loading="lazy">

<br>

<p><code>Qt5</code> 对于重载的信号，使用示例：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">connect</span><span class="token punctuation">(</span>cbLanuage<span class="token punctuation">,</span> <span class="token class-name">QOverload</span><span class="token operator">&lt;</span><span class="token keyword">const</span> QString<span class="token operator">&amp;</span><span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>QComboBox<span class="token double-colon punctuation">::</span>currentTextChanged<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Preference<span class="token double-colon punctuation">::</span>onLanuageChange<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">connect</span><span class="token punctuation">(</span>cbLanuage<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span>QComboBox<span class="token double-colon punctuation">::</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>QComboBox<span class="token double-colon punctuation">::</span>currentTextChanged<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Preference<span class="token double-colon punctuation">::</span>onLanuageChange<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于   <a href="https://xmuli.tech/">“偕臧的小站”</a>，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="信号和槽的-connect"><a href="#信号和槽的-connect" class="headerlink" title="信号和槽的 connect"></a>信号和槽的 connect</h2><h3 id="Qt4-方式-宏"><a href="#Qt4-方式-宏" class="headerlink" title="Qt4 方式: 宏"></a>Qt4 方式: 宏</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//Qt4: 宏</span>
<span class="token comment">/*式1*/</span>  <span class="token keyword">static</span> QMetaObject<span class="token double-colon punctuation">::</span>Connection <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>signal<span class="token punctuation">,</span> <span class="token keyword">const</span> QObject <span class="token operator">*</span>receiver<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>method<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>ConnectionType type <span class="token operator">=</span> Qt<span class="token double-colon punctuation">::</span>AutoConnection<span class="token punctuation">)</span>
<span class="token comment">/*式2*/</span>         QMetaObject<span class="token double-colon punctuation">::</span>Connection <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>signal<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>method<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>ConnectionType type <span class="token operator">=</span> Qt<span class="token double-colon punctuation">::</span>AutoConnection<span class="token punctuation">)</span> <span class="token keyword">const</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="Qt5-方式-函数指针"><a href="#Qt5-方式-函数指针" class="headerlink" title="Qt5 方式: 函数指针"></a>Qt5 方式: 函数指针</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Qt5: 函数指针</span>
<span class="token comment">/*式3*/</span>  <span class="token keyword">static</span> QMetaObject<span class="token double-colon punctuation">::</span>Connection <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span>sender<span class="token punctuation">,</span> PointerToMemberFunction signal<span class="token punctuation">,</span> <span class="token keyword">const</span> QObject <span class="token operator">*</span>receiver<span class="token punctuation">,</span> PointerToMemberFunction method<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>ConnectionType type <span class="token operator">=</span> Qt<span class="token double-colon punctuation">::</span>AutoConnection<span class="token punctuation">)</span>
<span class="token comment">/*式4*/</span>  <span class="token keyword">static</span> QMetaObject<span class="token double-colon punctuation">::</span>Connection <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span>sender<span class="token punctuation">,</span> PointerToMemberFunction signal<span class="token punctuation">,</span> Functor functor<span class="token punctuation">)</span>   
<span class="token comment">/*式5*/</span>  <span class="token keyword">static</span> QMetaObject <span class="token double-colon punctuation">::</span> Connection <span class="token class-name">QObject</span> <span class="token double-colon punctuation">::</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span> sender， <span class="token keyword">const</span> QMetaMethod＆signal，<span class="token keyword">const</span> QObject <span class="token operator">*</span> receiver， <span class="token keyword">const</span> QMetaMethod＆ method，Qt <span class="token double-colon punctuation">::</span> ConnectionType type <span class="token operator">=</span> Qt <span class="token double-colon punctuation">::</span> AutoConnection）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="connect-第五个参数"><a href="#connect-第五个参数" class="headerlink" title="connect 第五个参数"></a>connect 第五个参数</h3><p>type：用于指明信号和槽的关联方式，它决定了信号是立即传送到一个槽还是在稍后时间排队等待传送。关联方式使用枚举 Qt::ConnectionType 进行描述，下表为其取值及意义</p>
<table>
<thead>
<tr>
<th>枚举</th>
<th>值</th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Qt::AutoConnection</td>
<td>0</td>
<td><strong>（自动关联，默认值）。</strong>若接收者驻留在发射信号的线程中(即信号和槽在同一线程中)，则使用 Qt::DirectConnection，否则，使用 Qt::QueuedConnection。当信号发射时确定使用哪种关联类型。</td>
</tr>
<tr>
<td>Qt::DirectConnection</td>
<td>1</td>
<td>直接关联。当信号发射后，立即调用槽。在槽执行完之后，才会执行发射信号之后的代码(即 emit 关键字之后的代码)。该槽在信号线程中执行。</td>
</tr>
<tr>
<td>Qt::QueuedConnection</td>
<td>2</td>
<td>队列关联。<strong>当控制权返回到接收者线程的事件循环后，槽才会被调用</strong> ，也就是说 emit 关键字后面的代码将立即执行，槽将在稍后执行，该槽在接收者的线程中执行。</td>
</tr>
<tr>
<td>Qt::BlockingQueuedConnection</td>
<td>3</td>
<td>阻塞队列关联。和 Qt::QueuedConnection 一样，只是信号线程会一直阻塞，直到槽返回。如果接收者驻留在信号线程中，则不能使用此连接，否则应用程序将会死锁。</td>
</tr>
<tr>
<td>Qt::UniqueConnection</td>
<td>0x80</td>
<td>唯一关联。这是一个标志，可使用按位或与上述任何连接类型组合。当设置 Qt::UniqueConnection 时，则只有在不重复的情况下才会进行连接，如果已经存在重复连接(即，相同的信号指同一对象上的完全相同的槽)，则连接将失败，此时将返回无效的 QMetaObject::Connection</td>
</tr>
</tbody></table>
<br>

<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 式1</span>
A ma<span class="token punctuation">;</span> B mb<span class="token punctuation">;</span> 
<span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">connect</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>ma<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>mb<span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 式2</span>
A ma<span class="token punctuation">;</span> B mb<span class="token punctuation">;</span> 
mb<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ma<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 式3</span>
A ma<span class="token punctuation">;</span> B mb<span class="token punctuation">;</span> 
<span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ma<span class="token punctuation">,</span> <span class="token operator">&amp;</span>A<span class="token double-colon punctuation">::</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mb<span class="token punctuation">,</span> <span class="token operator">&amp;</span>B<span class="token double-colon punctuation">::</span>x <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 式4</span>
A ma<span class="token punctuation">;</span> 
<span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ma<span class="token punctuation">,</span> <span class="token operator">&amp;</span>A<span class="token double-colon punctuation">::</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>B<span class="token double-colon punctuation">::</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// void x(int i)是类 B 中定义的静态槽</span>

<span class="token comment">// 式5</span>
A ma<span class="token punctuation">;</span> B mb<span class="token punctuation">;</span>
<span class="token keyword">int</span> indexSig <span class="token operator">=</span> ma<span class="token punctuation">.</span><span class="token function">metaObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">indexOfSignal</span><span class="token punctuation">(</span><span class="token string">"clicked(bool)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> indexSlot <span class="token operator">=</span> mb<span class="token punctuation">.</span><span class="token function">metaObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">indexOfSlot</span><span class="token punctuation">(</span><span class="token string">"close()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ma<span class="token punctuation">,</span> ma<span class="token punctuation">.</span><span class="token function">metaObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">method</span><span class="token punctuation">(</span>indexSig<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>mb<span class="token punctuation">,</span> mb<span class="token punctuation">.</span><span class="token function">metaObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">method</span><span class="token punctuation">(</span>indexSlot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p><strong>补充：</strong></p>
<ul>
<li>形式 3 的槽函数可以不使用 <code>slots</code> 关键字声明，任意的成员函数都可以是槽函数。形式 1 的槽函数必须使用 <code>slots</code> 修饰</li>
<li>形式 1 的槽函数不受 <code>private</code> 的限制，也就是说即使槽是 <code>private</code> 的，仍可通过信号调用该槽函数，而形式 3 则在使用 <code>connect</code> 时就会发生错误。</li>
</ul>
<br>

<h2 id="信号和槽的-disconnect"><a href="#信号和槽的-disconnect" class="headerlink" title="信号和槽的 disconnect"></a>信号和槽的 disconnect</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">
<span class="token comment">/*式1*/</span>  <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>signal<span class="token punctuation">,</span> <span class="token keyword">const</span> QObject <span class="token operator">*</span>receiver<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>method<span class="token punctuation">)</span>
<span class="token comment">/*式2*/</span>  <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QMetaObject<span class="token double-colon punctuation">::</span>Connection <span class="token operator">&amp;</span>connection<span class="token punctuation">)</span>
<span class="token comment">/*式3*/</span>  <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span>sender<span class="token punctuation">,</span> PointerToMemberFunction signal<span class="token punctuation">,</span> <span class="token keyword">const</span> QObject<span class="token operator">*</span>receiver<span class="token punctuation">,</span> PointerToMemberFunction method<span class="token punctuation">)</span>
<span class="token comment">/*式4*/</span>  <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">const</span> QMetaMethod <span class="token operator">&amp;</span>signal<span class="token punctuation">,</span> <span class="token keyword">const</span> QObject<span class="token operator">*</span>receiver<span class="token punctuation">,</span> <span class="token keyword">const</span> QMetaMethod <span class="token operator">&amp;</span>method<span class="token punctuation">)</span>
<span class="token comment">/*式5*/</span>         <span class="token keyword">bool</span> <span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>signal <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">,</span> <span class="token keyword">const</span> QObject <span class="token operator">*</span>receiver <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>method <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token comment">/*式6*/</span>         <span class="token keyword">bool</span> <span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span>receiver<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>method <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">)</span> <span class="token keyword">const</span>                                                       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>补充：</strong></p>
<ul>
<li><p>形式 3 的槽函数可以不使用 slots 关键字声明，任意的成员函数都可以是槽函数。形式 1 的槽函数必须使用 slots 修饰</p>
</li>
<li><p>形式 1 的槽函数不受 private 的限制，也就是说即使槽是 private 的，仍可通过信号调用该槽函数，而形式 3 则在使用 connect 时就会发生错误。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>QtCreator 中自定义项目例子置于“欢迎-实例”中</title>
    <url>/posts/60489bc/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　将自定义的代码例子，放置到 <code>Qt Creaor</code> 中的 “欢迎-示例” 中，提供大家学习。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font>　</p>
</blockquote>
<br>

<h3 id="IDE-缺少示例"><a href="#IDE-缺少示例" class="headerlink" title="IDE 缺少示例"></a>IDE 缺少示例</h3><p>​		在 <code>UOS</code> 下，命令安装的 <code>Qt Creator</code> 打开 “欢迎 - 示例” 之后，显示为空，明显 <code>Qt</code> 自带的例子没了。解决方案如下。(<strong>💻：</strong>  <code>uos20 amd64</code> 📎 <code>Qt 5.11.3</code> 📎 <code>Qt Creator 4.8.2</code> )</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qtbase5-examples qtbase5-doc-html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><strong>qtbase5-examples：</strong> 是 <code>Qt</code> 官方自带的源码例子，默认安装在 <code>/usr/lib/x86_64-linux-gnu/qt5/examples</code> 下。</li>
<li><strong>qtbase5-doc-html：</strong> 是在 <code>IDE</code> 中的 “欢迎 - 示例” 中，显示预览的小网页窗口，默认是安装在 <code>/usr/share/qt5/doc</code> 下。</li>
</ul>
<br>

<h3 id="自定义源码安装示例"><a href="#自定义源码安装示例" class="headerlink" title="自定义源码安装示例"></a>自定义源码安装示例</h3><p>​		目标是希望将 DTK 一些自带的例子，能够和官方例子一样，直接在 IDE 中打开和预览，进行编译和学习。帮助新手降低入门门槛。</p>
<p>​		将自己的源码 <a href="https://github.com/xmuli/QtExamples/tree/master/QtMyStyleEx/QtExample01/QtStyleEx">QtStyleEx</a> 下载本地，重命名为 qtmystyle，目录结构如下：</p>
<pre class="line-numbers language-none"><code class="language-none">└── qtmystyle
    ├── main.cpp
    ├── qtmystyle.pro
    ├── widget.cpp
    └── widget.h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>将 qtmystyle 文件夹拷贝到 <code>/usr/lib/x86_64-linux-gnu/qt5/examples/widgets/desktop</code> 下，修改其目录下的 <code>desktop.pro</code> 文件，将 <code>qtmystyle</code> 加入进去。</p>
<p>再修改 <code>/usr/share/qt5/doc/qtwidgets/examples-manifest.xml</code> 文件，找到如下 Screenshot 的一段</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210429140408.png" width="100%"/ loading="lazy">

<p>然后仿写一段放到起下面，重启 Qt Creator，再次打开，即可看到自定义的项目例子。效果图如下：</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210312_150922.png" width="90%"/ loading="lazy">

<br>

<h3 id="系列地址："><a href="#系列地址：" class="headerlink" title="系列地址："></a>系列地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a></p>
<p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 QT &#x2F; DTK 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt5 QTreeWidget使用 创建具有多级联动和复选框的树形控件</title>
    <url>/posts/b298028d/</url>
    <content><![CDATA[<p>​	<strong>简述：</strong>  <strong>通过使用树形控件<code>QTreeWidget</code>创建具有联动功能的和复选框树形控件，实现勾选一个（选中），其父节点也会改变相应的状态（</strong>且父亲节点会迭代修改状态），弥补参考文章的不足之处，创建工作中更加有效且实用的控件。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p><strong>编程环境：</strong>  win10 x64 专业版</p>
<p><strong>编程软件：</strong>  visual studio 2015， Qt 5.9.8</p>
<h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​		通过使用树形控件<code>QTreeWidget</code>创建具有联动功能和复选框的树形控件，实现勾选一个（选中），其父节点也会改变相应的状态（<strong>且父亲节点会迭代修改状态</strong>），弥补参考文章的不足之处，创建工作中更加有效且实用的控件。在Qt中的树形控件称为QTreeWidget，而控件里的树形节点称为<code>QTreeWidgetItem</code>。</p>
<h2 id="功能实现："><a href="#功能实现：" class="headerlink" title="功能实现："></a>功能实现：</h2><ul>
<li>带有复选框的树形控件</li>
<li>多级联动更新状态（迭代）</li>
<li>文末附带添加右键菜单功能（已经实现，此处就只贴出参考文章）</li>
<li>弥补所参考文章，只能够实现二级（大于二级就会无关联）的缺陷</li>
</ul>
<h2 id="思路架构："><a href="#思路架构：" class="headerlink" title="思路架构："></a>思路架构：</h2><ol>
<li>在ui界面，拖曳控件<code>QTreeWidget</code>控件，命名</li>
<li>初始化，添加多个（爷、父亲、儿子、 孙子等多级）节点</li>
<li>动态节点的时刻迭代更新状态</li>
</ol>
<h2 id="运行演示："><a href="#运行演示：" class="headerlink" title="运行演示："></a>运行演示：</h2><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710150847.gif" loading="lazy"></p>
<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><font color=#FE7207  size=4 face="幼圆">QDlgTreeWidget.h</font></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QWidget></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;QTreeWidgetItem></span></span>
namespace Ui <span class="token punctuation">&#123;</span> class QDlgTreeWidget<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

class QDlgTreeWidget <span class="token operator">:</span> public QWidget
<span class="token punctuation">&#123;</span>
	Q_OBJECT

public<span class="token operator">:</span>
	<span class="token function">QDlgTreeWidget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">~</span><span class="token function">QDlgTreeWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


public<span class="token operator">:</span> <span class="token comment">//申明初始化函数</span>
	<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">void</span> <span class="token function">updateParentItem</span><span class="token punctuation">(</span>QTreeWidgetItem<span class="token operator">*</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>

public slots<span class="token operator">:</span>   <span class="token comment">//申明信号与槽,当树形控件的子选项被改变时执行</span>
	<span class="token keyword">void</span> <span class="token function">onTreeItemChanged</span><span class="token punctuation">(</span>QTreeWidgetItem<span class="token operator">*</span> item<span class="token punctuation">,</span> <span class="token keyword">int</span> column<span class="token punctuation">)</span><span class="token punctuation">;</span>


private<span class="token operator">:</span>
	Ui<span class="token operator">::</span>QDlgTreeWidget <span class="token operator">*</span>ui<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><font color=#FE7207  size=4 face="幼圆">QDlgTreeWidget.cpp</font></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"QDlgTreeWidget.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_QDlgTreeWidget.h"</span></span>

QDlgTreeWidget<span class="token operator">::</span><span class="token function">QDlgTreeWidget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span>
	<span class="token operator">:</span> <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	ui <span class="token operator">=</span> new Ui<span class="token operator">::</span><span class="token function">QDlgTreeWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>treeWidget<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">itemChanged</span><span class="token punctuation">(</span>QTreeWidgetItem<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> this<span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onTreeItemChanged</span><span class="token punctuation">(</span>QTreeWidgetItem<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

QDlgTreeWidget<span class="token operator">::</span><span class="token operator">~</span><span class="token function">QDlgTreeWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	delete ui<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> QDlgTreeWidget<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	ui<span class="token operator">-></span>treeWidget<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化树形控件</span>
	ui<span class="token operator">-></span>treeWidget<span class="token operator">-></span><span class="token function">setHeaderHidden</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//隐藏表头</span>


	<span class="token comment">//定义第一个树形组 爷爷项</span>
	QTreeWidgetItem<span class="token operator">*</span> group1 <span class="token operator">=</span> new <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>treeWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>
	group1<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">QStringLiteral</span><span class="token punctuation">(</span><span class="token string">"文件夹"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//树形控件显示的文本信息</span>
	group1<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEditable<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//设置树形控件子项的属性</span>
	group1<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始状态没有被选中</span>
											 <span class="token comment">//第一组子项</span>
	QTreeWidgetItem<span class="token operator">*</span> subItem11 <span class="token operator">=</span> new <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>group1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	subItem11<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEditable<span class="token punctuation">)</span><span class="token punctuation">;</span>
	subItem11<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"subItem11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//设置子项显示的文本</span>
	subItem11<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置子选项的显示格式和状态</span>

	QTreeWidgetItem<span class="token operator">*</span> subItem12 <span class="token operator">=</span> new <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>group1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	subItem12<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEditable<span class="token punctuation">)</span><span class="token punctuation">;</span>
	subItem12<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"subItem12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	subItem12<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>

	QTreeWidgetItem<span class="token operator">*</span> subItem13 <span class="token operator">=</span> new <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>group1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	subItem13<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEditable<span class="token punctuation">)</span><span class="token punctuation">;</span>
	subItem13<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"subItem13"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	subItem13<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token comment">//父亲项</span>
	QTreeWidgetItem<span class="token operator">*</span> group2 <span class="token operator">=</span> new <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>subItem13<span class="token punctuation">)</span><span class="token punctuation">;</span>
	group2<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"group2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	group2<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEditable<span class="token punctuation">)</span><span class="token punctuation">;</span>
	group2<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>

	QTreeWidgetItem<span class="token operator">*</span> group3 <span class="token operator">=</span> new <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>subItem13<span class="token punctuation">)</span><span class="token punctuation">;</span>
	group3<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"group3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	group3<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEditable<span class="token punctuation">)</span><span class="token punctuation">;</span>
	group3<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//孙子项</span>
	QTreeWidgetItem<span class="token operator">*</span> subItem21 <span class="token operator">=</span> new <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>group2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//指定子项属于哪一个父项</span>
	subItem21<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEditable<span class="token punctuation">)</span><span class="token punctuation">;</span>
	subItem21<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"subItem21"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	subItem21<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>

	QTreeWidgetItem<span class="token operator">*</span> subItem22 <span class="token operator">=</span> new <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>group2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	subItem22<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEditable<span class="token punctuation">)</span><span class="token punctuation">;</span>
	subItem22<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"subItem22"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	subItem22<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>

	QTreeWidgetItem<span class="token operator">*</span> subItem23 <span class="token operator">=</span> new <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>group2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	subItem23<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEditable<span class="token punctuation">)</span><span class="token punctuation">;</span>
	subItem23<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"subItem23"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	subItem23<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>

	ui<span class="token operator">-></span>treeWidget<span class="token operator">-></span><span class="token function">expandAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//展开树</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> QDlgTreeWidget<span class="token operator">::</span><span class="token function">updateParentItem</span><span class="token punctuation">(</span>QTreeWidgetItem<span class="token operator">*</span> item<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	QTreeWidgetItem <span class="token operator">*</span>parent <span class="token operator">=</span> item<span class="token operator">-></span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> nSelectedCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> childCount <span class="token operator">=</span> parent<span class="token operator">-></span><span class="token function">childCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//判断有多少个子项被选中</span>
	<span class="token punctuation">&#123;</span>
		QTreeWidgetItem<span class="token operator">*</span> childItem <span class="token operator">=</span> parent<span class="token operator">-></span><span class="token function">child</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>childItem<span class="token operator">-></span><span class="token function">checkState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> Qt<span class="token operator">::</span>Checked <span class="token operator">||</span> childItem<span class="token operator">-></span><span class="token function">checkState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> Qt<span class="token operator">::</span>PartiallyChecked<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			nSelectedCount<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>nSelectedCount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">//如果没有子项被选中，父项设置为未选中状态</span>
		parent<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nSelectedCount <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nSelectedCount <span class="token operator">&lt;</span> childCount<span class="token punctuation">)</span>    <span class="token comment">//如果有部分子项被选中，父项设置为部分选中状态，即用灰色显示</span>
		parent<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>PartiallyChecked<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nSelectedCount <span class="token operator">==</span> childCount<span class="token punctuation">)</span>    <span class="token comment">//如果子项全部被选中，父项则设置为选中状态</span>
		parent<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Checked<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">updateParentItem</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> QDlgTreeWidget<span class="token operator">::</span><span class="token function">onTreeItemChanged</span><span class="token punctuation">(</span>QTreeWidgetItem<span class="token operator">*</span> item<span class="token punctuation">,</span> <span class="token keyword">int</span> column<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> count <span class="token operator">=</span> item<span class="token operator">-></span><span class="token function">childCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回子项的个数</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>Qt<span class="token operator">::</span>Checked <span class="token operator">==</span> item<span class="token operator">-></span><span class="token function">checkState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
				item<span class="token operator">-></span><span class="token function">child</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Checked<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span>
			<span class="token function">updateParentItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Qt<span class="token operator">::</span>Unchecked <span class="token operator">==</span> item<span class="token operator">-></span><span class="token function">checkState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
				item<span class="token operator">-></span><span class="token function">child</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span>
			<span class="token function">updateParentItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="细节方面："><a href="#细节方面：" class="headerlink" title="细节方面："></a>细节方面：</h2><p>其中主要是参考下面好儿郎的这一篇博客，在<a href="https://blog.csdn.net/rl529014/article/details/51355968">Qt: 创建具有复选框的树形控件</a> 的一文中，其中主要修改如下：</p>
<p><code>void Widget::updateParentItem(QTreeWidgetItem\* item)</code> 函数的最后一行添加如下一句话，<code>updateParentItem(parent)</code>，是在在函数里面添加一个迭代函数，（向自己的父节点进行遍历）；</p>
<p>且在判断子项中个数被选中，将<code>if (childItem-&gt;checkState(0) == Qt::Checked)</code>修改为<code>if (childItem-&gt;checkState(0) == Qt::Checked || childItem-&gt;checkState(0) == Qt::PartiallyChecked)</code>，半选中也算在父节点也算选中</p>
<h2 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a><strong>参考博文：</strong></h2><p><a href="https://blog.csdn.net/rl529014/article/details/51355968">Qt: 创建具有复选框的树形控件</a> （推荐）</p>
<p><a href="https://blog.csdn.net/fengyutongtt/article/details/52372164">建立QTreeWidget下QTreeWidgetItem的右键菜单</a> （推荐）</p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序一 技法</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>QtCreator 安装 SDK，在 MSVC 编译模式下使用 CDB 调试器</title>
    <url>/posts/5399fcd5/</url>
    <content><![CDATA[<p><strong>简介：</strong>  <code>Qt Creator</code> 安装 <code>Windows Software Development Kit</code>(<code>SDK</code>）调试器【即<code>CDB</code>调试器】；使用<code>MSVC</code>编译项目，进行调试。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>​		 <code>Qt Creator</code> 安装 <code>Windows Software Development Kit</code>(<code>SDK</code>）调试器。（使用<code>MSVC</code>编译项目，进行调试）。</p>
<br>

<p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  操作系统版本：<code>17134.285</code> </p>
<p><strong>编程软件：</strong>  <code>visual studio 2015</code>， <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p>
<br>

<h2 id="为什么安装CDB编调试器？"><a href="#为什么安装CDB编调试器？" class="headerlink" title="为什么安装CDB编调试器？"></a>为什么安装CDB编调试器？</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190807194229.png"/ loading="lazy">

<p>（1）Kits页面显示QtCreator可用的编译工具，在图中可以看到有3个编译工具可用。</p>
<p>（2）Qt Versions页面显示安装的Qt版本，有Qt 5.9.1MinGW 32bit、Qt 5.9.1MSVC201532bit<br>和Qt 5.9.1MSVC201564bit3个可用的版本。</p>
<p>（3）Compliers页面显示系统里可用的C和C++编译器，由于安装了MinGW和Visual Studio<br>2015，Qt Creator会自动检测出这些编译器。</p>
<p>（4）<strong>Debuggers页面显示Qt Creator自动检测到的调试器，有GNU gdb for MinGW调试器</strong><br><strong>和Windows的CDB调试器。</strong></p>
<p><strong>注意：</strong> <font color=#FE7207  size=4 face="幼圆">如果只是在计算机上安装了Visual Studio2015，显示的界面上MSVC2015的两个编译器的图标<br>会变为带有感叹号的一个黄色图标。Debuggers页面没有Windows的CDB调试器，可以用MSVC编译器对<br>Qt Creator编写的程序进行编译，但是不能调试，<strong>这是因为缺少了Windows Software Development Kit(SDK）。</strong><br><strong>这个SDK不会随Visual Studio一同安装，</strong>需要从Microsoft网站上下载。可以下载Windows Software<br>Development Kit(SDK)for Windows8.1,安装后重启计算机即可。</font></p>
<h2 id="安装CDB调试器步骤"><a href="#安装CDB调试器步骤" class="headerlink" title="安装CDB调试器步骤"></a>安装CDB调试器步骤</h2><ul>
<li>先关闭Qt Creator<br>  <strong>msvc编译器使用windbg下的cdb调试器 所以需要安装windbg</strong></li>
</ul>
<p>官网下载链接：<a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools">https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools</a></p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190807192915.png"/ loading="lazy">

<p>自动跳转到该页面</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190807193021.png"/ loading="lazy">



<ul>
<li>下载成功</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190807193142.png"/ loading="lazy">



<ul>
<li>右键管理员运行</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190807193304.png"/ loading="lazy">

<ul>
<li>选择“NO“</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190807193415.png"/ loading="lazy">



<ul>
<li><strong>只用安装调试工具即可</strong></li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190807193615.png"/ loading="lazy">



<ul>
<li>等待安装成功</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190807193738.png"/ loading="lazy">



<ul>
<li>重新打开Qt Creator,在如图所示的位置进行修改</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190807194038.png"/ loading="lazy">



<ul>
<li>配置成功标志，参见本文第一张图</li>
</ul>
]]></content>
      <categories>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>QtCreator此IDE的界面基本组成和入门使用讲解(Win,Linux,MacOS搭配不同版本 Qt)</title>
    <url>/posts/a48bc9a4/</url>
    <content><![CDATA[<p><strong>简  述：</strong> 讲述 <code>Qt Creator</code> 此<strong>IDE</strong>的界面基本组成，和入门使用讲解；这里主要是以 <code>Windows</code> 版本讲述为主，但是 <code>Linux</code> 和 <code>MacOS</code> 版本的会贴出来，这里需要注意的是win版本基本和 Linux版本界面完全一样，而 MacOS 版本的界面和细节部分，则是有着少许的不一样，会标记出来；</p>
<p>感谢自由软件，感谢开源项目，感谢前辈大家们的分享，感谢 Qt 社区的人们，感谢互联网精神，感谢商业利益的推动，感谢时间的给予发展；是 一部人们让很多很有了使得学习的门槛降低，和系统的学习某一项技能（兴趣爱好）变得容易，使得梦想可能更容易实现，很多事情变得未来可期。</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200112_013425.png"/ loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="Qt-Creator的界面组成："><a href="#Qt-Creator的界面组成：" class="headerlink" title="Qt Creator的界面组成："></a>Qt Creator的界面组成：</h2><p><code>Qt Creator</code>这个轻巧的跨平台的 IDE 集成环境，其界面组成主要是以下的几部分给组成：</p>
<ul>
<li><strong>Qt Creator：</strong> 主要是用来编写代码工程的界面，也是使用时间最多的地方</li>
<li><strong>Desiger 设计师:</strong>  用来拖曳窗口；能够短时间生成一个界面出来，开发桌面程序的界面，使用的话会比较便捷</li>
<li><strong>Assistant 帮助文档：</strong> 可以看做一个离线的帮助手册的文档，遇到不明白的函数或控件时候，会经常查看的一个工具</li>
<li><strong>Linguist 语言家：</strong>  当程序要写完了，制作成多语言国际化的时候，使用它来“本地化本国语言”</li>
<li><strong>Qt 5.9.8 for Desktop：</strong> 将项目所需要的.dll系统依赖库全部打包到文件夹，便于只一个文件夹就可以，移植到其它电脑运行</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20200112004632.png"/ loading="lazy">

<br>

<h2 id="Windows-版本："><a href="#Windows-版本：" class="headerlink" title="Windows 版本："></a>Windows 版本：</h2><h3 id="欢迎界面："><a href="#欢迎界面：" class="headerlink" title="欢迎界面："></a>欢迎界面：</h3><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20200112005004.png"/ loading="lazy">



<h3 id="编辑界面："><a href="#编辑界面：" class="headerlink" title="编辑界面："></a>编辑界面：</h3><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20200112005417.png"/ loading="lazy">



<h3 id="设计界面："><a href="#设计界面：" class="headerlink" title="设计界面："></a>设计界面：</h3><p>使用 UI 的设计师，拖曳界面时候生成一个简单的界面，及其方便；</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20200112010033.png"/ loading="lazy">



<h3 id="项目构建界面："><a href="#项目构建界面：" class="headerlink" title="项目构建界面："></a>项目构建界面：</h3><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20200112010213.png"/ loading="lazy">



<h3 id="帮助界面："><a href="#帮助界面：" class="headerlink" title="帮助界面："></a>帮助界面：</h3><p>或者在光标移动到函数或者类名的单词中间，然后按下 F1 也会出现该结果的小的弹窗</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20200112010446.png"/ loading="lazy">



<h3 id="Qt助手："><a href="#Qt助手：" class="headerlink" title="Qt助手："></a>Qt助手：</h3><p>Qt 助手 &#x3D;&#x3D; Qt 离线文档 &#x3D;&#x3D; 上图在 QtCreator 中的小窗口的独立窗口</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20200112010625.png"/ loading="lazy">

<br>

<h2 id="Linux版本："><a href="#Linux版本：" class="headerlink" title="Linux版本："></a>Linux版本：</h2><p>所有界面，都基本和 Windows一毛一样。</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_20200114224503.png"/ loading="lazy">

<br>

<h2 id="MacOS-版本："><a href="#MacOS-版本：" class="headerlink" title="MacOS 版本："></a>MacOS 版本：</h2><h3 id="工具栏在顶部（激活状态下）"><a href="#工具栏在顶部（激活状态下）" class="headerlink" title="工具栏在顶部（激活状态下）:"></a>工具栏在顶部（激活状态下）:</h3><p>其主要界面和 Win一样，但是其工具栏在最顶部，只有当前窗口处于激活状态，其工具栏才会显示出来。</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20200112011018.png"/ loading="lazy">



<h3 id="如何运行多个-QtCrator"><a href="#如何运行多个-QtCrator" class="headerlink" title="如何运行多个 QtCrator?"></a>如何运行多个 QtCrator?</h3><p>另外一个就是，这个 QtCreator 刚安装完成，既不会又快捷方式在桌面，也不会有任何图标在启动台里面。</p>
<p>需要自己手动查找它出来，然后将其固定在 Dock（桌面最下方的任务栏）上面</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200112_011511.png"/ loading="lazy">



<h3 id="如何显示快捷方式？"><a href="#如何显示快捷方式？" class="headerlink" title="如何显示快捷方式？"></a>如何显示快捷方式？</h3><blockquote>
<p>其中我的路径如下：</p>
<p><code> /Users/muli/Qt5.12.6/Qt Creator.app</code> </p>
<p>Qt Creator.app：（复制几份，就可以打开几个 QT 的 IDE）</p>
<p>下面的都在此路径下：<br><code>/Users/muli/Qt5.12.6/5.12.6/clang_64/bin</code></p>
<p>Assistant.app<br>Designer.app<br>Linguist.app</p>
</blockquote>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200112_011926.png"/ loading="lazy">

<br>

<h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><h3 id="编程环境：-MacOS-10-14-6-18G103"><a href="#编程环境：-MacOS-10-14-6-18G103" class="headerlink" title="编程环境：  MacOS 10.14.6 (18G103)"></a><strong>编程环境：</strong>  <code>MacOS 10.14.6 (18G103)</code></h3><p><strong>编程软件：</strong> <code>Qt 5.12.6</code>， <code>Qt Creator 4.10.2</code></p>
<h3 id="编程环境：-win10-x64-专业版-1803"><a href="#编程环境：-win10-x64-专业版-1803" class="headerlink" title="编程环境：  win10 x64 专业版 1803"></a><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code></h3><p><strong>编程软件：</strong>  <code>Qt 5.9.8</code>，<code>Qt Creator 4.8.2 (Enterprise)</code></p>
<h3 id="编程环境：-uos-20-x64-专业版-Kernel：-x86-64-Linux-4-19-0-5-amd64"><a href="#编程环境：-uos-20-x64-专业版-Kernel：-x86-64-Linux-4-19-0-5-amd64" class="headerlink" title="编程环境：  uos 20 x64 专业版     Kernel：  x86_64 Linux 4.19.0-5-amd64"></a><strong>编程环境：</strong>  <code>uos 20 x64 专业版 </code>    <strong>Kernel：</strong>  <code>x86_64 Linux 4.19.0-5-amd64</code></h3><p><strong>编程软件：</strong>  <code>Qt 5.11.3</code>，<code>Qt Creator 4.8.2 (Enterprise)</code></p>
<br>

<h2 id="归纳小结："><a href="#归纳小结：" class="headerlink" title="归纳小结："></a>归纳小结：</h2><p>这里因为我会同时使用到windows，Linux，MacOS 三个系统；且使用各种不同的版本环境的 Qt 版本，如此的随心所欲（对了，就是那么巧，我的确是又三台电脑，且有分别各自安装一个系统），也大概是得益于目前的这份工作，以及公司所从事的 Linux系统的开发和开源和软件自由的；晚上在空闲之余，来写一写这些基础的文章，算是一个帮助新手们的入门。因此，无论是你是使用什么系统，使用的哪一个版本的Qt 进行开发，以及是否如何借助第三方工具，比如 VS，或 vscode + 插件的模式，来进行开发c++，都可以在我的这个系列的博客找到blog。最后，这大半夜的，写这篇文章，我是有点脚冷。天冷，脚冷，该钻进被窝了。</p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>小技巧：QtCreator用快捷键秒实现，声明在基类中重写的派生类(纯)虚函数</title>
    <url>/posts/e34e1101/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　Qt Creator 5.9+ 的一个使用技巧，使用快捷键在派生类中直接声明重写基类的（纯）虚函数，和快速🔜实现声明类的实现。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="快捷键声明重写的虚函数："><a href="#快捷键声明重写的虚函数：" class="headerlink" title="快捷键声明重写的虚函数："></a>快捷键声明重写的虚函数：</h3><ol>
<li><p>源文件顶部有 #include  QCommonStyle </p>
</li>
<li><p>该派生类 MyStyle 继承于 QCommonStyle</p>
</li>
<li><p>光标在单词 QCommonStyle 上 </p>
</li>
<li><p>按住 Command + 鼠标右键，弹出菜单栏 </p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200220_213755.jpeg" width="90%"/ loading="lazy">
</li>
<li><p>选中插入（继承于父类的）虚函数 ✅</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200220_213843.jpeg" width="90%"/ loading="lazy"></li>
</ol>
<br>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>QtCreator设置代码美化astyle之Artistic</title>
    <url>/posts/9d7c4480/</url>
    <content><![CDATA[<p><strong>简介：</strong>  在<strong>Qt Creator</strong>里面使用代码美化工具<strong>astyle</strong>：按照想要的c++风格来格式化<code>code</code>。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p>
<p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p>
<br>

<h2 id="知识讲解："><a href="#知识讲解：" class="headerlink" title="知识讲解："></a>知识讲解：</h2><p>常用的**C&#x2F;C++**代码格式优化工具有两个，一是老牌的<code>indent</code>，再一个就是<code>astyle</code>了。</p>
<p><strong>astyle 官网下载：</strong> <a href="https://sourceforge.net/projects/astyle/">https://sourceforge.net/projects/astyle</a></p>
<p>其他风格： <a href="https://zh-google-styleguide.readthedocs.io/en/latest/">Google 开源项目 c&#x2F;c++风格</a></p>
<br>

<h2 id="QtCreator设置："><a href="#QtCreator设置：" class="headerlink" title="QtCreator设置："></a>QtCreator设置：</h2><p>具体设置如图：<strong>“工具–选项–美化–Artistic Style”</strong>，</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190924222146.png"/ loading="lazy">

<br>

<h2 id="样式参考："><a href="#样式参考：" class="headerlink" title="样式参考："></a>样式参考：</h2><p>博主喜欢的样式风格：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">--style</span><span class="token operator">=</span>allman
<span class="token assign-left variable">indent</span><span class="token operator">=</span>spaces<span class="token operator">=</span><span class="token number">4</span>	      <span class="token comment"># 缩进采用4个空格</span>
indent-switches           <span class="token comment"># -S  设置 switch 整体缩进</span>
indent-cases 	      <span class="token comment"># -K  设置 cases 整体缩进</span>
indent-namespaces         <span class="token comment"># -N  设置 namespace 整体缩进</span>
indent-preproc-block      <span class="token comment"># -xW 设置预处理模块缩进</span>
indent-preproc-define     <span class="token comment"># -w  设置宏定义模块缩进	</span>
pad-oper                  <span class="token comment"># -p  操作符前后填充空格</span>
<span class="token comment">#delete-empty-lines       # -xe 删除多余空行</span>
<span class="token comment">#add-braces               # -j  单行语句加上大括号</span>
<span class="token comment">#align-pointer=name       # *、&amp;这类字符靠近变量名字</span>
align-pointer<span class="token operator">=</span>type        <span class="token comment"># *、&amp;这类字符靠近类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>deepin（Linux）开源的一种的风格：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">indent</span><span class="token operator">=</span>spaces<span class="token operator">=</span><span class="token number">4</span>
<span class="token assign-left variable">style</span><span class="token operator">=</span>kr
indent-labels
pad-oper
unpad-paren
pad-header
keep-one-line-statements
convert-tabs
indent-preprocessor
align-pointer<span class="token operator">=</span>name
align-reference<span class="token operator">=</span>name
keep-one-line-blocks
keep-one-line-statements
attach-namespaces
max-instatement-indent<span class="token operator">=</span><span class="token number">120</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>好像现阶段，跟对下面的这一种更加感冒，已经使用了好几个月了，该风格，也算比较推荐；</p>
<p>或者想自己自定义，可以参考<code>google</code>的风格，如链接 <a href="https://zh-google-styleguide.readthedocs.io/en/latest/">https://zh-google-styleguide.readthedocs.io/en/latest/</a></p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190924222700.png"/ loading="lazy">

<br>

<h2 id="风格样式："><a href="#风格样式：" class="headerlink" title="风格样式："></a>风格样式：</h2><p><strong>Style-格式配置：</strong><br>最常用的就是ansi或或kr格式，实际上，kr，stroustrup和linux这三种格式是非常接近的了，试了好几个文件，只有非常微小的区别，可以忽略不计。</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190924221500.png"/ loading="lazy">

<br>

<h2 id="参数含义："><a href="#参数含义：" class="headerlink" title="参数含义："></a>参数含义：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190924221621.png"/ loading="lazy">

<br>

<h2 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h2><p>使用图下图：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190924223021.png"/ loading="lazy">



<p>参考文章：</p>
<p><a href="http://www.cppblog.com/jerryma/archive/2012/02/02/164813.html">C&#x2F;C++代码格式优化工具—-astyle</a> </p>
<p><a href="https://blog.csdn.net/qq_33154343/article/details/98512180"><code>Qt</code>资料大全和<code>Google</code>编程规范（中文版，含<code>c++</code>、<code>java</code>等）</a> </p>
<br>





]]></content>
      <categories>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>`Qt图片的绘图类`QPixmap`/`QBitmap`/`QImage`/`QPicture`区别和使用</title>
    <url>/posts/bcab0980/</url>
    <content><![CDATA[<p><strong>简介：</strong>   <code>Qt</code>图片的绘图类<code>QPixmap</code>&#x2F;<code>QBitmap</code>&#x2F;<code>QImage</code>&#x2F;<code>QPicture</code>区别和使用</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​		   <code>Qt</code>图片的绘图类<code>QPixmap</code>&#x2F;<code>QBitmap</code>&#x2F;<code>QImage</code>&#x2F;<code>QPicture</code>区别和使用</p>
<br>

<h2 id="开发平台环境："><a href="#开发平台环境：" class="headerlink" title="开发平台环境："></a>开发平台环境：</h2><p><strong>编程环境：</strong>  <code>win10 x64 专业版</code></p>
<p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p>
<br>

<h2 id="知识点讲解："><a href="#知识点讲解：" class="headerlink" title="知识点讲解："></a>知识点讲解：</h2><blockquote>
<p><code>绘图设备</code>： 绘图设备是指继承<code>QPaintDevice</code>的子类，你可以使用QPainter直接在其上面绘制图形，<code>Qt</code>一共提供了四个这样继承QPaintDevice的绘图设备类，分别是QPixmap、QBitmap、QImage和 QPicture。</p>
<p><code>QPixmap</code>：针对屏幕进行优化了，和平台相关，不能对图片进行修改</p>
<p><code>QBitmap</code>：是QPixmap的一个子类，它的色深限定为1，你可以使用 QPixmap的isQBitmap()函数来确定这    个QPixmap是不是一个QBitmap；</p>
<p><code>QImage</code>：和平台无关，可以对图片进行修改，在线程中绘图，专门为图像的像素级访问做了优化；</p>
<p><code>QPicture</code>：保存绘图的状态（二进制文件），则可以记录和重现QPainter的各条命令；</p>
</blockquote>
<h2 id="QPixmap和QBitmap"><a href="#QPixmap和QBitmap" class="headerlink" title="QPixmap和QBitmap"></a><strong>QPixmap和QBitmap</strong></h2><p>QPixmap可以接受一个字符串作为一个文件的路径来显示这个文件，比如你想在程序之中打开png、jpeg之类的文件，就可以使用 QPixmap。使用QPainter的drawPixmap()函数可以把这个文件绘制到一个QLabel、QPushButton或者其他的设备上面。QPixmap是针对屏幕进行特殊优化的，因此，它与实际的底层显示设备息息相关。注意，这里说的显示设备并不是硬件，而是操作系统提供的原生的绘图引擎。所以，在不同的操作系统平台下，QPixmap的显示可能会有所差别。</p>
<p>QPixmap提供了静态的grabWidget()和grabWindow()函数，用于将自身图像绘制到目标上。同时，在使用QPixmap时，你可以直接使用传值也不需要传指针，因为QPixmap提供了“隐式数据共享”。关于这一点，我们会在以后的章节中详细描述，这里只要知道传递QPixmap不必须使用指针就好了。</p>
<p>QBitmap继承自QPixmap，主要用于显示单色位图。是QPixmap子类，因此具有其所有特性。QBitmap的色深始终为1. 色深这个概念来自计算机图形学，是指用于表现颜色的二进制的位数。我们知道，计算机里面的数据都是使用二进制表示的。为了表示一种颜色，我们也会使用二进制。比如我们要表示8种颜色，需要用3个二进制位，这时我们就说色深是3. 因此，所谓色深为1，也就是使用1个二进制位表示颜色。1个位只有两种状态：0和1，因此它所表示的颜色就有两种，黑和白。所以说，QBitmap实际上是只有黑白两色的图像数据。</p>
<p>由于QBitmap色深小，因此只占用很少的存储空间，所以适合做光标文件和笔刷。</p>
<p>下面我们来看同一个图像文件在QPixmap和QBitmap下的不同表现：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">PaintedWidget</span><span class="token double-colon punctuation">::</span><span class="token function">paintEvent</span><span class="token punctuation">(</span>QPaintEvent <span class="token operator">*</span>event<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	QPainter <span class="token function">painter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	QPixmap <span class="token function">pixmap</span><span class="token punctuation">(</span><span class="token string">"butterfly.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//图片背景透明</span>
	QBitmap <span class="token function">bitmap</span><span class="token punctuation">(</span><span class="token string">"butterfly.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//图片背景透明</span>
	painter<span class="token punctuation">.</span><span class="token function">drawPixmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> pixmap<span class="token punctuation">)</span><span class="token punctuation">;</span>
	painter<span class="token punctuation">.</span><span class="token function">drawPixmap</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>
	QPixmap <span class="token function">pixmap2</span><span class="token punctuation">(</span><span class="token string">"butterfly2.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//图片背景白色</span>
	QBitmap <span class="token function">bitmap2</span><span class="token punctuation">(</span><span class="token string">"butterfly2.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//图片背景白色</span>
	painter<span class="token punctuation">.</span><span class="token function">drawPixmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> pixmap2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	painter<span class="token punctuation">.</span><span class="token function">drawPixmap</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> bitmap2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>先来看一下运行结果：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190727145004.png"/ loading="lazy">



<p>这里我们给出了两张png图片。<code>butterfly.png</code>是具有透明色的背景，而<code>butterfly2.png</code>是没有透明色的纯白背景，。我们分别使用QPixmap和QBitmap来加载它们。注意看它们的区别：白色的背景在Qbitmap中消失了，<strong>而透明色在QBitmap中转换成了黑色；其他颜色则是使用点的疏密程度来体现的。</strong> </p>
<h2 id="QPixmap："><a href="#QPixmap：" class="headerlink" title="QPixmap："></a>QPixmap：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//QPixmap</span>
QPixmap <span class="token function">pixmap</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment">//绘画设备 400*400</span>
pixmap<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>white<span class="token punctuation">)</span><span class="token punctuation">;</span>                                   <span class="token comment">//填充背景色（默认为黑色）</span>
QPainter <span class="token function">p1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pixmap<span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token comment">//设置画家</span>
p1<span class="token punctuation">.</span><span class="token function">drawPixmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token function">QPixmap</span><span class="token punctuation">(</span><span class="token string">"../plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//画家在绘图设备绘画</span>
pixmap<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"../QPixmap_plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">//绘画保存(默认为build-QtExample-Desktop_Qt_5_9_8_MinGW_32bit-Debug里面)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="QImage："><a href="#QImage：" class="headerlink" title="QImage："></a>QImage：</h2><p>QPixmap使用底层平台的绘制系统进行绘制，无法提供像素级别的操作，而QImage则是使用独立于硬件的绘制系统，实际上是自己绘制自己，因此提供了像素级别的操作，并且能够在不同系统之上提供一个一致的显示形式。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//QImage</span>
QImage <span class="token function">image</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> QImage<span class="token double-colon punctuation">::</span>Format_ARGB32<span class="token punctuation">)</span><span class="token punctuation">;</span>
QPainter <span class="token function">p2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>
p2<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">QImage</span><span class="token punctuation">(</span><span class="token string">"../plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
image<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"../QImage_plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="QPicture："><a href="#QPicture：" class="headerlink" title="QPicture："></a>QPicture：</h2><p>QPicture是一个可以记录和重现QPainter命令的绘图设备。QPicture将QPainter的命令序列化到一个IO设备，保存为一个平台独立的文件格式。这种格式有时候会是“元文件(meta- files)”。Qt的这种格式是二进制的，不同于某些本地的元文件，Qt的pictures文件没有内容上的限制，只要是能够被QPainter绘制的元素，不论是字体还是pixmap，或者是变换，都可以保存进一个picture中。</p>
<p>QPicture是平台无关的，因此它可以使用在多种设备之上，比如svg、pdf、ps、打印机或者屏幕。回忆下我们这里所说的QPaintDevice，实际上是说可以有QPainter绘制的对象。QPicture使用系统的分辨率，并且可以调整 QPainter来消除不同设备之间的显示差异。</p>
<p>如果我们要记录下QPainter的命令，<strong>首先要使用QPainter::begin()函数在QPicture上进行绘图，将QPicture实例作为参数传递进去，以便告诉系统开始记录，记录完毕后使用QPainter::end()命令终止，</strong>最后使用save()保存，代码示例如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//QPicture</span>
QPicture picture<span class="token punctuation">;</span>
QPainter p3<span class="token punctuation">;</span>
p3<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>picture<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p3<span class="token punctuation">.</span><span class="token function">drawPixmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token function">QPixmap</span><span class="token punctuation">(</span><span class="token string">"../plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//任意绘画</span>
p3<span class="token punctuation">.</span><span class="token function">drawEllipse</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p3<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
picture<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"../QPicture_plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>效果图：</strong></p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190727143406.png"/ loading="lazy">

<p>因为为二进制文件，所以图片无法显示，但是文件是保存完好的正确的</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190727143654.png"/ loading="lazy">

<p>但是可以通过其来<code>load()</code>直接读取该二进制文件：</p>
<h2 id="加载QPicture："><a href="#加载QPicture：" class="headerlink" title="加载QPicture："></a>加载QPicture：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QPicture picture<span class="token punctuation">;</span>
picture<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"../QPicture_plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

QPainter <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span><span class="token function">drawPicture</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> picture<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="QImage与pixmap的区别"><a href="#QImage与pixmap的区别" class="headerlink" title="QImage与pixmap的区别"></a>QImage与pixmap的区别</h2><p>1、QPixmap主要是用于绘图，针对屏幕显示而最佳化设计，QImage主要是为图像I&#x2F;O、图片访问和像素修改而设计的</p>
<p>2、QPixmap依赖于所在的平台的绘图引擎，故例如反锯齿等一些效果在不同的平台上可能会有不同的显示效果，QImage使用Qt自身的绘图引擎，可在不同平台上具有相同的显示效果</p>
<p>3、目前的Qt会把QPixmap都存储在graphics memory中，QImage是存储在客户端的，是独立于硬件的。在 X11, Mac 以及 Symbian平台上，QPixmap 是存储在服务器端，而QImage则是存储在客户端，在Windows平台上，QPixmap和QImage都是存储在客户端，并不使用任何的GDI资源。</p>
<p>4、由于QImage是独立于硬件的，也是一种QPaintDevice，因此我们可以在另一个线程中对其进行绘制，而不需要在GUI线程中处理，使用这一方式可以很大幅度提高UI响应速度。</p>
<p>5、QImage可通过setPixpel()和pixel()等方法直接存取指定的像素。</p>
<p>当图片较大时，我们可以先通过QImage将图片加载进来，然后把图片缩放成需要的尺寸，最后转换成QPixmap 进行显示。</p>
<h2 id="QPixmap-–-gt-image："><a href="#QPixmap-–-gt-image：" class="headerlink" title="QPixmap –&gt;  image："></a>QPixmap –&gt;  image：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//QPixmap -->  image</span>
QPainter <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

QPixmap pixmap<span class="token punctuation">;</span>
pixmap<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"../QPixmap_plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
QImage image <span class="token operator">=</span> pixmap<span class="token punctuation">.</span><span class="token function">toImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="image-–-gt-QPixmap："><a href="#image-–-gt-QPixmap：" class="headerlink" title="image –&gt;  QPixmap："></a>image –&gt;  QPixmap：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//image -->  QPixmap</span>
QPainter <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

QImage image2<span class="token punctuation">;</span>
image2<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"../QImage_plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
QPixmap pixmap2<span class="token punctuation">;</span>
pixmap2 <span class="token operator">=</span> <span class="token class-name">QPixmap</span><span class="token double-colon punctuation">::</span><span class="token function">fromImage</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span><span class="token function">drawPixmap</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pixmap<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>效果图如下：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190727144015.png"/ loading="lazy">

<br>

<h2 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"QtExample.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_QtExample.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QPixmap></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QImage></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QPainter></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QPicture></span></span>

<span class="token class-name">QtExample</span><span class="token double-colon punctuation">::</span><span class="token function">QtExample</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>
    <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token double-colon punctuation">::</span>QtExample<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token comment">//QPixmap</span>
    QPixmap <span class="token function">pixmap</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment">//绘画设备 400*400</span>
    pixmap<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>white<span class="token punctuation">)</span><span class="token punctuation">;</span>                                   <span class="token comment">//填充背景色（默认为黑色）</span>
    QPainter <span class="token function">p1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pixmap<span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token comment">//设置画家</span>
    p1<span class="token punctuation">.</span><span class="token function">drawPixmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token function">QPixmap</span><span class="token punctuation">(</span><span class="token string">"../plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//画家在绘图设备绘画</span>
    pixmap<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"../QPixmap_plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">//绘画保存(默认为build-QtExample-Desktop_Qt_5_9_8_MinGW_32bit-Debug里面)</span>

    <span class="token comment">//QImage</span>
    QImage <span class="token function">image</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> QImage<span class="token double-colon punctuation">::</span>Format_ARGB32<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QPainter <span class="token function">p2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>
    p2<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">QImage</span><span class="token punctuation">(</span><span class="token string">"../plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    image<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"../QImage_plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//QPicture</span>
    QPicture picture<span class="token punctuation">;</span>
    QPainter p3<span class="token punctuation">;</span>
    p3<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>picture<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p3<span class="token punctuation">.</span><span class="token function">drawPixmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token function">QPixmap</span><span class="token punctuation">(</span><span class="token string">"../plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//任意绘画</span>
    p3<span class="token punctuation">.</span><span class="token function">drawEllipse</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p3<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    picture<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"../QPicture_plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token class-name">QtExample</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">QtExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">QtExample</span><span class="token double-colon punctuation">::</span><span class="token function">paintEvent</span><span class="token punctuation">(</span>QPaintEvent <span class="token operator">*</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span>
    QPicture picture<span class="token punctuation">;</span>
    picture<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"../QPicture_plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    QPainter <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token punctuation">.</span><span class="token function">drawPicture</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> picture<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    QPainter <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//QPixmap -->  image</span>
    QPixmap pixmap<span class="token punctuation">;</span>
    pixmap<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"../QPixmap_plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QImage image <span class="token operator">=</span> pixmap<span class="token punctuation">.</span><span class="token function">toImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//image -->  QPixmap</span>
    QImage image2<span class="token punctuation">;</span>
    image2<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"../QImage_plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QPixmap pixmap2<span class="token punctuation">;</span>
    pixmap2 <span class="token operator">=</span> <span class="token class-name">QPixmap</span><span class="token double-colon punctuation">::</span><span class="token function">fromImage</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token punctuation">.</span><span class="token function">drawPixmap</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pixmap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a>参考博文：</h2><p>因为有着热心网友的无私分享，故不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </p>
<p><strong>参考：</strong>  <a href="https://blog.csdn.net/qq_33266987/article/details/73187140">Qt图片绘图类QPixmap&#x2F;QImage&#x2F;QPicture</a></p>
]]></content>
      <categories>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>Qt新弹窗不响应键盘按键，难道也是无焦点？</title>
    <url>/posts/44eabb4d/</url>
    <content><![CDATA[<p><strong>简  述:</strong> 全局热键召唤的新窗口后，🖱不点击此程序的托盘图标和相关窗口（但是可以移动，开启光标跟踪），只点击键盘按键却无响应。但🖱点击过后，却可以响应⌨按键了。解决此怪异问题。</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202205072001464.jpg" width="100%"/ loading="lazy">





<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p>　　💻  <code>win10 21H2</code> 📎 <code>Qt 5.12.11</code> </p>
<br>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​    写截图时，当源码在 IDE 中，通过编译和运行后，右下加出现一个<code>托盘图标</code>，表示程序在运行中，此时通过快捷键 <code>F6</code> 可顺利召唤出<code>截图窗口</code>（无标题栏 + 最大化 + 置顶）。</p>
<br>

<p>​    <strong>操作如下：</strong> 此时鼠标故意不点击此<code>截图窗口</code>和<code>托盘图标</code>，仅移动，可以看到实时显示其中光标的绝对坐标的变化。<strong>此时按下快捷键 <code>Esc</code> ，<code>截图窗口</code> 并不会消失。甚是奇怪？？？</strong>  但倘若是通过右键点击托盘菜单，召唤的 <code>截图窗口</code>，按下 <code>Esc</code> 则有关闭响应。后续再快捷键召唤 <code>截图窗口</code> 和 <code>Esc</code> 则总是正常的。</p>
<br>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>​    一开始是认为程序缺少焦点导致，尝试 <a href="https://blog.csdn.net/y7u8t6/article/details/83415229">【QT】新弹窗默认无焦点</a> 中两种设置焦点方法，均无效。</p>
<p>索性写了一个 <a href="https://github.com/XMuli/QtExamples/tree/master/TestHotKey">TestHotKey</a> 来验证这个全局热键功能，原因为何？</p>
<h3 id="托盘相关代码如下"><a href="#托盘相关代码如下" class="headerlink" title="托盘相关代码如下"></a>托盘相关代码如下</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// -------------------- tray.h --------------------</span>
<span class="token keyword">class</span> <span class="token class-name">Tray</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QObject</span></span>
<span class="token punctuation">&#123;</span>
    Q_OBJECT
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">Tray</span><span class="token punctuation">(</span>QObject <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> slots<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">onScreenShot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    QAction<span class="token operator">*</span> m_screenShot<span class="token punctuation">;</span>
    QAction<span class="token operator">*</span> m_quit<span class="token punctuation">;</span>
    QMenu<span class="token operator">*</span> m_menuTary<span class="token punctuation">;</span>
    QSystemTrayIcon<span class="token operator">*</span> m_sysTary<span class="token punctuation">;</span>

    QHotkey<span class="token operator">*</span> m_hkScrnShot<span class="token punctuation">;</span>  <span class="token comment">// 热键</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// -------------------- tray.cpp --------------------</span>

<span class="token class-name">Tray</span><span class="token double-colon punctuation">::</span><span class="token function">Tray</span><span class="token punctuation">(</span>QObject <span class="token operator">*</span>parent<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">QObject</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
    <span class="token punctuation">,</span> <span class="token function">m_screenShot</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>
    <span class="token punctuation">,</span> <span class="token function">m_quit</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>
    <span class="token punctuation">,</span> <span class="token function">m_menuTary</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>
    <span class="token punctuation">,</span> <span class="token function">m_sysTary</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>
    <span class="token punctuation">,</span> <span class="token function">m_hkScrnShot</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">QHotkey</span><span class="token punctuation">(</span><span class="token function">QKeySequence</span><span class="token punctuation">(</span><span class="token string">"f2"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> qApp<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_screenShot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QAction</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"ScreenShot"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_quit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QAction</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"Quit"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_menuTary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_menuTary<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>m_screenShot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_menuTary<span class="token operator">-></span><span class="token function">addSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_menuTary<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>m_quit<span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_sysTary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QSystemTrayIcon</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_sysTary<span class="token operator">-></span><span class="token function">setIcon</span><span class="token punctuation">(</span><span class="token function">QIcon</span><span class="token punctuation">(</span><span class="token string">":/resources/PicShot_32.svg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_sysTary<span class="token operator">-></span><span class="token function">setToolTip</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"PicShot Test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_sysTary<span class="token operator">-></span><span class="token function">setContextMenu</span><span class="token punctuation">(</span>m_menuTary<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_sysTary<span class="token operator">-></span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 快捷键响应</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>m_hkScrnShot<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QHotkey<span class="token double-colon punctuation">::</span>activated<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Tray<span class="token double-colon punctuation">::</span>onScreenShot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 右键菜单触发</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>m_screenShot<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QAction<span class="token double-colon punctuation">::</span>triggered<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Tray<span class="token double-colon punctuation">::</span>onScreenShot<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token function">connect</span><span class="token punctuation">(</span>m_quit<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QAction<span class="token double-colon punctuation">::</span>triggered<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>qApp<span class="token operator">-></span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">Tray</span><span class="token double-colon punctuation">::</span><span class="token function">onScreenShot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">auto</span><span class="token operator">&amp;</span> ins <span class="token operator">=</span> <span class="token class-name">Widget</span><span class="token double-colon punctuation">::</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ins<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="截图窗口代码如下："><a href="#截图窗口代码如下：" class="headerlink" title="截图窗口代码如下："></a>截图窗口代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// -------------------- tray.cpp --------------------</span>
<span class="token class-name">Widget</span><span class="token double-colon punctuation">::</span><span class="token function">Widget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">setFocusPolicy</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>StrongFocus<span class="token punctuation">)</span><span class="token punctuation">;</span>

    QDesktopWidget <span class="token operator">*</span>desktop <span class="token operator">=</span> <span class="token class-name">QApplication</span><span class="token double-colon punctuation">::</span><span class="token function">desktop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取桌面的窗体对象</span>
    <span class="token keyword">const</span> QRect geom <span class="token operator">=</span> desktop<span class="token operator">-></span><span class="token function">geometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 多屏的矩形取并集</span>
    <span class="token function">setWindowFlags</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>FramelessWindowHint <span class="token comment">/*| Qt::WindowStaysOnTopHint */</span><span class="token operator">|</span> <span class="token function">windowFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 去掉标题栏 + 置顶</span>

<span class="token comment">//    setAttribute(Qt::WA_ShowWithoutActivating,true);</span>
<span class="token comment">//    setFocusPolicy(Qt::StrongFocus);</span>
<span class="token comment">//    setFixedSize(QSize(geom.size().width() / 4, geom.size().height()));</span>
    <span class="token function">setFixedSize</span><span class="token punctuation">(</span><span class="token function">QSize</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> geom<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setMouseTracking</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">Widget</span><span class="token double-colon punctuation">::</span><span class="token function">keyPressEvent</span><span class="token punctuation">(</span>QKeyEvent <span class="token operator">*</span>event<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token operator">-></span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Qt<span class="token double-colon punctuation">::</span>Key_Escape<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Key_Escape"</span><span class="token punctuation">;</span>
        <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token operator">-></span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Qt<span class="token double-colon punctuation">::</span>Key_A<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Key_A"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">Widget</span><span class="token double-colon punctuation">::</span><span class="token function">paintEvent</span><span class="token punctuation">(</span>QPaintEvent <span class="token operator">*</span>event<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QPainter <span class="token function">pa</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pa<span class="token punctuation">.</span><span class="token function">drawText</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"m_pos(%1, %2)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>m_pos<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>m_pos<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p>突破点在 <code>Widget::keyPressEvent()</code>，想知道到底对应状态是否会响应键盘按键，确认此便可以找到原因。</p>
<br>

<h2 id="根因解决"><a href="#根因解决" class="headerlink" title="根因解决"></a>根因解决</h2><p>​    此次思路感觉有点欧亨利式：</p>
<p><a href="https://zhuanlan.zhihu.com/p/28901592">知乎此篇</a> —&gt; tab 切换窗口 —&gt; 联想到 激活窗口 —&gt; google key: focus 变成 窗口激活， —&gt; 去掉置顶后尝试（去掉干扰因素） —&gt; ok</p>
<br>

<p>​    <strong>使用全局热键召唤出来的截图窗口，此时不属于激活窗口。</strong> 解决方法，再 show() 后，将此窗口设置为激活窗口即可。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">Tray</span><span class="token double-colon punctuation">::</span><span class="token function">onScreenShot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">auto</span><span class="token operator">&amp;</span> ins <span class="token operator">=</span> <span class="token class-name">Widget</span><span class="token double-colon punctuation">::</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ins<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 解决方案: show() 之后，设置为激活窗口即可</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ins<span class="token punctuation">.</span><span class="token function">isActiveWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        ins<span class="token punctuation">.</span><span class="token function">activateWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<br>

<h2 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> 『TestHotKey』</p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
<br>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://zhuanlan.zhihu.com/p/28901592">Qt绘图：Keyboard Focus in Widgets</a> 给予启发，灵光乍现</li>
<li><a href="https://blog.csdn.net/hp_cpp/article/details/105847810">Qt界面focus焦点设置的一些体会</a>  虽然不是原因不同，其中参考文章却有关于焦点理解的价值</li>
<li><a href="https://blog.csdn.net/Horsdy123/article/details/54581776">QT 激活窗口</a>  未尝试，若是本文未解决，可以试试这种方法</li>
<li>附: 考虑跨平台或需参考 <a href="https://zhuanlan.zhihu.com/p/161299504">Qt激活窗口</a></li>
</ol>
]]></content>
      <categories>
        <category>学习 - C/C++ 序二 经验</category>
        <category>学习 - Windows</category>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>工程经验</tag>
      </tags>
  </entry>
  <entry>
    <title>Qv2ray 检测到 DDE 环境，提示弹窗：Deepin 设置代理错误</title>
    <url>/posts/60b2fbd8/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　使用 <code>Deepin</code> + <code>QV2ray</code> 的用户，有遇到如下提示弹窗；这里说一下事情的始末发展。</p>
<img src="https://raw.githubusercontent.com/xmuli/xmuliPic/pic/2020/20201231102321.png" width="60%"/ loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>印象中让人深刻的一句话～</p>
 <img src="https://raw.githubusercontent.com/xmuli/xmuliPic/pic/2020/20201201095203.png" width="80%"/ loading="lazy">

<p>本篇是来兑现之前的承诺，虽然 <strong>咕～咕～咕～</strong> 了很久， 但是一天没回复，睡觉始终心有不安。感觉心里有什么在牵挂这一样，，，</p>
 <img src="https://raw.githubusercontent.com/xmuli/xmuliPic/pic/2020/20201130155610.png" width="80%"/ loading="lazy">



<p><strong>本篇仅是个人观点，说明此缺陷为何一直延期很久才解决。无意代表 <code>Deepin</code> 官方；</strong></p>
<br>

<p>也有考虑过是否将本篇其发布出来，犹豫甚久；若是同事或者领导看到了，若是不高兴了， 万一被咔嚓，，，，，，</p>
<p>若有，会略有失望；一份工作，也仅是生活的一抹重笔；</p>
<p>若无，说明我没看错，（至少我的直属领导和我认识大领导，和周围比较亲近的人，他们是很友好且心善的、非求生欲，实话实说））（也是我留下来 在 <code>Deepin</code> 的一个重要原因）。</p>
<p>此文落笔时，没想那么多，也没考虑那么多；也不准备想那么多，也不想考虑太多～～</p>
<p><strong>同样，本篇既不是洗白、或者黑某个事物或者个人，单单称述一件事情的发展过程罢了。帮助各知晓。</strong>  </p>
<p><font size="4" color="#FF6EC7"> <strong>文中的语气，仅标表明说当时那一刻瞬间感觉，过后就忘了，没有忧愁的我，，，哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈，，，，</strong> </font> （网络是有记忆的，发表容易日后埋雷。已记不清有多久没在公众网络上，发表个人观点了。但今天想了一下，将保存好的草稿略加修改，将其发布于 <code>2020</code> 年的年末一天。）</p>
<br>

<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><blockquote>
<p>Deepin可能自作聪明，为你设置了错误的 HTTPS_PROXY 和 FTP_PROXY 环境变量。</p>
<p>原来正确的 http:&#x2F;&#x2F; 可能被错误地替换为 https:&#x2F;&#x2F; 和 ftp:&#x2F;&#x2F;，导致这个问题。</p>
<p>Qv2ray 很遗憾无法帮你改回来。若因此遇到问题，请勿指责吾等。  </p>
</blockquote>
<p>对于 <code>Deepin / UOS</code> 、<code>Arch + DDE</code> 、 <code>manjaro + DDE</code> 等的用户，且同时是 <code>Qvray</code> 的用户，都有遇到过此如下此 “提示” 弹窗。有让很多使用者和开发者比较困惑，这里回复一下为啥很久，此 <code>Bug</code> 才被修复，顺带向上延伸一下。</p>
<img src="https://raw.githubusercontent.com/xmuli/xmuliPic/pic/2020/dog.gif" width="15%"/ loading="lazy">

<br>

<h3 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a>时间线</h3><p>为了方便描述，这里按照记忆中的时间线描述下，时间大致差不多～；</p>
<p>此前是 <strong>Deepin v15</strong>  版本，暂略</p>
<br>

<p>资本下场 <code>2019-07</code> 左右，着手开发 V20 版本，大招人，全速开发迭代新功能、新特性</p>
<br>

<p>到约 <code>2020-01</code> V20 版本基本定型，开始重点提升质量，打磨细节，修改 BUG</p>
<br>

<p><code>2020-02 下旬</code> 疫情封城和过年双临，开始远程办公，研发进度略缓</p>
<br>

<p><code>2020-03 下旬</code> ，通知再次组织开源仓库，因为中间 9 个月没有怎么更新代码，可能都忙晕（我也是后来才知道，原来 <code>Deepin</code> 版本居然是实时开源的，顿时震惊和狂喜）；自荐和 <a href="https://www.blumia.net/">blumia</a> 大佬一起负责对外开源事宜。手工核对开源仓库的初始表，然后让老大和老大的老大双确认下。再手工每个仓库设置同步，于是就这样 <code>Deepin</code> 的仓库，再次回复大更新，后面就一直是保持了实时更新的。</p>
<br>

<p><code>2020-04-15</code> 在 <a href="https://bbs.deepin.org/user/48640">jingle</a> 催更新下，出了 <code>deepin v20 Beta</code> 版本，若再跳票一直不出，社区估计会被口水淹没。</p>
<br>

<p><code>2020-05-10</code>，提了此 issues： <a href="https://github.com/linuxdeepin/go-lib/issues/15">#15</a>，但社区之前一直都是大佬们兼职负责，没人专门负责，空了一段时间；当我第一次遇到此弹窗的时候（en，我也是这两者的用户），没在意，顺手关闭提示，以为只是一个小的 bug， 以为按照现有流程，过几天就会被修复，且没有感觉有影响到我使用（开启&#x2F;关闭全局代理解决的， 虽然缺失优雅）。</p>
<p><br> <code>2020-06-30</code> 快一个月快过去，此还未被修复，也仍未被后端所重视，然后 <a href="https://github.com/DuckSoft">DuckSoft</a>  做了一个提交 <a href="https://github.com/linuxdeepin/go-lib/commit/cbd8ac9a8afccbbc6d4c0cc5bae50f4621434de9">cbd8ac9a8a</a>  ，助其合并，我和他都以为就 <code>ok</code> 了。但是，，就有了文章后半部分</p>
<br>

<p><code>2020-08-27</code> ，又过很久，还有人反馈问题，且每次打开后来反复提示，emmmm。这都是赤条条的明示了！！！在黑 <code>Deepin</code> 嘛！！！不过也确实，我都感觉不好意思了， 居然能够被拖近 4 个月之久。。。醉了醉了醉了</p>
<p>抽空去看看这是啥原因？跑去翻了下当时的记录，发现此贡献 提交到了 <code>develop</code> 分支（当时都没注意），而由于策略，这是是搁置无用的分支，只有提交到 默认分支  <code>uos / maste</code>r 分支才会有效。氪！！！</p>
<p>知道问题后， 再麻烦人家重新提交、 岂不是尴尬，，，，， 不好意思了，老脸一红。欲自己修复，做好事不留名，可后端不懂，找到后端大佬，让研发大佬协助一下，研发做了提交到 <code>master</code> 分支 <a href="https://github.com/linuxdeepin/go-lib/commit/f3021d13975a4ad8e8e3c857f2631580d395c874">f3021d13</a> ， <code>tag</code> 为 <code>5.5.0.1</code> 觉着这下应该稳妥了。后面慢慢跟新一番即可，终于可以安逸一会了，后面应该不会再黑 Deepin 了吧（单指去掉改提示框，不过Deepin 这件事确实做的不够好，被人家疯狂暗示，也是无可厚非～， 似乎没有什么不妥）。</p>
<p>然后遇到准备一周后 <code>09-11</code>发社区版本的更新，但是当时的很多包的<code>tag</code> 号都定了，但是 <code>go-lib</code> 项目  <code>tag</code> 偏低，按照当前的跟新速度，用户想得到这个修复，估计得 2021 年初去了。。。。（很是惶恐，害怕，这 TMD 后面必须跳跃版本解决，或者改变现有策略）</p>
<p>然后想了下，能不能直接将  <code>go-lib</code> 项目色升级到最新的 <code>tag</code>，那样用户就可以早点用上了；商讨的结果，就是不能升级。</p>
<p><strong>原因如下：</strong></p>
<p><strong>① <code>go-lib</code> 项目是一个很重要的基本包，然后过多重要的核心包也都依赖它；</strong></p>
<p><strong>②此项目的独特殊和机制，不能像普通软件一样，只是更新一下动态库升级得到此修复。</strong></p>
<p>③<strong>发布时间已经预定了，来不及更改了；且即使升级，也需要对应的软件包全部升级才行，测试小姐姐前面的测试也都白费了，且需要重新测试一轮，可能当场就狗头不保。文案内容也都要全部重新写，运营在论坛宣传也都跳票了。</strong> 想一下，都觉得寒毛爆炸。被磨刀霍霍～～</p>
<p>这是第一次感觉到心累的感觉、也是第一次感觉到牵一发而动全身。什么叫做被迫，只好让社区用户再次等待，， 嗷～ 嗷～ 嗷～ ，虽然理解，但我还是有张图要说</p>
<img src="https://raw.githubusercontent.com/xmuli/xmuliPic/pic/2020/20201204212011.png" width="30%"/ loading="lazy">

<br>

<p><code>2020-09-17</code> 时候， 决定更换策略，社区版本不应该跑在专业版后面太多；也完全可以跑到最前面，让社区用户体验新特性新功能，和反馈新的缺陷。然后直接按照当时最新的专业版所有 tag，全部照着来一遍，此时心里美滋滋的，第一反应就是将 <code>go-lib</code> 项目打 tag  到 <code>5.6.0.2</code>， 真的是可开心了。想着他们终于可以用上此修复了了。且这此打包我主要负责，可以一下将很多包直接推送到到最好的兼容版本。</p>
<p>预料之中在 <code>2020-10-23</code>， 在内测的 <code>1030</code> 版本中，已经验证了此 bug 被解决，且该弹窗提示也在 新的 <code>Qv2ray</code> 里面被移除了 <a href="https://github.com/Qv2ray/Qv2ray/pull/1050">#1050</a> ，互相都很开心。后面收电报等公告 thanks了，甚是开心。</p>
 <img src="https://raw.githubusercontent.com/xmuli/xmuliPic/pic/2020/20201201094848.png" width="80%"/ loading="lazy">

<br>

<p><font size="4" color="#FF0000"><strong>然意料之外发生了</strong></font>，在 <code>2020-11-13</code>  周五时候，因为 <strong>“应用代理开启后 无法打开应用商店” ** （BUG 号：53612） ，然后研发小组长、研发、测试、产品经理、项目经理建群讨论，且急于下班之前集成版本，</strong>优先级也比较高，** 时间也比较短，给出的 <strong>临时解决方案是：由于设计缺陷，只能先修改回去，后面代理这一块在下一阶段需要重新设计</strong>。 改回去的提交 <a href="https://github.com/linuxdeepin/go-lib/commit/a1b16c48f33f500ad8c36d4218f24380e9a04102">a1b16c48</a> 呜呼载～，<font size="3" color="#FF0000"><strong>前面的修改都是白费了，心疼又心痛！！！</strong></font>  <font size="3" color="#00A0FF"><strong><del>都是想要做事，都想将其做好，若是深究的话，感觉没有任何一个人有做错什么，有的只是事情的轻重缓急之分。</del></strong></font></p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210302094709.png" width="30%"/ loading="lazy">

<br>

<p><code>2020-11-26</code>时候，已经看到后端大佬开始设计新的代理方案了；感觉此问题被解决又要被搁置延期很久，且一个新的设计方案到实现，到通过测试，完全替换，估计有需要很久。也估计后面这个弹窗过不久，又会再次出现。娜娜无奈～ 大概还是不够十分的重视此缺陷吧。心疼，</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201201131910.png" width="30%"/ loading="lazy">

<br>

<p><code>2020-12-04</code> 后面有空或有新的发展再更新；</p>
<p>中间问过了几次进度，看起来没有那么快，可能是重新设计会比较麻烦？？ 不是很懂，心疼抱抱～</p>
<br>

<p><code>2020-12-31</code>，果然，看到被再次打开了，被爆破了。看来至少没能够在元旦之前被解决。</p>
<p>持续更新。。。。等待（准备后面有系统学下网络相关知识）</p>
<br>

<p><code>2021-03-22</code>，最终还是<a href="https://blog.justforlxz.com/">竹子</a>大佬给修复了 <a href="https://github.com/linuxdeepin/go-lib/pull/28">#28</a>，鸡冻٩(๑&gt;◡&lt;๑)۶，完结🎉🎉🎉。</p>
<br>

<p>更新 <code>2021-08-28</code>，突然看到如下，出人意料，，，</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210901003606.png" width="70%"/ loading="lazy">]]></content>
      <categories>
        <category>学习 - Linux</category>
        <category>学习 - 代理</category>
      </categories>
      <tags>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>STL 中给 vector 去重的三种方法</title>
    <url>/posts/be0b5490/</url>
    <content><![CDATA[<p><strong>简  述：</strong> 对 <code>std::vector</code> 中的元素进行去重，其中元素为自定义结构体类型。提供三种思路，并且附上详细示例和分析。关键词内容：</p>
<ol>
<li>C++ <code>std::unique</code> 函数去重，却导致的 <code>std::vector</code> 发生改变（遇内存泄漏）</li>
<li>c++ <code>std::vector</code> 利用 <code>std::set</code> 去重（自定义结构体创建 set 对象的方法）</li>
<li>自定义结构体在 <code>sort</code> 和 <code>unique</code> 中 <code>比较 / 等于</code> 函数书写（重载、函数、函数对象；严格弱序、相等）</li>
</ol>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>　　在开发防病毒业务中，需要对<strong>传入到 <code>vector</code> 中的样本进行去重</strong> ；本篇全程采用 C++ STL 库，未调用 Qt 接口。业务抽象出一个具体例子如下。</p>
<p><strong>构建环境：</strong> 💻  <code>win10 21H2</code> 📎  <code>Visual Studio 2019</code> 📎 <code>C++17</code></p>
<br>

<h3 id="去重思路"><a href="#去重思路" class="headerlink" title="去重思路"></a>去重思路</h3><p>　　搜索发现，对 <code>std::vector</code> 共分为两种，<strong>一种基础数据类型，另一种自定义结构体类型。</strong></p>
<ol>
<li><p><strong>基础数据类型</strong></p>
<p>SO 提供三种解决方案，推荐使用第二种。见 <a href="https://stackoverflow.com/questions/1041620/whats-the-most-efficient-way-to-erase-duplicates-and-sort-a-vector">What’s the most efficient way to erase duplicates and sort a vector?</a></p>
</li>
<li><p><strong>自定义结构体类型</strong></p>
<p>实际项目中，这种我们更常遇到，才是所需。<font color=#D0087E size=4 face="STFangsong"><strong>余下全文重点讲解此。</strong></font></p>
</li>
</ol>
<br>

<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><font color=#D0087E size=4 face="STFangsong">对于<strong>自定义结构体</strong> 类型，使用 STL 的 <code>set</code>、<code>sort</code>、<code>unique</code> 时，都是需要自定义其<u><strong>严格弱序</strong></u>的<strong>比较函数</strong> 或者<strong>相等函数</strong> 的（此处用 <code>_Pr</code> 表示）。</font></p>
<p><strong>其中 比较函数 <code>_Pr</code> 的实现有三种（附上的完整源码）：</strong></p>
<ol>
<li>在自定义结构体中 <font color=#FF0000 size=4 face="STFangsong"><strong>重载 <code>&lt;</code> 函数</strong></font>，简单，参见代码方式一。略</li>
<li><font color=#FF0000 size=4 face="STFangsong"><strong>定义一个比较函数</strong></font>，最为常用；亦有用 Lambda 定义；</li>
<li>使用 <font color=#FF0000 size=4 face="STFangsong"><strong>函数对象</strong></font>，亦简单，属于 2 的变种，在自定义的函数外面套了一层 <code>class</code> 或者 <code>struct</code> 罢了。</li>
</ol>
<br>

<p>PS: 因实际项目中的结构体，没有和无法重载 <code>operator&lt;</code>， 故 1 不可用。然后决定采用 2 方式。</p>
<p>而 2 式推荐使用常规声明和定义函数方式，而不使用 Lambda 方式定义；原因是后者在某些算法中会失效。</p>
<p>其中 3 式对于创建 <code>std::set</code> 对象很方便。</p>
<br>

<h3 id="『一』vector-sort-unique"><a href="#『一』vector-sort-unique" class="headerlink" title="『一』vector, sort + unique"></a>『一』vector, sort + unique</h3><blockquote>
<p><strong>思路：</strong> 先利用 sort 进行排序，将重复的项使之相邻，然后利用 unique 的属性进行去重。注意点为 unique 去重特性。</p>
</blockquote>
<br>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 核心代码</span>
<span class="token function">sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmpSort<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> ite <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">unique</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmpUnique<span class="token punctuation">)</span><span class="token punctuation">;</span>
vec<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>ite<span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p>但其中大有文章，所以举一个完整例子：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">MyData</span> <span class="token punctuation">&#123;</span>
    wstring name<span class="token punctuation">;</span>
    wstring md5<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">cmpSort</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyData<span class="token operator">&amp;</span> d1<span class="token punctuation">,</span> <span class="token keyword">const</span> MyData<span class="token operator">&amp;</span> d2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> d1<span class="token punctuation">.</span>md5 <span class="token operator">&lt;</span> d2<span class="token punctuation">.</span>md5<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">cmpUnique</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyData<span class="token operator">&amp;</span> d1<span class="token punctuation">,</span> <span class="token keyword">const</span> MyData<span class="token operator">&amp;</span> d2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> d1<span class="token punctuation">.</span>md5 <span class="token operator">==</span> d2<span class="token punctuation">.</span>md5<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    vector<span class="token operator">&lt;</span>MyData<span class="token operator">></span> vec <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span> L<span class="token string">"a1.exe"</span><span class="token punctuation">,</span> L<span class="token string">"B9204B6362A65C248950D5A41F341DCC"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                           <span class="token punctuation">&#123;</span> L<span class="token string">"a2.exe"</span><span class="token punctuation">,</span> L<span class="token string">"B9204B6362A65C248950D5A41F341DCC"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                           <span class="token punctuation">&#123;</span> L<span class="token string">"b1.exe"</span><span class="token punctuation">,</span> L<span class="token string">"C96D1AA5D314954417C28A645ED72665"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                           <span class="token punctuation">&#123;</span> L<span class="token string">"b2.exe"</span><span class="token punctuation">,</span> L<span class="token string">"C96D1AA5D314954417C28A645ED72665"</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    wcout<span class="token punctuation">.</span><span class="token function">imbue</span><span class="token punctuation">(</span><span class="token function">locale</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> LC_CTYPE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    wcout <span class="token operator">&lt;&lt;</span> L<span class="token string">"----------调整前--------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> it <span class="token operator">:</span> vec<span class="token punctuation">)</span> 
        wcout <span class="token operator">&lt;&lt;</span> L<span class="token string">"[it.name]"</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> L<span class="token string">"[it.md5]"</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>md5 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token function">sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmpSort<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> ite <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">unique</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmpUnique<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vec<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>ite<span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    wcout <span class="token operator">&lt;&lt;</span> L<span class="token string">"----------调整后--------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> it <span class="token operator">:</span> vec<span class="token punctuation">)</span>  
        wcout <span class="token operator">&lt;&lt;</span> L<span class="token string">"[it.name]"</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> L<span class="token string">"[it.md5]"</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>md5 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p>运行查看结果，似乎是完美符合预期的？？？ 可真的如此？</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/20220813131959.png" width="45%"/ loading="lazy">

<p><font color=#FF0000 size=4 face="STFangsong"><strong>实际它会产生内存泄漏，原因是由于使用的自定义 cmpUnique() 函数导致的，其并未是真正的两个结构体对象相等，且 stackoverflow.com 亦能够佐证 Ref <sup>[4]</sup></strong> </font></p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/20220813133846.png" width="90%"/ loading="lazy">

<p>尝试将 <code>cmpUnique()</code> 修改如下，便不再有内存泄漏了，但此功能函数，却也”失效”了，没有起到去重的效果，可以调试自行查验效果</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">cmpUnique</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyData<span class="token operator">&amp;</span> d1<span class="token punctuation">,</span> <span class="token keyword">const</span> MyData<span class="token operator">&amp;</span> d2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//return d1.md5 == d2.md5;                          // 此『不严格相等』会内存泄漏</span>
    <span class="token keyword">return</span> d1<span class="token punctuation">.</span>md5 <span class="token operator">==</span> d2<span class="token punctuation">.</span>md5 <span class="token operator">&amp;&amp;</span> d1<span class="token punctuation">.</span>name <span class="token operator">==</span> d2<span class="token punctuation">.</span>name<span class="token punctuation">;</span>      <span class="token comment">// 此『严格相等』满足语法，却不满足实际业务需求</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p><strong>更新</strong></p>
<p>　　本想后面有时间再继续研究下方式一，看看自定义 <code>cmpUnique（）</code> 修改达到严格弱序的要求，能够不会有内存泄漏，亦能够完美符合要求。但心里痒痒，总是还有一点困惑，两天后，半夜睡不着，又起来研究了下。</p>
<p>　　翻了下  <code>std::unique()</code> 的默认第三个参数的默认实现，如图，发现就是直接 <code>==</code> 比较。那就是严格的对象相等，满足语法和编译，但不满足业务的需要，故这个点也没有疑问了。</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/20220815113235.png" width="85%"/ loading="lazy">

<br>

<p><strong>实际情况复杂得多：</strong> 实际的 <code>MyData</code> 结构体是微软的 COM 组件中的 <code>Bundle</code> 结构，每一个**<code>Bundle</code> 对象** 的属性项目的数量和内容都可能不同，仅有少部分重叠。需求为仅只需比较的两三个属性内容是否完全一致，来判断两个对象是否为同重复文件。亦没有提供直接判断两个 <strong><code>Bundle</code> 对象</strong> 相等的接口。简直是要要命， Help，Help，Help！！！</p>
<p><strong>综上：</strong> 决定弃用此方式，改用下面『方式二』，且最终完成目的。</p>
<br>

<h3 id="『二』vector-set（手动赋值）"><a href="#『二』vector-set（手动赋值）" class="headerlink" title="『二』vector + set（手动赋值）"></a>『二』vector + set（手动赋值）</h3><blockquote>
<p><strong>思路：</strong> 很简单，先将 vector 数据导入 set，利用其单一性去重，然后再数据赋值给 vector，完美的思路，亦不会有方式一的内存泄漏。<font color=#008000 size=4 face="STFangsong"><strong>其中难点为给创建 std::set 的对象进行自定义类型排序和赋值。其难点解决方式可参考 Ref<sup>[2]</sup>的方式三</strong> </font></p>
<p>其中 std::set 的自定义排序函数 cmpSort()，又分为定义在类外还是类内，若是前者则甚至简单，若是后者，则必须定义为<strong>静态成员函数</strong>。</p>
</blockquote>
<br>

<h4 id="cmpSort-定义在-Class-外"><a href="#cmpSort-定义在-Class-外" class="headerlink" title="cmpSort() 定义在 Class 外"></a>cmpSort() 定义在 Class 外</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 核心代码</span>
set<span class="token operator">&lt;</span>MyData<span class="token punctuation">,</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>cmpSort<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">></span>  <span class="token function">s</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cmpSort<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 此种方式比较少见，且第二个 &amp; 若想省略亦可，则编译器亦会自动添加</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
	s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
vec<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p><strong>注：</strong> 若偷懒采用 <code>set&lt;MyData, decltype(cmpSort)*&gt;  s;</code> 此方式定义对象，则会导致调用 <code>s.insert(vec[i]);</code> 时崩溃，坑。</p>
<br>

<h4 id="cmpSort-定义为-Class-成员变量"><a href="#cmpSort-定义为-Class-成员变量" class="headerlink" title="cmpSort() 定义为 Class 成员变量"></a>cmpSort() 定义为 Class 成员变量</h4><p>这种大概是实际业务中最常遇到的场景，亦是这几种最复杂的一种。 </p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 核心代码</span>
set<span class="token operator">&lt;</span>MyData<span class="token punctuation">,</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>DeDuplication<span class="token double-colon punctuation">::</span>cmpSort<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">></span>  <span class="token function">s</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>DeDuplication<span class="token double-colon punctuation">::</span>cmpSort<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 本行定义为重点</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>m_vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

m_vec<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p>其中 Class DeDuplication 种 <code>cmpSort()</code> 必须为 <code>static</code> 类型，定义如下。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">MyData</span>
<span class="token punctuation">&#123;</span>
    wstring name<span class="token punctuation">;</span>
    wstring md5<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">DeDuplication</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">cmpSort</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyData<span class="token operator">&amp;</span> d1<span class="token punctuation">,</span> <span class="token keyword">const</span> MyData<span class="token operator">&amp;</span> d2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ***** 注意，必须是静态 *****</span>
        <span class="token comment">// Simple example</span>
        <span class="token keyword">return</span> d1<span class="token punctuation">.</span>md5 <span class="token operator">&lt;</span> d2<span class="token punctuation">.</span>md5<span class="token punctuation">;</span>

        <span class="token comment">// Complex sample</span>
        <span class="token comment">//if (d1.md5 != d2.md5)</span>
        <span class="token comment">//    return d1.md5 &lt; d2.md5;</span>
        <span class="token comment">//else</span>
        <span class="token comment">//    return d1.name &lt; d2.name;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        wcout<span class="token punctuation">.</span><span class="token function">imbue</span><span class="token punctuation">(</span><span class="token function">locale</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> LC_CTYPE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        wcout <span class="token operator">&lt;&lt;</span> L<span class="token string">"----------调整前--------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> it <span class="token operator">:</span> m_vec<span class="token punctuation">)</span>
            wcout <span class="token operator">&lt;&lt;</span> L<span class="token string">"[it.name]"</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> L<span class="token string">"[it.md5]"</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>md5 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>


        set<span class="token operator">&lt;</span>MyData<span class="token punctuation">,</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>DeDuplication<span class="token double-colon punctuation">::</span>cmpSort<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">></span>  <span class="token function">s</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>DeDuplication<span class="token double-colon punctuation">::</span>cmpSort<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
            s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>m_vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        m_vec<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        wcout <span class="token operator">&lt;&lt;</span> L<span class="token string">"----------调整后--------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> it <span class="token operator">:</span> m_vec<span class="token punctuation">)</span>
            wcout <span class="token operator">&lt;&lt;</span> L<span class="token string">"[it.name]"</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> L<span class="token string">"[it.md5]"</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>md5 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    vector<span class="token operator">&lt;</span>MyData<span class="token operator">></span>  m_vec <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span> L<span class="token string">"a1.exe"</span><span class="token punctuation">,</span> L<span class="token string">"B9204B6362A65C248950D5A41F341DCC"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                              <span class="token punctuation">&#123;</span> L<span class="token string">"a2.exe"</span><span class="token punctuation">,</span> L<span class="token string">"B9204B6362A65C248950D5A41F341DCC"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                              <span class="token punctuation">&#123;</span> L<span class="token string">"b1.exe"</span><span class="token punctuation">,</span> L<span class="token string">"C96D1AA5D314954417C28A645ED72665"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                              <span class="token punctuation">&#123;</span> L<span class="token string">"b2.exe"</span><span class="token punctuation">,</span> L<span class="token string">"C96D1AA5D314954417C28A645ED72665"</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p>若是普通类型，会导致 <code>std::set</code> 对象编译不过，报错如下，其解释参考 devblogs.microsoft.com Ref<sup>[3]</sup>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">Error</span> <span class="token punctuation">(</span>active<span class="token punctuation">)</span>	E0289	no instance of constructor <span class="token string">"std::set&lt;_Kty, _Pr, _Alloc>::set [with _Kty=MyData, _Pr=bool (DeDuplication::**)(const MyData &amp;d1, const MyData &amp;d2), _Alloc=std::allocator&lt;MyData>]"</span> matches the argument list	DeDuplication<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>

<h3 id="『三』vector-set（构造函数）"><a href="#『三』vector-set（构造函数）" class="headerlink" title="『三』vector + set（构造函数）"></a>『三』vector + set（构造函数）</h3><p>　　其性能不如『方式二』，略，可参见 Ref<sup>[1]</sup> 种的第三种。</p>
<br>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　最后结合实际，采用方式二的　<code>class</code> 内定义 <code>static</code> 此方式最合宜解决此问题。且附上完整源码。</p>
<ol>
<li><p>方式一和方式二的类外定义，见完整源码的项目 <a href="https://github.com/XMuli/QtExamples/blob/master/DeDuplication/Unique/Unique.cpp">Unique</a></p>
</li>
<li><p>方式二的类内定义，见完整源码的项目 <a href="https://github.com/XMuli/QtExamples/blob/master/DeDuplication/DeDuplication/DeDuplication.h">DeDuplication</a></p>
</li>
<li><p>对于给 <code>std::set</code> 创建自定义结构体对象，可见 <a href="https://blog.csdn.net/qq_33154343/article/details/126354597">STL 的 std::set 创建自定义结构体的对象，定义严格弱序的比较函数</a></p>
</li>
</ol>
<br>

<h3 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h3><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> 【DeDuplication】</p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
<br>

<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><p><sup>[1]</sup>: <a href="https://stackoverflow.com/questions/1041620/whats-the-most-efficient-way-to-erase-duplicates-and-sort-a-vector">What’s the most efficient way to erase duplicates and sort a vector?</a></p>
<p><sup>[2]</sup>: <a href="https://blog.csdn.net/lv1224/article/details/79789638">C++ set自定义排序</a></p>
<p><sup>[3]</sup>: <a href="https://devblogs.microsoft.com/oldnewthing/20201007-00/?p=104341">Error C3867: non-standard syntax; use ‘&amp;’ to create a pointer to member: What it means and how to fix it</a></p>
<p><sup>[4]</sup>:  <a href="https://stackoverflow.com/questions/15987082/eliminating-duplicates-from-vector-of-custom-object-stdunique-causes-crash-on">eliminating duplicates from vector of custom object - std:unique causes crash on free</a></p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序二 经验</category>
        <category>学习 - Windows</category>
      </categories>
      <tags>
        <tag>Visual Studio</tag>
        <tag>C++11/17/20</tag>
      </tags>
  </entry>
  <entry>
    <title>STL 的 std::set 创建自定义结构体的对象，定义严格弱序的比较函数</title>
    <url>/posts/95758696/</url>
    <content><![CDATA[<p><strong>简  述:</strong> 对于 <code>STL</code> 中 <code>std::set</code> 创建自定义结构体的对象，发现使用 <strong>“函数对象”</strong> 和 <strong>“定义普通函数 + decltype”</strong> 两种方式会有差异，且其中一种书写会导致崩溃？探究一番后，值得记录一下。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>对于 <code>std::set</code> 创建对象分为两种：⒈基础数据类型; ⒉自定义结构体类型。前者教程很多，故仅讲述后者；</p>
<p>💻  <code>win10 21H2</code> 📎  <code>Visual Studio 2019</code> 📎 <code>C++17</code></p>
<br>

<p>其中对于其中两种方式创建，使用示例如下，此处直接放结论：</p>
<ul>
<li>函数对象（仿函数）</li>
<li>定义普通函数 + decltype</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>MyData<span class="token punctuation">,</span> cmpSortObj<span class="token operator">></span>  s<span class="token punctuation">;</span>                      <span class="token comment">// "函数对象"创建 set 对象 --> OK</span>

std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>MyData<span class="token punctuation">,</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>cmpSort<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">></span>  <span class="token function">s</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cmpSort<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// "定义普通函数 + decltype"创建 set 对象 -->    OK:  编译、运行成功；调试也成功</span>
std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>MyData<span class="token punctuation">,</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>cmpSort<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">></span>  s<span class="token punctuation">;</span>              <span class="token comment">//                                     --> Error:  编译、运行成功；调试会失败</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul>
<li>讨论过程，见 <a href="https://scottyeung.top/2019/C-std-set/">C++ std::set</a> 留言区。</li>
<li>完整源码亦见 <a href="https://github.com/XMuli/QtExamples/edit/master/DeDuplication/Unique/Unique.cpp">Unique.cpp</a></li>
</ul>
<br>

<h3 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h3><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a></p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序二 经验</category>
        <category>学习 - Windows</category>
      </categories>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>STL之仿函数、谓词、内建函数对象、适配器、常用算法</title>
    <url>/posts/7d945155/</url>
    <content><![CDATA[<p>​			<strong>简述：</strong> 了解STL之仿函数、谓词、、内建函数对象、适配器、常用算法归纳等，书写一个简单地例子。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p><strong>编程环境：</strong>  win10 x64 专业版</p>
<p><strong>编程软件：</strong>  visual studio 2015， Qt 5.9.8</p>
<h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​		了解STL之仿函数、谓词、、内建函数对象、适配器、常用算法归纳等，书写一个简单地例子。其中适配器在该文章中有详细讲：<a href="https://blog.csdn.net/qq_33154343/article/details/95090677">STL之函数对象适配器、取反适配器、函数指针适配器、成员函数适配器的讲解运用</a></p>
<p>下面逐一介绍这几种比较常见的知识点，算是一个知识点的几个归纳（比较简单地就没有列举出来，在此不做那种工具手册的知识罗列），知识归纳一些比较不容易的掌握的点，属于进阶知识内容。</p>
<h2 id="函数对象-x2F-谓词-x2F-内建函数对象-x2F-适配器："><a href="#函数对象-x2F-谓词-x2F-内建函数对象-x2F-适配器：" class="headerlink" title="函数对象&#x2F;谓词&#x2F;内建函数对象&#x2F;适配器："></a>函数对象&#x2F;谓词&#x2F;内建函数对象&#x2F;适配器：</h2><h3 id="大纲如图："><a href="#大纲如图：" class="headerlink" title="大纲如图："></a>大纲如图：</h3><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710170721.png" loading="lazy"></p>
<h3 id="函数对象："><a href="#函数对象：" class="headerlink" title="函数对象："></a>函数对象：</h3><p>总结：</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710170956.png" loading="lazy"></p>
<h3 id="谓词"><a href="#谓词" class="headerlink" title="谓词:"></a>谓词:</h3><p>定义:</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710171104.png" loading="lazy"></p>
<h3 id="内建函数对象："><a href="#内建函数对象：" class="headerlink" title="内建函数对象："></a>内建函数对象：</h3><p>定义：</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710171203.png" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710171359.jpg" loading="lazy"></p>
<h4 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  <span class="token comment">//算法</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//内建函数对象</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//内建关系函数对象（无名 临时对象）greater&lt;int>()   大于</span>
	<span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h4><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710172037.png" loading="lazy"></p>
<h2 id="常用算法："><a href="#常用算法：" class="headerlink" title="常用算法："></a>常用算法：</h2><h3 id="大纲如图：-1"><a href="#大纲如图：-1" class="headerlink" title="大纲如图："></a>大纲如图：</h3><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710170815.png" loading="lazy"></p>
<h3 id="知识点讲解："><a href="#知识点讲解：" class="headerlink" title="知识点讲解："></a>知识点讲解：</h3><p>如上图</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/gif/20190704175742.gif" loading="lazy"></p>
<hr>
<p><strong>本博文同步到csdn博客：</strong>  <a href="https://blog.csdn.net/qq_33154343/article/details/95358967">STL之仿函数、谓词、内建函数对象、适配器、常用算法</a></p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序一 技法</category>
      </categories>
  </entry>
  <entry>
    <title>STL之常用容器string、vector、deque、stack、list、set、map讲解</title>
    <url>/posts/6a779e35/</url>
    <content><![CDATA[<p>​	<strong>简述：</strong> 了解STL之常用容器string、vector、deque、stack、list、set、map讲解书写一个简单地例子。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p><strong>编程环境：</strong>  win10 x64 专业版</p>
<p><strong>编程软件：</strong>  visual studio 2015， Qt 5.9.8</p>
<h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>了解STL之常用容器string、vector、deque、stack、list、set、map讲解，且书写一个简单地例子。</p>
<p>​        </p>
<p>下面逐一介绍这几种比较常见的知识点，算是一个知识点的几个归纳（比较简单地就没有列举出来，在此不做那种工具手册的知识罗列），知识归纳一些比较不容易的掌握的点，属于进阶知识内容。</p>
<h2 id="容器："><a href="#容器：" class="headerlink" title="容器："></a>容器：</h2><h3 id="大纲如图："><a href="#大纲如图：" class="headerlink" title="大纲如图："></a>大纲如图：</h3><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710162226.png" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710162255.png" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710162327.png" loading="lazy"></p>
<h3 id="知识点讲解："><a href="#知识点讲解：" class="headerlink" title="知识点讲解："></a>知识点讲解：</h3><p>其中这六种的主要区别如下：<strong>它们的使用时机</strong></p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710162708.png" loading="lazy"></p>
<hr>
<h3 id="string："><a href="#string：" class="headerlink" title="string："></a>string：</h3><p>比较简单，注意一下：[ ]和at( )区别：前者会越界直接挂掉，后者会抛出异常out_of_range即可</p>
<hr>
<h3 id="vector："><a href="#vector：" class="headerlink" title="vector："></a>vector：</h3><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710163212.png" loading="lazy"></p>
<h4 id="内存结构样子："><a href="#内存结构样子：" class="headerlink" title="内存结构样子："></a>内存结构样子：</h4><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710163750.png" loading="lazy"></p>
<p>收缩内存技巧:</p>
<p>关于<font color=#FE7207  size=4 face="幼圆">收缩内存</font>一个技巧使用：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">vectoKint<span class="token operator">></span>v<span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	v<span class="token punctuation">.</span><span class="token function">pusthback</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>；

cout<span class="token operator">&lt;&lt;</span><span class="token string">"v的容量："</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl；
cout<span class="token operator">&lt;&lt;</span><span class="token string">"v的大小："</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endd；

v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>；

cout<span class="token operator">&lt;&lt;</span><span class="token string">"v的容量："</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl；
cout<span class="token operator">&lt;&lt;</span><span class="token string">"v的大小："</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl；

<span class="token comment">//收缩内存</span>
ecto<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span><span class="token string">"v的容量："</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span>）<span class="token operator">&lt;&lt;</span>endl；
cout<span class="token operator">&lt;&lt;</span><span class="token string">"v的大小："</span>Kv<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>）<span class="token operator">&lt;&lt;</span>endd；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="原理图示："><a href="#原理图示：" class="headerlink" title="原理图示："></a>原理图示：<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710164014.png" loading="lazy"></h4><hr>
<h3 id="deque："><a href="#deque：" class="headerlink" title="deque："></a>deque：</h3><p>（双端 中控器 分段 数组）</p>
<h4 id="内存结构样子：-1"><a href="#内存结构样子：-1" class="headerlink" title="内存结构样子："></a>内存结构样子：</h4><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710163318.png" loading="lazy"></p>
<hr>
<h3 id="stack："><a href="#stack：" class="headerlink" title="stack："></a>stack：</h3><p>（栈）</p>
<h4 id="内存结构样子：-2"><a href="#内存结构样子：-2" class="headerlink" title="内存结构样子："></a>内存结构样子：</h4><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710163423.png" loading="lazy"></p>
<hr>
<h3 id="queue："><a href="#queue：" class="headerlink" title="queue："></a>queue：</h3><p>（队、先进先出）</p>
<h4 id="内存结构样子：-3"><a href="#内存结构样子：-3" class="headerlink" title="内存结构样子："></a>内存结构样子：</h4><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710163523.png" loading="lazy"></p>
<hr>
<h3 id="list："><a href="#list：" class="headerlink" title="list："></a>list：</h3><p>（链表）</p>
<h4 id="内存结构样子：-4"><a href="#内存结构样子：-4" class="headerlink" title="内存结构样子："></a>内存结构样子：</h4><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710163613.png" loading="lazy"></p>
<h4 id="验证list是一个验证list是循环双向链表："><a href="#验证list是一个验证list是循环双向链表：" class="headerlink" title="验证list是一个验证list是循环双向链表："></a>验证list是一个验证list是循环双向链表：</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	
	list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> mylist<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		mylist<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

	list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>_Nodeptr node <span class="token operator">=</span> mylist<span class="token punctuation">.</span><span class="token function">_Myhead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>_Next<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mylist<span class="token punctuation">.</span><span class="token function">_Mysize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Node:"</span> <span class="token operator">&lt;&lt;</span> node<span class="token operator">-></span>_Myval <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
		node <span class="token operator">=</span> node<span class="token operator">-></span>_Next<span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> mylist<span class="token punctuation">.</span><span class="token function">_Myhead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			node <span class="token operator">=</span> node<span class="token operator">-></span>_Next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h4><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710164835.png" loading="lazy"></p>
<hr>
<h3 id="set-x2F-multiset："><a href="#set-x2F-multiset：" class="headerlink" title="set&#x2F;multiset："></a>set&#x2F;multiset：</h3><p>（底层均为红黑树[平衡二叉树的一种]）</p>
<h4 id="平衡二叉树讲解："><a href="#平衡二叉树讲解：" class="headerlink" title="平衡二叉树讲解："></a>平衡二叉树讲解：</h4><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710163708.png" loading="lazy"></p>
<h4 id="set插入自定义数据类型："><a href="#set插入自定义数据类型：" class="headerlink" title="set插入自定义数据类型："></a>set插入自定义数据类型：</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span>  <span class="token comment">//set和multiset均使用此头文件</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>

<span class="token comment">//自定义类型</span>
class Person  
<span class="token punctuation">&#123;</span>
public<span class="token operator">:</span>
	<span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">m_strName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_nAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_nHeight</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

public<span class="token operator">:</span>
	string m_strName<span class="token punctuation">;</span>
	<span class="token keyword">int</span> m_nAge<span class="token punctuation">;</span>
	<span class="token keyword">int</span> m_nHeight<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//利用仿函数 指定set容器的排序</span>
class MyCompare 
<span class="token punctuation">&#123;</span>
public<span class="token operator">:</span>
	bool <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Person p1<span class="token punctuation">,</span> Person p2<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>m_nAge <span class="token operator">==</span> p2<span class="token punctuation">.</span>m_nAge<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> p1<span class="token punctuation">.</span>m_nHeight <span class="token operator">></span> p2<span class="token punctuation">.</span>m_nHeight<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		
		<span class="token keyword">return</span> p1<span class="token punctuation">.</span>m_nAge <span class="token operator">&lt;</span> p2<span class="token punctuation">.</span>m_nAge<span class="token punctuation">;</span>  <span class="token comment">//年龄从小到大排序</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">printfset</span><span class="token punctuation">(</span>multiset<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> MyCompare<span class="token operator">></span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>multiset<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> MyCompare<span class="token operator">></span><span class="token operator">::</span>iterator it <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名："</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_strName <span class="token operator">&lt;&lt;</span> <span class="token string">"  年龄："</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_nAge <span class="token operator">&lt;&lt;</span> <span class="token string">" 身高："</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_nHeight <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>



<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"p2"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"p3"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"p4"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p5</span><span class="token punctuation">(</span><span class="token string">"p5"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p6</span><span class="token punctuation">(</span><span class="token string">"p6"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p7</span><span class="token punctuation">(</span><span class="token string">"p7"</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">199</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//set&lt;Person> s;  //直接写，不知按照什么“大小规则”进行插入</span>
	<span class="token comment">//set&lt;Person, MyCompare> s;   //加入仿函数， 使用“自定义规则”插入排序</span>
	multiset<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> MyCompare<span class="token operator">></span> s<span class="token punctuation">;</span>   
	s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>
	s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p6<span class="token punctuation">)</span><span class="token punctuation">;</span>
	s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p7<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printfset</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h4><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710165205.png" loading="lazy"></p>
<hr>
<h3 id="map-x2F-multimap："><a href="#map-x2F-multimap：" class="headerlink" title="map&#x2F;multimap："></a>map&#x2F;multimap：</h3><p>（底层均为红黑树[平衡二叉树的一种]）</p>
<h4 id="multimap示例使用："><a href="#multimap示例使用：" class="headerlink" title="multimap示例使用："></a>multimap示例使用：</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span>

class Person
<span class="token punctuation">&#123;</span>
public<span class="token operator">:</span>
	<span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> string tel<span class="token punctuation">,</span> <span class="token keyword">int</span> salary<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">m_strName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_nAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span> 
		<span class="token function">m_strTel</span><span class="token punctuation">(</span>tel<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_nSalary</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

	string m_strName<span class="token punctuation">;</span>
	<span class="token keyword">int</span> m_nAge<span class="token punctuation">;</span>
	string m_strTel<span class="token punctuation">;</span>
	<span class="token keyword">int</span> m_nSalary<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//自定义数据类型</span>
	<span class="token comment">//创建对象</span>
	<span class="token comment">//仿函数（或回调函数）</span>
	<span class="token comment">//插入</span>
	<span class="token comment">//按照部门输出</span>
	Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">"0001"</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"p2"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">"0002"</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"p3"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">"0003"</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"p4"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">"0004"</span><span class="token punctuation">,</span>  <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p5</span><span class="token punctuation">(</span><span class="token string">"p5"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">"0005"</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p6</span><span class="token punctuation">(</span><span class="token string">"p6"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"0006"</span><span class="token punctuation">,</span>  <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p7</span><span class="token punctuation">(</span><span class="token string">"p7"</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"0007"</span><span class="token punctuation">,</span> <span class="token number">199</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> Person<span class="token operator">></span> m<span class="token punctuation">;</span>
	m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> p3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> p4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> p5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> p6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> p7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> Person<span class="token operator">></span><span class="token operator">::</span>iterator it <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"所属部门："</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">"   姓名："</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>second<span class="token punctuation">.</span>m_strName <span class="token operator">&lt;&lt;</span> <span class="token string">"   年龄："</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>second<span class="token punctuation">.</span>m_nAge
			<span class="token operator">&lt;&lt;</span> <span class="token string">"   电话号码："</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>second<span class="token punctuation">.</span>m_strTel <span class="token operator">&lt;&lt;</span> <span class="token string">"   薪资："</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>second<span class="token punctuation">.</span>m_nSalary <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="运行结果：-1"><a href="#运行结果：-1" class="headerlink" title="运行结果："></a>运行结果：</h4><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710165347.png" loading="lazy"></p>
<h2 id="本次心得："><a href="#本次心得：" class="headerlink" title="本次心得："></a>本次心得：</h2><p>学习是是一件让人开心的事情，但是写成博文，就是一件让人痛苦中快乐的事情</p>
<p><font color=#D0087E size=4 face="幼圆">当看到运行OK那的一刻，心里或许就是这样的</font></p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/gif/20190704175742.gif" loading="lazy"></p>
<hr>
<p><strong>本博文同步到csdn博客：</strong>  <a href="https://blog.csdn.net/qq_33154343/article/details/95358234">STL之常用容器string、vector、deque、stack、list、set、map讲解</a></p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序一 技法</category>
      </categories>
  </entry>
  <entry>
    <title>STL之类型异常处理、类型转换</title>
    <url>/posts/ddbf8a1d/</url>
    <content><![CDATA[<p>​			<strong>简述：</strong> 了解STL之异常处理、类型转换、书写一个简单地例子。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p><strong>编程环境：</strong>  win10 x64 专业版</p>
<p><strong>编程软件：</strong>  visual studio 2015， Qt 5.9.8</p>
<h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​		了解STL之异常处理、类型转换，书写一个简单地例子。</p>
<p>​        </p>
<p>下面逐一介绍这几种比较常见的知识点，算是一个知识点的几个归纳（比较简单地就没有列举出来，在此不做那种工具手册的知识罗列），知识归纳一些比较不容易的掌握的点，属于进阶知识内容。</p>
<h2 id="c-x2F-c-异常的基本语法："><a href="#c-x2F-c-异常的基本语法：" class="headerlink" title="c&#x2F;c++异常的基本语法："></a>c&#x2F;c++异常的基本语法：</h2><h3 id="大纲如图："><a href="#大纲如图：" class="headerlink" title="大纲如图："></a>大纲如图：</h3><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710161033.png" loading="lazy"></p>
<h3 id="知识点讲解："><a href="#知识点讲解：" class="headerlink" title="知识点讲解："></a>知识点讲解：</h3><ul>
<li>c方式：</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">返回 <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>  无法辨别是返回值还是异常<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<ul>
<li>c++方式：</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">try
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"int 的异常"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//double捕获，不想处理异常，就继续往上跑出异常</span>
	throw<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">catch</span><span class="token punctuation">(</span>MyException e<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"int 的异常"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"其他类型的 的异常处理"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//return -1 ;   //c语言的缺陷</span>

	<span class="token comment">//抛出异常</span>
	<span class="token comment">//throw 1;</span>
	<span class="token comment">//throw 3.14;</span>
	<span class="token comment">//throw 'a';</span>

	<span class="token comment">//栈解旋：从try代码块开始起，到throw抛出异常前，所有栈上的对象都被释放掉，</span>
    <span class="token comment">//释放的顺序和构造的顺序是相反的，这个过程称为栈解旋</span>

	Person p1<span class="token punctuation">;</span>
	Person p2<span class="token punctuation">;</span>
	throw <span class="token function">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；<span class="token comment">//抛出一个MyException匿名对象</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//++++++++++++++++++++++++++++</span>
<span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">throwMyException</span><span class="token punctuation">(</span>）；
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> test01<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	try
	<span class="token punctuation">&#123;</span>
		doWork（）；
	<span class="token punctuation">&#125;</span>
	<span class="token comment">//MyException e会调用拷贝构造</span>
	<span class="token comment">//MyException &amp;e 引用方式接受建议用这种方式节省开销</span>
	<span class="token comment">//MyException *e 指针方式接受抛出&amp;MyException（）；匿名对象，对象被释放掉，不可以再操作e了</span>
	<span class="token comment">//MyException *e 指针方式接受抛出new MyException（）；堆区创建的对象记得手动释放 deletee；</span>
	catch （MyExceptione <span class="token operator">&amp;</span>e<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span>\"MyException的异常捕获\"<span class="token operator">&lt;&lt;</span>end；
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>本博文同步到csdn博客：</strong>  <a href="https://blog.csdn.net/qq_33154343/article/details/95357944">STL之类型异常处理、类型转换</a></p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序一 技法</category>
      </categories>
  </entry>
  <entry>
    <title>STL模板set/multiset容器插入自定义数据类型排序</title>
    <url>/posts/a5ad800d/</url>
    <content><![CDATA[<p>​		<strong>简述：</strong>  解决错误error C2678 类型方案<code>1&gt;c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef(239): error C2678: 二进制“&lt;”: 没有找到接受“const Person”类型的左操作数的运算符(或没有可接受的转换)</code></p>
<p>​		另外单独举一个完整示例。使用<code>STL</code>  模板的<code>set</code>容器，对自定义的数据类型，进行相应的插入和排序。具体使用了<code>set</code>和<code>multiset</code>进行举例子，他们的区别和联系，和<strong>使用自定义规则</strong>进行插入排序。以及<strong>二级排序</strong>的示范</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p><strong>编程环境：</strong>  win10 x64 专业版</p>
<p><strong>编程软件：</strong>  visual studio 2015， Qt 5.9.8</p>
<h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​		解决错误error C2678 类型方案</p>
<p><code>1&gt;c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef(239): error C2678: 二进制“&lt;”: 没有找到接受“const Person”类型的左操作数的运算符(或没有可接受的转换)</code></p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190706194654.png" loading="lazy"></p>
<p>另外单独举一个完整示例。使用<code>STL</code> 模板的<code>set</code>容器，对自定义的数据类型，进行相应的插入和排序。具体使用了<code>set</code>和<code>multiset</code>进行举例子，他们的区别和联系，和<strong>使用自定义规则</strong>进行插入排序。以及<strong>二级排序</strong>的示范</p>
<h2 id="错误原因："><a href="#错误原因：" class="headerlink" title="错误原因："></a>错误原因：</h2><p>使用<code>STL</code>  模板的<code>set</code>容器，对自定义的数据类型，进行相应的插入和排序时候。这里需要重载<code>()</code>函数，不然的话，在stl的源码底层调用的时候，会不认识。</p>
<p>会在11行崩溃（如下为STL底层源码查看）。就因为不知道怎么按照（自定义的类型的）<strong>什么规则</strong>进行插入数据到容器。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">		<span class="token comment">// TEMPLATE STRUCT less</span>
template<span class="token operator">&lt;</span>class _Ty <span class="token operator">=</span> <span class="token keyword">void</span><span class="token operator">></span>
	<span class="token keyword">struct</span> <span class="token class-name">less</span>
	<span class="token punctuation">&#123;</span>	<span class="token comment">// functor for operator&lt;</span>
	<span class="token keyword">typedef</span> _Ty first_argument_type<span class="token punctuation">;</span>
	<span class="token keyword">typedef</span> _Ty second_argument_type<span class="token punctuation">;</span>
	<span class="token keyword">typedef</span> bool result_type<span class="token punctuation">;</span>

	constexpr bool <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Ty<span class="token operator">&amp;</span> _Left<span class="token punctuation">,</span> <span class="token keyword">const</span> _Ty<span class="token operator">&amp;</span> _Right<span class="token punctuation">)</span> <span class="token keyword">const</span>
		<span class="token punctuation">&#123;</span>	<span class="token comment">// apply operator&lt; to operands</span>
		<span class="token keyword">return</span> <span class="token punctuation">(</span>_Left <span class="token operator">&lt;</span> _Right<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>使用重载的初始化函数，添加一个仿函数，或者回调函数（其他容器），进行使用</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">set<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> MyCompare<span class="token operator">></span> s<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>如下举一个完成的实例。</p>
<p>具体使用了<code>set</code>和<code>multiset</code>进行举例子，他们的区别和联系，和<strong>使用自定义规则</strong>进行插入排序。以及<strong>二级排序</strong>的示范</p>
<h2 id="项目背景："><a href="#项目背景：" class="headerlink" title="项目背景："></a>项目背景：</h2><p>演示<code>set</code>和<code>multiset</code>的用法，其中multiset和set一样，唯一区别：允许键值重复。</p>
<p>使用<code>multiset</code>对多个数据对象，进行&#x3D;&#x3D;一定规则（二级排序方式）&#x3D;&#x3D;插入到容器里面。</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190706192722.png" loading="lazy"></p>
<h2 id="思路架构："><a href="#思路架构：" class="headerlink" title="思路架构："></a>思路架构：</h2><ul>
<li><p>创新自定义的<code>Person</code>数据类型</p>
</li>
<li><p>创建<code>Person</code>对象</p>
</li>
<li><p>创建仿函数**<code>MyCompare</code>**，</p>
</li>
<li><p>创建容器<code>s</code></p>
</li>
<li><p>将<code>Person</code>对象插入<code>multiset</code>容器（为了演示二级排序，需要有重复的数值，故使用multiset）</p>
</li>
<li><p>打印容器<code>s</code>里面的结果</p>
</li>
</ul>
<h2 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h2><p>上代码：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span>  <span class="token comment">//set和multiset均使用此头文件</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>


<span class="token comment">//自定义类型</span>
class Person  
<span class="token punctuation">&#123;</span>
public<span class="token operator">:</span>
	<span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">m_strname</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_nAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_nHeight</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

public<span class="token operator">:</span>
	string m_strname<span class="token punctuation">;</span>
	<span class="token keyword">int</span> m_nAge<span class="token punctuation">;</span>
	<span class="token keyword">int</span> m_nHeight<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


<span class="token comment">//利用仿函数 指定set容器的排序</span>
class MyCompare 
<span class="token punctuation">&#123;</span>
public<span class="token operator">:</span>
	bool <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Person p1<span class="token punctuation">,</span> Person p2<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>m_nAge <span class="token operator">==</span> p2<span class="token punctuation">.</span>m_nAge<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> p1<span class="token punctuation">.</span>m_nHeight <span class="token operator">></span> p2<span class="token punctuation">.</span>m_nHeight<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		
		<span class="token keyword">return</span> p1<span class="token punctuation">.</span>m_nAge <span class="token operator">&lt;</span> p2<span class="token punctuation">.</span>m_nAge<span class="token punctuation">;</span>  <span class="token comment">//年龄从小到大排序</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>



<span class="token keyword">void</span> <span class="token function">printfSet</span><span class="token punctuation">(</span>multiset<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> MyCompare<span class="token operator">></span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>multiset<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> MyCompare<span class="token operator">></span><span class="token operator">::</span>iterator it <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名："</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_strname <span class="token operator">&lt;&lt;</span> <span class="token string">"  年龄："</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_nAge <span class="token operator">&lt;&lt;</span> <span class="token string">" 身高："</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_nHeight <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>



<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"p2"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"p3"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"p4"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p5</span><span class="token punctuation">(</span><span class="token string">"p5"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p6</span><span class="token punctuation">(</span><span class="token string">"p6"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p7</span><span class="token punctuation">(</span><span class="token string">"p7"</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">199</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//set&lt;Person> s;  //直接写，不知按照什么“大小规则”进行插入</span>
	<span class="token comment">//set&lt;Person, MyCompare> s;   //加入仿函数， 使用“自定义规则”插入排序</span>
	multiset<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> MyCompare<span class="token operator">></span> s<span class="token punctuation">;</span>   
	s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>
	s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p6<span class="token punctuation">)</span><span class="token punctuation">;</span>
	s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p7<span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token function">printfSet</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>

	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





<h2 id="运行演示："><a href="#运行演示：" class="headerlink" title="运行演示："></a>运行演示：</h2><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190706193625.png" loading="lazy"></p>
<h2 id="细节方面："><a href="#细节方面：" class="headerlink" title="细节方面："></a>细节方面：</h2><p>注意分析这一段，其他容器可能会是 <strong>回调函数（函数指针）</strong>;</p>
<p>如下自定义的数据类型规则排序是：</p>
<ol>
<li><strong>先按照年龄排序，年龄由小到大</strong></li>
<li><strong>若年龄相同，则按照身高由大到小排序</strong></li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//利用仿函数 指定set容器的排序</span>
class MyCompare 
<span class="token punctuation">&#123;</span>
public<span class="token operator">:</span>
	bool <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Person p1<span class="token punctuation">,</span> Person p2<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>m_nAge <span class="token operator">==</span> p2<span class="token punctuation">.</span>m_nAge<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> p1<span class="token punctuation">.</span>m_nHeight <span class="token operator">></span> p2<span class="token punctuation">.</span>m_nHeight<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		
		<span class="token keyword">return</span> p1<span class="token punctuation">.</span>m_nAge <span class="token operator">&lt;</span> p2<span class="token punctuation">.</span>m_nAge<span class="token punctuation">;</span>  <span class="token comment">//年龄从小到大排序</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>这里需要重载<code>()</code>函数，不然的话，在stl的源码底层调用的时候，否则会不认识。</p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序一 技法</category>
      </categories>
  </entry>
  <entry>
    <title>STL模板，内建函数对象(仿函数)的讲解运用和示范：greater()</title>
    <url>/posts/d62f1935/</url>
    <content><![CDATA[<p>​			<strong>简述：</strong> 对于 <code>内建函数对象</code>（#include <functional>）的算术、关系、逻辑类的函数对象（<code>仿函</code>数），做一个讲解和小例子的应用，并且简单地探究一下原理。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p><strong>编程环境：</strong>  win10 x64 专业版</p>
<p><strong>编程软件：</strong>  visual studio 2015， Qt 5.9.8</p>
<h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​		对于 <code>内建函数对象</code>（#include <functional>）的算术、关系、逻辑类的函数对象（<code>仿函</code>数），做一个讲解和小例子的应用，并且简单地探究一下原理。</p>
<h2 id="讲解大纲："><a href="#讲解大纲：" class="headerlink" title="讲解大纲："></a>讲解大纲：</h2><p>简单说一下，什么叫做<code>内建函数对象</code><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708162640.png" loading="lazy"></p>
<p>其中完整的定义如下：</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708162823.png" loading="lazy"></p>
<p>其所拥有的具体的所有的函数接口，如下图所示。在这里只是将其中几个典型的接口是实例一下如何使用。</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708162856.png" loading="lazy"></p>
<h2 id="关系运算类函数对象："><a href="#关系运算类函数对象：" class="headerlink" title="关系运算类函数对象："></a>关系运算类函数对象：</h2><h3 id="大于仿函数："><a href="#大于仿函数：" class="headerlink" title="大于仿函数："></a>大于仿函数：</h3><p>template<class> T greater<T> &#x2F;&#x2F;大于仿函数</p>
<h4 id="心得思考："><a href="#心得思考：" class="headerlink" title="心得思考："></a>心得思考：</h4><p>添加头文件不可忘记，要各自对应，在使用<code>sort(三个参数)</code>的时候，<font color=#FE7207 size=3 face="幼圆">第三个参数，通常为自定义的  函数对象（仿函数）</font>。因为默认使用<code>sort(两个参数)</code>的使用，<font color=#FE7207  size=3 face="幼圆">其底层也是默认调用的 系统的默认的内建函数对象<code>less&lt;&gt;()</code>(六个关系运算类函数对象的倒数第二个)</font>。</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708164909.png" loading="lazy"></p>
<h4 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h4><p>创建一个控的项目，再添加一个空的main.cpp,在里面添加如下代码:</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  <span class="token comment">//算法</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//内建函数对象</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//内建关系函数对象（无名 临时对象）greater&lt;int>()   大于</span>
	<span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="运行演示："><a href="#运行演示：" class="headerlink" title="运行演示："></a>运行演示：</h4><p>默认排序是从小到大，而这里结果是从大到小，复合结果的预期。</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708193257.png" loading="lazy"></p>
<h4 id="细节方面："><a href="#细节方面：" class="headerlink" title="细节方面："></a>细节方面：</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//内建关系函数对象（无名 临时对象）greater&lt;int>()   大于   //内建关系函数对象（无名 临时对象）greater&lt;int>()   大于</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>可以替换成，</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>再查看运行结果为：</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708165544.png" loading="lazy"></p>
<h2 id="算数类函数对象："><a href="#算数类函数对象：" class="headerlink" title="算数类函数对象："></a>算数类函数对象：</h2><h3 id="取反仿函数："><a href="#取反仿函数：" class="headerlink" title="取反仿函数："></a>取反仿函数：</h3><p>（template<class> T negate<T> &#x2F;&#x2F;取反仿函数）</p>
<p>仿照上面，重点会在下面的一篇文章<a href="https://touwoyimuli.github.io/2019/07/08/STL%E6%A8%A1%E6%9D%BF%EF%BC%8C%E9%80%82%E9%85%8D%E5%99%A8%E7%9A%84%E8%AE%B2%E8%A7%A3%E8%BF%90%E7%94%A8%E5%92%8C%E7%A4%BA%E8%8C%83%EF%BC%9A%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E9%80%82%E9%85%8D%E5%99%A8%E3%80%81%E5%8F%96%E5%8F%8D%E9%80%82%E9%85%8D%E5%99%A8%E3%80%81%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E9%80%82%E9%85%8D%E5%99%A8%E3%80%81%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E9%80%82%E9%85%8D%E5%99%A8/">STL模板，适配器的讲解运用和示范：函数对象适配器、、函数指针适配器、成员函数适配器</a>，适配器相关里面再继续运行用到。</p>
<h3 id="加法仿函数："><a href="#加法仿函数：" class="headerlink" title="加法仿函数："></a>加法仿函数：</h3><p>（template<class> T plus<T> &#x2F;&#x2F;加法仿函数） </p>
<p>仿照上面，重点会在下面的一篇文章<a href="https://touwoyimuli.github.io/2019/07/08/STL%E6%A8%A1%E6%9D%BF%EF%BC%8C%E9%80%82%E9%85%8D%E5%99%A8%E7%9A%84%E8%AE%B2%E8%A7%A3%E8%BF%90%E7%94%A8%E5%92%8C%E7%A4%BA%E8%8C%83%EF%BC%9A%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E9%80%82%E9%85%8D%E5%99%A8%E3%80%81%E5%8F%96%E5%8F%8D%E9%80%82%E9%85%8D%E5%99%A8%E3%80%81%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E9%80%82%E9%85%8D%E5%99%A8%E3%80%81%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E9%80%82%E9%85%8D%E5%99%A8/">STL模板，适配器的讲解运用和示范：函数对象适配器、、函数指针适配器、成员函数适配器</a>，适配器相关里面再继续运行用到。</p>
<h2 id="逻辑运算类仿函数-："><a href="#逻辑运算类仿函数-：" class="headerlink" title="逻辑运算类仿函数 ："></a>逻辑运算类仿函数 ：</h2><p>仿照上面，重点会在下面的一篇文章<a href="https://touwoyimuli.github.io/2019/07/08/STL%E6%A8%A1%E6%9D%BF%EF%BC%8C%E9%80%82%E9%85%8D%E5%99%A8%E7%9A%84%E8%AE%B2%E8%A7%A3%E8%BF%90%E7%94%A8%E5%92%8C%E7%A4%BA%E8%8C%83%EF%BC%9A%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E9%80%82%E9%85%8D%E5%99%A8%E3%80%81%E5%8F%96%E5%8F%8D%E9%80%82%E9%85%8D%E5%99%A8%E3%80%81%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E9%80%82%E9%85%8D%E5%99%A8%E3%80%81%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E9%80%82%E9%85%8D%E5%99%A8/">STL模板，适配器的讲解运用和示范：函数对象适配器、、函数指针适配器、成员函数适配器</a>，适配器相关里面再继续运行用到。</p>
<h2 id="使用无名的临时对象："><a href="#使用无名的临时对象：" class="headerlink" title="使用无名的临时对象："></a>使用无名的临时对象：</h2><p>这是一个很重要的骚操作。</p>
<p><font color=#D0087E size=4 face="幼圆">当看到运行符合预想那的一刻，心里是开心的，然后接着继续敲敲敲！！！</font></p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/gif/20190704180218.gif" loading="lazy"></p>
<hr>
<p><strong>本博文同步到csdn博客：</strong> <a href="https://blog.csdn.net/qq_33154343/article/details/95089598">STL模板，内建函数对象(仿函数)的讲解运用和示范：greater()</a></p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序一 技法</category>
      </categories>
  </entry>
  <entry>
    <title>STL模板，适配器的讲解运用和示范：函数对象适配器、函数指针适配器、成员函数适配器</title>
    <url>/posts/d8f9e0ff/</url>
    <content><![CDATA[<p>​			<strong>简述：</strong>对于 <code>适配器</code>的函数对象适配器、取反适配器、函数指针适配器、成员函数适配器，做一个讲解和小例子的应用，并且简单地探究一下原理。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p><strong>编程环境：</strong>  win10 x64 专业版</p>
<p><strong>编程软件：</strong>  visual studio 2015， Qt 5.9.8</p>
<h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​		对于 <code>适配器</code>的函数对象适配器、取反适配器、函数指针适配器、成员函数适配器，做一个讲解和小例子的应用，并且简单地探究一下原理。</p>
<h2 id="讲解大纲："><a href="#讲解大纲：" class="headerlink" title="讲解大纲："></a>讲解大纲：</h2><p>简单说一下，什么叫做<code>适配器</code>，先演示一下子大纲</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708171220.png" loading="lazy"></p>
<p>其作用，个人理解，相当于<code>接口适配器</code>，生活中的类似于一个USB扩展坞，将电脑的一个USB3.0接口扩展成为有着多个USB3.0接口的排插。code里面相当于反过来看，将二个参数合并成为一个参数，进行输入输出。</p>
<p><strong>例子：</strong> 将<code>函数指针 + 变量</code>通过bind绑定成为一个<code>对象参数</code>。</p>
<h2 id="函数对象适配器"><a href="#函数对象适配器" class="headerlink" title="函数对象适配器"></a>函数对象适配器</h2><h4 id="初始代码："><a href="#初始代码：" class="headerlink" title="初始代码："></a>初始代码：</h4><p>初始代码：这一个打印的结果，后面的修改，在这里代码之上修改和演示</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  <span class="token comment">//算法</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//内建函数对象</span></span>

class MyPrint
<span class="token punctuation">&#123;</span>
public<span class="token operator">:</span>
	<span class="token keyword">void</span> <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">"   "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">MyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行结果:</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708173610.png" loading="lazy"></p>
<h4 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h4><ol>
<li>将参数进行绑定 <code>bind2nd()</code></li>
<li>做继承  <code>binary_function&lt;类型1， 类型2， 返回值类型&gt;</code></li>
<li>加 <code>const</code>，因为继承<code>binary_function</code>时候，其作为父类已经<code>重载()</code>作为常函数</li>
</ol>
<p>配图文解说，这个算是图文并茂了</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708175525.png" loading="lazy"></p>
<h4 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h4><p>创建一个控的项目，再添加一个空的main.cpp,在里面添加如下代码:</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  <span class="token comment">//算法</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//内建函数对象</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//适配器</span></span>

<span class="token comment">//函数对象适配器</span>
class MyPrint<span class="token operator">:</span> public binary_function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">></span>
<span class="token punctuation">&#123;</span>
public<span class="token operator">:</span>
	<span class="token keyword">void</span> <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> nBase<span class="token punctuation">)</span> <span class="token keyword">const</span>
	<span class="token punctuation">&#123;</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"val:"</span> <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">"   nBase:"</span> <span class="token operator">&lt;&lt;</span> nBase <span class="token operator">&lt;&lt;</span> <span class="token string">"   val+nBase:"</span> <span class="token operator">&lt;&lt;</span> val <span class="token operator">+</span> nBase <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">int</span> nBase <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bind2nd</span><span class="token punctuation">(</span><span class="token function">MyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nBase<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="运行演示："><a href="#运行演示：" class="headerlink" title="运行演示："></a>运行演示：</h4><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708193108.png" loading="lazy"></p>
<h4 id="细节方面："><a href="#细节方面：" class="headerlink" title="细节方面："></a>细节方面：</h4><p>将上面30行代码做如下的变动，再次运行，观察和上一次的结果<strong>稍有区别</strong></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//for_each(v.begin(), v.end(), bind2nd(MyPrint(), nBase) );</span>
<span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bind1st</span><span class="token punctuation">(</span><span class="token function">MyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nBase<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708175831.png" loading="lazy"></p>
<h4 id="心得思考："><a href="#心得思考：" class="headerlink" title="心得思考："></a>心得思考：</h4><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708190801.png" loading="lazy"></p>
<h2 id="取反适配器："><a href="#取反适配器：" class="headerlink" title="取反适配器："></a>取反适配器：</h2><h3 id="初始代码：-1"><a href="#初始代码：-1" class="headerlink" title="初始代码："></a>初始代码：</h3><p>初始代码：这一个打印的结果，后面的修改，在这里代码之上修改和演示</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  <span class="token comment">//算法</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//内建函数对象</span></span>

<span class="token comment">//02取反适配器</span>
class MyFindFour
<span class="token punctuation">&#123;</span>
public<span class="token operator">:</span>
	bool <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">return</span> val <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator pos <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">MyFindFour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"大于4的数值为:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pos <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 
	<span class="token keyword">else</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"无"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><em><strong>“1  3  4  2  6  5”从左往右开始遍历</strong></em>，第一个大于4的数值就是6</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708181248.png" loading="lazy"></p>
<h3 id="使用步骤：-1"><a href="#使用步骤：-1" class="headerlink" title="使用步骤："></a>使用步骤：</h3><ol>
<li>一元取反 <code>not1</code></li>
<li>继承 <code>unary_function</code></li>
<li>加 <code>const</code></li>
</ol>
<p>如上三处修改，也可参照上面的<em><strong>函数对象适配器</strong></em>的 图文并茂的这一部分，理解修改的部分。</p>
<h3 id="代码演示：-1"><a href="#代码演示：-1" class="headerlink" title="代码演示："></a>代码演示：</h3><p>创建一个控的项目，再添加一个空的main.cpp,在里面添加如下代码:</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  <span class="token comment">//算法</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//内建函数对象</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//适配器</span></span>

<span class="token comment">//02取反适配器</span>
class MyFindFour<span class="token operator">:</span> public unary_function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> bool<span class="token operator">></span>
<span class="token punctuation">&#123;</span>
public<span class="token operator">:</span>
	bool <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span>  <span class="token keyword">const</span>
	<span class="token punctuation">&#123;</span><span class="token keyword">return</span> val <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator pos <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">not1</span><span class="token punctuation">(</span><span class="token function">MyFindFour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"大(划掉，改小)于4的数值为:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pos <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 
	<span class="token keyword">else</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"无"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="运行演示：-1"><a href="#运行演示：-1" class="headerlink" title="运行演示："></a>运行演示：</h3><p>运行结果: <em><strong>“1  3  4  2  6  5”从左往右开始遍历</strong></em>，第一个小于4的数值就是1</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708182733.png" loading="lazy"></p>
<h3 id="细节方面：-1"><a href="#细节方面：-1" class="headerlink" title="细节方面："></a>细节方面：</h3><p>将上面的27行代码做如下的变动，再次运行，观察和上一次的结果<strong>没有区别</strong>，但是写法却更加高级，越加活学活用。</p>
<p>这样写的优点：可以将10行<code>class MyFindFour: public unary_function&lt;int, bool&gt;</code>里面的具体数字4，写到外面来，可以修改成任意的数值，不再受局限</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//vector&lt;int>::iterator pos = find_if(v.begin(), v.end(), not1(MyFindFour()));</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator pos <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">not1</span><span class="token punctuation">(</span><span class="token function">bind2nd</span><span class="token punctuation">(</span>greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708182733.png" loading="lazy"></p>
<h3 id="心得思考：-1"><a href="#心得思考：-1" class="headerlink" title="心得思考："></a>心得思考：</h3><h3 id="注意区别："><a href="#注意区别：" class="headerlink" title="注意区别："></a>注意区别：</h3><h2 id="函数指针适配器："><a href="#函数指针适配器：" class="headerlink" title="函数指针适配器："></a>函数指针适配器：</h2><h3 id="初始代码：-2"><a href="#初始代码：-2" class="headerlink" title="初始代码："></a>初始代码：</h3><p>初始代码：这一个打印的结果，后面的修改，在这里代码之上修改和演示</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  <span class="token comment">//算法</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//内建函数对象</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//适配器</span></span>

<span class="token comment">//03函数指针适配器</span>
<span class="token keyword">void</span> <span class="token function">MyPrintf</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	cout <span class="token operator">&lt;&lt;</span> val<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MyPrintf<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//注意这一行，参数3 是使用的函数指针</span>
	cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708183636.png" loading="lazy"></p>
<h3 id="使用步骤：-2"><a href="#使用步骤：-2" class="headerlink" title="使用步骤："></a>使用步骤：</h3><ol>
<li>先使用<code>ptr_fun()</code>将<code>MyPrintf函数指针</code>便成为<strong>对象</strong>，</li>
<li>然后再用<code>bind2nd()</code>绑定</li>
<li>修改需要绑定多个参数的<code>函数MyPrintf()</code></li>
</ol>
<h3 id="代码演示：-2"><a href="#代码演示：-2" class="headerlink" title="代码演示："></a>代码演示：</h3><p>创建一个控的项目，再添加一个空的main.cpp,在里面添加如下代码:</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  <span class="token comment">//算法</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//内建函数对象</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//适配器</span></span>

<span class="token comment">//03函数指针适配器</span>
<span class="token keyword">void</span> <span class="token function">MyPrintf</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> nBase<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"val:"</span> <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">"   nBase:"</span> <span class="token operator">&lt;&lt;</span> nBase <span class="token operator">&lt;&lt;</span> <span class="token string">"   val+nBase:"</span> <span class="token operator">&lt;&lt;</span> val <span class="token operator">+</span> nBase <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> nBase <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
	<span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bind2nd</span><span class="token punctuation">(</span><span class="token function">ptr_fun</span><span class="token punctuation">(</span>MyPrintf<span class="token punctuation">)</span><span class="token punctuation">,</span> nBase<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//注意这一行，参数3 是使用的函数指针</span>
	cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="运行演示：-2"><a href="#运行演示：-2" class="headerlink" title="运行演示："></a>运行演示：</h3><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708184240.png" loading="lazy"></p>
<h3 id="细节方面：-2"><a href="#细节方面：-2" class="headerlink" title="细节方面："></a>细节方面：</h3><p>注意这一行是怎么修改的，以及还需要修改的地方</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bind2nd</span><span class="token punctuation">(</span><span class="token function">ptr_fun</span><span class="token punctuation">(</span>MyPrintf<span class="token punctuation">)</span><span class="token punctuation">,</span> nBase<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//注意这一行，参数3 是使用的函数指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="心得思考：-2"><a href="#心得思考：-2" class="headerlink" title="心得思考："></a>心得思考：</h3><h2 id="成员函数适配器："><a href="#成员函数适配器：" class="headerlink" title="成员函数适配器："></a>成员函数适配器：</h2><h3 id="初始代码：-3"><a href="#初始代码：-3" class="headerlink" title="初始代码："></a>初始代码：</h3><p>初始代码：这一个打印的结果，后面的修改，在这里代码之上修改和演示</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  <span class="token comment">//算法</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//内建函数对象</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//适配器</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>

<span class="token comment">//04成员函数适配器</span>
class Person
<span class="token punctuation">&#123;</span>
public<span class="token operator">:</span>
	<span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">m_strName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_nAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

public<span class="token operator">:</span>
	string m_strName<span class="token punctuation">;</span>
	<span class="token keyword">int</span> m_nAge<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">MyPrintf04</span><span class="token punctuation">(</span>Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"函数MyPrintf04==》  姓名："</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_strName <span class="token operator">&lt;&lt;</span> <span class="token string">"   年龄："</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_nAge <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"p2"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"p3"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"p4"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p5</span><span class="token punctuation">(</span><span class="token string">"p5"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p6</span><span class="token punctuation">(</span><span class="token string">"p6"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	vector<span class="token operator">&lt;</span>Person<span class="token operator">></span> v<span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p6<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MyPrintf04<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//注意这一行，参数3 是使用的函数指针</span>
	cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708185700.png" loading="lazy"></p>
<h3 id="使用步骤：-3"><a href="#使用步骤：-3" class="headerlink" title="使用步骤："></a>使用步骤：</h3><ol>
<li>取到成员函数的地址<code>&amp;Person::MyPrintfPerson</code></li>
<li>通过<code>mem_fun_ref()</code>对成员函数进行适配</li>
</ol>
<h3 id="代码演示：-3"><a href="#代码演示：-3" class="headerlink" title="代码演示："></a>代码演示：</h3><p>创建一个控的项目，再添加一个空的main.cpp,在里面添加如下代码:</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  <span class="token comment">//算法</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//内建函数对象</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//适配器</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>

<span class="token comment">//04成员函数适配器</span>
class Person
<span class="token punctuation">&#123;</span>
public<span class="token operator">:</span>
	<span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">m_strName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_nAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

	<span class="token keyword">void</span> <span class="token function">MyPrintfPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"类的成员函数MyPrintfPerson==》  姓名："</span> <span class="token operator">&lt;&lt;</span> m_strName <span class="token operator">&lt;&lt;</span> <span class="token string">"   年龄："</span> <span class="token operator">&lt;&lt;</span> m_nAge <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

public<span class="token operator">:</span>
	string m_strName<span class="token punctuation">;</span>
	<span class="token keyword">int</span> m_nAge<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">MyPrintf04</span><span class="token punctuation">(</span>Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"函数MyPrintf04==》  姓名："</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_strName <span class="token operator">&lt;&lt;</span> <span class="token string">"   年龄："</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_nAge <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"p2"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"p3"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"p4"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p5</span><span class="token punctuation">(</span><span class="token string">"p5"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p6</span><span class="token punctuation">(</span><span class="token string">"p6"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	vector<span class="token operator">&lt;</span>Person<span class="token operator">></span> v<span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p6<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//for_each(v.begin(), v.end(), MyPrintf04);  //注意这一行，参数3 是使用的函数指针</span>
	<span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mem_fun_ref</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Person<span class="token operator">::</span>MyPrintfPerson<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//注意这一行，参数3 是使用的函数指针</span>
	cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="运行演示：-3"><a href="#运行演示：-3" class="headerlink" title="运行演示："></a>运行演示：</h3><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708190104.png" loading="lazy"></p>
<h3 id="细节方面：-3"><a href="#细节方面：-3" class="headerlink" title="细节方面："></a>细节方面：</h3><p>不用再去修改类的成员函数</p>
<h3 id="心得思考：-3"><a href="#心得思考：-3" class="headerlink" title="心得思考："></a>心得思考：</h3><p>这个算是这些里面，最简单方便的一个方法了的吧，个人感觉。</p>
<h2 id="邂逅感："><a href="#邂逅感：" class="headerlink" title="邂逅感："></a>邂逅感：</h2><p>写完这一篇博客，感觉耗费时间还是比较久的，虽然知识点比较简单，但是为了简单说清楚，图文并茂，还是花了两个小时的。算是比较适合对新人小白入门的一个友好的教程，毕竟第一次接触c++的适配器，可能会感觉比较玄乎，希望这一篇可以帮到大家。（如果觉得真的有帮助到你，还觉得本文写的不错，可以适当点个赞，让更多的人可以看到。觉得一般的话，可以看过就就过了。）</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708191412.png" loading="lazy"></p>
<p><font color=#D0087E size=4 face="幼圆">当看到弄清知识点的时候，或者帮助到有需要的人的时候，毕竟我的心里是开心的，然后接着继续敲敲敲！！！</font></p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/gif/20190704180218.gif" loading="lazy"></p>
<h2 id="代码下载："><a href="#代码下载：" class="headerlink" title="代码下载："></a>代码下载：</h2><p>想一了下，虽然上面都还是单独可以运行代码，当时是决定把代码集合发布出来，可以当做一个代码查看：与那比较四种不同的适配器的区别：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  <span class="token comment">//算法</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//内建函数对象</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//适配器</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>

<span class="token comment">//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="token comment">//01 函数对象适配器</span>
class MyPrint<span class="token operator">:</span> public binary_function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">></span>
<span class="token punctuation">&#123;</span>
public<span class="token operator">:</span>
	<span class="token keyword">void</span> <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> nBase<span class="token punctuation">)</span> <span class="token keyword">const</span>
	<span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"val:"</span> <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">"   nBase:"</span> <span class="token operator">&lt;&lt;</span> nBase <span class="token operator">&lt;&lt;</span> <span class="token string">"   val+nBase:"</span> <span class="token operator">&lt;&lt;</span> val <span class="token operator">+</span> nBase <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> nBase <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bind2nd</span><span class="token punctuation">(</span><span class="token function">MyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nBase<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//for_each(v.begin(), v.end(), bind1st(MyPrint(), nBase));</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="token comment">//02取反适配器</span>
class MyFindFour<span class="token operator">:</span> public unary_function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> bool<span class="token operator">></span>
<span class="token punctuation">&#123;</span>
public<span class="token operator">:</span>
	bool <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span>  <span class="token keyword">const</span>
	<span class="token punctuation">&#123;</span><span class="token keyword">return</span> val <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//vector&lt;int>::iterator pos = find_if(v.begin(), v.end(), not1(MyFindFour()));</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator pos <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">not1</span><span class="token punctuation">(</span><span class="token function">bind2nd</span><span class="token punctuation">(</span>greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"大(划掉，改小)于4的数值为:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pos <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 
	<span class="token keyword">else</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"无"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="token comment">//03函数指针适配器</span>
<span class="token keyword">void</span> <span class="token function">MyPrintf</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> nBase<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"val:"</span> <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">"   nBase:"</span> <span class="token operator">&lt;&lt;</span> nBase <span class="token operator">&lt;&lt;</span> <span class="token string">"   val+nBase:"</span> <span class="token operator">&lt;&lt;</span> val <span class="token operator">+</span> nBase <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> nBase <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
	<span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bind2nd</span><span class="token punctuation">(</span><span class="token function">ptr_fun</span><span class="token punctuation">(</span>MyPrintf<span class="token punctuation">)</span><span class="token punctuation">,</span> nBase<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//注意这一行，参数3 是使用的函数指针</span>
	cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="token comment">//04成员函数适配器</span>
class Person
<span class="token punctuation">&#123;</span>
public<span class="token operator">:</span>
	<span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">m_strName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_nAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

	<span class="token keyword">void</span> <span class="token function">MyPrintfPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"类的成员函数MyPrintfPerson==》  姓名："</span> <span class="token operator">&lt;&lt;</span> m_strName <span class="token operator">&lt;&lt;</span> <span class="token string">"   年龄："</span> <span class="token operator">&lt;&lt;</span> m_nAge <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

public<span class="token operator">:</span>
	string m_strName<span class="token punctuation">;</span>
	<span class="token keyword">int</span> m_nAge<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">MyPrintf04</span><span class="token punctuation">(</span>Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"函数MyPrintf04==》  姓名："</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_strName <span class="token operator">&lt;&lt;</span> <span class="token string">"   年龄："</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_nAge <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>



<span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"p2"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"p3"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"p4"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p5</span><span class="token punctuation">(</span><span class="token string">"p5"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p6</span><span class="token punctuation">(</span><span class="token string">"p6"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	vector<span class="token operator">&lt;</span>Person<span class="token operator">></span> v<span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p6<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//for_each(v.begin(), v.end(), MyPrintf04);  //注意这一行，参数3 是使用的函数指针</span>
	<span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mem_fun_ref</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Person<span class="token operator">::</span>MyPrintfPerson<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//注意这一行，参数3 是使用的函数指针</span>

	cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//test01();</span>
	<span class="token comment">//test02();</span>
	<span class="token comment">//test03();</span>
	<span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<hr>
<p><strong>本博文同步到csdn博客：</strong> <a href="https://blog.csdn.net/qq_33154343/article/details/95090677">TL模板，适配器的讲解运用和示范：函数对象适配器、取反适配器、函数指针适配器、成员函数适配器</a></p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序一 技法</category>
      </categories>
  </entry>
  <entry>
    <title>Shell、Bash、CMD、PowerShell 的区别</title>
    <url>/posts/d0c4daee/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　<font color=#D0087E face="STFangsong"><strong>『Shell』 &#x3D;『图形用户界面（GUI）shell』 +  『命令行界面（CLI）的 shell』</strong></font> ，捋一下 Mac &#x2F; Linux &#x2F; Windows 下常见的 <code>shell</code>。讲解 <code>shell</code>、<code>bash</code>、<code>cmd</code>、<code>zsh</code>、<code>PowerShell</code> 等的区别。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p><font color=#FF0000 size=4 face="STFangsong"><strong>『DOS』</strong></font>：是<strong>磁盘操作系统</strong>（英文：Disk Operating System）的缩写，是个人计算机上的一类操作系统。DOS 家族包括 MS-DOS、PC-DOS、DR-DOS、FreeDOS、PTS-DOS、ROM-DOS、JM-OS等，其中以 <a href="https://zh.wikipedia.org/wiki/MS-DOS">MS-DOS</a> 最为著名。虽然这些系统常被简称为”DOS”，但没有任何一个系统单纯以”DOS”命名。<sup><a href="https://zh.wikipedia.org/wiki/DOS">注释</a></sup> </p>
<br>

<h2 id="Shell-介绍"><a href="#Shell-介绍" class="headerlink" title="Shell 介绍"></a>Shell 介绍</h2><p><font color=#FF0000 size=4 face="STFangsong"><strong>『Shell &#x2F; 壳层』</strong></font>：命令行界面的解释器，用户和系统内核的沟通桥梁。分为：①命令行界面（CLI） ；②  图形用户界面（GUI）。<sup><a href="https://zh.wikipedia.org/wiki/%E6%AE%BC%E5%B1%A4">注释</a></sup> </p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/殼層shell.png" width="20%"/ loading="lazy">

<br>

<h2 id="图形用户界面（GUI）shell"><a href="#图形用户界面（GUI）shell" class="headerlink" title="图形用户界面（GUI）shell"></a>图形用户界面（GUI）shell</h2><h3 id="MacOS-的-shell"><a href="#MacOS-的-shell" class="headerlink" title="MacOS 的 shell"></a>MacOS 的 shell</h3><p><font color=#FF0000 size=4 face="STFangsong"><strong>『Finder &#x2F; 访达』</strong></font>: 在 MacOS 中，能让用户管理文件、文件、磁盘、网络，以及启动其他的应用程序的引用程序。<sup><a href="https://zh.wikipedia.org/wiki/Finder">注释</a></sup></p>
<br>

<h3 id="Linux-的-shell"><a href="#Linux-的-shell" class="headerlink" title="Linux 的 shell"></a>Linux 的 shell</h3><p><font color=#FF0000 size=4 face="STFangsong"><strong>『X窗口管理器』</strong></font>: 独立的 <code>X窗口管理器</code>，例如 <a href="https://zh.wikipedia.org/wiki/Blackbox">Blackbox</a> 与 <a href="https://zh.wikipedia.org/wiki/Fluxbox">Fluxbox</a> 。<sup><a href="https://en.wikipedia.org/wiki/X_window_manager">注释</a></sup></p>
<p><font color=#FF0000 size=4 face="STFangsong"><strong>『Desktop Environment &#x2F; 桌面环境』</strong></font>: 桌面环境是依靠于窗口管理器的的扩展实现。如 <a href="https://zh.wikipedia.org/wiki/KDE">KDE</a>、<a href="https://zh.wikipedia.org/wiki/GNOME">GNOME</a>、<a href="https://zh.wikipedia.org/wiki/Xfce">Xfce</a>、<a href="https://en.wikipedia.org/wiki/Deepin">DDE</a>  。<sup><a href="https://en.wikipedia.org/wiki/Desktop_environment">注释</a></sup></p>
<br>

<h3 id="Windows-的-shell"><a href="#Windows-的-shell" class="headerlink" title="Windows 的 shell"></a>Windows 的 shell</h3><p><font color=#FF0000 size=4 face="STFangsong"><strong>『Explorer &#x2F; 文件资源管理器』</strong></font>: 此操作系统中浏览电脑中文件与文件夹结构的基本工具，<code>win + E</code> 快捷键呼出。<sup><a href="https://zh.wikipedia.org/wiki/%E6%AA%94%E6%A1%88%E7%B8%BD%E7%AE%A1">注释</a></sup></p>
<p><font color=#FF0000 size=4 face="STFangsong"><strong>『开始菜单』</strong></font>:  屏幕的左下角菜单， <code>win</code> 键呼出。<sup><a href="https://zh.wikipedia.org/wiki/%E9%96%8B%E5%A7%8B%E5%8A%9F%E8%83%BD%E8%A1%A8">注释</a></sup></p>
<p><font color=#FF0000 size=4 face="STFangsong"><strong>『DOS Shell』</strong></font>:  1998 年发布于 MS-DOS 的文件管理器，是终端里面生成的可视化界面。<sup><a href="https://en.wikipedia.org/wiki/DOS_Shell">注释</a></sup></p>
<br>

<h2 id="命令行界面（CLI）的-shell"><a href="#命令行界面（CLI）的-shell" class="headerlink" title="命令行界面（CLI）的 shell"></a>命令行界面（CLI）的 shell</h2><h3 id="MacOS-x2F-Linux-的-shell"><a href="#MacOS-x2F-Linux-的-shell" class="headerlink" title="MacOS &#x2F; Linux  的 shell"></a>MacOS &#x2F; Linux  的 shell</h3><p><font color=#FF0000 size=4 face="STFangsong"><strong>『sh &#x2F; Bourne shell』</strong></font>: 1977 在 Version 7 Unix 上的默认 shell。<sup><a href="https://zh.wikipedia.org/wiki/Bourne_shell">注释</a></sup></p>
<p><font color=#FF0000 size=4 face="STFangsong"><strong>『Bash』</strong></font>: 名称由来 Bourne-Again SHell，在 GNU 计划中，于 1989 发布于第一个版本，是 sh 的兼容的开源的续作。亦是 Linux 和 MacOS （含10.14之前）的默认 shell。<sup><a href="https://zh.wikipedia.org/wiki/Bash">注释</a></sup>  </p>
<p><font color=#FF0000 size=4 face="STFangsong"><strong>『Z shell &#x2F; Zsh』</strong></font>: 是 sh + bash + 扩展功能。自2019 年起，MacOS 的默认 Shell 已从 『Bash 』改为『Zsh』。<sup><a href="https://zh.wikipedia.org/wiki/Z_shell">注释</a></sup></p>
<br>

<h3 id="Windows-的-shell-1"><a href="#Windows-的-shell-1" class="headerlink" title="Windows 的 shell"></a>Windows 的 shell</h3><p><font color=#FF0000 size=4 face="STFangsong"><strong>『命令提示符 &#x2F; cmd.exe』</strong></font>：是 Win32 应用程序，取代『COMMAND.COM』。<strong>Windows命令提示符（cmd.exe）</strong> 是 Windows NT 下的一个用于运行 Windows 控制台程序或某些 DOS 程序的壳层程序；<sup><a href="https://zh.wikipedia.org/wiki/%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E5%AD%97%E5%85%83">注释</a></sup> </p>
<p><font color=#FF0000 size=4 face="STFangsong"><strong>『PowerShell』</strong> </font>: 包括 ①<code>Windows PowerShel</code> + ②<code>PowerShell Core</code> ，基于 .NET 框架开发，自 2016 年后开源且跨平台。① 为前四年的版本，仅支持 Win 平台；② 则是其演进，支持跨平台 Linux 和 Mac。<sup><a href="https://zh.wikipedia.org/wiki/PowerShell">注释</a></sup> </p>
<p><font color=#FF0000 size=4 face="STFangsong"><strong>『COMMAND.COM』</strong></font>:  是一个16位的 DOS 应用程序。已经被 <code>命令提示符(cmd.exe)</code> 取代在 MS-DOS、Windows 95、Windows 98、Windows 98SE 和 Windows Me 上的默认命令行界面。<sup><a href="https://en.wikipedia.org/wiki/COMMAND.COM">注释</a></sup> </p>
<br>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><font color=#D0087E size=4 face="STFangsong"><strong>『Shell』 &#x3D;『图形用户界面（GUI）shell』 +  『命令行界面（CLI）的 shell』</strong></font></p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/Shell_GUI_CLI.svg" width="100%"/ loading="lazy">

<br>

<hr>
<h2 id="『PowerShell』和其它命令解释器比较"><a href="#『PowerShell』和其它命令解释器比较" class="headerlink" title="『PowerShell』和其它命令解释器比较"></a>『PowerShell』和其它命令解释器比较</h2><p>重点关心一下 <font color=#FF0000 size=4 face="STFangsong"><strong>『PowerShell』</strong> </font> 的一些命令，看一下 **PowerShell命令行与其他命令行解释器的内部和外部命令的比较。<sup><a href="https://zh.wikipedia.org/wiki/PowerShell">注释</a></sup>  **  </p>
<table>
<thead>
<tr>
<th align="left">PowerShell（命令行）</th>
<th align="center">PowerShell（别名）</th>
<th align="center"><a href="https://zh.wikipedia.org/wiki/%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6">命令提示符</a></th>
<th align="center"><a href="https://zh.wikipedia.org/wiki/Unix_shell">Unix shell</a></th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Get-ChildItem</td>
<td align="center">gci, dir, ls</td>
<td align="center"><a href="https://zh.wikipedia.org/wiki/Dir_(%E5%91%BD%E4%BB%A4)">dir</a></td>
<td align="center"><a href="https://zh.wikipedia.org/wiki/Ls">ls</a></td>
<td align="center">列出目前或指定文件夹中的所有文件和文件夹</td>
</tr>
<tr>
<td align="left">Test-Connection[<a href="https://zh.wikipedia.org/wiki/PowerShell#cite_note-8">a]</a></td>
<td align="center"><a href="https://zh.wikipedia.org/wiki/Ping">ping</a></td>
<td align="center"><a href="https://zh.wikipedia.org/wiki/Ping">ping</a></td>
<td align="center"><a href="https://zh.wikipedia.org/wiki/Ping">ping</a></td>
<td align="center">从目前电脑向指定电脑发送<a href="https://zh.wikipedia.org/wiki/Ping">Ping</a>，或指示另一台电脑这样做</td>
</tr>
<tr>
<td align="left">Get-Content</td>
<td align="center">gc, type, cat</td>
<td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=TYPE_(DOS_command)&action=edit&redlink=1">type</a></td>
<td align="center"><a href="https://zh.wikipedia.org/wiki/Cat_(Unix)">cat</a></td>
<td align="center">获取文件内容</td>
</tr>
<tr>
<td align="left">Get-Command</td>
<td align="center">gcm</td>
<td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=Help_(command)&action=edit&redlink=1">help</a></td>
<td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=Type_(Unix)&action=edit&redlink=1">type</a>, <a href="https://zh.wikipedia.org/w/index.php?title=Which_(command)&action=edit&redlink=1">which</a>, <a href="https://zh.wikipedia.org/w/index.php?title=Compgen_(Unix)&action=edit&redlink=1">compgen</a></td>
<td align="center">列出可用的命令</td>
</tr>
<tr>
<td align="left">Get-Help</td>
<td align="center">help, man</td>
<td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=Help_(command)&action=edit&redlink=1">help</a></td>
<td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=Apropos_(Unix)&action=edit&redlink=1">apropos</a>, <a href="https://zh.wikipedia.org/wiki/%E6%89%8B%E5%86%8C%E9%A1%B5">man</a></td>
<td align="center">在控制台上打印命令的文档</td>
</tr>
<tr>
<td align="left">Clear-Host</td>
<td align="center">cls, clear</td>
<td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=Cls_(computing)&action=edit&redlink=1">cls</a></td>
<td align="center"><a href="https://zh.wikipedia.org/wiki/Clear_(Unix)">clear</a></td>
<td align="center">清除屏幕[<a href="https://zh.wikipedia.org/wiki/PowerShell#cite_note-9">b]</a></td>
</tr>
<tr>
<td align="left">Copy-Item</td>
<td align="center">cpi, copy, cp</td>
<td align="center"><a href="https://zh.wikipedia.org/wiki/Copy_(%E5%91%BD%E4%BB%A4)">copy</a>, <a href="https://zh.wikipedia.org/w/index.php?title=Xcopy&action=edit&redlink=1">xcopy</a>, <a href="https://zh.wikipedia.org/w/index.php?title=Robocopy&action=edit&redlink=1">robocopy</a></td>
<td align="center"><a href="https://zh.wikipedia.org/wiki/Cp_(Unix)">cp</a></td>
<td align="center">将文件和文件夹复制到另一个位置</td>
</tr>
<tr>
<td align="left">Move-Item</td>
<td align="center">mi, move, mv</td>
<td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=Move_(command)&action=edit&redlink=1">move</a></td>
<td align="center"><a href="https://zh.wikipedia.org/wiki/Mv_(Unix)">mv</a></td>
<td align="center">将文件和文件夹移动到新位置</td>
</tr>
<tr>
<td align="left">Remove-Item</td>
<td align="center">ri, del, erase, rmdir, rd, rm</td>
<td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=Del_(command)&action=edit&redlink=1">del</a>, <a href="https://zh.wikipedia.org/w/index.php?title=Del_(command)&action=edit&redlink=1">erase</a>, <a href="https://zh.wikipedia.org/wiki/Rmdir">rmdir</a>, <a href="https://zh.wikipedia.org/wiki/Rmdir">rd</a></td>
<td align="center"><a href="https://zh.wikipedia.org/wiki/Rm_(Unix)">rm</a>, rmdir</td>
<td align="center">删除文件或文件夹</td>
</tr>
<tr>
<td align="left">Rename-Item</td>
<td align="center">rni, ren, mv</td>
<td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=Ren_(command)&action=edit&redlink=1">ren</a>, rename</td>
<td align="center"><a href="https://zh.wikipedia.org/wiki/Mv_(Unix)">mv</a></td>
<td align="center">重命名单个文件、文件夹、硬链接或符号链接</td>
</tr>
<tr>
<td align="left">Get-Location</td>
<td align="center">gl, cd, pwd</td>
<td align="center"><a href="https://zh.wikipedia.org/wiki/Cd_(%E5%91%BD%E4%BB%A4)">cd</a></td>
<td align="center"><a href="https://zh.wikipedia.org/wiki/Pwd">pwd</a></td>
<td align="center">显示工作路径（目前文件夹）</td>
</tr>
<tr>
<td align="left">Pop-Location</td>
<td align="center">popd</td>
<td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=Pushd_and_popd&action=edit&redlink=1">popd</a></td>
<td align="center">popd</td>
<td align="center">将工作路径更改为最近推送到堆栈上的位置</td>
</tr>
<tr>
<td align="left">Push-Location</td>
<td align="center">pushd</td>
<td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=Pushd_and_popd&action=edit&redlink=1">pushd</a></td>
<td align="center">pushd</td>
<td align="center">将工作路径存储到堆栈中</td>
</tr>
<tr>
<td align="left">Set-Location</td>
<td align="center">sl, cd, chdir</td>
<td align="center"><a href="https://zh.wikipedia.org/wiki/Cd_(%E5%91%BD%E4%BB%A4)">cd</a>, <a href="https://zh.wikipedia.org/wiki/Cd_(%E5%91%BD%E4%BB%A4)">chdir</a></td>
<td align="center">cd</td>
<td align="center">改变工作路径</td>
</tr>
<tr>
<td align="left">Tee-Object</td>
<td align="center">tee</td>
<td align="center">不适用</td>
<td align="center"><a href="https://zh.wikipedia.org/wiki/Tee">tee</a></td>
<td align="center">将输入管道传输到文件或变量，并沿管道传递输入</td>
</tr>
<tr>
<td align="left">Write-Output</td>
<td align="center">echo, write</td>
<td align="center"><a href="https://zh.wikipedia.org/wiki/Echo_(%E5%91%BD%E4%BB%A4)">echo</a></td>
<td align="center">echo</td>
<td align="center">将字符串或其他对像打印到<a href="https://zh.wikipedia.org/wiki/%E6%A8%99%E6%BA%96%E4%B8%B2%E6%B5%81">标准流</a></td>
</tr>
<tr>
<td align="left">Get-Process</td>
<td align="center">gps, ps</td>
<td align="center">tlist,[<a href="https://zh.wikipedia.org/wiki/PowerShell#cite_note-Available_tlist_kill-10">c]</a> <a href="https://zh.wikipedia.org/w/index.php?title=Tasklist&action=edit&redlink=1">tasklist</a>[<a href="https://zh.wikipedia.org/wiki/PowerShell#cite_note-Available_tasklist_taskkill-11">d]</a></td>
<td align="center"><a href="https://zh.wikipedia.org/wiki/Ps_(Unix)">ps</a></td>
<td align="center">列出所有正在执行的进程</td>
</tr>
<tr>
<td align="left">Stop-Process</td>
<td align="center">spps, kill</td>
<td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=Kill_(command)&action=edit&redlink=1">kill</a>,[<a href="https://zh.wikipedia.org/wiki/PowerShell#cite_note-Available_tlist_kill-10">c]</a> <a href="https://zh.wikipedia.org/wiki/Kill_(%E5%91%BD%E4%BB%A4)">taskkill</a>[<a href="https://zh.wikipedia.org/wiki/PowerShell#cite_note-Available_tasklist_taskkill-11">d]</a></td>
<td align="center">kill[<a href="https://zh.wikipedia.org/wiki/PowerShell#cite_note-UNIX_kill_misnomer-12">e]</a></td>
<td align="center">停止正在执行的进程</td>
</tr>
<tr>
<td align="left">Select-String</td>
<td align="center">sls</td>
<td align="center"><a href="https://zh.wikipedia.org/wiki/Findstr">findstr</a></td>
<td align="center"><a href="https://zh.wikipedia.org/wiki/Find">find</a>, <a href="https://zh.wikipedia.org/wiki/Grep">grep</a></td>
<td align="center">打印与模式匹配的行</td>
</tr>
<tr>
<td align="left">Set-Variable</td>
<td align="center">sv, set</td>
<td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=Environment_variable&action=edit&redlink=1">set</a></td>
<td align="center">env, export, set, setenv</td>
<td align="center">创建或更改<a href="https://zh.wikipedia.org/wiki/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">环境变量</a>的内容</td>
</tr>
<tr>
<td align="left">Invoke-WebRequest</td>
<td align="center">iwr, curl, wget[<a href="https://zh.wikipedia.org/wiki/PowerShell#cite_note-13">f]</a></td>
<td align="center"><a href="https://zh.wikipedia.org/wiki/CURL">curl</a></td>
<td align="center"><a href="https://zh.wikipedia.org/wiki/Wget">wget</a>, curl</td>
<td align="center">获取互联网上的网页内容</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>学习 - Linux</category>
        <category>学习 - MacOS</category>
        <category>学习 - Windows</category>
      </categories>
      <tags>
        <tag>终端</tag>
      </tags>
  </entry>
  <entry>
    <title>Sunny 截图上架 Microsoft Store 及Linux商店的指北</title>
    <url>/posts/9cce5972/</url>
    <content><![CDATA[<p><strong>简  述:</strong>  详细介绍如何上架Windows商店的流程，配上流程图！用自己写的 <a href="https://github.com/XMuli/SunnyPages">Sunny 截图</a> 应用软件如何上架到 微软商店 | Microsoft Store 和 Deepin Store 等；</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192349047.jpg" width="300"/ loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<p>即使现 2024 年，但这份指南的详细程度也是的网上首份的，亦含 Linux 商店的上架流程，<strong>敬热爱，敬开源，敬自己；</strong></p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402231450384.gif" width="100%"/ loading="lazy">

<br>

<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/135487951">分享如何拥有一份私人的『开源代码签名证书』</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/136334975">Sunny截图上架Microsoft Store及Linux商店流程的指北</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/136373241">嘿嘿！开发了一款 Sunny 截图 &amp; 钉图，亦支持“屏幕识图”和“OCR”的软件</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/130053230">基于 QT 开发 FLIPPED ：简易且漂亮的跨平台截图贴图软件</a></li>
<li>更多教程 → <a href="https://github.com/XMuli/QtExamples">QtExamples</a></li>
</ul>
<br>

<h2 id="上架-App-Store"><a href="#上架-App-Store" class="headerlink" title="上架 App Store"></a>上架 App Store</h2><p>写好的 EXE，添加了应用代码签名之后，是很想上架到应用商店<br>于上一年写了好几个跨平台的桌面应用程序，成功发布之后，添加了应用代码签名之后，接着就是想上架到应用商店</p>
<ul>
<li>『<a href="https://github.com/XMuli/ThinkyMatePages">ThinkyMate</a>』:  一款简洁且易用的 ChatGPT &amp; AI 的桌面应用程序，支持ChatGPT 和星火讯飞大模型，以及语音转文本（STT）和文本转语音（TTS）等功能。<sup>官网: <a href="https://thinkymate.xmuli.tech/">https://thinkymate.xmuli.tech/</a></sup></li>
<li>『<a href="https://github.com/XMuli/SunnyPages">Sunny</a>』:  一款简洁且漂亮的截图 &amp; 钉图的软件工具，亦支持图片翻译和OCR，支持 Windows，MacOS，Linux 平台。<sup>官网: <a href="https://sunny.xmuli.tech/">https://sunny.xmuli.tech</a></sup></li>
<li>『<a href="https://github.com/XMuli/FlippedPages">FLIPPED</a>』:  一款简洁且漂亮的截图 &amp; 钉图的软件工具，定位于隐私安全，无任何联网功能，亦是 Sunny 的上一代。<sup>官网: <a href="https://flipped.xmuli.tech/">https://flipped.xmuli.tech</a></sup></li>
</ul>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402281046095.png" width="200"/ loading="lazy">



<h2 id="上架-Microsoft-Store-流程"><a href="#上架-Microsoft-Store-流程" class="headerlink" title="上架 Microsoft Store 流程"></a>上架 Microsoft Store 流程</h2><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><font color=#D0087E size=4 face="STFangsong">一图胜千言，完整的上架审核的流程的重难点和提供解决方案。</font></p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192226989.svg" width="100%"/ loading="lazy">

<br>

<h3 id="上架步骤"><a href="#上架步骤" class="headerlink" title="上架步骤"></a>上架步骤</h3><p>注册 Microsoft 开发者账号，个人约 ＄19，永久买断制度； 企业版本的 约 ＄99；</p>
<p>可以上架常规的 EXE、 MSI 以及 MSIX，这些等，只需要签名即可。</p>
<p><code>*.msi </code>  通常是企业用来批量推送静默升级和安装用的； <code>*.msix</code> 是微软商店推荐的打包格式，类似于一个沙盒，对权限等管理的比较严格，属于 UWP 的效果。</p>
<p>必定会遇到的坑🕳有：</p>
<ul>
<li><p><strong>准备工作</strong></p>
<ul>
<li><p>中文语言注册官网存在 bug，需要 F12 修改下代码</p>
</li>
<li><p>购买代码签名证书，摸索不同类型的  EV &#x2F; Standard 证书签名；费用：$ 几百-几千🔪&#x2F;每年</p>
</li>
<li><p>有自己的官网域名，且备案；费用：￥数百</p>
</li>
<li><p>购买对象存储，以及子域名的 DNS 解析，设置 Https 直链下载；费用：￥数百</p>
</li>
</ul>
</li>
<li><p><strong>上传和微软团队审核</strong></p>
<ul>
<li>确保自己的 http<strong>s</strong> 可以上传和下载无虞</li>
<li>EXE 必须支持命令行默认安装</li>
<li>安装之前对于 vc_redist.x64.exe 的检测和静默安装</li>
<li>能够过 Microsoft Defender SmartScreen<ul>
<li>首先 Defender SmartScreen 必须不会报毒</li>
<li>满足上一条基础上，其次 Defender SmartScreen 还不能够提示：不知道是否有毒</li>
</ul>
</li>
<li>提供用户隐私保护 和 遇到问题解决得 wiki 得 RUL</li>
<li>软件功能得主功能是没有 bug，且账号类需要提供测试密码等</li>
<li>可能好多天都没有进度，无任何变化</li>
</ul>
</li>
</ul>
<h3 id="值得记录的一些重难点"><a href="#值得记录的一些重难点" class="headerlink" title="值得记录的一些重难点"></a>值得记录的一些重难点</h3><h4 id="①静默安装"><a href="#①静默安装" class="headerlink" title="①静默安装"></a>①静默安装</h4><p>Sunny 截图也能够支持静默安装；</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># innosetup制作的 exe 静默安装，其参数为 /silent /norestart</span>
<span class="token comment"># msi 静默安装参数  BasicMSI.msi /qn  需要管理权限运行 CMD </span>

Sunny_setup_msvc_1.3.0_x64.exe<span class="token string">" /VERYSILENT           # 不会出现安装向导（MS 上架用这个）
Sunny_setup_msvc_1.3.0_x64.exe"</span> /silent /norestart    <span class="token comment"># 会出现安装向导</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Note: <sup><a href="https://www.eitkb.com/show-103.html">url1</a></sup>  <sup><a href="https://www.cnblogs.com/BeyondTechnology/archive/2011/01/15/1936511.html">url2</a></sup></p>
<h4 id="②微软运行时库的静默安装和检测"><a href="#②微软运行时库的静默安装和检测" class="headerlink" title="②微软运行时库的静默安装和检测"></a>②微软运行时库的静默安装和检测</h4><p>vc_redist.x64.exe 在自己软件安装之前，是必须先检测下，和安装之前默认安装此运行时依赖；</p>
<p>我的解决方案是 通过 Inno Setup 写一段 .iss 脚本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">procedure InstallVCRuntime<span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
var
  szAppName, szParam, szExecutable, szArchitecture, szVCRuntimeInstalled, szFileExists: String<span class="token punctuation">;</span>
  nRetCode: Integer<span class="token punctuation">;</span>
  bFileExists, bVCRuntimeInstalled: Boolean<span class="token punctuation">;</span> // 定义一个布尔变量
  
begin
  szArchitecture :<span class="token operator">=</span> <span class="token string">'&#123;#MyArchitecture&#125;'</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> szArchitecture  <span class="token operator">=</span> <span class="token string">'x64'</span> <span class="token keyword">then</span>
  begin
    szAppName :<span class="token operator">=</span> <span class="token string">'vc_redist.x64.exe'</span><span class="token punctuation">;</span>
  end
  <span class="token keyword">else</span>
  begin
    szAppName :<span class="token operator">=</span> <span class="token string">'vc_redist.x86.exe'</span><span class="token punctuation">;</span>
  end<span class="token punctuation">;</span>

  szExecutable :<span class="token operator">=</span> ExpandConstant<span class="token punctuation">(</span><span class="token string">'&#123;app&#125;\'</span><span class="token punctuation">)</span> + szAppName<span class="token punctuation">;</span>
  bVCRuntimeInstalled :<span class="token operator">=</span> RegKeyExists<span class="token punctuation">(</span>HKEY_LOCAL_MACHINE, <span class="token string">'SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\&#123;8bdfe669-9705-4184-9368-db9ce581e0e7&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   // x64或x86 均为此 guid 数值
  bFileExists :<span class="token operator">=</span> FileExists<span class="token punctuation">(</span>szExecutable<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">if</span> bVCRuntimeInstalled <span class="token keyword">then</span>
    szVCRuntimeInstalled :<span class="token operator">=</span> <span class="token string">'True'</span>
  <span class="token keyword">else</span>
    szVCRuntimeInstalled :<span class="token operator">=</span> <span class="token string">'False'</span><span class="token punctuation">;</span>
    
  <span class="token keyword">if</span> bFileExists <span class="token keyword">then</span>
    szFileExists :<span class="token operator">=</span> <span class="token string">'True'</span>
  <span class="token keyword">else</span>
    szFileExists :<span class="token operator">=</span> <span class="token string">'False'</span><span class="token punctuation">;</span>

	Log<span class="token punctuation">(</span><span class="token string">'-->szAppName:'</span> + szAppName + <span class="token string">' szExecutable:'</span> + szExecutable + <span class="token string">' szArchitecture:'</span> + szArchitecture + <span class="token string">' szVCRuntimeInstalled:'</span> + szVCRuntimeInstalled + <span class="token string">' szFileExists:'</span> + szFileExists + <span class="token string">' The value of &#123;app&#125; is: '</span> + ExpandConstant<span class="token punctuation">(</span><span class="token string">'&#123;app&#125;'</span><span class="token punctuation">))</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> bVCRuntimeInstalled <span class="token keyword">then</span>      // 系统若已经安装了 VC_redist 则跳过
    begin
    Log<span class="token punctuation">(</span><span class="token string">'VC_redist is already installed. Skipping installation.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    end
  <span class="token keyword">else</span>
    <span class="token keyword">if</span> bFileExists <span class="token keyword">then</span>            // 此文件存在才安装
      begin
	  Log<span class="token punctuation">(</span><span class="token string">'VC_redist is install'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      szParam :<span class="token operator">=</span> <span class="token string">'/install /quiet /norestart'</span><span class="token punctuation">;</span>
      Exec<span class="token punctuation">(</span>szExecutable, szParam, <span class="token string">''</span>, SW_HIDE, ewWaitUntilTerminated, nRetCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
      Sleep<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      end
    <span class="token keyword">else</span>
      begin
      Log<span class="token punctuation">(</span><span class="token string">'Executable file not found: '</span> + szExecutable<span class="token punctuation">)</span><span class="token punctuation">;</span>
      end
end<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="③-如何购买代码签名证书"><a href="#③-如何购买代码签名证书" class="headerlink" title="③ 如何购买代码签名证书"></a>③ 如何购买代码签名证书</h4><p>可以参考我写的这篇《<a href="https://blog.csdn.net/qq_33154343/article/details/135487951">分享如何拥有一份私人的『开源代码签名证书』</a>》，已详述购买 EV &#x2F; Standard &#x2F; Open Source 的 Code Signing Certificate 🎉🎉🎉过程，还有如何进行应用签名；</p>
<h4 id="④过五关斩六将之-Defender-SmartScreen"><a href="#④过五关斩六将之-Defender-SmartScreen" class="headerlink" title="④过五关斩六将之 Defender SmartScreen"></a>④过五关斩六将之 Defender SmartScreen</h4><p>还要能够过  <a href="https://learn.microsoft.com/en-us/windows/security/operating-system-security/virus-and-threat-protection/microsoft-defender-smartscreen/">Microsoft Defender SmartScreen</a>， 里面是一套一套的，初次提交被拒好几次都属正常。若是 EV 企业证书，氪大金，直接过。若是 Standard &#x2F; Open Source 这类标准证书，需先将 EXE 提交 <a href="https://www.microsoft.com/en-us/wdsi/filesubmission/">Submit a file for malware analysis</a>， 重复多提交几次后，虽不会再报毒；但是审核依旧是会被拒绝， WHAT THE FUCK？？？</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192112902.png" width="100%"/ loading="lazy">

<p>对应实际的运行弹窗是这个</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402281027210.png" width="50%"/ loading="lazy">



<p>唯一解决方案就是等待，待 exe 的下载量和安装量足够多，且数量越多，在微软的积累量信誉越多，过阈值即可被认可，顺利上架 Microsoft Store。  </p>
<p><strong>总结：</strong></p>
<p>个人作品上架微软商店的流程很折磨，最后上架成功后也是拨开云雾；</p>
<p>若是文章对你有价值，亦可帮我积累Sunny的微软信誉，甚至感谢🙇‍ ； 截图下载 👉   <a href="https://github.com/XMuli/SunnyPages/releases/download/v1.3/Sunny_setup_msvc_1.3.0_x64.exe">Sunny_setup_msvc_1.3.0_x64.exe</a>  </p>
<br>

<h3 id="展示效果"><a href="#展示效果" class="headerlink" title="展示效果"></a>展示效果</h3><p>微软商店 GIF 见文章顶部截图，此为 Web 预览的截图：</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402231501935.gif" width="80%"/ loading="lazy">



<h2 id="上架微软驱动"><a href="#上架微软驱动" class="headerlink" title="上架微软驱动"></a>上架微软驱动</h2><p>驱动认证，可找一些 WHQL 实验室给过，费用约￥ 1w &#x2F;次。或者自己买 EV 证书自己过  WHQL，周期会很长 。</p>
<p>验证方式为 Windows Update 驱动中可看到，另外一种是在 <a href="https://www.catalog.update.microsoft.com/">catalog.update.microsoft.com</a> 中查询，驱动是否上架了和微软推送了。 驱动上架就不展开讲述了。</p>
<br>

<h2 id="上架-Deepin-x2F-UOS-Store-流程"><a href="#上架-Deepin-x2F-UOS-Store-流程" class="headerlink" title="上架 Deepin &#x2F; UOS Store 流程"></a>上架 Deepin &#x2F; UOS Store 流程</h2><h3 id="上架步骤-1"><a href="#上架步骤-1" class="headerlink" title="上架步骤"></a>上架步骤</h3><p><strong>上架方式分为两种</strong></p>
<p>①若是需要上架到 UOS Stoe ，则需要注册对应开发者账号，官方文档 <a href="https://doc.chinauos.com/content/L7nFinQB_uwzIp6HNV7S">应用上架指南</a>。额(⊙﹏⊙)，但需要实名填写相关信息，通过之后就可以同时上架到 UOS 商业和 Deepin 社区两个版本。</p>
<p>可以在看到历史的每一个包和上架的版本，这一点很棒很有心，且每一种语言的展示也是用 Tab 页显示出来了，体验很出彩。</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192259665.png" width="100%"/ loading="lazy">



<p>②若【仅】想要上架 Deepin 社区，突然发现前不久，有新出来了一种简化了的投递流程（2024.02.19），方便多了 <a href="https://www.deepin.org/zh/deliver-applications/">社区投递系统使用说明</a>， 基本直接上传应用包即可。</p>
<h3 id="展示效果-1"><a href="#展示效果-1" class="headerlink" title="展示效果"></a>展示效果</h3><p><strong>已在 Deepin V20.9-V23 上移植完成</strong></p>
<p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312272305050.jpg" width="50%"/ loading="lazy"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312272305129.jpg" width="50%"/ loading="lazy"></p>
<p><strong>上架 深度商店效果</strong></p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402190016686.png" width="70%"/ loading="lazy">



<p>还发现了当初上架的一个开源软件 <a href="https://github.com/XMuli/lfxSpeed">lfxSpeed</a>，一个简单的 Deepin&#x2F;UOS 的任务栏网速插件，真时间匆匆~</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192320479.png" width="70%"/ loading="lazy">



<h2 id="上架-Speak-Store-流程"><a href="#上架-Speak-Store-流程" class="headerlink" title="上架 Speak Store 流程"></a>上架 Speak Store 流程</h2><h3 id="上架步骤-2"><a href="#上架步骤-2" class="headerlink" title="上架步骤"></a>上架步骤</h3><p>上架星火商店步骤</p>
<ul>
<li>【方式一】直接在 <a href="https://upload.deepinos.org.cn/index">https://upload.deepinos.org.cn/index</a>  网页上传 .deb 和截图等信息即可</li>
<li>【方式二】摇人 →  <a href="https://www.spark-app.store/">spark-app.store</a></li>
</ul>
<br>

<h3 id="展示步骤"><a href="#展示步骤" class="headerlink" title="展示步骤"></a>展示步骤</h3><p>上架成功</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192253590.png" width="70%"/ loading="lazy">



<p><strong>Note：</strong> 网页上传 .deb 总是错误，解决方案，必须在 Linux 系统下进行上传 .deb 才会成功；</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192250562.png" width="400"/ loading="lazy">

<br>

<h2 id="上架-openkylin-Store-流程"><a href="#上架-openkylin-Store-流程" class="headerlink" title="上架 openkylin Store 流程"></a>上架 openkylin Store 流程</h2><p>已移植到 openkylin 1.0.1 等版本，运行效果。</p>
<p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192238634.png" width="35%"/ loading="lazy"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192238459.png" width="35%"/ loading="lazy"></p>
<h3 id="上架步骤-3"><a href="#上架步骤-3" class="headerlink" title="上架步骤"></a>上架步骤</h3><p><strong>上架规则</strong></p>
<p>需填写《开源软件上架申请表格_V1.0.0.docx》，且对 .deb 的 debian 文件夹的文件有点格式要求；参考如下。符合标准后提交表格和 .deb 即可。</p>
<p>版本镜像下载：<a href="https://www.c.top/downloads/">openkylin  1.x X86</a></p>
<p><strong>详细规则参考：</strong></p>
<p>1、 包名_版本_架构.deb，各个字段需要与control文件里的参数保持一致。</p>
<p>2、 包名不能含有中文，只能包含数字字母和三个符号（.+-），英文字母必须是小写，版本号必须以数字开头，架构只能为arm64和amd64和misp64el</p>
<p>例如：powerword_1.0_arm64.deb （均为下划线）</p>
<p>3、 软件中文名称、英文名称，各长度小于50个字符。</p>
<p>4、 icon（规范：128像素*128像素）；</p>
<p>5、 软件截图（宽&#x2F;高 1.5 按此长宽比的应用实际截图分辨率即可（至少5张）建议尺寸：1000像素*680像素）</p>
<p>6、 软件分类：精品、办公、开发、图像、影音、网络、游戏、教育、社交、其他、系统。最多选3个，第一个为主分类，后两个为附属分类。</p>
<br>

<h2 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a>  欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且永久免费！</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
        <category>学习 - MacOS</category>
        <category>学习 - Windows</category>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - C/C++ 序三 商业</category>
        <category>专栏 - 项目实战开发</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>工程经验</tag>
        <tag>项目作品集合</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP通信之QTcpServer和QTcpSocket，服务器和客户端通讯</title>
    <url>/posts/f283a311/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  了解<code>TCP</code>通信之<code>QTcpServer</code>和<code>QTcpSocket</code>，服务器和客户端通讯，书写一个简单地例子；然后写了一个小的 <strong>Qt</strong>例子，用来实现和验证它的空间的一些属性和功能的用法。</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191225_232206_mark.png"/ loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><p><strong>编程环境：</strong>  <code>MacOS 10.14.6 (18G103)</code>   <strong>编程软件：</strong> <code>Qt 5.9.8</code>， <code>Qt Creator 4.8.2</code></p>
<br>

<h2 id="Tcp通信概述："><a href="#Tcp通信概述：" class="headerlink" title="Tcp通信概述："></a>Tcp通信概述：</h2><p>我想能够看到网络这一部分的人，基本都是有着基本的网络认知；这里为了这一个系列的完整性，还是决定将本系列的基本知识仍旧写出来。万一之前的你是没有怎么接触过这类篇文章的鸭鸭呢？就算是完全不知，但是一些基础的还是能够让你能够有所了解，再具体的就进行自行goole和专业📚进行扩展深入扩展学习，博文尽量都提一笔，其余更多待你自行发掘。</p>
<p><strong>TCP特点：</strong></p>
<p>可靠，面向流传播，面向协议的一种传输协议；特别适合用于连续数据传输。实际🌰：QQ的在线发送文件，就是为了确保文件发送的完整性，使用的TCP协议。</p>
<br>

<h2 id="QTcpServer属性："><a href="#QTcpServer属性：" class="headerlink" title="QTcpServer属性："></a>QTcpServer属性：</h2><p>TCP通信，必须先进行TCP连接，通信端口分为服务器端口和客户端。</p>
<p><code>QTcpServer</code>是从<code>QObject</code>继承的类，主要是用于服务器建立网络监听，创立<code>Socket</code>连接的；其中主要的一些常用接口，提供·如下：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>公共函数</td>
<td>void close()</td>
<td>关闭服务器，停止网络监听</td>
</tr>
<tr>
<td></td>
<td>bool listen()</td>
<td>在给定IP地址和端口上开始监听，若是成功，就返回true</td>
</tr>
<tr>
<td></td>
<td>bool isListening()</td>
<td>返回true表示服务器处于监听状态</td>
</tr>
<tr>
<td></td>
<td>QTcpSocket * nextPendingConnection()</td>
<td>返回下一个等待接入的连接</td>
</tr>
<tr>
<td></td>
<td>QHostAddres serverAddress()</td>
<td>如果服务器处于监听状态，返回服务器地址</td>
</tr>
<tr>
<td></td>
<td>quint16 serverPort()</td>
<td>如果服务器处于监听状态，返回服务器端口</td>
</tr>
<tr>
<td></td>
<td>bool waitForNewConnection()</td>
<td>以阻塞方式等待新的连接</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>信号</td>
<td>void acceptError( QAbstractSocket::SocketError socketError )</td>
<td>当接受一个新的连接时大声了错误，就发射此信号；参数socketError描述错误信息</td>
</tr>
<tr>
<td></td>
<td>void new Connection()</td>
<td>当有新的信号连接时候，发射此信号</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>保护函数</td>
<td>void incomingConnection(qintptr socketDescriptor)</td>
<td>当有一个新的连接可用时，QTcpServer内部调用此函数，创建一个QTcpSocket对象，添加到内部可用新连接列表，然后发射newConnetion()信号，用户若是从QTcpServer继承定义类，可以重定义此函数，但是必须调用QtcpSocket继承定义类，可以重新定义此函数，但是必须调用addPendingConnetion()</td>
</tr>
<tr>
<td></td>
<td>void addPendingConnection(QTcp Socket *socket)</td>
<td>由incomingtion()调用，将创建的QTcpSocket添加到内部新可用连接列表</td>
</tr>
</tbody></table>
<p>服务器的程序首先是需要调用QTcpServer进行监听的【这个时候，是指定监听的IP和port的】，然后当QScoket连接的时候，会发射信号📶，<code>newConnection()</code>，在<code>newConnection()</code>的对应好的槽函数中，可以用nextPendingConnetion()接收客户端的连接，然后使用QSocket与客户端进行通信。</p>
<h2 id="QTcp-x2F-QUdp继承关系图："><a href="#QTcp-x2F-QUdp继承关系图：" class="headerlink" title="QTcp&#x2F;QUdp继承关系图："></a>QTcp&#x2F;QUdp继承关系图：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191229_181530_mark.png"/ loading="lazy">

<br>

<h2 id="QAbstractSocket接口讲解："><a href="#QAbstractSocket接口讲解：" class="headerlink" title="QAbstractSocket接口讲解："></a>QAbstractSocket接口讲解：</h2><p><strong>其中主要的<code>QAbstractSocket</code>的主要的接口函数如下：</strong></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>公共函数</td>
<td>void connectToHost(QHostAddress headdress, quint16 port,)</td>
<td>以异步的方式连接到指定的IP地址和端口的TCP服务器，连接成功会发射connected()信号</td>
</tr>
<tr>
<td></td>
<td>void disconnectFromHost()</td>
<td>断开sokcet，关闭成功后发射disconnection()信号</td>
</tr>
<tr>
<td></td>
<td>bool waitForConnected()</td>
<td>等待直到建立socket连接</td>
</tr>
<tr>
<td></td>
<td>bool waitForDisconnected()</td>
<td>等待直到断开socket连接</td>
</tr>
<tr>
<td></td>
<td>QHostAddress localAddress()</td>
<td>返回本socket的地址</td>
</tr>
<tr>
<td></td>
<td>quint16 localPort()</td>
<td>返回本socket的端口</td>
</tr>
<tr>
<td></td>
<td>QHostAddress peerAddress()</td>
<td>在已经连接状态下，返回对方socket的地址</td>
</tr>
<tr>
<td></td>
<td>QString peerName()</td>
<td>返回connetToHost()连接到对方的主机的名</td>
</tr>
<tr>
<td></td>
<td>quint16 peerPort()</td>
<td>在已连接的状态下，返回对方的socket的port</td>
</tr>
<tr>
<td></td>
<td>qint64 readBuffer Size()</td>
<td>返回内部读取缓冲区的大小的数据的字节数；该大小决定了read()和readAll()函数能够读取出来的数据的大小</td>
</tr>
<tr>
<td></td>
<td>void setReadBuAerSize(qint64 size)</td>
<td>数据内部读取缓冲区的数据的字节数</td>
</tr>
<tr>
<td></td>
<td>qint64 bytesAvailable()</td>
<td>返回需要读取的缓冲区的字节数字</td>
</tr>
<tr>
<td></td>
<td>bool canReadLine()</td>
<td>如果有行数据要从socket缓冲区读取，就返回true</td>
</tr>
<tr>
<td></td>
<td>SocketState state()</td>
<td>返回当前socket状态</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>信号📶</td>
<td>void connected()</td>
<td>connectionToHost()成功连接到服务器后发射此信号</td>
</tr>
<tr>
<td></td>
<td>void disconnected()</td>
<td>当socket断开连接时，发射此信号</td>
</tr>
<tr>
<td></td>
<td>void error(QAbstractSocket::SocketError socketError)</td>
<td>当socket发生错误时，发射此信号</td>
</tr>
<tr>
<td></td>
<td>void hostFound()</td>
<td>调用connectToHost()找到主机后发射此信号</td>
</tr>
<tr>
<td></td>
<td>void stateChanged(QAbstractSocket::SocketState socketState)</td>
<td>当socket的状态变化时候发射此信号，参数socketState表示了socket当前的状态</td>
</tr>
<tr>
<td></td>
<td>void ready Read()</td>
<td>当缓冲区的数据需要读取时候，发射此信号，在此信号的槽函数里面读取缓冲区的数据</td>
</tr>
</tbody></table>
<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>这里先放一张运行效果图：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191216_232611.gif"/ loading="lazy">

<br>

<h2 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h2><p>这里将TCP通信的服务器和客户端拆分为两个小的项目来写，其结构如下：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191225_232719_mark.png" style="zoom:67%;" / loading="lazy">

<p>其中核心部分的源码，重点和一些难点以及需要注意的一些地方，贴出来如下：</p>
<h3 id="其中服务器端："><a href="#其中服务器端：" class="headerlink" title="其中服务器端："></a>其中服务器端：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*
 * Copyright (C)  2019 ~ 2019 touwoyimuli.  All rights reserved.
 *
 * Author:  touwoyimuli &lt;xmulitech@gmai.com>
 *
 * github:  https://github.com/touwoyimuli
 * blogs:   https://touwoyimuli.github.io/
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;https://touwoyimuli.github.io/>.
 */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXTCPSERVER_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXTCPSERVER_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMainWindow></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QLabel></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QTcpServer></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QTcpSocket></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QHostInfo></span></span>

<span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span>
<span class="token keyword">class</span> <span class="token class-name">ExTcpServer</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">ExTcpServer</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span>
<span class="token punctuation">&#123;</span>
    Q_OBJECT

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">ExTcpServer</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">ExTcpServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    QString <span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//获取本机 IP</span>

<span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">closeEvent</span><span class="token punctuation">(</span>QCloseEvent<span class="token operator">*</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> slots<span class="token operator">:</span>
<span class="token comment">//UI的槽函数</span>
    <span class="token keyword">void</span> <span class="token function">on_actStart_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//开始监听</span>
    <span class="token keyword">void</span> <span class="token function">on_actStop_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//停止监听</span>
    <span class="token keyword">void</span> <span class="token function">on_actClear_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//清除文本框内容</span>
    <span class="token keyword">void</span> <span class="token function">on_actQuit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//退出程序</span>
    <span class="token keyword">void</span> <span class="token function">on_btnSend_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//发送消息</span>

<span class="token comment">//自定义的槽函数</span>
    <span class="token keyword">void</span> <span class="token function">onSocketReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//读取 socket 传入时候的数据</span>
    <span class="token keyword">void</span> <span class="token function">onClientConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//client socket conneted</span>
    <span class="token keyword">void</span> <span class="token function">onClientDisonnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//client socket disconneted</span>
    <span class="token keyword">void</span> <span class="token function">onNewConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//QTcpServer 的 newConnect() 信号</span>
    <span class="token keyword">void</span> <span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>QAbstractSocket<span class="token double-colon punctuation">::</span>SocketState socketState<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    Ui<span class="token double-colon punctuation">::</span>ExTcpServer <span class="token operator">*</span>ui<span class="token punctuation">;</span>

    QLabel<span class="token operator">*</span> m_labListen<span class="token punctuation">;</span>
    QLabel<span class="token operator">*</span> m_labSocket<span class="token punctuation">;</span>
    QTcpServer<span class="token operator">*</span> m_tcpServer<span class="token punctuation">;</span>
    QTcpSocket<span class="token operator">*</span> m_tcpSocket<span class="token punctuation">;</span>


<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXTCPSERVER_H</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExTcpServer.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExTcpServer.h"</span></span>

<span class="token class-name">ExTcpServer</span><span class="token double-colon punctuation">::</span><span class="token function">ExTcpServer</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>
    <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token double-colon punctuation">::</span>ExTcpServer<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_labListen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"监听状态："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"socket状态："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labListen<span class="token operator">-></span><span class="token function">setMidLineWidth</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labSocket<span class="token operator">-></span><span class="token function">setMinimumWidth</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labListen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>

    QString localeIp <span class="token operator">=</span> <span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token function">windowTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---IP地址："</span> <span class="token operator">+</span> localeIp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>comboBox<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span>localeIp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_tcpServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTcpServer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>m_tcpServer<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onNewConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">ExTcpServer</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">ExTcpServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

QString <span class="token class-name">ExTcpServer</span><span class="token double-colon punctuation">::</span><span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString hostName <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token double-colon punctuation">::</span><span class="token function">localHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QHostInfo hostInfo <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token double-colon punctuation">::</span><span class="token function">fromName</span><span class="token punctuation">(</span>hostName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"本机名称："</span> <span class="token operator">+</span> hostName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString locaIp<span class="token punctuation">;</span>

    QList<span class="token operator">&lt;</span>QHostAddress<span class="token operator">></span> list <span class="token operator">=</span> hostInfo<span class="token punctuation">.</span><span class="token function">addresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string">"null QString"</span><span class="token punctuation">;</span>

    <span class="token function">foreach</span> <span class="token punctuation">(</span>QHostAddress addr<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>addr<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> QAbstractSocket<span class="token double-colon punctuation">::</span>IPv4Protocol<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            locaIp <span class="token operator">=</span> addr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> locaIp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExTcpServer</span><span class="token double-colon punctuation">::</span><span class="token function">closeEvent</span><span class="token punctuation">(</span>QCloseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span>   <span class="token comment">//关闭窗口时候停止监听</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_tcpServer<span class="token operator">-></span><span class="token function">isListening</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        m_tcpServer<span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    event<span class="token operator">-></span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExTcpServer</span><span class="token double-colon punctuation">::</span><span class="token function">on_actStart_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString Ip <span class="token operator">=</span> ui<span class="token operator">-></span>comboBox<span class="token operator">-></span><span class="token function">currentText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    quint16 port <span class="token operator">=</span> ui<span class="token operator">-></span>spinBox<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    QHostAddress <span class="token function">addr</span><span class="token punctuation">(</span>Ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_tcpServer<span class="token operator">-></span><span class="token function">listen</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//监听指定的 IP 和指定的 port</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"服务器地址为:"</span> <span class="token operator">+</span> m_tcpServer<span class="token operator">-></span><span class="token function">serverAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"   服务器端口："</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">number</span><span class="token punctuation">(</span>m_tcpServer<span class="token operator">-></span><span class="token function">serverPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"开始监听..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    ui<span class="token operator">-></span>actStart<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>actStop<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labListen<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"监听状态：正在监听..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExTcpServer</span><span class="token double-colon punctuation">::</span><span class="token function">on_actStop_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_tcpServer<span class="token operator">-></span><span class="token function">isListening</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    m_tcpServer<span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//停止监听</span>

    ui<span class="token operator">-></span>actStart<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>actStop<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labListen<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"监听状态：监听已经停止"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExTcpServer</span><span class="token double-colon punctuation">::</span><span class="token function">on_actClear_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExTcpServer</span><span class="token double-colon punctuation">::</span><span class="token function">on_actQuit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExTcpServer</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnSend_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString msg <span class="token operator">=</span> ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"[服务器:]"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">hasFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    QByteArray str <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">toUtf8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_tcpSocket<span class="token operator">-></span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExTcpServer</span><span class="token double-colon punctuation">::</span><span class="token function">onSocketReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">//读取缓冲区行文本</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>m_tcpSocket<span class="token operator">-></span><span class="token function">canReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"[客户端:]"</span> <span class="token operator">+</span> m_tcpSocket<span class="token operator">-></span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExTcpServer</span><span class="token double-colon punctuation">::</span><span class="token function">onClientConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//客户端连接时</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"客户端套接字连接\n对等(peer)地址："</span> <span class="token operator">+</span> m_tcpSocket<span class="token operator">-></span><span class="token function">peerAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                       <span class="token operator">+</span> <span class="token string">"    对等(peer)端口："</span> <span class="token operator">+</span>  <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">number</span><span class="token punctuation">(</span>m_tcpSocket<span class="token operator">-></span><span class="token function">peerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExTcpServer</span><span class="token double-colon punctuation">::</span><span class="token function">onClientDisonnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//客户端断开连接时</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"客户端套接字断开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_tcpSocket<span class="token operator">-></span><span class="token function">deleteLater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExTcpServer</span><span class="token double-colon punctuation">::</span><span class="token function">onNewConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_tcpSocket <span class="token operator">=</span> m_tcpServer<span class="token operator">-></span><span class="token function">nextPendingConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//创建 socket</span>

    <span class="token function">connect</span><span class="token punctuation">(</span>m_tcpSocket<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">connected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onClientConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>m_tcpSocket<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">disconnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onClientDisonnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>m_tcpSocket<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">stateChanged</span><span class="token punctuation">(</span>QAbstractSocket<span class="token double-colon punctuation">::</span>SocketState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>QAbstractSocket<span class="token double-colon punctuation">::</span>SocketState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>m_tcpSocket<span class="token operator">-></span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>m_tcpSocket<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">readyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSocketReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExTcpServer</span><span class="token double-colon punctuation">::</span><span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>QAbstractSocket<span class="token double-colon punctuation">::</span>SocketState socketState<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>socketState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>UnconnectedState<span class="token operator">:</span>
        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：UnconnectedState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>HostLookupState<span class="token operator">:</span>
        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：HostLookupState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>ConnectingState<span class="token operator">:</span>
        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ConnectingState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>ConnectedState<span class="token operator">:</span>
        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ConnectedState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>BoundState<span class="token operator">:</span>
        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：BoundState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>ClosingState<span class="token operator">:</span>
        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ClosingState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>ListeningState<span class="token operator">:</span>
        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ListeningState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：其他未知状态..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="其中客户端："><a href="#其中客户端：" class="headerlink" title="其中客户端："></a>其中客户端：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXTCPCLIENT_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXTCPCLIENT_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMainWindow></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QLabel></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QTcpSocket></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QHostInfo></span></span>

<span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span>
<span class="token keyword">class</span> <span class="token class-name">ExTcpClient</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">ExTcpClient</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span>
<span class="token punctuation">&#123;</span>
    Q_OBJECT

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">ExTcpClient</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">ExTcpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    QString <span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//获取本本机 IP</span>

<span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">closeEvent</span><span class="token punctuation">(</span>QCloseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> slots<span class="token operator">:</span>
    <span class="token comment">//UI 定义的槽函数</span>
    <span class="token keyword">void</span> <span class="token function">on_actConnect_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//请求连接到服务器</span>
    <span class="token keyword">void</span> <span class="token function">on_actDisconnect_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//断开与服务器的连接</span>
    <span class="token keyword">void</span> <span class="token function">on_actClear_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//清除内容</span>
    <span class="token keyword">void</span> <span class="token function">on_actQuit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//退出程序</span>
    <span class="token keyword">void</span> <span class="token function">on_btnSend_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//发送文本消息</span>

    <span class="token comment">//自定义的槽函数</span>
    <span class="token keyword">void</span> <span class="token function">onConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">onDisconnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">onSocketReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//从socket读取传入的数据</span>
    <span class="token keyword">void</span> <span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>QAbstractSocket<span class="token double-colon punctuation">::</span>SocketState socketState<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    Ui<span class="token double-colon punctuation">::</span>ExTcpClient <span class="token operator">*</span>ui<span class="token punctuation">;</span>

    QLabel<span class="token operator">*</span> m_labSocket<span class="token punctuation">;</span>
    QTcpSocket<span class="token operator">*</span> m_tcpSocket<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXTCPCLIENT_H</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExTcpClient.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExTcpClient.h"</span></span>

<span class="token class-name">ExTcpClient</span><span class="token double-colon punctuation">::</span><span class="token function">ExTcpClient</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>
    <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token double-colon punctuation">::</span>ExTcpClient<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_labSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"socket状态："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labSocket<span class="token operator">-></span><span class="token function">setMidLineWidth</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_tcpSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTcpSocket</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    QString localIp <span class="token operator">=</span> <span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token function">windowTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"----本机IP:"</span> <span class="token operator">+</span> localIp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>comboBox<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span>localIp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">connect</span><span class="token punctuation">(</span>m_tcpSocket<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">connected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>m_tcpSocket<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">disconnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onDisconnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>m_tcpSocket<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">stateChanged</span><span class="token punctuation">(</span>QAbstractSocket<span class="token double-colon punctuation">::</span>SocketState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>QAbstractSocket<span class="token double-colon punctuation">::</span>SocketState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>m_tcpSocket<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">readyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSocketReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">ExTcpClient</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">ExTcpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

QString <span class="token class-name">ExTcpClient</span><span class="token double-colon punctuation">::</span><span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString hostName <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token double-colon punctuation">::</span><span class="token function">localHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QHostInfo hostInfo <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token double-colon punctuation">::</span><span class="token function">fromName</span><span class="token punctuation">(</span>hostName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"本机名称："</span> <span class="token operator">+</span> hostName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString localIp<span class="token punctuation">;</span>

    <span class="token function">foreach</span> <span class="token punctuation">(</span>QHostAddress addr<span class="token punctuation">,</span> hostInfo<span class="token punctuation">.</span><span class="token function">addresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>QAbstractSocket<span class="token double-colon punctuation">::</span>IPv4Protocol <span class="token operator">==</span> addr<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            localIp <span class="token operator">=</span> addr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> localIp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExTcpClient</span><span class="token double-colon punctuation">::</span><span class="token function">closeEvent</span><span class="token punctuation">(</span>QCloseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_tcpSocket<span class="token operator">-></span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> QAbstractSocket<span class="token double-colon punctuation">::</span>ConnectedState<span class="token punctuation">)</span>
        m_tcpSocket<span class="token operator">-></span><span class="token function">disconnectFromHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    event<span class="token operator">-></span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExTcpClient</span><span class="token double-colon punctuation">::</span><span class="token function">onConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"已经连接到服务器\n客户端套接字连接\n对等(peer)地址："</span> <span class="token operator">+</span> m_tcpSocket<span class="token operator">-></span><span class="token function">peerAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                       <span class="token operator">+</span> <span class="token string">"    对等(peer)端口："</span> <span class="token operator">+</span>  <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">number</span><span class="token punctuation">(</span>m_tcpSocket<span class="token operator">-></span><span class="token function">peerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>actConnect<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>actDisconnect<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExTcpClient</span><span class="token double-colon punctuation">::</span><span class="token function">onDisconnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"已经断开与服务器的连接\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>actConnect<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>actDisconnect<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExTcpClient</span><span class="token double-colon punctuation">::</span><span class="token function">onSocketReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>m_tcpSocket<span class="token operator">-></span><span class="token function">canReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"[服务器:]"</span> <span class="token operator">+</span> m_tcpSocket<span class="token operator">-></span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExTcpClient</span><span class="token double-colon punctuation">::</span><span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>QAbstractSocket<span class="token double-colon punctuation">::</span>SocketState socketState<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>socketState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>UnconnectedState<span class="token operator">:</span>
        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：UnconnectedState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>HostLookupState<span class="token operator">:</span>
        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：HostLookupState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>ConnectingState<span class="token operator">:</span>
        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ConnectingState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>ConnectedState<span class="token operator">:</span>
        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ConnectedState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>BoundState<span class="token operator">:</span>
        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：BoundState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>ClosingState<span class="token operator">:</span>
        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ClosingState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>ListeningState<span class="token operator">:</span>
        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ListeningState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：其他未知状态..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExTcpClient</span><span class="token double-colon punctuation">::</span><span class="token function">on_actConnect_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString addr <span class="token operator">=</span> ui<span class="token operator">-></span>comboBox<span class="token operator">-></span><span class="token function">currentText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    quint16 port <span class="token operator">=</span> ui<span class="token operator">-></span>spinBox<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_tcpSocket<span class="token operator">-></span><span class="token function">connectToHost</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExTcpClient</span><span class="token double-colon punctuation">::</span><span class="token function">on_actDisconnect_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>m_tcpSocket<span class="token operator">-></span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> QAbstractSocket<span class="token double-colon punctuation">::</span>ConnectedState<span class="token punctuation">)</span>
        m_tcpSocket<span class="token operator">-></span><span class="token function">disconnectFromHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExTcpClient</span><span class="token double-colon punctuation">::</span><span class="token function">on_actClear_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExTcpClient</span><span class="token double-colon punctuation">::</span><span class="token function">on_actQuit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExTcpClient</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnSend_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString msg <span class="token operator">=</span> ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"[客户端:]"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">setFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    QByteArray str <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">toUtf8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_tcpSocket<span class="token operator">-></span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a> 【QtTcpEx】</p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>Telegram Download Default Chat Wallpaper</title>
    <url>/posts/21ff118a/</url>
    <content><![CDATA[<p><strong>Summary:</strong> Telegram Download Default Chat Wallpaper</p>
<img src="https://raw.githubusercontent.com/XMuli/xmuliPic/pic/2022/202205181320386.jpg" width="30%"/ loading="lazy">



<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p>​    I gave it a research yesterday, happy 🎉🎉🎉. With this method, you can download any of all the default self-contained wallpapers, including custom fine-tuned background images.</p>
<br>

<p><strong>The steps are as follows:</strong></p>
<ol>
<li>open『telegram - settings - Chat Settings - Chat background - Choose from gallery』</li>
<li>Open this link using chrome (desktop)</li>
<li><code>F12</code> to enter developer mode and hide the corresponding window element</li>
<li>Open the input terminal with <code>Ctrl + Shift + P</code> and run <code>Capture full size screenshot</code> (4K monitor recommended) to get a high quality “.png” wallpaper</li>
<li>Enjoy it and set it as desktop wallpaper</li>
</ol>
<img src="https://raw.githubusercontent.com/XMuli/xmuliPic/pic/2022/202205181312729.png" width="100%"/ loading="lazy">
]]></content>
      <categories>
        <category>生活 - 闲暇的趣闻</category>
      </categories>
      <tags>
        <tag>Wallpaper</tag>
      </tags>
  </entry>
  <entry>
    <title>Upd通信之QUdpSocket的unicast单播、broadcast广播、multicast组播</title>
    <url>/posts/26bdcc49/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  了解<code>Upd</code>通信之<code>QUdpSocket</code>的<code>unicast</code>单播、<code>broadcast</code>广播、<code>multicast</code>组播，书写一个简单地例子；然后写了一个小的<code>Qt</code>例子，用来实现和验证它的空间的一些属性和功能的用法。</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191230_205857_mark.png"  / loading="lazy">

<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191230_214149_mark.png" / loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><p><strong>编程环境：</strong>  <code>MacOS 10.14.6 (18G103)</code>   <strong>编程软件：</strong> <code>Qt 5.9.8</code>， <code>Qt Creator 4.8.2</code></p>
<br>

<h2 id="QUdpSocket讲解"><a href="#QUdpSocket讲解" class="headerlink" title="QUdpSocket讲解:"></a>QUdpSocket讲解:</h2><p><code>UDP</code>通信是轻量的，不可靠（表示有概率会丢包），面向数据报，无连接的协议。用途可以比如：远程视频等</p>
<p>对于UDP通信而言，其实是没有区分客户端或者服务端的，应为任何一个UdpSocket既可以看做客户端，也可以看做服务端；这点与TCP的不一样的。</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191230_222351_mark.png"/ loading="lazy">



<p>另外就是<code>QUdpSocket</code>是以数据报的形式传输数据，而非连续的数据流。发送的数据报一般也都是<code>QByteArray</code></p>
<p>类型的字节数组；数据报的长度一般是低于512字节的，且每一个数据报都是要包含有发送者和接受者的<code>IP</code>和<code>port</code>等信息。</p>
<p>其中udp的消息传播方式有如下三种：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191230_215944_mark.png"/ loading="lazy">

<ul>
<li><p><strong>unicast单播：</strong></p>
<p>  一个udp客户端只能够发送数据报到另外一个指定的地址和端口的udp客户端，是一对一的数据传输</p>
</li>
<li><p><strong>broadcast广播：</strong></p>
<p>  一个udp客户端发送的数据报，在同一网络范围内其他所有的udp客户端都可以收到。其支持<code>IPV4</code>广播📢，只需要将接收对象设置为<code>QHostAddress::Broadcast</code>，且<code>ip</code>地址为<code>255.255.255.255</code>(代表整个地址段的所有ip)</p>
</li>
<li><p><strong>multicast组播：</strong></p>
<p>  也被称为多播。就是相当于群聊功能。udp客户端加入到 <strong>另一个组播IP地址指定的</strong>多播组，成员向组播地址发送的数据报组内成员都可以接收到，使用<code>QUdpSocket::joinMuliticastGroup()</code>函数实现加入多播功能；加入多播后，UDP的发送和正常的UDP数据收发一样。</p>
</li>
</ul>
<p><strong>而关于组播IP地址，是有着一些约定的：</strong></p>
<p>综上：若是在家庭或者办公室或局域网中进行udp的测试，可以使用的组播地址是范围是：239.0.0.0~238.255.255.255</p>
<p><strong>QUdpSocket的主要常用接口：</strong></p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>bool bind(quint16 port &#x3D; 0)</td>
<td>为udp通信绑定一个端口</td>
</tr>
<tr>
<td>qint64 writeDatagram(QByteArray kdatagram, QHostAddress &amp;host, quint16 port)</td>
<td>向目标地址和端口的udp客户端发送数据报，返回成功发送的字节数</td>
</tr>
<tr>
<td>bool hasPendingDatagrams()</td>
<td>至少有一个数据报需要读取的时，返回true</td>
</tr>
<tr>
<td>qint64 pendingDatagramSize()</td>
<td>返回第一个待读取数据报的大小</td>
</tr>
<tr>
<td>qint64 readDatagram(char *data, qint64 maxSize)</td>
<td>读取一个数据报，返回成功读取的数据报的字节数</td>
</tr>
<tr>
<td>bool joinMulticastGroup(QHostAddress &amp;groupAddress）</td>
<td>加入一个多播组</td>
</tr>
<tr>
<td>bool leaveMulticastGroup(QHostAddress &amp;groupAddress)</td>
<td>离开一个多播组</td>
</tr>
</tbody></table>
<br>

<h2 id="unicast单播-x2F-broadcast广播："><a href="#unicast单播-x2F-broadcast广播：" class="headerlink" title="unicast单播&#x2F;broadcast广播："></a>unicast单播&#x2F;broadcast广播：</h2><p>其中单播和组播的图解如下：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191230_221822_mark.png"/ loading="lazy">
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191230_221804_mark.png"/ loading="lazy">

<br>

<h2 id="multicast组播："><a href="#multicast组播：" class="headerlink" title="multicast组播："></a>multicast组播：</h2><p>其中组播的关系图如下：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191230_221740_mark.png"/ loading="lazy">

<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>这里先放一张运行效果图：</p>
<p><strong>unicast单播&#x2F;broadcast广播：</strong></p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191230_211005.gif"/ loading="lazy">



<p><strong>multicast组播:</strong></p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191230_221005.gif"/ loading="lazy">

<br>

<h2 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h2><p><strong>其中核心部分的源码，重点和一些难点以及需要注意的一些地方，贴出来如下</strong></p>
<h3 id="unicast单播-x2F-broadcast广播：-1"><a href="#unicast单播-x2F-broadcast广播：-1" class="headerlink" title="unicast单播&#x2F;broadcast广播："></a>unicast单播&#x2F;broadcast广播：</h3><p>其中.h头文件：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXTRANS_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXTRANS_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMainWindow></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QLabel></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QUdpSocket></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QString></span></span>

<span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span>
<span class="token keyword">class</span> <span class="token class-name">ExTrans</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*!
 * \class ExTrans 一个UDP的Deam测试，同时测试单播和广播
 * \brief 因为是在同一台电脑测试，所以IP相同，需要绑定两个不同端口的，这样不会冲突；
 * 若是两台电脑进行测试，那么可以约定使用相同的端口号，使用不同的IP；来进行通讯
 */</span>

<span class="token keyword">class</span> <span class="token class-name">ExTrans</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span>
<span class="token punctuation">&#123;</span>
    Q_OBJECT

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">ExTrans</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">ExTrans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> slots<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">on_actBind_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//绑定端口</span>
    <span class="token keyword">void</span> <span class="token function">on_actDisbind_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//解除绑定</span>
    <span class="token keyword">void</span> <span class="token function">on_actClean_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//清除文本信息</span>
    <span class="token keyword">void</span> <span class="token function">on_actQuit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//关闭程序</span>
    <span class="token keyword">void</span> <span class="token function">on_btnUnicast_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//单播消息</span>
    <span class="token keyword">void</span> <span class="token function">on_btnBroadcast_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//广播消息</span>

    <span class="token keyword">void</span> <span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>QAbstractSocket<span class="token double-colon punctuation">::</span>SocketState socketState<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//socket 状态发生变化</span>
    <span class="token keyword">void</span> <span class="token function">onSocketReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//读取 socket 传入的数据</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    QString <span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取本机IP</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    Ui<span class="token double-colon punctuation">::</span>ExTrans <span class="token operator">*</span>ui<span class="token punctuation">;</span>

    QLabel<span class="token operator">*</span> m_labSocketState<span class="token punctuation">;</span>
    QUdpSocket<span class="token operator">*</span> m_udpSocket<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXTRANS_H</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中.cpp源文件：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExTrans.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExTrans.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QHostInfo></span></span>

<span class="token class-name">ExTrans</span><span class="token double-colon punctuation">::</span><span class="token function">ExTrans</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>
    <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token double-colon punctuation">::</span>ExTrans<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token string">"Udp通信：unicast(单播) + broadcast(广播)的使用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    QString hostName <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token double-colon punctuation">::</span><span class="token function">localHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString ip <span class="token operator">=</span> <span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"主机名称："</span> <span class="token operator">+</span> hostName <span class="token operator">+</span> <span class="token string">"\n主机IP："</span> <span class="token operator">+</span> ip <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_labSocketState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"Socket状态："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labSocketState<span class="token operator">-></span><span class="token function">setMinimumWidth</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labSocketState<span class="token punctuation">)</span><span class="token punctuation">;</span>

    ui<span class="token operator">-></span>comboBoxIp<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_udpSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QUdpSocket</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">connect</span><span class="token punctuation">(</span>m_udpSocket<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">stateChanged</span><span class="token punctuation">(</span>QAbstractSocket<span class="token double-colon punctuation">::</span>SocketState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>QAbstractSocket<span class="token double-colon punctuation">::</span>SocketState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>m_udpSocket<span class="token operator">-></span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>m_udpSocket<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">readyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSocketReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">ExTrans</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">ExTrans</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//绑定端口</span>
<span class="token keyword">void</span> <span class="token class-name">ExTrans</span><span class="token double-colon punctuation">::</span><span class="token function">on_actBind_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    quint16 port <span class="token operator">=</span> ui<span class="token operator">-></span>spinBoxBind<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//本机UDP端口</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_udpSocket<span class="token operator">-></span><span class="token function">bind</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//端口绑定成功</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"端口绑定成功："</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">number</span><span class="token punctuation">(</span>m_udpSocket<span class="token operator">-></span><span class="token function">localPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        ui<span class="token operator">-></span>actBind<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>actDisbind<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"端口绑定失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//解除绑定</span>
<span class="token keyword">void</span> <span class="token class-name">ExTrans</span><span class="token double-colon punctuation">::</span><span class="token function">on_actDisbind_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_udpSocket<span class="token operator">-></span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//断开，中止套接字</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"端口解除绑定成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    ui<span class="token operator">-></span>actBind<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>actDisbind<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//清除文本信息</span>
<span class="token keyword">void</span> <span class="token class-name">ExTrans</span><span class="token double-colon punctuation">::</span><span class="token function">on_actClean_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//关闭程序</span>
<span class="token keyword">void</span> <span class="token class-name">ExTrans</span><span class="token double-colon punctuation">::</span><span class="token function">on_actQuit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//单播消息</span>
<span class="token keyword">void</span> <span class="token class-name">ExTrans</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnUnicast_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString targetIp <span class="token operator">=</span> ui<span class="token operator">-></span>comboBoxIp<span class="token operator">-></span><span class="token function">currentText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QHostAddress <span class="token function">targetAddr</span><span class="token punctuation">(</span>targetIp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//目标 Ip</span>
    quint16 targetPort <span class="token operator">=</span> ui<span class="token operator">-></span>spinBoxPort<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//目标 port</span>
    QString msg <span class="token operator">=</span> ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//发送的消息</span>

    QByteArray str <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">toUtf8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_udpSocket<span class="token operator">-></span><span class="token function">writeDatagram</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> targetAddr<span class="token punctuation">,</span> targetPort<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//发送数据报</span>

    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"[Send: ] %1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">setFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//广播消息</span>
<span class="token keyword">void</span> <span class="token class-name">ExTrans</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnBroadcast_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    quint16 targetPort <span class="token operator">=</span> ui<span class="token operator">-></span>spinBoxPort<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//目标 port</span>
    QString msg <span class="token operator">=</span> ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//发送的消息</span>

    QByteArray str <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">toUtf8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_udpSocket<span class="token operator">-></span><span class="token function">writeDatagram</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> QHostAddress<span class="token double-colon punctuation">::</span>Broadcast<span class="token punctuation">,</span> targetPort<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//发送 数据报 给所有IP</span>

    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"[广播: ] %1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">setFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//socket 状态发生变化</span>
<span class="token keyword">void</span> <span class="token class-name">ExTrans</span><span class="token double-colon punctuation">::</span><span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>QAbstractSocket<span class="token double-colon punctuation">::</span>SocketState socketState<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>socketState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>UnconnectedState<span class="token operator">:</span>
        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：UnconnectedState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>HostLookupState<span class="token operator">:</span>
        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：HostLookupState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>ConnectingState<span class="token operator">:</span>
        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ConnectingState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>ConnectedState<span class="token operator">:</span>
        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ConnectedState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>BoundState<span class="token operator">:</span>
        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：BoundState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>ClosingState<span class="token operator">:</span>
        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ClosingState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>ListeningState<span class="token operator">:</span>
        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ListeningState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：其他未知状态..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//读取 socket 传入的数据</span>
<span class="token keyword">void</span> <span class="token class-name">ExTrans</span><span class="token double-colon punctuation">::</span><span class="token function">onSocketReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>m_udpSocket<span class="token operator">-></span><span class="token function">hasPendingDatagrams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        QByteArray datagram<span class="token punctuation">;</span>
        datagram<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>m_udpSocket<span class="token operator">-></span><span class="token function">pendingDatagramSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        QHostAddress peerAddr<span class="token punctuation">;</span>
        quint16 peerPort<span class="token punctuation">;</span>

        m_udpSocket<span class="token operator">-></span><span class="token function">readDatagram</span><span class="token punctuation">(</span>datagram<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> datagram<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>peerAddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>peerPort<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//读取数据包，消息+来自的Ip和port</span>
        QString str <span class="token operator">=</span> datagram<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QString peer <span class="token operator">=</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"[From: %1  %2] %3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>peerAddr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">number</span><span class="token punctuation">(</span>peerPort<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>peer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//获取本机IP</span>
QString <span class="token class-name">ExTrans</span><span class="token double-colon punctuation">::</span><span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString hostName <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token double-colon punctuation">::</span><span class="token function">localHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QHostInfo hostInfo <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token double-colon punctuation">::</span><span class="token function">fromName</span><span class="token punctuation">(</span>hostName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString Ip <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>hostInfo<span class="token punctuation">.</span><span class="token function">addresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token function">foreach</span> <span class="token punctuation">(</span>QHostAddress addr<span class="token punctuation">,</span> hostInfo<span class="token punctuation">.</span><span class="token function">addresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>addr<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> QAbstractSocket<span class="token double-colon punctuation">::</span>IPv4Protocol<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            Ip <span class="token operator">=</span> addr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

   <span class="token keyword">return</span> Ip<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="multicast组播"><a href="#multicast组播" class="headerlink" title="multicast组播:"></a>multicast组播:</h3><p>其中.h头文件：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXMULTICAST_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXMULTICAST_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMainWindow></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QUdpSocket></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QLabel></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QHostInfo></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QHostAddress></span></span>

<span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span>
<span class="token keyword">class</span> <span class="token class-name">ExMulticast</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">ExMulticast</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span>
<span class="token punctuation">&#123;</span>
    Q_OBJECT

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">ExMulticast</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">ExMulticast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> slots<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">on_actStart_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">on_actStop_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">on_actClear_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">on_actQuit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>QAbstractSocket<span class="token double-colon punctuation">::</span>SocketState socketState<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//socket 状态发生变化</span>
    <span class="token keyword">void</span> <span class="token function">onSocketReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//读取 socket 传入的数据</span>
    <span class="token keyword">void</span> <span class="token function">on_btnSend_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    QString <span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取本机IP</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    Ui<span class="token double-colon punctuation">::</span>ExMulticast <span class="token operator">*</span>ui<span class="token punctuation">;</span>

    QUdpSocket<span class="token operator">*</span> m_udpSocket<span class="token punctuation">;</span>      <span class="token comment">//用于通讯的 socket</span>
    QLabel<span class="token operator">*</span> m_labSocketState<span class="token punctuation">;</span>
    QHostAddress m_groupAddress<span class="token punctuation">;</span>  <span class="token comment">//组播地址</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXMULTICAST_H</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>其中.cpp源文件：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExMulticast.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExMulticast.h"</span></span>

<span class="token class-name">ExMulticast</span><span class="token double-colon punctuation">::</span><span class="token function">ExMulticast</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>
    <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token double-colon punctuation">::</span>ExMulticast<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token string">"Udp通信：multicate(组播)的使用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    QString hostName <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token double-colon punctuation">::</span><span class="token function">localHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString ip <span class="token operator">=</span> <span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"主机名称："</span> <span class="token operator">+</span> hostName <span class="token operator">+</span> <span class="token string">"\n主机IP："</span> <span class="token operator">+</span> ip <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_labSocketState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"Socket状态："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labSocketState<span class="token operator">-></span><span class="token function">setMinimumWidth</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labSocketState<span class="token punctuation">)</span><span class="token punctuation">;</span>

    ui<span class="token operator">-></span>comboBoxIp<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_udpSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QUdpSocket</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//用于通讯使用的 Socket</span>
    <span class="token comment">//Multicast路由层次，1表示只在同一局域网内</span>
    <span class="token comment">//组播TTL: 生存时间，每跨1个路由会减1，多播无法跨过大多数路由所以为1</span>
    <span class="token comment">//默认值是1，表示数据包只能在本地的子网中传送。</span>
    m_udpSocket<span class="token operator">-></span><span class="token function">setSocketOption</span><span class="token punctuation">(</span>QAbstractSocket<span class="token double-colon punctuation">::</span>MulticastTtlOption<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



    <span class="token function">connect</span><span class="token punctuation">(</span>m_udpSocket<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">stateChanged</span><span class="token punctuation">(</span>QAbstractSocket<span class="token double-colon punctuation">::</span>SocketState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>QAbstractSocket<span class="token double-colon punctuation">::</span>SocketState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>m_udpSocket<span class="token operator">-></span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>m_udpSocket<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">readyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSocketReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">ExMulticast</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">ExMulticast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExMulticast</span><span class="token double-colon punctuation">::</span><span class="token function">on_actStart_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString ip <span class="token operator">=</span> ui<span class="token operator">-></span>comboBoxIp<span class="token operator">-></span><span class="token function">currentText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_groupAddress <span class="token operator">=</span> <span class="token function">QHostAddress</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
    quint16 port <span class="token operator">=</span> ui<span class="token operator">-></span>spinBoxBind<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_udpSocket<span class="token operator">-></span><span class="token function">bind</span><span class="token punctuation">(</span>QHostAddress<span class="token double-colon punctuation">::</span>AnyIPv4<span class="token punctuation">,</span> port<span class="token punctuation">,</span> QUdpSocket<span class="token double-colon punctuation">::</span>ShareAddress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//绑定端口</span>
        m_udpSocket<span class="token operator">-></span><span class="token function">joinMulticastGroup</span><span class="token punctuation">(</span>m_groupAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//加入多播组</span>

        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"[用户："</span> <span class="token operator">+</span> <span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"]  加入组播(组播地址："</span> <span class="token operator">+</span> ip <span class="token operator">+</span> <span class="token string">" 端口："</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">number</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>actStart<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>actStop<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"[用户："</span> <span class="token operator">+</span> <span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"]  加入组播(组播地址："</span> <span class="token operator">+</span> ip <span class="token operator">+</span> <span class="token string">" 端口："</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">number</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExMulticast</span><span class="token double-colon punctuation">::</span><span class="token function">on_actStop_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_udpSocket<span class="token operator">-></span><span class="token function">leaveMulticastGroup</span><span class="token punctuation">(</span>m_groupAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//退出组播</span>
    m_udpSocket<span class="token operator">-></span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//解除绑定</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"[用户："</span> <span class="token operator">+</span> <span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"]  退出组播成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>actStart<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>actStop<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExMulticast</span><span class="token double-colon punctuation">::</span><span class="token function">on_actClear_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExMulticast</span><span class="token double-colon punctuation">::</span><span class="token function">on_actQuit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExMulticast</span><span class="token double-colon punctuation">::</span><span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>QAbstractSocket<span class="token double-colon punctuation">::</span>SocketState socketState<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>socketState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>UnconnectedState<span class="token operator">:</span>
        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：UnconnectedState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>HostLookupState<span class="token operator">:</span>
        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：HostLookupState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>ConnectingState<span class="token operator">:</span>
        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ConnectingState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>ConnectedState<span class="token operator">:</span>
        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ConnectedState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>BoundState<span class="token operator">:</span>
        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：BoundState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>ClosingState<span class="token operator">:</span>
        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ClosingState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>ListeningState<span class="token operator">:</span>
        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ListeningState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：其他未知状态..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExMulticast</span><span class="token double-colon punctuation">::</span><span class="token function">onSocketReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>m_udpSocket<span class="token operator">-></span><span class="token function">hasPendingDatagrams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        QByteArray datagram<span class="token punctuation">;</span>
        datagram<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>m_udpSocket<span class="token operator">-></span><span class="token function">pendingDatagramSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        QHostAddress peerAddr<span class="token punctuation">;</span>
        quint16 peerPort<span class="token punctuation">;</span>

        m_udpSocket<span class="token operator">-></span><span class="token function">readDatagram</span><span class="token punctuation">(</span>datagram<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> datagram<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>peerAddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>peerPort<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//读取数据包，消息+来自的Ip和port</span>
        QString str <span class="token operator">=</span> datagram<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QString peer <span class="token operator">=</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"[From: %1  %2] %3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>peerAddr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">number</span><span class="token punctuation">(</span>peerPort<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>peer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

QString <span class="token class-name">ExMulticast</span><span class="token double-colon punctuation">::</span><span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString hostName <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token double-colon punctuation">::</span><span class="token function">localHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QHostInfo hostInfo <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token double-colon punctuation">::</span><span class="token function">fromName</span><span class="token punctuation">(</span>hostName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString Ip <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>hostInfo<span class="token punctuation">.</span><span class="token function">addresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token function">foreach</span> <span class="token punctuation">(</span>QHostAddress addr<span class="token punctuation">,</span> hostInfo<span class="token punctuation">.</span><span class="token function">addresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>addr<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> QAbstractSocket<span class="token double-colon punctuation">::</span>IPv4Protocol<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            Ip <span class="token operator">=</span> addr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

   <span class="token keyword">return</span> Ip<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExMulticast</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnSend_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    quint16 port <span class="token operator">=</span> ui<span class="token operator">-></span>spinBoxBind<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString  msg <span class="token operator">=</span> ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QByteArray  datagram <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">toUtf8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_udpSocket<span class="token operator">-></span><span class="token function">writeDatagram</span><span class="token punctuation">(</span>datagram<span class="token punctuation">,</span> m_groupAddress<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//    m_udpSocket->writeDatagram(datagram.data(), datagram.size(), m_groupAddress, port);</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"[multicst] "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">setFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a>【QtUdpEx】</p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>VS2017调试Qt源码</title>
    <url>/posts/134fdafb/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　前面用了两年 Linux，现切回来 win10 系统，略不习惯；感觉用 MSVC（VS2017） 和 win10 还有点不够利索，记一下解决方式。</p>
<ul>
<li><p>MSVC 安装 pdb 符号包，调试 Qt 源码</p>
</li>
<li><p>Qt 程序增、删组件、卸载时失败，提示 <code>&quot;At least one valid and enabled repository required for this action to succeed.&quot;</code></p>
</li>
</ul>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>​	环境 <code>win10 21H1</code> 📎 <code>Qt 5.12.11</code> 📎  <code>Visual Studio 2017</code> ，创建一个空的 CMake + Qt 项目，用 VS 打开，调试进入 Qt 源码失败。</p>
<br>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>使用 VS2017 调试进 Qt 源码，调试到 qwidget.cpp 的 .show() 的定义；一直进不去，查询之后调试符如下。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210916224001.png" width="90%"/ loading="lazy">

<br>

<h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>用 MSVC 成功调试 Qt 失败，可检查如下：</p>
<ol>
<li>Qt5Gui<font color=#FF0000>d</font> .dll (Debug 模式下 dll 名称含 d)</li>
<li>加载了 pdb (确定版本没下错)</li>
<li>解决方案加载了 src源码</li>
<li>加载了符号调试包路径</li>
</ol>
<br>

<h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>下载对应的 pdb 压缩包，下载链接 <a href="https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/qt5_51211/qt.qt5.51211.debug_info.win32_msvc2017/">download.qt.io</a>，下载对应版本后解压</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210916225745.png" width="80%"/ loading="lazy">



<p>对此解决方案，添加 Qt 源码路劲，便于找到 .cpp 文件</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210916223653.png" width="80%"/ loading="lazy">



<p>添加符号调试包</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210916223417.png" width="90%"/ loading="lazy">



<p>断点调试， F11 进入 show() 函数定义成功；此时可以看到最底部， *d.dll、.pdb 都被加载正确，得以验证。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210916223100.png" width="90%"/ loading="lazy">

<br>

<h3 id="解决二"><a href="#解决二" class="headerlink" title="解决二"></a>解决二</h3><p>控制面板-Qt项选右键菜单更改时， 若报错提示 <code>At least one valid and enabled repository required for this action to succeed.</code> 解决方案为添加如下自定义：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/qt5_51211/
https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/tools_mingw/
https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/qt5_51211/

<span class="token comment"># 51211 表示 5.12.11 版本，可自行实际替换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210916231159.png" width="90%"/ loading="lazy">



<p>点击添加组件，勾选 “Qt Debug Information Files”，安装即可。其它步骤同方式一。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210916231458.png" width="80%"/ loading="lazy">

<br>

<h2 id="姊妹篇"><a href="#姊妹篇" class="headerlink" title="姊妹篇"></a>姊妹篇</h2><ul>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/120339797">VS2017 调试 Qt 源码，安装 PDB</a></li>
<li><a href="https://xmuli.blog.csdn.net/article/details/116244865">VS2019 调试 Qt5 时 QString 显示为内存地址而非字符串</a> </li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/131491715">VS2022 And QtCreator10调试Qt源码教程</a> （推荐 2023.07）</li>
</ul>
<p>若是 IDE 调试时发现没有 Qt 的符号调试包，教程可参考姊妹篇一；以及学会如何查看 对应模块是否加载</p>
<br>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://stackoverflow.com/questions/22775906/how-to-update-component-in-qt-5-2-1">How to update component in Qt 5.2.1+?</a> </li>
<li><a href="https://blog.csdn.net/dfy1407/article/details/108719016">VS2017+Qt5.12 源码调试 PDB文件安装</a></li>
<li><a href="https://blog.csdn.net/wxz879526/article/details/104929657">windows-QT下载源码匹配的pdb文件的方法</a></li>
</ul>
<br>

<h2 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> </p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
]]></content>
      <categories>
        <category>学习 - Windows</category>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>Visual Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>VS2019调试Qt5时QString显示为内存地址而非字符串</title>
    <url>/posts/f7939b53/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　<code>VS 2019</code> 调试 <code>Qt5</code> 时 QString  显示为内存地址而非字符串内容。不悦，解决之。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>​		用的 Win10 20H2，本机只安装了 VS 2019，没安装 Qt 程序，使用的是 Qt 源码分支编译，以文件夹路径中来调用和使用。结果发现 VS 2019 调试 Qt5 时候，其中 QString 仅显示内存地址地址，而非字符串内容。</p>
<br>

<h3 id="解决一"><a href="#解决一" class="headerlink" title="解决一"></a>解决一</h3><p>​		点击 <strong>“VS2019-扩展-联机”</strong> ，安装 <code>Qt Visual Studio Tools</code> 之后，重启 VS 即正常显示为文本内容。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210428202203.png" width="80%"/ loading="lazy">

<br>

<h3 id="解决二"><a href="#解决二" class="headerlink" title="解决二"></a>解决二</h3><p>​		下载 “<a href="https://github.com/xmuli/QtExamples/blob/master/tools/qt5.natvis">qt5.natvis</a>“ 文件后，拷贝放在如下任意一个路径即可。  –&gt; 亦或<a href="https://gitee.com/xmuli/QtExamples/blob/master/tools/qt5.natvis">镜像</a>。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">C:<span class="token punctuation">\</span>Program Files <span class="token punctuation">(</span>x86<span class="token punctuation">)</span><span class="token punctuation">\</span>Microsoft Visual Studio<span class="token punctuation">\</span><span class="token number">2019</span><span class="token punctuation">\</span>Professional<span class="token punctuation">\</span>Common7<span class="token punctuation">\</span>Packages<span class="token punctuation">\</span>Debugger<span class="token punctuation">\</span>Visualizers

C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>ifmet<span class="token punctuation">\</span>Documents<span class="token punctuation">\</span>Visual Studio <span class="token number">2019</span><span class="token punctuation">\</span>Visualizers  <span class="token comment"># 若无则创建</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="姊妹篇"><a href="#姊妹篇" class="headerlink" title="姊妹篇"></a>姊妹篇</h2><ul>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/120339797">VS2017 调试 Qt 源码，安装 PDB</a></li>
<li><a href="https://xmuli.blog.csdn.net/article/details/116244865">VS2019 调试 Qt5 时 QString 显示为内存地址而非字符串</a> </li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/131491715">VS2022 And QtCreator10调试Qt源码教程</a> （推荐 2023.07）</li>
</ul>
<p>若是 IDE 调试时发现没有 Qt 的符号调试包，教程可参考姊妹篇一；以及学会如何查看 对应模块是否加载</p>
<br>

<h2 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> </p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
]]></content>
      <categories>
        <category>学习 - Windows</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>Visual Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>VS2022 And QtCreator10 调试 Qt 源码教程</title>
    <url>/posts/80ecb9a8/</url>
    <content><![CDATA[<p><strong>简  述：</strong> 记录使用 Visual Studo 2022 和 QtCreator10 调试 Qt 5.15 源码和 加载 .pdb 的方法。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p><strong>源码</strong>：*.h  *.cpp </p>
<p><strong>符号调试包</strong>：*.pdb  (属 Windows 专有)</p>
<p><strong>动态链接库：</strong> *.dll</p>
<p><strong>静态链接库：</strong> *.lib  (通常是前者，也可以是 .dll 的符号信息，编译时刻使用)</p>
<p>your.exe 可以进行单步调试  &#x3D;&#x3D;  your源码  +  your.pdb + your.dll + microsoft.pdb + microsoft.dll + 这些文件路径全部设置正确</p>
</blockquote>
<br>

<h2 id="IDE-调试-Qt-源码"><a href="#IDE-调试-Qt-源码" class="headerlink" title="IDE 调试 Qt 源码"></a>IDE 调试 Qt 源码</h2><p>以下两个 IDE 均使用 ”MSVC 2022 + Qt 5.15.2” 来编译项目作为示范，且生成的 x86 的 Debug 模式的 your.exe。</p>
<br>

<h3 id="Visual-Studio-2022"><a href="#Visual-Studio-2022" class="headerlink" title="Visual Studio 2022"></a>Visual Studio 2022</h3><ol>
<li><p>Visual Studio 2022  依次打开 菜单栏的【Tools】【Options】，进入【Debugging】【Symbols】添加 Qt 的符号调试包路径</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/20230701145622.png" width="80%"/ loading="lazy">
</li>
<li><p>右键打开解决方案的属性【Solution】【Properties】，【Debug Source Files】添加源码路径</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/20230701143001.png" width="80%"/ loading="lazy">
</li>
<li><p>编译工程，模式为 Debug、Win32，设置断点【F9】后，开启运行调试【F5】，卡住断点，再怕【F11】 进入任何一个 Qt 源码的函数调试， QWidget::show() 函数为例</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/5.gif" width="100%"/ loading="lazy">
</li>
<li><p>若是每次 【F9】调试加载很慢，是因为每次从微软服务器拉取这些文件到本地比较耗时。也在步骤1中，和我一样取消【Microsoft Sysbol Servers】前面的勾，调试很快且顺滑，且不影响正常的软件调试功能。</p>
</li>
</ol>
<br>

<h3 id="Qt-Creator-10-0-1"><a href="#Qt-Creator-10-0-1" class="headerlink" title="Qt Creator 10.0.1"></a>Qt Creator 10.0.1</h3><ol>
<li><p>Qt Creator  10.0.1 依次打开 菜单栏的【Edit】【Preferences】，进入【Debugger】【Source Path Mapping】【Add Qt sources…】添加 Qt 的源码路径，此处是调试需要</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/20230701144948.png" width="80%"/ loading="lazy">
</li>
<li><p>【Debugger】【CDB Paths】的 “Symbol Paths” ，”Source Paths” 添加 MSVC 的符号调试包的路径和源码路径。</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/20230701153918.png" width="80%"/ loading="lazy">
</li>
<li><p>【Enviroment】【Locator】【Custom】添加 Qt 的源码路径和自定义的文件路径，作用是便于快捷键直接定位具体文件。注意此处路径分隔符号是 <code>/</code></p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/20230701151711.png" width="80%"/ loading="lazy">

<p>快捷键【Ctrl + K】快速定位左下角，然后搜索 Qt 源码的文件名以及自定义项目的文件名称，迅速切换，体验极佳</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/6.gif" width="80%"/ loading="lazy">
</li>
<li><p>编译工程，模式为 Debug、32bit，设置断点【F9】后，开启运行调试【F5】，卡住断点，再怕【F11】 进入任何一个 Qt 源码的函数调试， QWidget::show() 函数为例</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/7.gif" width="80%"/ loading="lazy"></li>
</ol>
<br>

<h2 id="排查思路"><a href="#排查思路" class="headerlink" title="排查思路"></a>排查思路</h2><p>若用 VS2022 &#x2F; QtCreator 10.0.1 单步调试 Qt 源码失败，排查原因</p>
<ol>
<li>安装 Qt 时候亦下载了 Qt 源码和 符号调试包</li>
<li>your.exe + your.dll 生成到你设置的预期的路径，且放在同一级</li>
<li>如 Qt5Gui<font color=#FF0000>d</font> .dll (Debug 模式下 dll 名称含 d)</li>
<li>加载了 pdb (确定版本没下错)</li>
<li>解决方案加载了 src源码</li>
<li>加载了符号调试包路径</li>
<li>编译的 your.exe 是对应 MSVC、 x86 且是 debug 模式</li>
<li>若是 x64 或者其它 Kit 调试原理相同</li>
</ol>
<br>

<h2 id="姊妹篇"><a href="#姊妹篇" class="headerlink" title="姊妹篇"></a>姊妹篇</h2><ul>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/120339797">VS2017 调试 Qt 源码，安装 PDB</a></li>
<li><a href="https://xmuli.blog.csdn.net/article/details/116244865">VS2019 调试 Qt5 时 QString 显示为内存地址而非字符串</a> </li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/131491715">VS2022 And QtCreator10调试Qt源码教程</a></li>
</ul>
<p>若是 IDE 调试时发现没有 Qt 的符号调试包，教程可参考姊妹篇一；以及学会如何查看 对应模块是否加载</p>
<br>

<h2 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> </p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
]]></content>
      <categories>
        <category>学习 - Windows</category>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>Visual Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio 2019 进行远程调试</title>
    <url>/posts/d74cfa6e/</url>
    <content><![CDATA[<p><strong>简  述:</strong> 纪录一下用 <code>Visual Studio 2019</code> 进行远程调试；有感于某些 🔍 的文章怎么写的又臭又长，看半天还不明所以！！！</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p><strong>环境：</strong> 💻  <code>win10 21H2</code>  📎  <code>Visual Studio 2019</code> 📎 <code>调试 x86 的dll</code></p>
<ol>
<li><p>将本机的 <code>x86</code> 文件夹拷贝到虚拟机中；</p>
<p>路径为 <code>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\Remote Debugger\x86</code> </p>
</li>
<li><p>在虚拟机中 <strong>管理员运行</strong> 拷贝的根目录下的  <code>msvsmon.exe</code> 程序，选中 “工具-选项” 配置如下，时间设置为 90000 避免时间过短无响应断开连接了，方便</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202203301711906.png" width="70%"/ loading="lazy">
</li>
<li><p>将本机编译的带调试信息的 dll 拷贝到虚拟机对应的调试程序后；运行将要调试程序模块，程序跑起来做准备</p>
</li>
<li><p>在本机中 <strong>管理员运行 VS2019</strong> ，附加虚拟机中此 dll 进程</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202203301715873.png" width="70%"/ loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202203301717726.png" width="90%"/ loading="lazy">
</li>
<li><p>看到远程调试成功</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202203301717607.png" width="100%"/ loading="lazy"></li>
</ol>
<br>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>此为在虚拟机或者局域网中方法，互联网下远程调试暂未尝试过。</p>
<p><code>msvsmon.exe</code> 有对应 x86 和 x64 两个版本，其分别调试对应的版本 dll 或 exe。</p>
<blockquote>
<p>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\Remote Debugger\x86\msvsmon.exe</p>
<p>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\Remote Debugger\x64\msvsmon.exe</p>
</blockquote>
<br>

<p><strong>依旧无法调试的可能原因：</strong></p>
<ol>
<li>未关闭程序自保，或者有需要的注册表，取决于你的调试程序『并非所有程序都有』</li>
<li>msvsmon.exe 的和 dll 调试版本不对；若调试 explorer.exe 插件，通常是 x64 位的dll。</li>
<li>权限不够，未以管理员运行。</li>
<li>附加的 dll 错误吗，未加载正确的 pdb ，前者可用 procexp64 查看确认，后者在 vs 底部模块窗口可以确认。</li>
<li>其 dll 的 pdb 其实是调用的为本机路径中，虚拟机中不必拷贝一份；在上图中标志出来了，可以仔细看下。</li>
</ol>
<br>

<h3 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h3><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> </p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序二 经验</category>
        <category>学习 - Windows</category>
      </categories>
      <tags>
        <tag>Visual Studio</tag>
        <tag>调试</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio 断点调试之箭头偏移进错函数，怪异捉🐛记</title>
    <url>/posts/83002d8f/</url>
    <content><![CDATA[<p><strong>简  述:</strong> <code>Visual Studio</code> 断点调试之箭头偏移进错函数，怪异现象之捉🐛记。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>　　好久没有遇到这么有趣的 Bug 了，来抓一个调试指针出现偏移错误❌的🐛。　</p>
<p>　　在 C++ 实现的派生类和类中重写的两个虚函数 A、B 后，代码实写调用 A 函数，断点 Debug 调试却命中 B 函数。💻  <code>win10 21H2</code> 📎  <code>Visual Studio 2019</code> </p>
<br>

<p>　　<code>MyCollectLogImpl</code> 为 <code>IMyCollectLog</code> 的一个派生类，然后代码中调用派生类的 <code>OnCollectLogOne</code> 函数，但调试的箭头和断点却进入了另一 <code>OnCollectLogArray</code> 函数；十分怪异之。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">IMyCollectLog</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">IMyUnknown</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">long</span> STDCALLTYPE <span class="token function">OnCollectLogOne</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> sKey<span class="token punctuation">,</span> IMyBundle<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">long</span> STDCALLTYPE <span class="token function">OnCollectLogArray</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> sKey<span class="token punctuation">,</span> IMyBundleArray<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


<span class="token keyword">class</span> <span class="token class-name">MyCollectLogImpl</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> CloudService<span class="token double-colon punctuation">::</span><span class="token class-name">IMyCollectLog</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">long</span> STDCALLTYPE <span class="token function">OnCollectLogOne</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> sKey<span class="token punctuation">,</span> IMyBundle<span class="token operator">*</span> pBundle<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sKey <span class="token operator">||</span> <span class="token operator">!</span>pBundle<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

         <span class="token comment">// TODO: do something</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">long</span> STDCALLTYPE <span class="token function">OnCollectLogArray</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> sKey<span class="token punctuation">,</span> IMyBundleArray<span class="token operator">*</span> pBundleArray<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sKey <span class="token operator">||</span> <span class="token operator">!</span>pBundleArray<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        
        <span class="token comment">// TODO: do something</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// ... 定义其它成员函数和成员</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>调用处的函数为</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void onInnerQueryEnd(const char* sKey, IMyBundle* pBundle) &#123;
    if (m_setCollLogPtr.empty())
        return;

    for (auto it : m_setCollLogPtr)
        it-&gt;OnCollectLogOne(sKey, pBundle);   &#x2F;&#x2F; *** 写的是执行 OnCollectLogOne， 而非是 OnCollectLogArray, 虽然两者行参长得很像 ***
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p>　　用一张图来解释就是：</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202204281834584.png" width="100%"/ loading="lazy">

<br>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li>断点调试的箭头发生偏移到其它函数。本次遇到</li>
<li>断点调试时，断点和箭头均无法进入某一函数内部。以前遇过</li>
</ol>
<br>

<p><strong>两者实际为同一根因：</strong></p>
<p>『根因1』Release 编译模式下关闭优化仍有优化，空实现的函数没有对应汇编</p>
<p>『根因2』跨模块加载、创建对象，其 .dll 接口和 .pdb 不对应</p>
<p>『根因3』.dll 和 .pdb 拷贝错了源对象、移动到了错的目标路径下</p>
<p>『根因4』.dll 和 .pdb 拷贝到正确的目标路径，被调试的程序未重启加载此插件（大部分需要）</p>
<br>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><blockquote>
<p>　　<strong>Release 模式下编译，即使关闭优化<sup>[1]</sup>，实际仍有优化。</strong> 如实现一个空的函数，就会被优化掉，反汇编窗口中可查看无对应此函数的汇编语句。『简直是大坑』。</p>
</blockquote>
<br>

<ul>
<li><font color=#FF0000 face="STFangsong"><strong>Release 编译模式下关闭优化</strong> </font></li>
<li>实现某一函数时却暂不实现细节（仅有 if 判断指针为空和 return 语句，细节未写），仅想调试一下框架时，<font color=#FF0000 face="STFangsong"><strong>可在函数中添加一句 <code>int a = 0</code> 或 <code>例子打印语句</code> 避免被编译器优化。</strong> </font></li>
<li>先切换 Debug 模式下编译，替换文件验证代码，在切回 Release 模式定位</li>
</ul>
<br>

<p><strong>注：</strong></p>
<p><sup>[1]</sup> Visual Studio 2019 项目属性页，”Configuration Properties - C&#x2F;C++ - Optimization” 中 <code>Optimization</code> 设置为 <code>Disabled (/Od)</code>；使 Release 模式的编译关闭所有优化。</p>
<br>

<h2 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> </p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序二 经验</category>
        <category>学习 - Windows</category>
      </categories>
      <tags>
        <tag>Visual Studio</tag>
        <tag>调试</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio实际仅增删数行，却显示文件所有行均发生变更</title>
    <url>/posts/b3881498/</url>
    <content><![CDATA[<p><strong>简  述：</strong> 使用 Visual Studio 2019 开发 C++ 工程，经常遇到仅修改几行代码，但整个文件所有行都显示被修改；甚是奇怪数月之久，于近日彻底解决之，共享同困惑于此者。<strong>Visual Studio 开发工程项目，设置默认行尾和文件编码。</strong></p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>　　<strong>💻：</strong>  <code>win10 21H2</code>  📎  <code>Visual Studio 2019</code> 📎  <code>Git Extensions</code> 📎 <code>GitLab</code></p>
<p>　　使用 VS 2019 在项目上开发，常遇到修改 <code>.h</code> &#x2F; <code>.cpp</code> 文件，明明仅增删几行后，但用 <code>git diff</code> &#x2F; <code>git gui</code> 工具 &#x2F;  <code>GitLab</code> 网页端，查看 push 的提交差异，却显示整个文件所有行都有增删修改了。忧愁，甚是不解，无奈搁置许久。</p>
<br>

<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>　　一日，后无意想到可能一种原因，后验证，果然可行，遂纪录此方案供后来者查阅之。</p>
<p>**两个原因: ** 在 VS 2019 中编辑文件后，<code>ctrl + s</code> 保存时，</p>
<p>​	ⅰ改变了文件编码，如 GBK ↔ UTF8 ；</p>
<p>​	ⅱ 文件行尾发生了改变，如 CRLR ↔ LF ；</p>
<br>

<p>　　原因为商业项目中，团队开发合作，通常会进行跨平台支持，如前 K 司的 WPS，大家使用不同的 IDE 和默认环境配置造成的。</p>
<p>　　如：A 在 Mac &#x2F; Linux 下修改 xxx.cpp 文件后保存，会将一些自己操作系统下的默认符号，也保存下来后提交到 Git 仓库；后面 B 在 Windows 下从 Pull 此更新，亦修改此 xxx.cpp 文件后保存时，也会将自己的系统下的默认符号保存进文件。此时 B 查看 git</p>
<p> diff 就及容易看到整个文件所有行都被修改。</p>
<br>

<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><p>　　每次手动在 notepad++ 中对单个文件修改”行尾”、”文件编码”；可行，但很麻烦。且不足在于不知道下一个文件会是哪一个文件会有此些问题。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2022/20220225180310.png" width="35%"/ loading="lazy">



<p>　　当然希望依托于 Visual Studio 有比较好的的解决方案，且最优雅和方便的。搜寻之后，放上我的配置；</p>
<br>

<p><strong>我的需求为：</strong></p>
<ul>
<li>每次修改 .cpp 文件后，保存时候，自动使用的为当前文件的 **”行尾”**；不会默认强制保存为 CRLR 或 LR 编码。</li>
<li>每次修改 .cpp 文件后，保存时候，自动使用的为当前文件的 <strong>“编码格式”</strong> ；不会默认强制保存为 GBK 或 UTF8 编码。</li>
<li>能够在  Visual Studio 编辑区域，能够轻松查看到当前文件的 <strong>“编码格式”</strong> 和 <strong>“行尾”</strong> ；最好还能点击一下就能在不同编码格式、不同行尾之间切换，耐久奶思了。</li>
</ul>
<br>

<h4 id="方案二『荐』"><a href="#方案二『荐』" class="headerlink" title="方案二『荐』"></a>方案二『荐』</h4><p>　　这个三个需求使用下面『插件1』和『插件2』完美解决。</p>
<br>

<p><strong>在线插件可安装</strong></p>
<p>『插件1』 <a href="https://marketplace.visualstudio.com/items?itemName=JakubBielawa.LineEndingsUnifier">LineEndingsUnifier</a> 文件行尾设置；使用当前文档的行尾（CRLR、LR、LF）</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2022/20220225183937.png" width="100%"/ loading="lazy">

<br>

<p>『插件2』<a href="https://marketplace.visualstudio.com/items?itemName=genrwoody.FileEncoding">FileEncoding </a> 客户编辑区域右下角显示当前文件编码</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2022/20220225183806.png" width="100%"/ loading="lazy">

<br>

<p>还有一个类似『插件3』 <a href="https://grebulon.com/software/stripem.php">Strip’em Add-in for Visual Studio</a> 文件行尾设置；使用当前文档的行尾（CRLR、LR、LF），不过仅支持 VS 2008-2017；</p>
<br>

<h2 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> </p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
]]></content>
      <categories>
        <category>学习 - Windows</category>
        <category>学习 - Git</category>
      </categories>
      <tags>
        <tag>Visual Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio生成.vs隐藏文件夹，导致Git命令错误</title>
    <url>/posts/afbb1e78/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　使用 Visual Studio 2019 修改 C++ 工程，编译后根目录下多了 <code>.vs</code> 隐藏文件夹，后续使用 Git 命令报错，解决之。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>　　拉取某仓库 <code>AVxxxugin</code> 时；使用 Visual Studio 2019 打开 <code>.sln</code> 修改代码完成后，编译项目成功，同时会发现目录下多了一个 <code>.vs</code> 的隐藏文件夹；此时使用 <code>git add</code> 命令提交，遇到报错如下，导致 push 阻塞，感觉使用的 Git 命令也没有那么顺滑了~~</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">❯ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
error: open<span class="token punctuation">(</span><span class="token string">".vs/AVxxxugin/v16/Browse.VC.opendb"</span><span class="token punctuation">)</span>: Permission denied
error: unable to index <span class="token function">file</span> <span class="token string">'.vs/AVxxxugin/v16/Browse.VC.opendb'</span>
fatal: adding files failed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>　　工具查看一番，原来是你小子阻碍了我使用如丝顺滑般的 Git 命令，导致后面 Push 阻塞；得想个办法干掉（划，解决之）</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2022/20220308114913.png" width="40%"/ loading="lazy">

<br>

<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><p>　　在资源管理器中，手动删除 <code>.vs</code> 隐藏文件夹；后续在 Git Bash 中就可以顺利进行 git 后续的命令了。解决不那么优雅，且需要每次提交都手动删除一次。</p>
<br>

<h4 id="方案二『荐』"><a href="#方案二『荐』" class="headerlink" title="方案二『荐』"></a>方案二『荐』</h4><p>　　<del>人生没有追求，和咸鱼有什么区别（虽然我的梦想就是当一条咸鱼）。</del> 　当然希望有更优雅的解决方式：</p>
<p>将 <code>AVxxxugin</code> 目录下的 <code>.gitignore</code> 文件中（没有则新建），添加一行 <code>.vs</code> 后保存，表示使用 Git 命令时，忽略此文件夹；后续使用也不会再有此报错了。 <a href="https://git-scm.com/docs/gitignore">#官方文档</a></p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2022/20220308142106.png" width="90%"/ loading="lazy">
]]></content>
      <categories>
        <category>学习 - Windows</category>
      </categories>
      <tags>
        <tag>Visual Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>WPS 的缩写含义</title>
    <url>/posts/3564a0da/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　<code>WPS</code> 的这几个的含义缩写是？有时候会想一下，就如之始好奇 <code>DTK</code> 的含义一样；</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/24b61ef9b2f671a2f8d0e0600aca8576.png" width="50%"/ loading="lazy">



<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p>​	以前总以为一些耳熟能详的 LOGO 的含义是由特殊含义的缩写，不会被改变，但是现在这个认知在这次的培训中发生了转变；</p>
<p>WPS 最早的含义是 <strong>Word Processing System</strong> (文字处理系统）；而现在被赋予了新的含义 <strong>WorkSpace Platform Service</strong> 。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_5064(20210626-224838).JPG" width="50%"/ loading="lazy">

<br>

<p>然后另一个是 DTK，比较早的含义是 <strong>Deepin Tool Kit</strong> ；现在也被赋予了新的含义 <strong>Development Tool Kit</strong> 。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210626224801.png" width="70%"/ loading="lazy">

<br>

<p>​		时间在流逝，一切都在发展变化，大家也都为其带来了新的寓意和寄托。</p>
]]></content>
      <categories>
        <category>生活 - 闲暇的趣闻</category>
      </categories>
      <tags>
        <tag>偶然乐趣</tag>
        <tag>WPS</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10 安装 QtCreator + Visual Studio 2015 作为 C++ 的 IDE 开发工具</title>
    <url>/posts/fee889d4/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  <code>windows</code>环境下安装<code>Qt Creator</code> + <code>Visual Studio 2015</code>作为<code>c++</code>的<code>IDE</code>开发工具，学习和使用<strong>qt</strong> (备选)； <strong>本文详细介绍安装VS2015的过程和安装番茄助手Visual Assist X；以及如何配置QtCreator的环境和插件</strong>，使得可以在VS2015里面运行Qt的程序，使用Qt自带的设计师等。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="关联博文："><a href="#关联博文：" class="headerlink" title="关联博文："></a>关联博文：</h2><p><strong>Windows 系统</strong></p>
<ul>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/103674579">在 Win10 环境下安装 QtCreator 5.9.8 作 C++ 的 IDE 开发工具</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/98779698">QtCreator 安装 SDK，在 MSVC 编译模式下使用 CDB 调试器</a> </li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/103755569">Win10 安装 QtCreator + Visual Studio 2015 作为 C++ 的 IDE 开发工具</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/78587699">Visual Studio 2017 专业版使用最新版 Qt 5.9.2 教程</a>  </li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/120070828">Win10 安装 CLion + CMake + MSVC &#x2F; MinGW 作 QT 开发</a></li>
</ul>
<br>

<h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1903</code>  </p>
<p><strong>编程软件：</strong> <code>Qt 5.9.8</code>， <code>Qt Creator 4.8.2</code>， <code>Visual Studio 2015(专业版)</code></p>
<br>

<h2 id="下载Visual-Studio-2015专业版："><a href="#下载Visual-Studio-2015专业版：" class="headerlink" title="下载Visual Studio 2015专业版："></a>下载Visual Studio 2015专业版：</h2><p>官网纯净版下载，推荐地址：<a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn/</a></p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223230926.png" loading="lazy"></p>
<p>其中详细链接如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">文件名：
cn_visual_studio_professional_2015_with_update_3_x86_x64_dvd_8923256.iso

校验文件完整性SHA1值：
99E6C061FFB3194D28682D75D5F2F0F12A8D614F

文件大小：
<span class="token number">7</span>.21GB

发布时间：
<span class="token number">2016</span>-06-27

磁力链接：
ed2k://<span class="token operator">|</span><span class="token function">file</span><span class="token operator">|</span>cn_visual_studio_professional_2015_with_update_3_x86_x64_dvd_8923256.iso<span class="token operator">|</span><span class="token number">7745202176</span><span class="token operator">|</span>DD35D3D169D553224BE5FB44E074ED5E<span class="token operator">|</span>/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="安装VS2015专业版："><a href="#安装VS2015专业版：" class="headerlink" title="安装VS2015专业版："></a>安装VS2015专业版：</h2><p><font color=#D0087E face="幼圆"><strong>下载好完整的离线安装包之后，建议断开网络运行安装程序;避免联网下载新更新文件，导致安装时间变得更长；</strong> </font></p>
<p>以管理员身份运行VS2015的运行程序：</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223232608.png" loading="lazy"></p>
<ul>
<li>选择 <strong>自定义（安装功能）</strong>，然后点击 <strong>下一步</strong>：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223233207.png" loading="lazy"></p>
<ul>
<li>选择所需要的的模块（<strong>Visual C++</strong> 模块全选）</li>
</ul>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223233754.png" loading="lazy"></p>
<ul>
<li>点击 <strong>安装</strong>：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223234550.png" loading="lazy"></p>
<ul>
<li>耐心等待，一般固态约20min左右即可安装完成：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223234705.png" loading="lazy"></p>
<ul>
<li>启动：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191224001504.png" loading="lazy"></p>
<br>

<h2 id="安装VS小番茄助手Visual-Assist-X-10-9-2248："><a href="#安装VS小番茄助手Visual-Assist-X-10-9-2248：" class="headerlink" title="安装VS小番茄助手Visual Assist X 10.9.2248："></a>安装VS小番茄助手Visual Assist X 10.9.2248：</h2><p>番茄小助手，搭配VS使用，使用起来，不仅会港剧编码效率有所提高，效率变快，且会感觉寿命都在增加；</p>
<p> <strong>分享一个破解版本：链接: <a href="https://pan.baidu.com/s/1ZHKufAQ6IzbdIcUT-7k5kg">https://pan.baidu.com/s/1ZHKufAQ6IzbdIcUT-7k5kg</a> 提取码: h4c2</strong></p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191224002041.png" loading="lazy"></p>
<p><strong>正常安装和破解方法：</strong></p>
<ul>
<li><p><strong>第一步：安装2248版本</strong><br>（1）解压缩。共有两个文件（ <strong>VA_X_Setup_10-9-2248.exe</strong> 和  <strong>readMe.txt</strong>）和一个文件夹（Crack）。<br>（2）关闭VS所有打开界面。<br>（3）双击 <strong>VA_X_Setup_10-9-2248.exe</strong>安装Visual Assist 2248版本。</p>
</li>
<li><p><strong>第二步：破解</strong><br>（1）打开C盘。地址栏中输入：<code>C:\Users\</code>用户名，如果没看到<code>AppData</code>目录，直接在地址栏中输入<code>\AppData</code>再回车确认进入该目录。<br>（2）寻找目标位置。打开<code>Local\Microsoft\VisualStudio\15.0_281df2b7\Extensions\</code>一个目录。<br>注意：<br>1.本地安装的VS版本为2017，所以本地的文件夹名称为15.0_281df2b7。若是VS其他版本可能会有差异。<br>2.“一个目录”为安装时自动生成的，名称随机。<br>3.因为“一个目录”的名称不固定，建议到Extension目录下时，搜索名称为 <strong>“VA_X.dll”</strong>的文件，然后确定目标位置。<br>（3）重命名。找到 <strong>“VA_X.dll”</strong>文件后，不要随便删除。重命名为<code>VA_X_old.dll</code>作为备份（ps:避免以下步骤4之后导致VS打不开的尴尬局面！）<br>（4）替换。拷贝Crack文件夹中的 <strong>VA_X.dll</strong>到该文件夹中。</p>
</li>
</ul>
<p><strong>注意：比较懒或者实在找不到目标位置，请参考以下通用方法：</strong><br>（1）下载Everything.exe，一路下一步安装完。<br>（2）在搜索框中输入VA_X.dll，回车。<br>（3）用解压文件夹Crack中的VA_X.dll替换掉搜索出来的VA_X.dll。（一般这里会有两个VA_X.dll，通过看路径判断哪个是破解版，哪个是安装的原版） </p>
<ul>
<li><strong>第三步：重启VS</strong></li>
</ul>
<br>

<h2 id="安装“VS-Qt插件”："><a href="#安装“VS-Qt插件”：" class="headerlink" title="安装“VS-Qt插件”："></a>安装“VS-Qt插件”：</h2><p>打开VS2015，选中 <strong>“工具-扩展和更新”</strong>，（此时保证电脑处于联网状态）</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191224002217.png" loading="lazy"></p>
<ul>
<li>在搜索栏里面输入“qt”，然后选中如下图这个，点击下载和安装：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191224002912.png" loading="lazy"></p>
<ul>
<li>点击配置，添加生成的Qt的文件夹目录：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191224004107.png" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191224004155.png" loading="lazy"></p>
<br>

<h2 id="验证安装成功："><a href="#验证安装成功：" class="headerlink" title="验证安装成功："></a>验证安装成功：</h2><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191224004530.png" loading="lazy"></p>
<ul>
<li>点击下一步，按照如下图所示的方式，创建一个新的Qt的工程项目（后面会单独写一篇，介绍QtCraetor和使用VS2015创建一个项目，和解析深究这些IDE里面常用的功能和区分模块等）：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191224004609.png" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191224004728.png" loading="lazy"></p>
<ul>
<li>运行成功：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191226203330.png" loading="lazy"></p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>Win10 的 VMware 中安装 UOS 20，在 UOS 中安装 QtCreator 及搭建 DTK 开发环境</title>
    <url>/posts/4914a5ac/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  在<strong>UOS20</strong> （Linux系统）安装  <strong>Qt Creator 5.11.3， 64bit</strong>的开发教程，并且配置好 <strong>dtk</strong>的开发环境；其中本篇文章主要内容，介绍如下</p>
<ul>
<li>在<code>win10</code>的机器里面使用<code>VMware15.5</code>安装<code>UOS20（Linux）</code>操作系统</li>
<li>在<code>uos20</code>里面安装<code>QtCreator</code></li>
<li>在<code>QtCretor</code>里面配置<code>dtk</code>开发环境和工程模板</li>
</ul>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="关联博文："><a href="#关联博文：" class="headerlink" title="关联博文："></a>关联博文：</h2><p><strong>Linux 系统</strong></p>
<ul>
<li><p><a href="https://blog.csdn.net/qq_33154343/article/details/103733327">Win10 的 VMware 中安装 UOS 20，在 UOS 中安装 QtCreator 及搭建 DTK 开发环境</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_33154343/article/details/104180794">MacOS 安装 Parallels Desktop，再安装 UOS 20 + QtCreaor，及搭建 DTK 开发环境</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_33154343/article/details/102789047">MacOS 的 VMware Fusionlimian 中安装 Linux Deepin15.11</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_33154343/article/details/112239518">Deepin &#x2F; UOS 中配置 DTK 开发环境</a></p>
</li>
<li><p><a href="https://xmuli.blog.csdn.net/article/details/106510975">重装 UOS &#x2F; Deepin V20 后必安装软件（个人习惯）</a></p>
</li>
<li><p><a href="https://xmuli.blog.csdn.net/article/details/107696563">ArchLinux + DDE 安装教程</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_33154343/article/details/108378441">对 GNU&#x2F;Linux 介绍、ArchLinux社区氛围、DDE移植Arch流程</a></p>
</li>
</ul>
<br>

<h2 id="背景缘由："><a href="#背景缘由：" class="headerlink" title="背景缘由："></a>背景缘由：</h2><p>某笔记本一台，已经安装win10，且已经在VMware虚拟机里面，安装好了UOS20操作系统（一款颜值在线的Linux系统）；然后为了实际工作中为uos20添砖加瓦，需要安装QtCretor此IDE作为开发环境，且配置好那些的dtk的开发环境（写应用开发的开发人员），因他们是有所需要的；而我，作为是给他们写dtk库的人，表示是不需要设置的此环境的。但写应用的开发者们，有时候会使用dtk控件的时候，会有一些诡异的bug，我就需要测试一下，故此搭建 <strong>Dtk Widgets Application</strong>模版环境。</p>
<p><strong>ps: uos20 的前一个大版本是deepin15， 都是同一家操作系统公司研发，是一个国际排名稳定在10左右的Linux的版本，衍生于Debian</strong></p>
<p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p>
<p><strong>编程软件：</strong>  <code>Qt 5.9.8</code>，<code>Qt Creator 4.8.2 (Enterprise)</code></p>
<p><strong>&amp;&amp;</strong></p>
<p><strong>编程环境：</strong>  <code>uos 20 x64 </code>    <strong>Kernel：</strong>  <code>x86_64 Linux 4.19.0-5-amd64</code></p>
<p><strong>编程软件：</strong>  <code>Qt 5.11.3</code>，<code>Qt Creator 4.8.2 </code></p>
<br>

<h2 id="win10里面的VMware安装UOS20系统："><a href="#win10里面的VMware安装UOS20系统：" class="headerlink" title="win10里面的VMware安装UOS20系统："></a>win10里面的VMware安装UOS20系统：</h2><ul>
<li>选择新创建一个虚拟机，选择 <strong>自定义（高级）</strong>点击 <strong>下一步</strong>：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227141804.png" loading="lazy"></p>
<ul>
<li>直接 <strong>下一步</strong>，不用修改什么</li>
</ul>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227141952.png" loading="lazy"></p>
<ul>
<li>选择 <strong>稍后安装操作系统</strong>， 点击 <strong>下一步</strong>：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227142130.png" loading="lazy"></p>
<ul>
<li>选择 <strong>Ubuntun x64（这点很重要）</strong>, 点击 <strong>下一步</strong>，</li>
</ul>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227142326.png" loading="lazy"></p>
<ul>
<li>选择安装目录， 点击下一步：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227142713.png" loading="lazy"></p>
<ul>
<li>建议还是多分配几颗，这是我的个人配置颗数，越多越好</li>
</ul>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227142809.png" loading="lazy"></p>
<ul>
<li>选择分配内存数，然后点击下一步（后面也可以修改内存数大小）</li>
</ul>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227143137.png" loading="lazy"></p>
<ul>
<li>选择网络模式<ul>
<li><strong>桥接网络</strong>：虚拟机里面的系统会有一个独立IP，不和物理主机的系统公用一个IP</li>
<li><strong>NAT网络</strong>：虚拟机里面的系统不会有一个独立IP，和物理主机的系统公用一个IP</li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227143407.png" loading="lazy"></p>
<ul>
<li>接下来几个步骤不用修改什么，直接选择下一步：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227143623.png" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227143726.png" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227143749.png" loading="lazy"></p>
<ul>
<li>选择磁盘大小，然后点击下一步：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227143852.png" loading="lazy"></p>
<ul>
<li>直接下一步：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227143938.png" loading="lazy"></p>
<ul>
<li>选择镜像源之后，点击开启，便会自动安装好虚拟机</li>
</ul>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227144542.png" loading="lazy"></p>
<ul>
<li>常规的选择用户名，设置密码等，然后等待之后，就会安装成功</li>
</ul>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227144915.png" loading="lazy"></p>
<p>经过前面一些列操作，uos20已经成功运行成功；接下来就是安装QtCretor了；不过在此之前，先建议更换源：</p>
<p>【方式一】可以在 <strong>“控制中心-更新-更新设置“</strong>，GUI界面手动选择换源；</p>
<p>【方式二】也可以去官网找稳定的更新的源，添加到<code>/etc/apt/sources.list</code>这个文件里面）；</p>
<p>然后执行下面更新的命令，更新一下系统：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> dist-upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br>

<h2 id="在uos20里面安装QtCreator："><a href="#在uos20里面安装QtCreator：" class="headerlink" title="在uos20里面安装QtCreator："></a>在<code>uos20</code>里面安装<code>QtCreator</code>：</h2><p>直接执行以下语句:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qtcreator     //安装Craetor IDE
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qt5-default   //安装qt的配置
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libdtkwidget-dev  //安装dtk开发所需要环境

<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token builtin class-name">source</span> qt5-default    //qt源码包，此会安装在当前所处目录下，建议更换目录再执行，推荐放在

//<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
//也可以将上面的合成一个命令
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libdtkwidget-dev qt5-default qtcreator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





<p>其中安qt源码学习的时候，会出现如下提示，蛋蛋蛋蛋蛋是，并不影响😎😎😎😎，进到当前文件夹下查看，所需要的文件已经被下载下来了：</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227150930.png" loading="lazy"></p>
<p>我们所需啊都在这里</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227151528.png" loading="lazy"></p>
<ul>
<li>创建一个空的工程项目，验证安装成功</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227151730.png" style="zoom:80%;" / loading="lazy">

<br>

<h2 id="在QtCretor里面配置dtk开发环境和工程模板："><a href="#在QtCretor里面配置dtk开发环境和工程模板：" class="headerlink" title="在QtCretor里面配置dtk开发环境和工程模板："></a>在<code>QtCretor</code>里面配置<code>dtk</code>开发环境和工程模板：</h2><p>在没有设置之前打开新建工程项目，是这样的，没有 <strong>”Dtk Widgets Application“</strong>这个选项的：</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227152000.png" loading="lazy"></p>
<h3 id="安装-Dtk-Widgets-Application-工程模板："><a href="#安装-Dtk-Widgets-Application-工程模板：" class="headerlink" title="安装 Dtk Widgets Application 工程模板："></a>安装 Dtk Widgets Application 工程模板：</h3><h4 id="【方式一】：命令安装"><a href="#【方式一】：命令安装" class="headerlink" title="【方式一】：命令安装"></a>【方式一】：命令安装</h4><p>运行命令，然后重启QtCretor：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qtcreator-template-dtk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="【方式二】：手动安装"><a href="#【方式二】：手动安装" class="headerlink" title="【方式二】：手动安装"></a>【方式二】：手动安装</h4><p>下载此文件：<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227153249.png" loading="lazy"></p>
<p>链接：<a href="https://pan.baidu.com/s/1GD7ky9iFjYQ5NZBIU9kjOw">https://pan.baidu.com/s/1GD7ky9iFjYQ5NZBIU9kjOw</a><br>提取码：8q0b</p>
<blockquote>
<p>下载之后，将此压缩包解压到 &#x2F;usr&#x2F;share&#x2F;qtcreator&#x2F;templates&#x2F;wizards&#x2F;projects 目录下，之后重启 QtCreator，在创建项目的向导中即可选择“Dtk Widgets Application”</p>
</blockquote>
<p>重启之后，会发现有如下，且运行一个新的工程运行验证安装：</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227152501.png" loading="lazy"></p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227153749.png" loading="lazy"></p>
<br>

]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>Win10 安装 CLion + CMake + MSVC / MinGW 作 QT 开发</title>
    <url>/posts/5783d3ec/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　随笔记一下在 Win10 上使用 CLion + CMake 开发 Qt 配置；</p>
<ol>
<li>Win10 + CLion + CMake + MSVC（Visual Studio）+ Qt</li>
<li>Win10 + CLion + CMake + GCC（MinGW）+ Qt</li>
</ol>
<span id="more"></span>

<p>[TOC]</p>
<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="关联博文"><a href="#关联博文" class="headerlink" title="关联博文"></a>关联博文</h2><p><strong>Windows 系统</strong></p>
<ul>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/103674579">在 Win10 环境下安装 QtCreator 5.9.8 作 C++ 的 IDE 开发工具</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/98779698">QtCreator 安装 SDK，在 MSVC 编译模式下使用 CDB 调试器</a> </li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/103755569">Win10 安装 QtCreator + Visual Studio 2015 作为 C++ 的 IDE 开发工具</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/78587699">Visual Studio 2017 专业版使用最新版 Qt 5.9.2 教程</a>  </li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/120070828">Win10 安装 CLion + CMake + MSVC &#x2F; MinGW 作 QT 开发</a></li>
</ul>
<br>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​	预先安装 Win10、QtCrator、CMake 以及 CLion。若想使用 CLion 开发 Qt 就必须告知 Clion 和准备编译构建的项目，一些必要的参数配置。</p>
<p>​	<strong>💻：</strong>  <code>win10 21H1</code> 📎 <code>Qt 5.12.11</code> 📎  <code>Visual Studio 2017</code> 📎 <code>Qt Creator 4.15.0</code></p>
<br>

<h2 id="预先配置项"><a href="#预先配置项" class="headerlink" title="预先配置项"></a>预先配置项</h2><h3 id="配置-CMAKE-PREFIX-PATH（Qt-路径）"><a href="#配置-CMAKE-PREFIX-PATH（Qt-路径）" class="headerlink" title="配置 CMAKE_PREFIX_PATH（Qt 路径）"></a>配置 CMAKE_PREFIX_PATH（Qt 路径）</h3><p>​	<code>CMAKE_PREFIX_PATH</code> 的值为告知此项目使用的 Qt 的版本；即 Qt 安装路径。以下三种方式任选其一即可。</p>
<ul>
<li><p>新建项目时填写</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210821001446.png" width="80%"/ loading="lazy"></li>
</ul>
<br>

<ul>
<li><p>手动写在 CMakeLists.txt 中</p>
<pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_PREFIX_PATH</span> <span class="token string">"C:/Qt/Qt5.12.11/5.12.11/msvc2017"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<br>

<ul>
<li><p>在设置中的 CMake 配置中的 <em>CMake option:</em>  中写参数</p>
<pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">-DCMAKE_PREFIX_PATH=C:/Qt/Qt5.<span class="token number">12.11</span>/<span class="token number">5.12.11</span>/msvc2017<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210821010944.png" width="80%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="配置-ToolChians（工具链）"><a href="#配置-ToolChians（工具链）" class="headerlink" title="配置 ToolChians（工具链）"></a>配置 ToolChians（工具链）</h3><p>当选中正确的 Environment 时，后面系类会自动检测出来正确的配置。可参考下图</p>
<ul>
<li><p>配置 MSVC（Visual Studio） 模式</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210821002137.png" width="80%"/ loading="lazy">
</li>
<li><p>配置 gcc（MinGW）模式</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210821002353.png" width="80%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="配置构建-CMake-环境"><a href="#配置构建-CMake-环境" class="headerlink" title="配置构建 CMake 环境"></a>配置构建 CMake 环境</h3><p>​	告知系统使用哪一个 ToolChinas (工具集合)来处理此项目文件。是 MSCVC 还是 gcc 相关系的？</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210821003230.png" width="80%"/ loading="lazy">

<br>

<h2 id="CLion-中运行-Qt-项目"><a href="#CLion-中运行-Qt-项目" class="headerlink" title="CLion 中运行 Qt 项目"></a>CLion 中运行 Qt 项目</h2><p>​	经过上面的准备工作，最后在运行 CLion，按照步骤可看到最后成功运行。</p>
<ol>
<li>配置 ToolChians、CMake</li>
<li>切换想要构建生成的配置方案（Debug&#x2F;Relase&#x2F;RelWithDebInfo&#x2F;MinSizeRel、MSVC&#x2F;MinGW）</li>
<li>执行编译 CMakeLists.txt 文件，生成 Makefile 文件；</li>
<li>编译上一步生成的 Makefile 文件，编译源文件、链接系统文件、生成目标二进制程序</li>
<li>加载所需要的系统和三方动态库等、运行生成的目标二进制程序</li>
<li>看到窗口运行成功</li>
<li>个人配置的集中生成目标文件的集中模式（可忽略此）</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210821003909.png" width="80%"/ loading="lazy">

<br>

<h2 id="CMake-调用-Qt-语法"><a href="#CMake-调用-Qt-语法" class="headerlink" title="CMake 调用 Qt 语法"></a>CMake 调用 Qt 语法</h2><p>​	CLion 自动生成的 CMakeLists.txt 文件配置内容，如下，简单介绍 CMake 语法。更详细的注释，可参考另一项目的<a href="https://github.com/xmuli/lfxSpeed/blob/master/CMakeLists.txt">此文件</a>。</p>
<pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.20</span><span class="token punctuation">)</span>         <span class="token comment"># 最低 cmake 版本</span>
<span class="token keyword">project</span><span class="token punctuation">(</span>XTest<span class="token punctuation">)</span>                               <span class="token comment"># 此项目名称</span>

<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_STANDARD</span> <span class="token number">17</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_AUTOMOC</span> <span class="token boolean">ON</span><span class="token punctuation">)</span>                        <span class="token comment"># 启用 qt moc 的支持</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_AUTORCC</span> <span class="token boolean">ON</span><span class="token punctuation">)</span>                        <span class="token comment"># 启用 qrc 资源文件的支持</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_AUTOUIC</span> <span class="token boolean">ON</span><span class="token punctuation">)</span>                        <span class="token comment"># 启用 qt uic 的支持</span>

<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_PREFIX_PATH</span> <span class="token string">"C:/Qt/Qt5.12.11/5.12.11/msvc2017"</span><span class="token punctuation">)</span>  <span class="token comment"># Qt 的安装路径</span>

<span class="token keyword">find_package</span><span class="token punctuation">(</span>Qt5 COMPONENTS                  <span class="token comment"># 查找 Qt5 的如下库</span>
        Core
        Gui
        Widgets
        REQUIRED<span class="token punctuation">)</span>

<span class="token keyword">add_executable</span><span class="token punctuation">(</span>XTest main.cpp<span class="token punctuation">)</span>               <span class="token comment"># 生成目标文件 XTest</span>
<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>XTest                  <span class="token comment"># 链接 Qt5 的如下二进制库</span>
        <span class="token inserted class-name">Qt5::Core</span>
        <span class="token inserted class-name">Qt5::Gui</span>
        <span class="token inserted class-name">Qt5::Widgets</span>
        <span class="token punctuation">)</span>
        
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">WIN32</span><span class="token punctuation">)</span>                             <span class="token comment"># 可忽略，大意为未配置或尝试找不到 Qt 安装目录，则警告</span>
    <span class="token keyword">set</span><span class="token punctuation">(</span>DEBUG_SUFFIX<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">CMAKE_BUILD_TYPE</span> <span class="token operator">MATCHES</span> <span class="token string">"Debug"</span><span class="token punctuation">)</span>
        <span class="token keyword">set</span><span class="token punctuation">(</span>DEBUG_SUFFIX <span class="token string">"d"</span><span class="token punctuation">)</span>
    <span class="token keyword">endif</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">set</span><span class="token punctuation">(</span>QT_INSTALL_PATH <span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_PREFIX_PATH</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">NOT</span> EXISTS <span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">QT_INSTALL_PATH</span><span class="token punctuation">&#125;</span></span>/bin"</span><span class="token punctuation">)</span>
        <span class="token keyword">set</span><span class="token punctuation">(</span>QT_INSTALL_PATH <span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">QT_INSTALL_PATH</span><span class="token punctuation">&#125;</span></span>/.."</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">NOT</span> EXISTS <span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">QT_INSTALL_PATH</span><span class="token punctuation">&#125;</span></span>/bin"</span><span class="token punctuation">)</span>
            <span class="token keyword">set</span><span class="token punctuation">(</span>QT_INSTALL_PATH <span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">QT_INSTALL_PATH</span><span class="token punctuation">&#125;</span></span>/.."</span><span class="token punctuation">)</span>
        <span class="token keyword">endif</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">endif</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>EXISTS <span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">QT_INSTALL_PATH</span><span class="token punctuation">&#125;</span></span>/plugins/platforms/qwindows<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">DEBUG_SUFFIX</span><span class="token punctuation">&#125;</span></span>.dll"</span><span class="token punctuation">)</span>
        <span class="token keyword">add_custom_command</span><span class="token punctuation">(</span>TARGET <span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">&#125;</span> POST_BUILD
                COMMAND <span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_COMMAND</span><span class="token punctuation">&#125;</span> -E make_directory
                <span class="token string">"$&lt;TARGET_FILE_DIR:<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">&#125;</span></span>>/plugins/platforms/"</span><span class="token punctuation">)</span>
        <span class="token keyword">add_custom_command</span><span class="token punctuation">(</span>TARGET <span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">&#125;</span> POST_BUILD
                COMMAND <span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_COMMAND</span><span class="token punctuation">&#125;</span> -E copy
                <span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">QT_INSTALL_PATH</span><span class="token punctuation">&#125;</span></span>/plugins/platforms/qwindows<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">DEBUG_SUFFIX</span><span class="token punctuation">&#125;</span></span>.dll"</span>
                <span class="token string">"$&lt;TARGET_FILE_DIR:<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">&#125;</span></span>>/plugins/platforms/"</span><span class="token punctuation">)</span>
    <span class="token keyword">endif</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span>QT_LIB Core Gui Widgets<span class="token punctuation">)</span>
        <span class="token keyword">add_custom_command</span><span class="token punctuation">(</span>TARGET <span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">&#125;</span> POST_BUILD
                COMMAND <span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_COMMAND</span><span class="token punctuation">&#125;</span> -E copy
                <span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">QT_INSTALL_PATH</span><span class="token punctuation">&#125;</span></span>/bin/Qt5<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">QT_LIB</span><span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">DEBUG_SUFFIX</span><span class="token punctuation">&#125;</span></span>.dll"</span>
                <span class="token string">"$&lt;TARGET_FILE_DIR:<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">&#125;</span></span>>"</span><span class="token punctuation">)</span>
    <span class="token keyword">endforeach</span> <span class="token punctuation">(</span>QT_LIB<span class="token punctuation">)</span>
<span class="token keyword">endif</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>
]]></content>
      <categories>
        <category>学习 - Windows</category>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>Visual Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>WinDbg：入门分析 dmp 文件『一』</title>
    <url>/posts/3ab2f8b0/</url>
    <content><![CDATA[<p><strong>简  述:</strong> 初次在 Win 10 使用 WinDbg 分析 .dmp 文件，定位和分析原因，作为基础入门教程帮助后来者。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><p>附相关目录，随着后续使用更新</p>
<ol>
<li><a href="https://xmuli.blog.csdn.net/article/details/123563647">WinDbg：入门分析 dmp 文件『一』</a></li>
<li><a href="https://xmuli.blog.csdn.net/article/details/123563753">WinDbg：调试之附加进程生成 dmp『二』</a></li>
</ol>
<br>

<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>　　此前未曾接触过 WinDbg ，亦未曾分析过 dmp 。现如今上手数月后，回头来写一下此工具在 Win 10 下的基本用法；希望帮助后来者先入个门。大道漫漫兮~，道阻且长；</p>
<br>

<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p><font color=#D0087E face="STFangsong"><strong>『.dmp』</strong></font> 是存储着软件运行崩溃时刻的一些 “场景” 和调试符号的文件；可看作崩溃原因的 “场景再现”。</p>
<p><font color=#D0087E face="STFangsong"><strong>『WinDbg』</strong></font> 是一款分析 dmp 崩溃文件的开源工具，功能很强，由 Microsoft 出品 <sup><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools">官网</a> </sup>。</p>
<ul>
<li><a href="https://www.microsoft.com/store/p/windbg/9pgjgd53tn86">WinDbg Preview</a> 可直接在 Microsoft Store 中下载；</li>
<li><a href="https://developer.microsoft.com/zh-cn/windows/downloads/windows-sdk/">WinDbg</a> 正式版在集成在 windows-sdk 中，可选为仅安装 Windbg；</li>
</ul>
<br>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>　　使用 WinDbg 分析崩溃场景，需要信息。下载版本建议和你的周围同事保持一致，不懂方便请教，毕竟界面略有差异。</p>
<ol>
<li><code>.dmp</code> 文件，简中译名 “转储文件”</li>
<li><code>.pdb</code> 符号文件</li>
<li><del>源码 [可选]；高阶用法，暂不展开</del></li>
</ol>
<br>

<p><strong>步骤</strong> </p>
<p>　　<font color=#FF0000><strong>暂时记住 WinDbg x86 来调试 x86 应用程序；使用 WinDbg x64 来调试 x64 应用程序；</strong></font>（虽然可以 x64 调试 x86 应用程序，但需要一些命令设置一番）。</p>
<p>　　<font color=#0000FF><strong>命令在底部输入框输入，可依次执行命令如下，也可以直接在界面点击蓝色命令，省略手动输入命令。</strong></font></p>
<br>

<p>　　开始调试，依次执行命令如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">!</span>analyze <span class="token parameter variable">-v</span>   					// 分析
.ecxr         					// 查看当前异常的上下文信息、和部分寄存器信息
			  lmvm <span class="token string">"模块名"</span>  	  // 下载对应 .pdb
kb            					// 显示堆栈崩溃，具体到行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="详细例子"><a href="#详细例子" class="headerlink" title="详细例子"></a>详细例子</h4><ol>
<li><p><code>File-Symbol File Path </code> 输入符号路径窗口；可以随便输入一个路径，这里我输入 .dmp 的存放路径 <code>D:\dmp</code>。 <strong>因若默认为空，后面 WinDbg 加载 .dmp 文件后会长时间无响应，</strong> 只有资源管理器杀死重开。</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202203172252049.png" width="50%"/ loading="lazy">

<br>
</li>
<li><p><code>File - Open Crash Dump</code> 选中当前 .dmp 打开</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202203172253144.png" width="50%"/ loading="lazy">

<br>
</li>
<li><p>执行如下命令 <code>!analyze -v</code> 开始分析，稍等片刻，有时此过程很慢，标志是左下角会显示 BUSY！ 繁忙提示</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202203172254229.png" width="90%"/ loading="lazy">
</li>
<li><p>执行 <code>.ecxr</code> 查看的相关信息，查看当前异常的上下文信息、和部分寄存器信息</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202203172255693.png" width="90%"/ loading="lazy">
</li>
<li><p>执行后，可以看到崩溃堆栈打印的 dll 模块名为 <code>cloudservice</code> ；执行 <code>lmvm cloudservice</code> 获取此 dll 的详细信息，按照时间去 Jenkins 构建上，下载与此时间最近的 .dll 同时生成的 <code>cloudservice.pdb</code> 符号文件；</p>
<img src="https://raw.githubusercontent.com/XMuli/xmuliPic/pic/2022/202203172310140.png" width="90%"/ loading="lazy">
</li>
<li><p>将刚找到的 <code>cloudservice.pdb</code> 文件放入刚才的 <code>D:\dmp</code> 路径下；重新打开 1 步骤窗口，这次勾选左下角 <code>Reload</code> 重新加载。再按上面命令顺序来一遍，依次执行</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">!</span>analyze <span class="token operator">-</span>v   <span class="token comment">// 分析</span>
<span class="token punctuation">.</span>ecxr         <span class="token comment">// 查看寄存器和模块信息</span>
kb            <span class="token comment">// 查看崩溃堆栈</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<img src="https://raw.githubusercontent.com/XMuli/xmuliPic/pic/2022/202203172330104.png" width="100%"/ loading="lazy">

<p>信息如图，定位到了具体行，那么就去 VS 里面修改代码。</p>
</li>
</ol>
<br>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　若是当前代码的版本恢复到和 WinDbg 提示的 dll 版本一致（可通过 Jenkins 查看编译时间和提交的哈希确定），则基本是准的。若是代码版本领先于 dll 版本，那么也有具体崩溃的函数，崩溃位置也是在提示行数附近偏移一点。</p>
<p>　　其实在 6 步骤中，还可以点击前面的序号，查看崩溃此函数时，里面的一些局部变量的信息。</p>
<br>

<p><strong>附上几个常见崩溃的原因：</strong></p>
<ul>
<li>指针为空，需校验 （90%）</li>
<li>存在多线程并发，需要使用原子或锁 （5%）</li>
<li>使用 STL 的游标中迭代器失效，遍历过程中删除元素了</li>
<li>内存泄漏 &#x2F; 不足 </li>
<li>…</li>
</ul>
<br>

<h3 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h3><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> </p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序二 经验</category>
        <category>学习 - Windows</category>
      </categories>
      <tags>
        <tag>调试</tag>
        <tag>WinDbg</tag>
      </tags>
  </entry>
  <entry>
    <title>WinDbg：调试之附加进程生成 dmp『二』</title>
    <url>/posts/b2a92409/</url>
    <content><![CDATA[<p><strong>简  述:</strong> 上一篇有些 WinDbg 的基础用法，本篇开始使用 WinDbg 附加进程调试，卡住崩溃后生成 dmp 文件。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><p>附相关目录，随着后续使用更新</p>
<ol>
<li><a href="https://xmuli.blog.csdn.net/article/details/123563647">WinDbg：入门分析 dmp 文件『一』</a></li>
<li><a href="https://xmuli.blog.csdn.net/article/details/123563753">WinDbg：调试之附加进程生成 dmp『二』</a></li>
</ol>
<br>

<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>💻: <code>win10 21H2</code> 📎 <code>WinDbg 10.0.22000.194</code></p>
<br>

<p><strong>步骤如下</strong></p>
<ol>
<li><p>管理员运行 <code>windbg.exe</code></p>
</li>
<li><p>“File - Attach to a process…” 附加进程</p>
<img src="https://raw.githubusercontent.com/XMuli/xmuliPic/pic/2022/202203172333738.png" width="25%"/ loading="lazy">
</li>
<li><p>此时按下 F5 开启调试</p>
<img src="https://raw.githubusercontent.com/XMuli/xmuliPic/pic/2022/202203172333169.png" width="80%"/ loading="lazy">
</li>
<li><p>在附加的程序进行 UI 操作，等待崩溃中断，此时 WinDbug 界面也会卡住</p>
</li>
<li><p>输入命令 <code>.dump /ma 包含文件名的全路径</code> 生成 mini dmp 到本地；如执行 <code> .dump /ma D:/example.dmp</code> 命令</p>
 <img src="https://raw.githubusercontent.com/XMuli/xmuliPic/pic/2022/202203172333554.png" width="70%"/ loading="lazy">
</li>
<li><p>常规 WinDbg 的使用调试，详细可常见<a href="https://xmuli.blog.csdn.net/article/details/123563647">上一篇</a></p>
</li>
</ol>
<br>

<h3 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h3><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> </p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序二 经验</category>
        <category>学习 - Windows</category>
      </categories>
      <tags>
        <tag>调试</tag>
        <tag>WinDbg</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 打造颜值和实用可媲美 Linux 的终端：Pwsh7 + OhMyPosh</title>
    <url>/posts/5b69dcad/</url>
    <content><![CDATA[<p><strong>简  述:</strong>  美化 <code>Windows-Terminal + OhMyPosh + PowerShell 7</code>  来作为 windows 下的主力终端。</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202204282335555.png" width="100%"/ loading="lazy">



<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>　　半年前，在 <a href="https://blog.csdn.net/qq_33154343/article/details/120661945">上一篇</a> 中详细介绍了 <code>Windows-Terminal + OhMyPosh + GitBash</code>　的美化 ，win10 下终端算是勉强可以使用了，颜值关勉强过了。</p>
<p>　　但是每次启动速度感觉很慢，使用 <code>git</code> 命令亦明显很是卡顿的感觉。自己的笔记本启动需 1-2 s，而公司电脑通常 5-6s，前面了解到 pwoshell 后，今天决定不能忍；遂切 PowerShell 7 + Windows-Terminal，最后效果来看，颜值和速度都有了✨。前提：若下载网络不畅，需自行解决下。</p>
<br>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>　　win10 21H2 默认配置的是 PowerShell 5，约 2016 年；推荐用 PowerShell 7 ，对应 2022 年。此两版本差异很大，疑惑自行翻阅资料。对于未曾接触过此工具的，可参考之前写的这一篇 <a href="https://blog.csdn.net/qq_33154343/article/details/123366377">shell、bash、cmd、PowerShell的区别</a>。</p>
<br>

<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><strong>TIME：更新 2024.07.12</strong></p>
<ol>
<li><p>下载 <a href="https://github.com/microsoft/terminal/releases">Windows Terminal</a>，<a href="https://github.com/PowerShell/PowerShell/releases">PowerShell 7</a>, <a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/FiraCode.zip">Fira Code Nerd Font</a> 就这个  v2.1 tag 看着很顺眼，v2.2 字体有点不习惯</p>
</li>
<li><p>打开 pwsh7 ，命令安装 <a href="https://github.com/ScoopInstaller/Scoop">scoop</a> 、<a href="https://ohmyposh.dev/docs/installation/windows">ohmyposh</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 官网方式安装 scoop</span>
Set-ExecutionPolicy <span class="token parameter variable">-ExecutionPolicy</span> RemoteSigned <span class="token parameter variable">-Scope</span> CurrentUser
Invoke-RestMethod <span class="token parameter variable">-Uri</span> https://get.scoop.sh <span class="token operator">|</span> Invoke-Expression

scoop <span class="token function">install</span> winfetch neofetch

<span class="token comment"># 安装 OhMyPosh</span>
winget <span class="token function">install</span> JanDeDobbeleer.OhMyPosh <span class="token parameter variable">-s</span> winget

<span class="token comment"># 此条是以前的经验，保留提供参考 iwr -useb get.scoop.sh | iex     // 挂代理有时候依旧，安装 scoop 网络问题，操！！！；则使</span>
用 https://gitee.com/RubyKids/scoop-cn ，亲测可用
Set-ExecutionPolicy RemoteSigned <span class="token parameter variable">-scope</span> CurrentUser
iwr <span class="token parameter variable">-useb</span> https://gitee.com/RubyKids/scoop-cn/raw/main/install.ps1 <span class="token operator">|</span> iex    // 可用

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>pwsh 执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Set-ExecutionPolicy RemoteSigned <span class="token parameter variable">-scope</span> CurrentUser  <span class="token comment"># 开启扩展</span>
Install-Module <span class="token parameter variable">-Name</span> PSReadLine  <span class="token parameter variable">-Scope</span> CurrentUser  <span class="token comment"># 安装PSReadline包，让命令行很好用</span>
Install-Module posh-git  <span class="token parameter variable">-Scope</span> CurrentUser          <span class="token comment"># Git 命令补全，遇安装失败看这个 https://github.com/dahlbyk/posh-git#installation，试一下其它命令</span>
<span class="token comment">#Install-Module oh-my-posh -Scope CurrentUser         # oh-my-posh 不再支持此种</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>选择主题  “jandedobbeleer.omp.json”</p>
<p>将 <code>&quot;C:\Users\用户名\AppData\Local\Programs\oh-my-posh\themes\jandedobbeleer.omp.json&quot;</code> 文件拷贝到 $HOME 目录下；</p>
<p>再在 <code>~/.profile</code> 文件（没有则创建）添加命令，后执行 <code>. ~/.profile</code> 刷新，重启终端即可生效。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>oh-my-posh <span class="token parameter variable">--init</span> <span class="token parameter variable">--shell</span> <span class="token function">bash</span> <span class="token parameter variable">--config</span> ~/jandedobbeleer.omp.json<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>安装 Meslo LGM NF 字体，避免乱码。</p>
<p>打开终端，惊喜的发现乱码，符号显示不出来；安装字体  <a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/FiraCode.zip">Fira Code Nerd Font</a> 就这个  v2.1 tag </p>
</li>
<li><p>修改配置文件 <code>settings.json</code>，将如下代码添加到对应的地方</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// ---------------------添加新的标签页，添加到 <span class="token string">"profiles - list"</span> 下---------------------
<span class="token punctuation">&#123;</span>
    <span class="token string">"guid"</span><span class="token builtin class-name">:</span> <span class="token string">"&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;"</span>,
    <span class="token string">"hidden"</span><span class="token builtin class-name">:</span> false,
    <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"pwsh7"</span>,
    <span class="token string">"source"</span><span class="token builtin class-name">:</span> <span class="token string">"Windows.Terminal.PowershellCore"</span>,
    <span class="token string">"backgroundImageOpacity"</span><span class="token builtin class-name">:</span> <span class="token number">0.72</span>,
    <span class="token string">"closeOnExit"</span><span class="token builtin class-name">:</span> <span class="token string">"graceful"</span>,
    <span class="token string">"colorScheme"</span><span class="token builtin class-name">:</span> <span class="token string">"HomebrewCus"</span>,
    <span class="token string">"cursorColor"</span><span class="token builtin class-name">:</span> <span class="token string">"#FFFFFF"</span>,
    <span class="token string">"cursorShape"</span><span class="token builtin class-name">:</span> <span class="token string">"bar"</span>,
    <span class="token string">"font"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>
        <span class="token string">"face"</span><span class="token builtin class-name">:</span> <span class="token string">"FiraCode Nerd Font"</span>
    <span class="token punctuation">&#125;</span>, // Fira Code、FiraCode Nerd Font、MesloLGM  NF
    <span class="token string">"historySize"</span><span class="token builtin class-name">:</span> <span class="token number">9001</span>,
    <span class="token string">"opacity"</span><span class="token builtin class-name">:</span> <span class="token number">89</span>,
    <span class="token string">"padding"</span><span class="token builtin class-name">:</span> <span class="token string">"25"</span>,
    <span class="token string">"snapOnInput"</span><span class="token builtin class-name">:</span> true,
    <span class="token string">"startingDirectory"</span><span class="token builtin class-name">:</span> <span class="token string">"."</span>,
    <span class="token string">"useAcrylic"</span><span class="token builtin class-name">:</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span>,
  
// ps: 先终端-设置-选定默认主题，默认的启动名称。且安装 pwsh7 后好像会自动生成一个这个项，对其进行扩写即可；其安装pa路径为 <span class="token string">"commandline"</span><span class="token builtin class-name">:</span> <span class="token string">"C:/Program Files/PowerShell/7/pwsh.exe"</span>,

// ---------------------新增主题配色，添加到 <span class="token string">"schemes"</span> 下--------------------- 
<span class="token punctuation">&#123;</span>
    <span class="token string">"background"</span><span class="token builtin class-name">:</span> <span class="token string">"#283033"</span>,
    <span class="token string">"black"</span><span class="token builtin class-name">:</span> <span class="token string">"#000000"</span>,
    <span class="token string">"blue"</span><span class="token builtin class-name">:</span> <span class="token string">"#6666E9"</span>,
    <span class="token string">"brightBlack"</span><span class="token builtin class-name">:</span> <span class="token string">"#666666"</span>,
    <span class="token string">"brightBlue"</span><span class="token builtin class-name">:</span> <span class="token string">"#0E5CEE"</span>,
    <span class="token string">"brightCyan"</span><span class="token builtin class-name">:</span> <span class="token string">"#00E5E5"</span>,
    <span class="token string">"brightGreen"</span><span class="token builtin class-name">:</span> <span class="token string">"#00D900"</span>,
    <span class="token string">"brightPurple"</span><span class="token builtin class-name">:</span> <span class="token string">"#E500E5"</span>,
    <span class="token string">"brightRed"</span><span class="token builtin class-name">:</span> <span class="token string">"#E50000"</span>,
    <span class="token string">"brightWhite"</span><span class="token builtin class-name">:</span> <span class="token string">"#E5E5E5"</span>,
    <span class="token string">"brightYellow"</span><span class="token builtin class-name">:</span> <span class="token string">"#E5E500"</span>,
    <span class="token string">"cursorColor"</span><span class="token builtin class-name">:</span> <span class="token string">"#FFFFFF"</span>,
    <span class="token string">"cyan"</span><span class="token builtin class-name">:</span> <span class="token string">"#00A6B2"</span>,
    <span class="token string">"foreground"</span><span class="token builtin class-name">:</span> <span class="token string">"#00FF00"</span>,
    <span class="token string">"green"</span><span class="token builtin class-name">:</span> <span class="token string">"#00A600"</span>,
    <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"HomebrewCus"</span>,
    <span class="token string">"purple"</span><span class="token builtin class-name">:</span> <span class="token string">"#B200B2"</span>,
    <span class="token string">"red"</span><span class="token builtin class-name">:</span> <span class="token string">"#FC5275"</span>,
    <span class="token string">"selectionBackground"</span><span class="token builtin class-name">:</span> <span class="token string">"#FFFFFF"</span>,
    <span class="token string">"white"</span><span class="token builtin class-name">:</span> <span class="token string">"#BFBFBF"</span>,
    <span class="token string">"yellow"</span><span class="token builtin class-name">:</span> <span class="token string">"#999900"</span>
<span class="token punctuation">&#125;</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
<li><p>添加 PowerShell 的启动参数  <code>notepad.exe $Profile</code></p>
<p>提示文件不存在则新建，然后将此脚本拷贝后保存文本 <code>FileName: Microsoft.PowerShell_profile.ps1</code>  即可；其默认的路径 <code>$Profile</code> 可查看到</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 引入 posh-git</span>
Import-Module posh-git

<span class="token comment"># 引入 ps-read-line</span>
Import-Module PSReadLine

<span class="token comment"># 设置主题</span>
oh-my-posh init pwsh <span class="token parameter variable">--config</span> <span class="token string">"<span class="token variable">$env</span>:POSH_THEMES_PATH\paradox.omp.json"</span> <span class="token operator">|</span> Invoke-Expression

<span class="token comment">#-------------------------------  Set Hot-keys BEGIN  -------------------------------</span>
<span class="token comment"># 设置预测文本来源为历史记录</span>
Set-PSReadLineOption <span class="token parameter variable">-PredictionSource</span> History

<span class="token comment"># 每次回溯输入历史，光标定位于输入内容末尾</span>
Set-PSReadLineOption <span class="token parameter variable">-HistorySearchCursorMovesToEnd</span>

<span class="token comment"># 设置 Tab 为菜单补全和 Intellisense</span>
Set-PSReadLineKeyHandler <span class="token parameter variable">-Key</span> <span class="token string">"Tab"</span> <span class="token parameter variable">-Function</span> MenuComplete

<span class="token comment"># 设置 Ctrl+d 为退出 PowerShell</span>
Set-PSReadlineKeyHandler <span class="token parameter variable">-Key</span> <span class="token string">"Ctrl+d"</span> <span class="token parameter variable">-Function</span> ViExit

<span class="token comment"># 设置 Ctrl+z 为撤销</span>
Set-PSReadLineKeyHandler <span class="token parameter variable">-Key</span> <span class="token string">"Ctrl+z"</span> <span class="token parameter variable">-Function</span> Undo

<span class="token comment"># 设置向上键为后向搜索历史记录</span>
Set-PSReadLineKeyHandler <span class="token parameter variable">-Key</span> UpArrow <span class="token parameter variable">-Function</span> HistorySearchBackward

<span class="token comment"># 设置向下键为前向搜索历史纪录</span>
Set-PSReadLineKeyHandler <span class="token parameter variable">-Key</span> DownArrow <span class="token parameter variable">-Function</span> HistorySearchForward
<span class="token comment">#-------------------------------  Set Hot-keys END    -------------------------------</span>

<span class="token comment">#-------------------------------   Set Alias BEGIN    -------------------------------</span>
<span class="token comment"># 1. 编译函数 make</span>
<span class="token keyword">function</span> <span class="token function-name function">MakeThings</span> <span class="token punctuation">&#123;</span>
    nmake.exe <span class="token variable">$args</span> <span class="token parameter variable">-nologo</span>
<span class="token punctuation">&#125;</span>
Set-Alias <span class="token parameter variable">-Name</span> <span class="token function">make</span> <span class="token parameter variable">-Value</span> MakeThings

<span class="token comment"># 2. 更新系统 os-update</span>
Set-Alias <span class="token parameter variable">-Name</span> os-update <span class="token parameter variable">-Value</span> Update-Packages

<span class="token comment"># 3. 查看目录 ls &amp; ll</span>
<span class="token keyword">function</span> <span class="token function-name function">ListDirectory</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">(</span>Get-ChildItem<span class="token punctuation">)</span>.Name
    Write-Host<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">#Set-Alias -Name ls -Value ListDirectory</span>
<span class="token comment">#Set-Alias -Name ll -Value Get-ChildItem</span>

<span class="token comment"># 4. 打开当前工作目录</span>

<span class="token keyword">function</span> <span class="token function-name function">OpenCurrentFolder</span> <span class="token punctuation">&#123;</span>
    param
    <span class="token punctuation">(</span>
        <span class="token comment"># 输入要打开的路径</span>
        <span class="token comment"># 用法示例：open C:\</span>
        <span class="token comment"># 默认路径：当前工作文件夹</span>
        <span class="token variable">$Path</span> <span class="token operator">=</span> <span class="token string">'.'</span>
    <span class="token punctuation">)</span>
    Invoke-Item <span class="token variable">$Path</span>
<span class="token punctuation">&#125;</span>
Set-Alias <span class="token parameter variable">-Name</span> <span class="token function">open</span> <span class="token parameter variable">-Value</span> OpenCurrentFolder
<span class="token comment">#-------------------------------    Set Alias END     -------------------------------</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
<li><p>创建快捷方式后，属性栏中的 “Shortcut Key” 添加快捷键 “Ctrl + Alt + T”</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202304130205038.png" width="30%"/ loading="lazy">
</li>
<li><p>pwsh 提示更新</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202204282326712.png" width="40%"/ loading="lazy">

<p>今天一打开终端，提示更新，可没有顺滑的更新命令；见 <a href="https://github.com/PowerShell/PowerShell/issues/8663">#8663</a> ； 故不更新解决方案：</p>
<blockquote>
<p>You can set environment variable POWERSHELL_UPDATECHECK&#x3D;LTS (or &#x3D;Off).</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>学习 - Windows</category>
      </categories>
      <tags>
        <tag>PowerShell</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 编程之 WINUSERAPI 和 WINAPI 区别</title>
    <url>/posts/ec046916/</url>
    <content><![CDATA[<p><strong>简  述:</strong>  Window API 中经常遇到的 <strong>WINUSERAPI</strong> 和 <strong>WINAPI</strong> 各自的含义。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>　　在研究实现跨平台的  <a href="https://github.com/XMuli/AcrylicWindow">AcrylicWindow</a> <strong>亚克力（类似透明磨砂）</strong> 效果，调用 Windows API 时，发现其函数的定义如下，发现这两个宏有点陌生，故有点出神，于是查了查 <code>WINUSERAPI</code> &#x2F; <code>WINAPI</code> 的含义。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">WINUSERAPI BOOL WINAPI <span class="token function">SetWindowCompositionAttribute</span><span class="token punctuation">(</span> _In_ HWND hWnd<span class="token punctuation">,</span> 
													  _Inout_ WINDOWCOMPOSITIONATTRIBDATA<span class="token operator">*</span> pAttrData<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br>

<h2 id="WINUSERAPI"><a href="#WINUSERAPI" class="headerlink" title="WINUSERAPI"></a>WINUSERAPI</h2><p>表示函数的导入</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">WINUSERAPI

<span class="token comment">// 定义一</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>_USER32_<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WINUSERAPI</span> <span class="token expression">DECLSPEC_IMPORT</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WINUSERAPI</span> <span class="token expression"><span class="token keyword">extern</span> </span><span class="token string">"C"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">// 定义二</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DECLSPEC_IMPORT</span> <span class="token expression"><span class="token function">__declspec</span><span class="token punctuation">(</span>dllimport<span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p>从两层含义定义可知，<code>WINUSERAPI</code> 粗略看作关键词 __declspec(dllimport)；</p>
<p>__declspec(dllimport) 表示你告诉编译器要显式的从 dll 导入函数；尤其当类中有 static 成员时，没有它基本都会 Link 失败。可参见 <a href="https://blog.csdn.net/sinat_22991367/article/details/73695039">此文</a></p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/Snipaste_2022-06-28_18-33-54.png" width="100%"/ loading="lazy">

<br>

<h2 id="WINAPI"><a href="#WINAPI" class="headerlink" title="WINAPI"></a>WINAPI</h2><p>  常用宏 WINAPI 或 CALLBACK 来表示 <code>__stdcall</code> 调用约定。表示参数入栈时，是从右往左依次顺序入栈的。 其它调用约定自行 Googel 关键词：函数调用约定</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">1</span> #define CALLBACK __stdcall
<span class="token number">2</span> #define WINAPI __stdcall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br>

<h2 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a></p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序二 经验</category>
        <category>学习 - Windows</category>
      </categories>
      <tags>
        <tag>Windows 编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows-Terminal 配置 OhMyPosh 美化 GitBash</title>
    <url>/posts/7bcfb552/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　旧时 Win10 一直无漂亮的终端，故日常用 Git Bash 都新建一新窗口，久之，厌倦。今，配置 Git Bash 到 Windows Terminal 的标签页打开，最终效果图示如下。此中遇几处缺陷，记载其解决方案:</p>
<ol>
<li>Terminal 中使用 Git Bash 会闪屏</li>
<li>Terminal 中使用 winget 找不到命令</li>
<li>下载和配置 OhMyPosh 主题，调整字体</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210920172005.png" width="80%"/ loading="lazy">



<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>　　自切换回 Win10 后，一直简单使用 Git Bash 终端，简单自定义了一个透明主题使用，感兴趣参考<a href="https://xmuli.blog.csdn.net/article/details/100065477">此文</a>；但每次新开一个窗口，多了页很烦。今天抽空整合以下到 Windows-Terminal，每次开启一个仓库，也只是多一个 Tab，惬意。</p>
<p>​	</p>
<p>​	PS：💻 <code>win10 21H1</code> 📎 <code>Windows Terminal  1.10.2383.0</code></p>
<br>

<h2 id="美化-Terminal-x2F-Git-Bash-步骤"><a href="#美化-Terminal-x2F-Git-Bash-步骤" class="headerlink" title="美化 Terminal&#x2F;Git Bash 步骤"></a>美化 Terminal&#x2F;Git Bash 步骤</h2><ol>
<li><p>安装 <a href="https://github.com/microsoft/terminal">Windows Terminal</a>、Git</p>
<br>
</li>
<li><p>添加 Git Bash 到 Windows Terminal 的配置文件，使其可用 Tab 页打开</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"profiles"</span><span class="token builtin class-name">:</span> 
<span class="token punctuation">&#123;</span>
    <span class="token string">"defaults"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>,
    <span class="token string">"list"</span><span class="token builtin class-name">:</span> 
    <span class="token punctuation">[</span>              <span class="token comment"># 找到此 list ,在里面添加如下</span>
        <span class="token punctuation">&#123;</span>
            <span class="token string">"guid"</span><span class="token builtin class-name">:</span> <span class="token string">"&#123;1cb09cbb-0365-91bf-c98f-d8d03c510274&#125;"</span>,
            <span class="token string">"commandline"</span><span class="token builtin class-name">:</span> <span class="token string">"%PROGRAMFILES%/git/usr/bin/bash.exe -i -l"</span>,
            <span class="token string">"icon"</span><span class="token builtin class-name">:</span> <span class="token string">"%PROGRAMFILES%/Git/mingw64/share/git/git-for-windows.ico"</span>,
            <span class="token string">"name"</span> <span class="token builtin class-name">:</span> <span class="token string">"Bash"</span>,
            <span class="token string">"startingDirectory"</span> <span class="token builtin class-name">:</span> <span class="token string">"%USERPROFILE%"</span>,
            <span class="token string">"acrylicOpacity"</span> <span class="token builtin class-name">:</span> <span class="token number">0.75</span>,
            <span class="token string">"closeOnExit"</span> <span class="token builtin class-name">:</span> true,
            <span class="token string">"colorScheme"</span> <span class="token builtin class-name">:</span> <span class="token string">"Campbell"</span>,
            <span class="token string">"cursorColor"</span> <span class="token builtin class-name">:</span> <span class="token string">"#FFFFFF"</span>,
            <span class="token string">"cursorShape"</span> <span class="token builtin class-name">:</span> <span class="token string">"bar"</span>,
            <span class="token string">"fontFace"</span> <span class="token builtin class-name">:</span> <span class="token string">"Consolas"</span>,
            <span class="token string">"fontSize"</span> <span class="token builtin class-name">:</span> <span class="token number">12</span>,
            <span class="token string">"historySize"</span> <span class="token builtin class-name">:</span> <span class="token number">9001</span>,
            <span class="token string">"padding"</span> <span class="token builtin class-name">:</span> <span class="token string">"0, 0, 0, 0"</span>,
            <span class="token string">"snapOnInput"</span> <span class="token builtin class-name">:</span> true,
            <span class="token string">"useAcrylic"</span> <span class="token builtin class-name">:</span> <span class="token boolean">true</span>
        <span class="token punctuation">&#125;</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>解决使用遇到的闪屏，其实此不是一个 BUG，而是输入错误时提示；<strong>解决方案</strong> ：在 <code>~/.inputrc</code> (如果不存在就创建) 里面添加这样一行:<code>set bell-style none</code></p>
<br>
</li>
<li><p>在 GitHub 的  <a href="https://github.com/microsoft/winget-cli/releases">winget-cli</a> 中，下载后安装 <code>.msixbundle</code> 格式；即可使用 winget 命令来安装 ohmyposh。</p>
<br>
</li>
<li><p>安装 oh-my-posh 类似于 oh-my-zsh</p>
<blockquote>
<p><font color=#FF0000><strong>官方文档：</strong> </font><a href="https://ohmyposh.dev/docs/windows">https://ohmyposh.dev/docs/windows</a> </p>
</blockquote>
<ul>
<li>打开 Windows Terminal 中的 Git Bash 执行如下 <code>winget install JanDeDobbeleer.OhMyPosh</code></li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210920163442.png" width="60%"/ loading="lazy">

<ul>
<li>将刚安装路径 <code>C:\Users\xmuli\AppData\Local\Programs\oh-my-posh\bin</code> 添加 PATH</li>
</ul>
<br>
</li>
<li><p>使用某一主题 “jandedobbeleer.omp.json”，其它主题同理</p>
<p>将 “~\AppData\Local\Programs\oh-my-posh\themes\jandedobbeleer.omp.json” 文件拷贝到 $HOME 目录下；</p>
<p>再在 <code>~/.profile</code> 文件（没有则创建）添加命令，后执行 <code>. ~/.profile</code> 刷新，重启终端即可生效。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>oh-my-posh <span class="token parameter variable">--init</span> <span class="token parameter variable">--shell</span> <span class="token function">bash</span> <span class="token parameter variable">--config</span> ~/jandedobbeleer.omp.json<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>
</li>
<li><p>安装 Meslo LGM NF 字体，避免乱码。</p>
<p>打开终端，惊喜的发现乱码，符号显示不出来；需安装 Oh my Posh 官方推荐使用的字 <a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/Meslo.zip"><strong>Meslo LGM NF</strong></a> 字体（即 <a href="https://www.nerdfonts.com/"><a href="https://www.nerdfonts.com/">Nerd Fonts</a></a>）。接着在配置文件中将字体修改;</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"fontFace"</span><span class="token builtin class-name">:</span> <span class="token string">"MesloLGM NF"</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>再次重启，成功</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210920171005.png" width="70%"/ loading="lazy">

<br>
</li>
<li><p>切换自己喜欢的主题（修改第 5 步骤即可）</p>
<p>在 <a href="https://ohmyposh.dev/docs/themes">https://ohmyposh.dev/docs/themes</a> 可直接预览所有主题样式；个人选择了 <a href="https://github.com/JanDeDobbeleer/oh-my-posh/blob/main/themes/paradox.omp.json">paradox</a> ，最终效果图见本文第一张图。</p>
</li>
</ol>
<br>

<h2 id="配置-Power-Shell"><a href="#配置-Power-Shell" class="headerlink" title="配置 Power Shell"></a>配置 Power Shell</h2><p>​	前面步骤，仅配置 GitBash 主题（自己用够了）；若是还想配置 PowerShell 主题，则需要额外配置几行，前面操作大部分都可复用，在终端中配置 <strong>PowerShell</strong> 主题，同理参考 <a href="https://ohmyposh.dev/docs/windows">https://ohmyposh.dev/docs/windows</a> 的 Customize-powershell 的篇章即可。</p>
]]></content>
      <categories>
        <category>学习 - Windows</category>
        <category>学习 - Git</category>
      </categories>
      <tags>
        <tag>OhMyPosh</tag>
      </tags>
  </entry>
  <entry>
    <title>C++中sizeof()运算符的的深入理解</title>
    <url>/posts/29ffae87/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　对 <code>C / C++</code> 中的 <code>sizeof()</code> 运算符的一些深入思考；</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p>昨晚看到一题，虽然可以轻易得到结果，但是突然深入思考一些，这是为什么？</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>
    str1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Hello"</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>
    <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, %d, %d, %d, %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>


    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>
    a <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"123456789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//a为10</span>
    b <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"123456789"</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在 qt creator 和 VS 2015 结果不一致</span>

    c <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"123456789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//c为9</span>
    d <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"123456789"</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, %d, %d, %d, %d, %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>思考：</strong></p>
<p>这里的 <code>sizeof(&quot;Hello&quot;)</code>, <code>sizeof(str1)</code>, <code>sizeof(str2)</code>, <code>sizeof(p1)</code>, <code>sizeof(p2)</code> 打印出来的值是多少？</p>
<p>下面一列表的 <code>a</code>， <code>b</code>，  <code>c</code>，  <code>d</code>，  <code>sizeof(unsigned int)</code>， <code>sizeof(int)</code> 打印出来的值又是多少？</p>
<br>

<h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><h4 id="理解分析："><a href="#理解分析：" class="headerlink" title="理解分析："></a>理解分析：</h4><p>在 <code>win 10 + VS2015</code> 的 <code>x86</code> 模式下，运行结果如下：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200719175356.png" width="30%" / loading="lazy">



<p>我的理解如下：</p>
<p><strong>上一组的结果运行和分析如下:</strong></p>
<ol>
<li><p><code>sizeof(&quot;Hello&quot;)</code> 的值是 6， 等价于 <code>&quot;hello\0&quot;</code> 应在内存中占 6 个字节，且  <code>&quot;hello&quot;</code> 是 <code>char [6]</code> 类型（由截图可知），但为什么不是  <code>char *</code>  或  <code>const char *</code> 呢？那就不知道了，反正<strong>编译器的规则</strong> 就是这么定的；</p>
   <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200719172923.png" width="50%" / loading="lazy">

<br>
</li>
<li><p><code>sizeof(str1)</code> 的值是 6， 等价于 <code>sizeof(char [6])</code> ，在内存中一共分配 1*6 个字节；下标里面的<code>[]</code> 中的 6 是根据赋值语句，编译器自己推算出来的；</p>
</li>
<li><p><code>sizeof(str2)</code> 的值是 100， 等价于  <code>sizeof(char [100])</code> ，在内存中一共分配 1*100 个字节；</p>
</li>
<li><p><code>sizeof(p1)</code> 的值是 4，等价于 <code>sizeof(char *)</code>，等价于 <code>sizeof(指针)</code></p>
</li>
<li><p><code>sizeof(p2)</code> 的值是 4，等价于 <code>sizeof(const char *)</code>，等价于 <code>sizeof(指针)</code></p>
</li>
</ol>
<br>

<p><strong>下一组的结果运行和分析如下:</strong></p>
<ol>
<li><p><code>a</code> 的值是 10， 等价于 <code>sizeof(char [10])</code> ，在内存中一共分配 1*10 个字节；</p>
</li>
<li><p><code>b</code> 的值在不同系统，不同编译器上，结果是不一样的(eg： mac10.14.6 + qtCretor5.12.8  &amp;&amp; win10 + vs2015)； 结果不一直的原因是 无法判定 <code>&quot;123456789&quot;+1</code> 到底应该是 <code>char [10] + int</code> 之后，应该是什么类型？只能够根据自己的编译器实际决定；且还有一中观点： 此行是在编译时刻就已经被替换为具体的数值了，然后这一行的代码也会被删除掉，更加不会被执行，所以其 sizeof 的副作用是不会实现的（如 <code>sizeof(++i）</code>其实只能够等价于 <code>sizeof(对象(变量 i )的类型)</code>，其运行时刻在计算其值是不存在的)</p>
<p>注意一点即可，有一个误区，以前的 类似于 <code> int x1 = 3 + &#39;b&#39;</code> 能够顺利进行隐式转换，是因为知道最后应该转换为 等式 的左侧 的 int 类型；而我们这里系统没有 左值，故无法知道转换为什么类型，所以出现如下截图，此上下文不支持；</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200719174254.png" width="50%" / loading="lazy">
<br>
</li>
<li><p><code>c</code> 的值是 9，没有什么好讲的，该函数的实现，是遇到第一个 <code>&#39;\0&#39;</code> 就停止；</p>
</li>
<li><p><code>d</code> 的值是 8 ？（两个不同环境都是 8，有点费解），这个不明所以；查看源码 strlen() 的实现如下 <code>size_t	 strlen(const char *__s);</code>，按照我的理解，应该是等价于 <code>d = strlen((const char *)(&quot;123456789&quot;+1))</code> 的，显示结果依旧为 8；这个结果为啥是 8， 有点费解，不过觉得没有探究的必要，也不是本文谈论的重点；此行多探究无意义，且这样写，有点 “无中生有”，“惹是生非”，“搞事情” 的感觉</p>
</li>
<li><p><code>sizeof(unsigned int)</code> 的值是 4，不用解释</p>
</li>
<li><p><code>sizeof(int)</code> 的值是 4，不用解释</p>
</li>
</ol>
<br>

<p><strong>下面是另外角度来思考此问题：</strong></p>
<h4 id="角度-1-："><a href="#角度-1-：" class="headerlink" title="[角度 1]："></a>[角度 1]：</h4><p><font color=#D0087E size=4 face="幼圆"> <code> sizeof()</code> 是 返回一个类型的在内存中说占的字节数。</font> 是属于 <em><strong>运算符</strong></em> ， 同为 运算符 的还有 <code>+</code> 、<code>-</code>、<code>*</code>、<code>/</code> 、<code>%</code> 等。而这个是在编译时候就被执行，而非运行时候执行，一开始就已经是计算机被知道的。</p>
<p>C 标准和实际上的 编译器 一开始就定义好了，在 32 位电脑中，<code>int</code> 占据 4 字节， <code>char</code> 占据 1 字节；</p>
<p>对于<strong>内置的基本数据类型</strong> 来说，下面是很容易理解，觉得一开始就被编译机在内存里面分配了这么多的变量： </p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> 显示 <span class="token number">4</span> 字节
<span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> 显示 <span class="token number">1</span> 字节<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br>

<p>而 对于 <strong>复合数据类型</strong> 来求字节大小，其是需要根据 组合的基本数据类型 来给出实际的内存中所占的字节大小，比如自定义 类：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">sizeof</span><span class="token punctuation">(</span>自定类<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> 显示 字节对齐后的 字节
<span class="token keyword">sizeof</span><span class="token punctuation">(</span>数组<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> 显示 符合类型的数组 字节
<span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> 显示 <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4</span> 字节  <span class="token comment">// 这样就容易理解了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="角度-2-："><a href="#角度-2-：" class="headerlink" title="[角度 2]："></a>[角度 2]：</h4><blockquote>
<p>  <sup>[p101]</sup>  类似于都是指代 《C++ primer 中文版  第5 版》一书的页码</p>
</blockquote>
<p>忽然发觉有点不简单， <code>str1</code> 是数组类型，属于<strong>复合类型</strong>  <sup>[p101]</sup>，表达式右侧 <code>&quot;Hello&quot;</code> 是什么类型（是 <code>char []</code> 、  <code>char *</code>  还是  <code>const char *</code>  呢？），其实也并不重要（虽然知道了是<code>char [6]</code>类型 ）；但是它一定是给 数组 <code>str1</code> 赋值的；且定义的赋值写法如此</p>
<br>

<h4 id="角度-3-："><a href="#角度-3-：" class="headerlink" title="[角度 3]："></a>[角度 3]：</h4><p>有人自己使用如下两个宏，来实现了该 <code>sizeof()</code> 的实现；注意的是，这是网友自己使用宏来实现的，而非 编译器 就是这样实现的，但是对于我的理解有所帮助；</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//适用于非数组</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_sizeof</span><span class="token expression"><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>T<span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token comment">//适用于数组</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">array_sizeof</span><span class="token expression"><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>T<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="角度-4-："><a href="#角度-4-：" class="headerlink" title="[角度 4]："></a>[角度 4]：</h4><p><code>sizeof</code> 运算符，实际上有两种使用方式，且书上明确有说 <strong><code>sizeof</code> 实际上并不会去计算其运算符对象的值</strong> <sup>[p139]</sup> ，<code>sizeof</code> 运算时候，也不会将数组成指针来处理；</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">sizeof</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>           <span class="token comment">// 返回             类型 在内存中所占的字节大小</span>
<span class="token keyword">sizeof</span> expression      <span class="token comment">// 返回 表达式结果的 类型 在内存中所占的字节大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>学习 - C/C++ 序一 技法</category>
      </categories>
  </entry>
  <entry>
    <title>C++类型转换`static_cast`，`dynamic_cast`，`const_cast`，`reinterpret_cast`</title>
    <url>/posts/c05841ac/</url>
    <content><![CDATA[<p><strong>简介：</strong>  **c++**类型转换<code>static_cast</code>，<code>dynamic_cast</code>，<code>const_cast</code>，<code>reinterpret_cast</code>这四种类型转换的区别</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="思维导图："><a href="#思维导图：" class="headerlink" title="思维导图："></a>思维导图：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190927000813.png"/ loading="lazy">

<br>

<h2 id="static-cast："><a href="#static-cast：" class="headerlink" title="static_cast："></a>static_cast：</h2><ul>
<li><p>静态类型转换:内置、自定义数据类型</p>
  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//++++++++++++++++++++++++</span>
<span class="token comment">//内置数据类型</span>
<span class="token keyword">char</span> a  <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> d <span class="token operator">=</span> static_cast<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

<span class="token comment">//++++++++++++++++++++++++</span>
<span class="token comment">//自定义类型</span>
Base<span class="token operator">*</span> base <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
Son<span class="token operator">*</span> son <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token comment">//向下类型转换  不安全</span>
Son<span class="token operator">*</span> son <span class="token operator">=</span> static_cast<span class="token operator">&lt;</span>Son<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//向上类型转换   安全</span>
Base<span class="token operator">*</span> base <span class="token operator">=</span> static_cast<span class="token operator">&lt;</span>Base<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>son<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

  <br></li>
</ul>
<h2 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast:"></a>static_cast:</h2><ul>
<li><p>动态类型转换：内置、自定义数据类型</p>
  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//++++++++++++++++++++++++</span>
<span class="token comment">//内置数据类型， 不可以转换</span>
有精度损失的，都不可以转换
<span class="token keyword">char</span> c  <span class="token operator">=</span> <span class="token char">'c'</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> d <span class="token operator">=</span> dynamic_cast<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>

<span class="token comment">//++++++++++++++++++++++++</span>
<span class="token comment">//自定义类型</span>
Base<span class="token operator">*</span> base <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
Son<span class="token operator">*</span> son <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token comment">//向下类型转换  不安全   失败</span>
Son<span class="token operator">*</span> son <span class="token operator">=</span> dynamic_cast<span class="token operator">&lt;</span>Son<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//向上类型转换   安全   成功</span>
Base<span class="token operator">*</span> base <span class="token operator">=</span> dynamic_cast<span class="token operator">&lt;</span>Base<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>son<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

  <br></li>
</ul>
<h2 id="const-cast"><a href="#const-cast" class="headerlink" title="const_cast:"></a>const_cast:</h2><ul>
<li><p>常量转换：指针之间的转换</p>
  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token comment">//将const int * 转换为 int*</span>
<span class="token keyword">int</span><span class="token operator">*</span> p2 <span class="token operator">=</span> const_cast<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    

<span class="token comment">//将 p2 转换为const int*</span>
<span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> p2 <span class="token operator">=</span> const_cast<span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

  <br>
</li>
<li><p>常量转换：引用之间的转换</p>
  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> aRef <span class="token operator">=</span> a<span class="token punctuation">;</span>

<span class="token keyword">int</span><span class="token operator">&amp;</span> aRef2 <span class="token operator">=</span> const_cast<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>aRef<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//不可以对 非指针 或者 非引用 做const_cast转换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

  <br></li>
</ul>
<h2 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast:"></a>reinterpret_cast:</h2><ul>
<li><p>重新解释转换 最不安全 不建议使用</p>
  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//将base* 转换为 Other*</span>
Base<span class="token operator">*</span> base <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
Other<span class="token operator">*</span> other <span class="token operator">=</span> reinterpret_cast<span class="token operator">&lt;</span>Other<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/gif/20190704175742.gif" loading="lazy"></p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序一 技法</category>
      </categories>
  </entry>
  <entry>
    <title>cpp-httplib 与 libcurl 实现 OAuth 2.0 授权码流程</title>
    <url>/posts/b4fdeaad/</url>
    <content><![CDATA[<p><strong>简述:</strong> 本文介绍本地客户端 APP 如何通过 <code>cpp-httplib</code> 和 <code>libcurl</code> 库实现 <code>OAuth 2.0</code> 的授权码流程。侧重于技术人员实现视角如何实现，重点包括以下几个方面：</p>
<ul>
<li>什么是 OAuth 2.0？它的授权流程是怎样的？</li>
<li><code>cpp-httplib</code> 和 <code>libcurl</code> 的区别和差异？</li>
<li>如何在本地通过网络库监听并获取默认浏览器返回的授权码 code？</li>
<li>如何使用授权码 code 置换最终的 Token？</li>
</ul>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p>　　💻  <code>win11 24H2</code> 📎  <code>Visual Studio 2022</code> 📎 <code>C++17</code></p>
<br>

<h2 id="OAuth-2-0-简介"><a href="#OAuth-2-0-简介" class="headerlink" title="OAuth 2.0 简介"></a>OAuth 2.0 简介</h2><p>关于 OAuth 2.0 的基本概念，可以参考阮一峰老师的 <a href="https://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">《理解OAuth 2.0》</a> 以及 Google 的官方文档 <a href="https://developers.google.com/identity/protocols/oauth2?hl=zh-cn">《使用 OAuth 2.0 访问 Google API》</a>。</p>
<p>其中的 OAuth 2.0 访问链接的参数含义，和必须和可选、含义：</p>
<ul>
<li><p><a href="https://openid.net/specs/openid-connect-core-1_0.html#Authentication">https://openid.net/specs/openid-connect-core-1_0.html#Authentication</a></p>
</li>
<li><p><a href="https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest">https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest</a></p>
</li>
</ul>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2025/202509021336843.png" width="30%"/ loading="lazy">



<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在一些桌面应用（例如 Google 账号登录）中，过去常用 <strong>C# WebView2</strong> 内嵌浏览器来加载登录页。用户输入账号和密码后，应用即可获取授权凭证，用于后续调用业务 API。</p>
<p>然而这种方式逐渐暴露出风险与限制：</p>
<ol>
<li>WebView2 中账号密码可能存在泄露风险；</li>
<li>Google 等厂商逐步收缩权限，不再推荐使用内嵌 WebView 登录；</li>
<li>企业后台安全审核趋严，未来将全面禁止 WebView2 方式的认证。</li>
</ol>
<p>因此，更安全、更合规的做法是通过 <strong>系统默认浏览器</strong>（如 Chrome、Firefox）完成登录，并将结果回调给应用。</p>
<br>

<h2 id="cpp-httplib-与-libcurl-的区别"><a href="#cpp-httplib-与-libcurl-的区别" class="headerlink" title="cpp-httplib 与 libcurl 的区别"></a>cpp-httplib 与 libcurl 的区别</h2><p>在 OAuth 2.0 授权码流程中，<strong>获取授权码</strong>与<strong>使用授权码换取 Token</strong>的过程，需要用到不同的库：</p>
<ul>
<li><code>cpp-httplib</code>：<font color=#D0087E size=4 face="STFangsong"> 可在本地开启 HTTP 服务，<strong>监听浏览器的重定向回调并获取授权码。</strong></font></li>
<li><code>libcurl</code>：擅长发起 HTTP 请求，用于后续向授权服务器请求 Token。</li>
</ul>
<blockquote>
<p>核心点： <code>cpp-httplib</code> 能监听回调，而 <code>libcurl</code> 做不到。</p>
</blockquote>
<h3 id="🔍-操作系统对自定义协议的处理"><a href="#🔍-操作系统对自定义协议的处理" class="headerlink" title="🔍 操作系统对自定义协议的处理"></a>🔍 操作系统对自定义协议的处理</h3><p>当浏览器访问自定义协议（如 <code>my-app://token?code=xxx</code>）时，操作系统会根据注册信息启动本地应用，并将 URL 作为参数传递进去。在 Windows 上，这通常表现为：</p>
<ul>
<li>通过命令行参数传递</li>
<li>或通过 <code>WM_COPYDATA</code> 消息传递</li>
</ul>
<p>而 <code>libcurl</code> 仅是一个 <strong>HTTP 客户端库</strong>，无法拦截或处理操作系统层面的自定义协议调用，因此它无法直接获取浏览器重定向中的授权码。</p>
<h3 id="🧩-为什么-cpp-httplib-能监听重定向"><a href="#🧩-为什么-cpp-httplib-能监听重定向" class="headerlink" title="🧩 为什么 cpp-httplib 能监听重定向"></a>🧩 为什么 cpp-httplib 能监听重定向</h3><p><code>cpp-httplib</code> 内置了轻量级 HTTP&#x2F;HTTPS 服务器。应用可以在本地开启一个端口（如 <code>http://127.0.0.1:8080</code>），并将此端口写入 OAuth 2.0 授权请求的 <code>redirect_uri</code>。</p>
<p>当用户在浏览器完成登录后，授权服务器会将页面重定向到该地址，<code>cpp-httplib</code> 即可接收到请求，并提取出授权码。</p>
<h3 id="🛑-为什么-libcurl-无法做到"><a href="#🛑-为什么-libcurl-无法做到" class="headerlink" title="🛑 为什么 libcurl 无法做到"></a>🛑 为什么 libcurl 无法做到</h3><p><code>libcurl</code> 的定位是 <strong>发起请求</strong>，它不能充当 HTTP 服务端。也就是说，它只能用来交换 Token，而不能用来监听浏览器重定向。</p>
<br>

<h2 id="整体流程示例图"><a href="#整体流程示例图" class="headerlink" title="整体流程示例图"></a>整体流程示例图</h2><p>结合上述两个库的特点，可以总结为：</p>
<ul>
<li><strong>授权码获取</strong>：依赖 <code>cpp-httplib</code> 本地监听重定向</li>
<li><strong>Token 置换</strong>：使用 <code>libcurl</code> 发送请求获取</li>
</ul>
<p>流程如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">+-------------------+       <span class="token number">1</span>. 打开浏览器        +----------------------+
<span class="token operator">|</span>   本地客户端 exe    <span class="token operator">|</span> -----------------------<span class="token operator">></span> <span class="token operator">|</span>      浏览器           <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token punctuation">(</span>my-app.exe<span class="token punctuation">)</span>     <span class="token operator">|</span>                          <span class="token operator">|</span>                      <span class="token operator">|</span>
+-------------------+                          +----------------------+
         <span class="token operator">|</span>                                               <span class="token operator">|</span>
         <span class="token operator">|</span> <span class="token number">2</span>. 浏览器访问授权 URL                            <span class="token operator">|</span>
         <span class="token operator">|</span>    https://authserver.com/authorize?client_id<span class="token operator">=</span>xxx
         <span class="token function">v</span>                                               <span class="token function">v</span>
+-------------------+                           +----------------------+
<span class="token operator">|</span>     授权服务器     <span class="token operator">|</span> <span class="token operator">&lt;</span>----------------------    <span class="token operator">|</span>   用户登录/授权        <span class="token operator">|</span>
<span class="token operator">|</span>                   <span class="token operator">|</span>        <span class="token number">3</span>. 登录/授权         <span class="token operator">|</span>                    <span class="token operator">|</span>
+-------------------+                           +----------------------+
         <span class="token operator">|</span>
         <span class="token operator">|</span> <span class="token number">4</span>. 重定向到客户端注册的 redirect_uri （二选一）
         <span class="token operator">|</span>    <span class="token punctuation">[</span>a<span class="token punctuation">]</span> 自定义协议：my-app://token?code<span class="token operator">=</span>xxxx   （推荐）
         <span class="token operator">|</span>    <span class="token punctuation">[</span>b<span class="token punctuation">]</span> 回环浏览器方式：http://127.0.0.1:8080/callback?code<span class="token operator">=</span>xxxx （企业Product环境不允许）
         <span class="token function">v</span>
+-------------------+
<span class="token operator">|</span> 本地客户端 exe      <span class="token operator">|</span>
<span class="token operator">|</span> httplib 监听端口   <span class="token operator">|</span>
<span class="token operator">|</span> 收到 code          <span class="token operator">|</span>
+-------------------+
         <span class="token operator">|</span>
         <span class="token operator">|</span> <span class="token number">5</span>. 使用 libcurl 发 POST 请求换 token
         <span class="token function">v</span>
+-------------------+
<span class="token operator">|</span>   授权服务器       <span class="token operator">|</span>
<span class="token operator">|</span>   /token 接口     <span class="token operator">|</span>
+-------------------+
         <span class="token operator">|</span>
         <span class="token operator">|</span> <span class="token number">6</span>. 返回 JSON <span class="token punctuation">&#123;</span>access_token, refresh_token, <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span>
         <span class="token function">v</span>    使用 access_token 来调用后续业务逻辑接口
+-------------------+
<span class="token operator">|</span> 本地客户端 exe      <span class="token operator">|</span>
<span class="token operator">|</span> 收到并保存 token    <span class="token operator">|</span>
+-------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="Google-官方示例代码"><a href="#Google-官方示例代码" class="headerlink" title="Google 官方示例代码"></a>Google 官方示例代码</h3><p>Google 官方在 GitHub 上给出了一个简易的 C# 工程示例  <a href="https://github.com/googlesamples/oauth-apps-for-windows">oauth-apps-for-windows</a>，展示用 Google 账号登录 oauth 2.0 的流程。</p>
 <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2025/202509021127454.png" width="70%"/ loading="lazy">



<p>对于公司适配，对于 OAuthUniversalApp 工程，通常只需要修改 clientID 等三个字段，即可将 Google账号 切换为企业集团的 XXXXID账号，可以成功运行跑通。 而另一个两个工程，需要自己适配修改则更多一些。 </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">const string clientID <span class="token operator">=</span> <span class="token string">"xxxxxxxxxxxxxxxxxxxxxxxx"</span><span class="token punctuation">;</span>
const string redirectURI <span class="token operator">=</span> <span class="token string">"pw.oauth2:/oauth2redirect"</span><span class="token punctuation">;</span>              // 通常还需要企业面板注册和配置才能生效
const string authorizationEndpoint <span class="token operator">=</span> <span class="token string">"https://passport.xxxxxx.com/v1.0/xxxxxx/oauth2/authorize"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="自行实现纯-C-示例代码"><a href="#自行实现纯-C-示例代码" class="headerlink" title="自行实现纯 C++ 示例代码"></a>自行实现纯 C++ 示例代码</h3><p>Google 使用示例 OAuth for Apps: Samples for Windows，更多还是参考含义；对于实际工程中直接集成并不适用。还是需要自己写一套来实现适配。</p>
<p>压轴代码来了，我们希望使用存 C++ 来实现这个项目，便于项目的集成。</p>
<br>

<h4 id="监听和捕获浏览器的重定向的响应"><a href="#监听和捕获浏览器的重定向的响应" class="headerlink" title="监听和捕获浏览器的重定向的响应"></a>监听和捕获浏览器的重定向的响应</h4><p>关于 <strong>4.重定向到客户端注册的 redirect_uri</strong>  这步骤中，实现有两种方式：</p>
<ol>
<li><strong>本地回环方式：</strong>通过监听本地浏览器返回的 <code>http://127.0.0.1:8080/callback?code=xxxx</code> ,捕获到所需要 code；但这种方法在 product 环境中，经常会遇到不被允许，但若是正经域名方式可以。即使 Test 环境允许，也需要在 面板上面自行注册，再后台同事来配置等待半个工作日才能生效</li>
<li><strong>自定义协议（推荐）：</strong> <code>my-app://token?code=xxxx</code>; 推荐的实现，其中跳转也有两种方式。<ul>
<li>一个是将另一个 exe 程序在 注册表指定路径进行注册，再通过调用传参数来获取 code</li>
<li>使用管道来实现，实测更加靠谱（推荐）</li>
</ul>
</li>
</ol>
<br>

<h3 id="示例代码流程"><a href="#示例代码流程" class="headerlink" title="示例代码流程"></a>示例代码流程</h3><blockquote>
<p>简化版调用流程：主实例负责监听，次实例负责转交 URI，最终由主实例拿到授权码并换 Token。</p>
</blockquote>
<p>示例程序实现了 <strong>单实例 + 自定义协议回调 + 实例间通过命名管道传 URI</strong> 的流程。核心思路是：</p>
<ul>
<li>程序用一个命名 <code>Mutex</code> 判断“是否为首个实例”。</li>
<li>如果是<strong>首个实例</strong>：<ul>
<li>启动一个后台线程作为 <strong>命名管道服务器</strong>（等待其他实例连接并读取对方写入的字符串）。</li>
<li>把自定义协议 <code>accesories-udcc</code> 注册到当前用户的注册表（HKCU），并打开浏览器发起 OAuth 授权（<code>auth_url</code>）。</li>
<li>首实例等待通过管道收到后续回调（例如包含 <code>code</code> 的 URI），收到后解析并处理（当前只是打印 code&#x2F;state）。</li>
</ul>
</li>
<li>如果是<strong>后续启动的实例</strong>（通常由浏览器在 OAuth 回调时启动）：<ul>
<li>识别到不是首实例后，把命令行参数（浏览器传来的 <code>accesories-udcc://...</code>）通过<strong>命名管道</strong>写给首实例，然后退出。</li>
</ul>
</li>
</ul>
<p>这样做的好处：授权流程只在一个主进程里做实际处理，浏览器直接触发一个新进程（由系统打开自定义协议），新进程把 URI 转交给主进程后自己退出，避免多重并行处理或 UI 冲突。</p>
<br>

<h4 id="完整源码"><a href="#完整源码" class="headerlink" title="完整源码"></a>完整源码</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// main.cpp 只保留通用代码，自行替换一些实际参数即可正常编译和运行
// 使用命名管道 <span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">\</span>.<span class="token punctuation">\</span>pipe<span class="token punctuation">\</span>MyApp_Pipe_v1<span class="token punctuation">)</span> 在主/子进程间传递 my-app:// URI
// 特点：主实例创建管道服务器线程；新实例尝试连接管道并写入 URI（然后退出）。

<span class="token comment">#include &lt;windows.h></span>
<span class="token comment">#include &lt;shellapi.h></span>
<span class="token comment">#include &lt;shlwapi.h></span>
<span class="token comment">#include &lt;string></span>
<span class="token comment">#include &lt;map></span>
<span class="token comment">#include &lt;sstream></span>
<span class="token comment">#include &lt;iostream></span>
<span class="token comment">#include &lt;thread></span>
<span class="token comment">#include &lt;vector></span>

<span class="token comment">#pragma comment(lib, "Shlwapi.lib")</span>

using std::string<span class="token punctuation">;</span>
using std::map<span class="token punctuation">;</span>
using std::cout<span class="token punctuation">;</span>
using std::endl<span class="token punctuation">;</span>

// 常量
const char* PIPE_NAME <span class="token operator">=</span> R<span class="token string">"(<span class="token entity" title="\\">\\</span>.\pipe\MyApp_Pipe_v1)"</span><span class="token punctuation">;</span>
const char* MUTEX_NAME <span class="token operator">=</span> <span class="token string">"Local<span class="token entity" title="\\">\\</span>MyApp_Mutex_v1"</span><span class="token punctuation">;</span>

//////////////////////////////////////////////////////////////////
// 工具函数（URL 解码、解析 query/fragment、exe 路径等）
//////////////////////////////////////////////////////////////////

string <span class="token function-name function">GetExePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    char buf<span class="token punctuation">[</span>MAX_PATH<span class="token punctuation">]</span><span class="token punctuation">;</span>
    DWORD n <span class="token operator">=</span> GetModuleFileNameA<span class="token punctuation">(</span>nullptr, buf, MAX_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token builtin class-name">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> string<span class="token punctuation">(</span>buf, n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

string ToLowerAscii<span class="token punctuation">(</span>const string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    string r <span class="token operator">=</span> s<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>char<span class="token operator">&amp;</span> c <span class="token builtin class-name">:</span> r<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span> c <span class="token operator">=</span> char<span class="token punctuation">(</span>c - <span class="token string">'A'</span> + <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

string PercentDecode<span class="token punctuation">(</span>const string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    string out<span class="token punctuation">;</span>
    out.reserve<span class="token punctuation">(</span>s.size<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
    auto hex <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>char c<span class="token punctuation">)</span>-<span class="token operator">></span>int <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token builtin class-name">return</span> c - <span class="token string">'0'</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'F'</span><span class="token punctuation">)</span> <span class="token builtin class-name">return</span> c - <span class="token string">'A'</span> + <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'f'</span><span class="token punctuation">)</span> <span class="token builtin class-name">return</span> c - <span class="token string">'a'</span> + <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token builtin class-name">return</span> -1<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ++i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'%'</span> <span class="token operator">&amp;&amp;</span> i + <span class="token number">2</span> <span class="token operator">&lt;</span> s.size<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">&#123;</span>
            int h <span class="token operator">=</span> hex<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i + <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            int l <span class="token operator">=</span> hex<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i + <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                out.push_back<span class="token punctuation">(</span>char<span class="token variable"><span class="token punctuation">((</span>h <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span> l<span class="token punctuation">))</span></span><span class="token punctuation">;</span>
                i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token builtin class-name">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span> out.push_back<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> out.push_back<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token builtin class-name">return</span> out<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

map<span class="token operator">&lt;</span>string, string<span class="token operator">></span> ParseParamsFromUri<span class="token punctuation">(</span>const string<span class="token operator">&amp;</span> uri<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    map<span class="token operator">&lt;</span>string, string<span class="token operator">></span> out<span class="token punctuation">;</span>
    size_t hashPos <span class="token operator">=</span> uri.find<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    size_t qPos <span class="token operator">=</span> uri.find<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    auto parse_part <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>size_t start, size_t end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> string::npos <span class="token operator">||</span> start <span class="token operator">>=</span> end<span class="token punctuation">)</span> <span class="token builtin class-name">return</span><span class="token punctuation">;</span>
        string part <span class="token operator">=</span> uri.substr<span class="token punctuation">(</span>start, end - start<span class="token punctuation">)</span><span class="token punctuation">;</span>
        size_t pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> part.size<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">&#123;</span>
            size_t amp <span class="token operator">=</span> part.find<span class="token punctuation">(</span><span class="token string">'&amp;'</span>, pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
            string token <span class="token operator">=</span> part.substr<span class="token punctuation">(</span>pos, <span class="token punctuation">(</span>amp <span class="token operator">==</span> string::npos ? part.size<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span> amp<span class="token punctuation">)</span> - pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
            size_t eq <span class="token operator">=</span> token.find<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>eq <span class="token operator">!=</span> string::npos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                string k <span class="token operator">=</span> token.substr<span class="token punctuation">(</span><span class="token number">0</span>, eq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                string <span class="token function">v</span> <span class="token operator">=</span> token.substr<span class="token punctuation">(</span>eq + <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                out<span class="token punctuation">[</span>PercentDecode<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> PercentDecode<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                out<span class="token punctuation">[</span>PercentDecode<span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>amp <span class="token operator">==</span> string::npos<span class="token punctuation">)</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span>
            pos <span class="token operator">=</span> amp + <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>qPos <span class="token operator">!=</span> string::npos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        size_t qStart <span class="token operator">=</span> qPos + <span class="token number">1</span><span class="token punctuation">;</span>
        size_t qEnd <span class="token operator">=</span> <span class="token punctuation">(</span>hashPos <span class="token operator">!=</span> string::npos<span class="token punctuation">)</span> ? hashPos <span class="token builtin class-name">:</span> uri.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>qStart <span class="token operator">&lt;</span> qEnd<span class="token punctuation">)</span> parse_part<span class="token punctuation">(</span>qStart, qEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hashPos <span class="token operator">!=</span> string::npos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        size_t fStart <span class="token operator">=</span> hashPos + <span class="token number">1</span><span class="token punctuation">;</span>
        size_t fEnd <span class="token operator">=</span> uri.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fStart <span class="token operator">&lt;</span> fEnd<span class="token punctuation">)</span> parse_part<span class="token punctuation">(</span>fStart, fEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token builtin class-name">return</span> out<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

//////////////////////////////////////////////////////////////////
// 命名管道服务器（在主实例中运行）
// 监听管道连接，读取客户端写入的 URI 字符串（以 <span class="token string">'\0'</span> 结尾或读取长度）
// 收到后交给 ProcessReceivedUri 处理（当前示例只是打印并解析 code/state）
//////////////////////////////////////////////////////////////////

void ProcessReceivedUri<span class="token punctuation">(</span>const string<span class="token operator">&amp;</span> uri<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Server] 收到 URI: "</span> <span class="token operator">&lt;&lt;</span> uri <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    auto params <span class="token operator">=</span> ParseParamsFromUri<span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>params.count<span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">))</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Server] code = "</span> <span class="token operator">&lt;&lt;</span> params<span class="token punctuation">[</span><span class="token string">"code"</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>params.count<span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">))</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Server] state = "</span> <span class="token operator">&lt;&lt;</span> params<span class="token punctuation">[</span><span class="token string">"state"</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    // TODO: 在这里继续做 code-<span class="token operator">></span>token 的交换（HTTP 请求）
<span class="token punctuation">&#125;</span>

void <span class="token function-name function">PipeServerThreadProc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        // 创建命名管道（单实例：每次连接后 Disconnect 并继续）
        HANDLE hPipe <span class="token operator">=</span> CreateNamedPipeA<span class="token punctuation">(</span>
            PIPE_NAME,
            PIPE_ACCESS_INBOUND, // 只读（客户端写入）
            PIPE_TYPE_BYTE <span class="token operator">|</span> PIPE_READMODE_BYTE <span class="token operator">|</span> PIPE_WAIT,
            <span class="token number">1</span>,          // 最多一个实例连接
            <span class="token number">4096</span>,       // out buffer
            <span class="token number">4096</span>,       // <span class="token keyword">in</span> buffer
            <span class="token number">0</span>,
            NULL
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hPipe <span class="token operator">==</span> INVALID_HANDLE_VALUE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Server] CreateNamedPipeA 失败, GetLastError="</span> <span class="token operator">&lt;&lt;</span> GetLastError<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
            std::this_thread::sleep_for<span class="token punctuation">(</span>std::chrono::seconds<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
            <span class="token builtin class-name">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        // 等待客户端连接
        BOOL connected <span class="token operator">=</span> ConnectNamedPipe<span class="token punctuation">(</span>hPipe, NULL<span class="token punctuation">)</span> ? TRUE <span class="token builtin class-name">:</span> <span class="token punctuation">(</span>GetLastError<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ERROR_PIPE_CONNECTED<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>connected<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Server] ConnectNamedPipe 失败, GetLastError="</span> <span class="token operator">&lt;&lt;</span> GetLastError<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
            CloseHandle<span class="token punctuation">(</span>hPipe<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token builtin class-name">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        // 客户端已连接，读取数据
        std::vector<span class="token operator">&lt;</span>char<span class="token operator">></span> buf<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DWORD bytesRead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        BOOL readOk <span class="token operator">=</span> ReadFile<span class="token punctuation">(</span>hPipe, buf.data<span class="token punctuation">(</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>buf.size<span class="token punctuation">(</span><span class="token punctuation">)</span> - <span class="token number">1</span>, <span class="token operator">&amp;</span>bytesRead, NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>readOk <span class="token operator">||</span> bytesRead <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Server] ReadFile 失败或无数据, GetLastError="</span> <span class="token operator">&lt;&lt;</span> GetLastError<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
            // 断开并继续循环
            DisconnectNamedPipe<span class="token punctuation">(</span>hPipe<span class="token punctuation">)</span><span class="token punctuation">;</span>
            CloseHandle<span class="token punctuation">(</span>hPipe<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token builtin class-name">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        // 确保以 <span class="token string">'\0'</span> 终止
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytesRead <span class="token operator">>=</span> buf.size<span class="token punctuation">(</span><span class="token punctuation">))</span> bytesRead <span class="token operator">=</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>buf.size<span class="token punctuation">(</span><span class="token punctuation">)</span> - <span class="token number">1</span><span class="token punctuation">;</span>
        buf<span class="token punctuation">[</span>bytesRead<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>
        string uri<span class="token punctuation">(</span>buf.data<span class="token punctuation">(</span><span class="token punctuation">)</span>, bytesRead<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ProcessReceivedUri<span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>

        // 关闭/断开
        DisconnectNamedPipe<span class="token punctuation">(</span>hPipe<span class="token punctuation">)</span><span class="token punctuation">;</span>
        CloseHandle<span class="token punctuation">(</span>hPipe<span class="token punctuation">)</span><span class="token punctuation">;</span>
        // 继续等待下一个客户端
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

//////////////////////////////////////////////////////////////////
// 发送端（新实例）：尝试连接命名管道并写入 URI（带重试）
// 返回 <span class="token boolean">true</span> 表示发送成功（主实例会处理），false 表示发送失败
//////////////////////////////////////////////////////////////////

bool SendUriToPipeServer<span class="token punctuation">(</span>const string<span class="token operator">&amp;</span> uri, int maxRetries <span class="token operator">=</span> <span class="token number">8</span>, int retryDelayMs <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxRetries<span class="token punctuation">;</span> ++i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        // 尝试打开管道
        HANDLE hPipe <span class="token operator">=</span> CreateFileA<span class="token punctuation">(</span>
            PIPE_NAME,
            GENERIC_WRITE,
            <span class="token number">0</span>,
            NULL,
            OPEN_EXISTING,
            <span class="token number">0</span>,
            NULL
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hPipe <span class="token operator">!=</span> INVALID_HANDLE_VALUE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            // 成功连接，写入数据（包含 <span class="token string">'\0'</span>）
            DWORD bytesWritten <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            BOOL ok <span class="token operator">=</span> WriteFile<span class="token punctuation">(</span>hPipe, uri.c_str<span class="token punctuation">(</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>uri.size<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token number">1</span>, <span class="token operator">&amp;</span>bytesWritten, NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Client] WriteFile 失败, GetLastError="</span> <span class="token operator">&lt;&lt;</span> GetLastError<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
                CloseHandle<span class="token punctuation">(</span>hPipe<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token builtin class-name">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Client] 成功写入管道, bytesWritten="</span> <span class="token operator">&lt;&lt;</span> bytesWritten <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
            CloseHandle<span class="token punctuation">(</span>hPipe<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token builtin class-name">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            DWORD err <span class="token operator">=</span> GetLastError<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            // ERROR_FILE_NOT_FOUND 表示服务器未创建管道（主实例尚未就绪）
            <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">==</span> ERROR_FILE_NOT_FOUND<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                // 等待并重试
                // cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Client] 管道不存在，等待重试..."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
                Sleep<span class="token punctuation">(</span>retryDelayMs<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token builtin class-name">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Client] CreateFile 打开管道失败, GetLastError="</span> <span class="token operator">&lt;&lt;</span> err <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
                Sleep<span class="token punctuation">(</span>retryDelayMs<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token builtin class-name">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Client] 已达最大重试次数，无法连接管道发送 URI"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

//////////////////////////////////////////////////////////////////
// main：单实例判断、管道发送/接收、打开浏览器（保留 <span class="token assign-left variable">response_mode</span><span class="token operator">=</span>fragment）
//////////////////////////////////////////////////////////////////

int main<span class="token punctuation">(</span>int argc, char* argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    // 创建命名 Mutex 判断是否首个实例
    HANDLE hMutex <span class="token operator">=</span> CreateMutexA<span class="token punctuation">(</span>NULL, FALSE, MUTEX_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hMutex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"CreateMutex 失败: "</span> <span class="token operator">&lt;&lt;</span> GetLastError<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token builtin class-name">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    bool firstInstance <span class="token operator">=</span> <span class="token punctuation">(</span>GetLastError<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> ERROR_ALREADY_EXISTS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"firstInstance = "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>firstInstance ? <span class="token string">"true"</span> <span class="token builtin class-name">:</span> <span class="token string">"false"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    // 若以协议方式启动，argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> 里可能包含 URI（或被引号包裹）
    string rawArg<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        rawArg <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rawArg.empty<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> rawArg.front<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'"'</span> <span class="token operator">&amp;&amp;</span> rawArg.back<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'"'</span><span class="token punctuation">)</span> rawArg <span class="token operator">=</span> rawArg.substr<span class="token punctuation">(</span><span class="token number">1</span>, rawArg.size<span class="token punctuation">(</span><span class="token punctuation">)</span> - <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    // 对 argv 做 PercentDecode（把 %23 -<span class="token operator">></span> <span class="token string">'#'</span> 等恢复）
    string decodedArg <span class="token operator">=</span> PercentDecode<span class="token punctuation">(</span>rawArg<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>firstInstance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        // 新实例：尝试通过命名管道把 URI 发给主实例（如果带 URI）
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Client] 非首实例，尝试通过命名管道发送 URI（如果存在）..."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>decodedArg.empty<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">&#123;</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Client] 将发送的 URI (decoded) = "</span> <span class="token operator">&lt;&lt;</span> decodedArg <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
            bool sent <span class="token operator">=</span> SendUriToPipeServer<span class="token punctuation">(</span>decodedArg, <span class="token number">12</span>, <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Client] 通过管道发送失败，可能主实例未就绪或权限问题。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
                // 失败后选择退出
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Client] 发送成功，进程退出。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
                <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Client] 没有 URI 参数，直接退出。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    // 首个实例：启动命名管道服务器线程
    std::thread serverThread<span class="token punctuation">(</span>PipeServerThreadProc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    serverThread.detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Server] 命名管道服务器线程已启动，管道名="</span> <span class="token operator">&lt;&lt;</span> PIPE_NAME <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    // 首个实例：注册自定义协议（HKCU，免管理员）
    string keyErr<span class="token punctuation">;</span>
    // 注册函数：写入 HKCU<span class="token punctuation">\</span>Software<span class="token punctuation">\</span>Classes<span class="token punctuation">\</span>my-app<span class="token punctuation">\</span>shell<span class="token punctuation">\</span>open<span class="token punctuation">\</span>command <span class="token operator">=</span> <span class="token string">"exe"</span> <span class="token string">"%1"</span>
    // 你可以在安装程序中替代此步骤
    HKEY hKey <span class="token operator">=</span> NULL<span class="token punctuation">;</span>
    string keyRoot <span class="token operator">=</span> <span class="token string">"Software<span class="token entity" title="\\">\\</span>Classes<span class="token entity" title="\\">\\</span>my-app"</span><span class="token punctuation">;</span>
    LONG r <span class="token operator">=</span> RegCreateKeyExA<span class="token punctuation">(</span>HKEY_CURRENT_USER, keyRoot.c_str<span class="token punctuation">(</span><span class="token punctuation">)</span>, <span class="token number">0</span>, nullptr,
        REG_OPTION_NON_VOLATILE, KEY_WRITE, nullptr, <span class="token operator">&amp;</span>hKey, nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> ERROR_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        string desc <span class="token operator">=</span> <span class="token string">"URL:my-app Protocol"</span><span class="token punctuation">;</span>
        RegSetValueExA<span class="token punctuation">(</span>hKey, nullptr, <span class="token number">0</span>, REG_SZ, <span class="token punctuation">(</span>const BYTE*<span class="token punctuation">)</span>desc.c_str<span class="token punctuation">(</span><span class="token punctuation">)</span>, DWORD<span class="token punctuation">(</span>desc.size<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token number">1</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
        RegSetValueExA<span class="token punctuation">(</span>hKey, <span class="token string">"URL Protocol"</span>, <span class="token number">0</span>, REG_SZ, <span class="token punctuation">(</span>const BYTE*<span class="token punctuation">)</span><span class="token string">""</span>, <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        RegCloseKey<span class="token punctuation">(</span>hKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

        string cmdKey <span class="token operator">=</span> keyRoot + <span class="token string">"<span class="token entity" title="\\">\\</span>shell<span class="token entity" title="\\">\\</span>open<span class="token entity" title="\\">\\</span>command"</span><span class="token punctuation">;</span>
        HKEY hCmd <span class="token operator">=</span> NULL<span class="token punctuation">;</span>
        r <span class="token operator">=</span> RegCreateKeyExA<span class="token punctuation">(</span>HKEY_CURRENT_USER, cmdKey.c_str<span class="token punctuation">(</span><span class="token punctuation">)</span>, <span class="token number">0</span>, nullptr,
            REG_OPTION_NON_VOLATILE, KEY_WRITE, nullptr, <span class="token operator">&amp;</span>hCmd, nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> ERROR_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            string exePath <span class="token operator">=</span> GetExePath<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            string cmd <span class="token operator">=</span> <span class="token string">"<span class="token entity" title="\&quot;">\"</span>"</span> + exePath + <span class="token string">"<span class="token entity" title="\&quot;">\"</span> <span class="token entity" title="\&quot;">\"</span>%1<span class="token entity" title="\&quot;">\"</span>"</span><span class="token punctuation">;</span>
            RegSetValueExA<span class="token punctuation">(</span>hCmd, nullptr, <span class="token number">0</span>, REG_SZ, <span class="token punctuation">(</span>const BYTE*<span class="token punctuation">)</span>cmd.c_str<span class="token punctuation">(</span><span class="token punctuation">)</span>, DWORD<span class="token punctuation">(</span>cmd.size<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token number">1</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
            RegCloseKey<span class="token punctuation">(</span>hCmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Server] 已在 HKCU 注册 my-app 协议（当前用户生效）。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Server] 创建 command 子键失败: "</span> <span class="token operator">&lt;&lt;</span> r <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Server] 创建注册表键失败: "</span> <span class="token operator">&lt;&lt;</span> r <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    // 如果首个实例启动时带有 URI（例如浏览器直接以首实例方式启动），解析并处理
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>decodedArg.empty<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ToLowerAscii<span class="token punctuation">(</span>decodedArg<span class="token punctuation">)</span>.rfind<span class="token punctuation">(</span><span class="token string">"my-app://"</span>, <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Server] 启动时携带 deep-link: "</span> <span class="token operator">&lt;&lt;</span> decodedArg <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        ProcessReceivedUri<span class="token punctuation">(</span>decodedArg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    // 构造 auth_url（保持你最初要求，不修改 <span class="token assign-left variable">response_mode</span><span class="token operator">=</span>fragment）
    string redirect_uri <span class="token operator">=</span> <span class="token string">"my-app://token"</span><span class="token punctuation">;</span>
    const string auth_url <span class="token operator">=</span> std::string<span class="token punctuation">(</span><span class="token string">"https://account.xxxx.com/auth/xxxx/xxxx/auth"</span><span class="token punctuation">)</span>
        + <span class="token string">"?client_id=my-app"</span>
        + <span class="token string">"&amp;state=xxxx"</span>
        + <span class="token string">"&amp;response_mode=fragment"</span>
        + <span class="token string">"&amp;response_type=code"</span>
        + <span class="token string">"&amp;nonce=xxxx"</span>
        + <span class="token string">"&amp;scope=xxxx"</span>
        + <span class="token string">"&amp;redirect_uri="</span> + redirect_uri<span class="token punctuation">;</span>  // 重点

    // 打开浏览器发起授权（仅用于测试或演示）
    ShellExecuteA<span class="token punctuation">(</span>nullptr, <span class="token string">"open"</span>, auth_url.c_str<span class="token punctuation">(</span><span class="token punctuation">)</span>, nullptr, nullptr, SW_SHOWNORMAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Server] 已打开浏览器，auth_url="</span> <span class="token operator">&lt;&lt;</span> auth_url <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Server] 等待通过命名管道传入的 my-app:// 回调..."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    // 简单的消息循环：这里用 GetMessage 以保持进程活跃（便于 Ctrl+C 停止）
    // 你可以把主循环替换为你的 GUI/应用主循环
    MSG msg<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>GetMessage<span class="token punctuation">(</span><span class="token operator">&amp;</span>msg, NULL, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">))</span> <span class="token punctuation">&#123;</span>
        TranslateMessage<span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        DispatchMessage<span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    // 清理（永远到不了这里，除非 PostQuitMessage）
    CloseHandle<span class="token punctuation">(</span>hMutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="libcurl-请求用授权码-code-置换-token"><a href="#libcurl-请求用授权码-code-置换-token" class="headerlink" title="libcurl 请求用授权码 code 置换 token"></a>libcurl 请求用授权码 code 置换 token</h4><p>下面仅简要说明使用 <code>libcurl</code> 发起用 Code 来置换 Token 请求；</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">--location</span> <span class="token parameter variable">--request</span> POST <span class="token string">"https://account.xxxx.xxxx.com/auth/xxxx/xxxxxxx/xxxxx/xxxxxx/token"</span> <span class="token punctuation">\</span>
<span class="token parameter variable">--header</span> <span class="token string">"Content-Type: application/x-www-form-urlencoded"</span> <span class="token punctuation">\</span>
--data-urlencode <span class="token string">"code=xxx-long-code-xxx"</span> <span class="token punctuation">\</span>
--data-urlencode <span class="token string">"grant_type=xxxx"</span> <span class="token punctuation">\</span>
--data-urlencode <span class="token string">"client_id=my-app"</span> <span class="token punctuation">\</span>
--data-urlencode <span class="token string">"redirect_uri=my-app://token"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到返回我们所需要的 <code>access_token</code>, 至此即完成</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span>
	<span class="token string">"access_token"</span><span class="token builtin class-name">:</span> <span class="token string">"eyJhbGciOiJSU超级长一段字符串3YV_8_vA"</span>,
	<span class="token string">"expires_in"</span><span class="token builtin class-name">:</span> xxxx,
	<span class="token punctuation">..</span><span class="token punctuation">..</span>.
	<span class="token string">"scope"</span><span class="token builtin class-name">:</span> <span class="token string">"xxxx1 xxxx2"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="编译-Libcurl-指南"><a href="#编译-Libcurl-指南" class="headerlink" title="编译 Libcurl  指南"></a>编译 Libcurl  指南</h3><p><strong>更进一步完善：</strong> 简单的验证方式直接在 CMD 终端中，调用上面 CURL 命令来验证可行性，再切换为调用 Libcurl 库来实现。</p>
<p>对于 Libcurl  不熟悉的话，可以查看写的 <a href="https://xmuli.blog.csdn.net/article/details/150998055">《C++ 编译和运行 LibCurl 动态库和静态库》</a> 系列文章。</p>
<br>

<h2 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a>  欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！</p>
]]></content>
      <categories>
        <category>学习 - Windows</category>
        <category>学习 - C/C++ 序三 商业</category>
        <category>专栏 - 项目实战开发</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>dot 绘图语言</title>
    <url>/posts/2cec9c6a/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　讲解 dot 绘图语言的简要使用（graphviz 工具包），转载于 <a href="https://frapples.github.io/articles/2016-11-16-1f70.html">dot 绘图语言</a> 一文（已沟通，获得转载许可）。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<h1 id="dot-绘图语言"><a href="#dot-绘图语言" class="headerlink" title="dot 绘图语言"></a>dot 绘图语言</h1><p>graphviz 是一个很古老的开源软件包了，用来绘制结构化的图形。</p>
<p>通过它，你只需要编写简单的脚本（dot 语言），描述图的逻辑和关系， 它就能够自动帮你搞定布局之类的琐碎事情，生成你需要的图。</p>
<p>在编程当中，其实很多时候并不太在乎图的美观和布局，往往我们需要的是一种直观的图形方式来表达我们内在的复杂逻辑。 这时，graphviz 的威力就发挥出来了。只需要使用 dot 脚本简单描述下逻辑，就能很好的得到需要的直观图形。</p>
<p>这篇博文总结了下 dot 的常用语法和几个示例以让我更好的使用 dot。 我本人喜欢在 org-mode 中使用 org-babel 插入所需要的图，关于这方面的配置留到下篇博文再讲。😀</p>
<p>首先上一个很厉害也很实用的示例，有人用 dot 轻松的绘制出了离散数学的思维导图： <a href="https://zhuanlan.zhihu.com/p/20450190">https://zhuanlan.zhihu.com/p/20450190</a></p>
<br>

<h1 id="1-有向图和无向图"><a href="#1-有向图和无向图" class="headerlink" title="1. 有向图和无向图"></a>1. 有向图和无向图</h1><pre class="line-numbers language-none"><code class="language-none">digraph G&#123;
a -&gt; b;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20211003140759.png" width="10%"/ loading="lazy">

<p>使用 digraph 定义有向图。上面的代码定义了有向图 G。 有向图中，使用 -&gt; 符号表示边。上面的代码中，从节点 a 指向节点 b 有一条边。</p>
<pre class="line-numbers language-none"><code class="language-none">graph G&#123;
a -- b;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20211003140843.png" width="10%"/ loading="lazy"> 

<p>使用 graph 定义无向图。上面的代码定义了无向图 G。 无向图中，使用 – 符号表示边。上面的代码中，节点 a 和节点 b 之间有一条边。</p>
<br>

<h1 id="2-边和节点"><a href="#2-边和节点" class="headerlink" title="2. 边和节点"></a>2. 边和节点</h1><p>如下定义了节点 a 和 b：</p>
<pre class="line-numbers language-none"><code class="language-none">digraph G&#123;
a;
b;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20211003140942.png" width="30%"/ loading="lazy">

<p>如下定义了节点 a 到 b 的边：</p>
<pre class="line-numbers language-none"><code class="language-none">digraph G&#123;
a -&gt; b;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20211003141024.png" width="15%"/ loading="lazy">

<p>可以看到，在定义边的时候需要说明节点。如果这些节点之前没有定义过，在这里也会被定义。</p>
<p>如果一个节点到多个节点都有边，还有一种简写法：</p>
<pre class="line-numbers language-none"><code class="language-none">digraph G&#123;
a -&gt; &#123;b c&#125;;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20211003141048.png" width="20%"/ loading="lazy">

<p>甚至，多个节点到多个节点都有边：</p>
<pre class="line-numbers language-none"><code class="language-none">digraph G&#123;
&#123;a b c&#125; -&gt; &#123;d e f&#125;;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20211003141113.png" width="30%"/ loading="lazy">

<p>连着写也是可以的：</p>
<pre class="line-numbers language-none"><code class="language-none">digraph G&#123;
a -&gt; b -&gt; &#123;c d&#125;;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20211003141129.png" width="20%"/ loading="lazy">

<p>实际上，末尾的分号是可写可不写的。而且无论你写不写分号，换不换行都不影响语义。 这个看个人习惯，dot 的语法并没有强制规定这个。</p>
<br>

<h1 id="3-设置属性"><a href="#3-设置属性" class="headerlink" title="3. 设置属性"></a>3. 设置属性</h1><h2 id="3-1-对单个节点或边设置属性"><a href="#3-1-对单个节点或边设置属性" class="headerlink" title="3.1. 对单个节点或边设置属性"></a>3.1. 对单个节点或边设置属性</h2><p>在边或节点的后面加上一对方括号，里面使用 key&#x3D;value 的形式设置它的属性。</p>
<p>边和节点都有个 label 属性，表示它实际显示的文字。默认情况下，边是不显示文字的，节点的文字就是节点的名称。 下面给节点和边手动设置 label 属性：</p>
<pre class="line-numbers language-none"><code class="language-none">digraph G&#123;
  a [label&#x3D;&quot;节点 A&quot;];
  b [label&#x3D;&quot;节点 B&quot;];
  a -&gt; b [label&#x3D;&quot;从 A 到 B&quot;];
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20211003141154.png" width="20%"/ loading="lazy">

<p>节点的 shape 属性表示节点的形状，边的 arrowhead 表示箭头的形状：</p>
<pre class="line-numbers language-none"><code class="language-none">digraph G&#123;
  a [label&#x3D;&quot;节点 A&quot;, shape&#x3D;circle];
  b [label&#x3D;&quot;节点 B&quot;, shape&#x3D;doublecircle];
  a -&gt; b [label&#x3D;&quot;从 A 到 B&quot;, arrowhead&#x3D;vee];
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20211003141206.png" width="15%"/ loading="lazy">

<p>可以看到，要设置这个边或这个节点的多个属性，之间用逗号隔开。</p>
<p>更多关于边和节点的形状，参考这里： 节点的形状：<a href="http://graphviz.org/content/node-shapes">http://graphviz.org/content/node-shapes</a> 边的形状：<a href="http://graphviz.org/content/arrow-shapes">http://graphviz.org/content/arrow-shapes</a></p>
<br>

<h2 id="3-2-对所有的节点或边设置属性"><a href="#3-2-对所有的节点或边设置属性" class="headerlink" title="3.2. 对所有的节点或边设置属性"></a>3.2. 对所有的节点或边设置属性</h2><p>如果你想一次设置对多个节点生效，这样：</p>
<pre class="line-numbers language-none"><code class="language-none">digraph G&#123;
node[shape&#x3D;circle];
edge[arrowhead&#x3D;vee];
  a [label&#x3D;&quot;节点 A&quot;];
  b [label&#x3D;&quot;节点 B&quot;];
  a -&gt; b [label&#x3D;&quot;从 A 到 B&quot;];
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20211003141240.png" width="15%"/ loading="lazy">

<p>在 node 后接中括号，里面写上属性设置，接下来定义的所有节点会默认使用这里的属性设置。</p>
<p>对多个边设置属性也类似节点。在 edge 后接中括号设置属性。</p>
<br>

<h2 id="3-3-设置图的属性"><a href="#3-3-设置图的属性" class="headerlink" title="3.3. 设置图的属性"></a>3.3. 设置图的属性</h2><p>图本身也能设置一些属性，比如布局方式，图本身的说明标签：</p>
<pre class="line-numbers language-none"><code class="language-none">digraph G&#123;
rankdir &#x3D; LR;
label &#x3D; &quot;示例图&quot;;
a -&gt; b;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20211003141257.png" width="25%"/ loading="lazy">

<p>rankdir 设置了图的布局为 LR，即从左向右；默认图的布局是 TB，即从上向下。 label 设置了对图本身的说明标签。</p>
<br>

<h2 id="3-4-常用属性"><a href="#3-4-常用属性" class="headerlink" title="3.4. 常用属性"></a>3.4. 常用属性</h2><p>这篇文章里对常用的图，边和节点的属性做了一个较好的总结： <a href="http://www.jianshu.com/p/5b02445eca1d">http://www.jianshu.com/p/5b02445eca1d</a></p>
<br>

<h1 id="4-注释"><a href="#4-注释" class="headerlink" title="4. 注释"></a>4. 注释</h1><p>dot 支持 C 和 C++风格的注释，&#x2F;&#x2F;和&#x2F;* *&#x2F;两种。</p>
<br>

<h1 id="5-复杂的节点结构"><a href="#5-复杂的节点结构" class="headerlink" title="5. 复杂的节点结构"></a>5. 复杂的节点结构</h1><p>通过对 label 进行一定格式的编写，就能够在 label 中呈现出如下这样的结构：</p>
<pre class="line-numbers language-none"><code class="language-none">digraph structs &#123;
    node [shape&#x3D;record];
    struct1 [shape&#x3D;record,label&#x3D;&quot;&lt;f0&gt; left|&lt;f1&gt; mid\ dle|&lt;f2&gt; right&quot;];
    struct2 [shape&#x3D;record,label&#x3D;&quot;&lt;f0&gt; one|&lt;f1&gt; two&quot;];
    struct3 [shape&#x3D;record,label&#x3D;&quot;hello\nworld |&#123; b |&#123;c|&lt;here&gt; d|e&#125;| f&#125;| g | h&quot;];
    struct1 -&gt; struct2;
    struct1 -&gt; struct3;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20211003141341.png" width="45%"/ loading="lazy">

<p>注意到节点被分成了几个小方框，而且每一个方框都可以指定一个名称。</p>
<p>在连接节点时，通过这个名称就能更细的指定具体连接到哪一个小方框上：</p>
<pre class="line-numbers language-none"><code class="language-none">digraph structs &#123;
node [shape&#x3D;record];
struct1 [shape&#x3D;record,label&#x3D;&quot;&lt;f0&gt; left|&lt;f1&gt; middle|&lt;f2&gt; right&quot;];
struct2 [shape&#x3D;record,label&#x3D;&quot;&lt;f0&gt; one|&lt;f1&gt; two&quot;];
struct3 [shape&#x3D;record,label&#x3D;&quot;hello\nworld |&#123; b |&#123;c|&lt;here&gt; d|e&#125;| f&#125;| g | h&quot;];
struct1:f1 -&gt; struct2:f0;
struct1:f2 -&gt; struct3:here;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20211003141407.png" width="45%"/ loading="lazy">

<p>使用这个特点，能够使用 dot 很方便的画出数据结构的图。</p>
<br>

<h1 id="6-子图"><a href="#6-子图" class="headerlink" title="6. 子图"></a>6. 子图</h1><p>通过子图，可以对边和节点进行分组。</p>
<p>如果子图名以 cluster 开头，这个子图会用一个方框框起来。 而且 cluster 会被当成一个新的布局来处理。 你还可以对 cluster 设置某些属性，比如背景色，标签之类的。</p>
<pre class="line-numbers language-none"><code class="language-none">digraph graphname
&#123;
  a -&gt; &#123;b c&#125;;
  c -&gt; b;
  subgraph cluster_bc
  &#123;
    bgcolor&#x3D;red;
    label&#x3D;&quot;cluster&quot;;
    b;
    c;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20211003141428.png" width="20%"/ loading="lazy">

<br>

<h1 id="7-几个示例"><a href="#7-几个示例" class="headerlink" title="7. 几个示例"></a>7. 几个示例</h1><p>通过下面几个示例可以看到，用 dot 绘制标准化的图形，很简单直观。</p>
<p>悄悄的说一句，这些图，是我从官方的《dotguide》里面剽窃来的，嘘。。。</p>
<br>

<h2 id="7-1-函数调用图"><a href="#7-1-函数调用图" class="headerlink" title="7.1. 函数调用图"></a>7.1. 函数调用图</h2><pre class="line-numbers language-none"><code class="language-none">digraph G &#123;
size &#x3D;&quot;4,4&quot;;
main [shape&#x3D;box]; &#x2F;* this is a comment *&#x2F;
main -&gt; parse [weight&#x3D;8];
parse -&gt; execute;
main -&gt; init [style&#x3D;dotted];
main -&gt; cleanup;
execute -&gt; &#123; make_string; printf&#125;
init -&gt; make_string;
edge [color&#x3D;red]; &#x2F;&#x2F; so is this
main -&gt; printf [style&#x3D;bold,label&#x3D;&quot;100 times&quot;];
make_string [label&#x3D;&quot;make a\nstring&quot;];
node [shape&#x3D;box,style&#x3D;filled,color&#x3D;&quot;.7 .3 1.0&quot;];
execute -&gt; compare;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20211003141458.png" width="40%"/ loading="lazy">

<h2 id="7-2-数据结构二叉树"><a href="#7-2-数据结构二叉树" class="headerlink" title="7.2. 数据结构二叉树"></a>7.2. 数据结构二叉树</h2><pre class="line-numbers language-none"><code class="language-none">digraph g &#123;
node [shape &#x3D; record,height&#x3D;.1];
node0[label &#x3D;&quot;&lt;f0&gt; |&lt;f1&gt; G|&lt;f2&gt;&quot;];
node1[label &#x3D;&quot;&lt;f0&gt; |&lt;f1&gt; E|&lt;f2&gt;&quot;];
node2[label &#x3D;&quot;&lt;f0&gt; |&lt;f1&gt; B|&lt;f2&gt;&quot;];
node3[label &#x3D;&quot;&lt;f0&gt; |&lt;f1&gt; F|&lt;f2&gt;&quot;];
node4[label &#x3D;&quot;&lt;f0&gt; |&lt;f1&gt; R|&lt;f2&gt;&quot;];
node5[label &#x3D;&quot;&lt;f0&gt; |&lt;f1&gt; H|&lt;f2&gt;&quot;];
node6[label &#x3D;&quot;&lt;f0&gt; |&lt;f1&gt; Y|&lt;f2&gt;&quot;];
node7[label &#x3D;&quot;&lt;f0&gt; |&lt;f1&gt; A|&lt;f2&gt;&quot;];
node8[label &#x3D;&quot;&lt;f0&gt; |&lt;f1&gt; C|&lt;f2&gt;&quot;];
&quot;node0&quot;:f2 -&gt;&quot;node4&quot;:f1;
&quot;node0&quot;:f0 -&gt;&quot;node1&quot;:f1;
&quot;node1&quot;:f0 -&gt;&quot;node2&quot;:f1;
&quot;node1&quot;:f2 -&gt;&quot;node3&quot;:f1;
&quot;node2&quot;:f2 -&gt;&quot;node8&quot;:f1;
&quot;node2&quot;:f0 -&gt;&quot;node7&quot;:f1;
&quot;node4&quot;:f2 -&gt;&quot;node6&quot;:f1;
&quot;node4&quot;:f0 -&gt;&quot;node5&quot;:f1;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20211003141514.png" width="50%"/ loading="lazy">

<h2 id="7-3-数据结构-hash-表"><a href="#7-3-数据结构-hash-表" class="headerlink" title="7.3. 数据结构 hash 表"></a>7.3. 数据结构 hash 表</h2><pre class="line-numbers language-none"><code class="language-none">digraph G &#123;
  nodesep&#x3D;.05;
  rankdir&#x3D;LR;
  node [shape&#x3D;record,width&#x3D;.1,height&#x3D;.1];

  node0 [label &#x3D; &quot;&lt;f0&gt; |&lt;f1&gt; |&lt;f2&gt; |&lt;f3&gt; |&lt;f4&gt; |&lt;f5&gt; |&lt;f6&gt; | &quot;,height&#x3D;2.5];
  node [width &#x3D; 1.5];
  node1 [label &#x3D; &quot;&#123;&lt;n&gt; n14 | 719 |&lt;p&gt; &#125;&quot;];
  node2 [label &#x3D; &quot;&#123;&lt;n&gt; a1  | 805 |&lt;p&gt; &#125;&quot;];
   node3 [label &#x3D; &quot;&#123;&lt;n&gt; i9  | 718 |&lt;p&gt; &#125;&quot;];
   node4 [label &#x3D; &quot;&#123;&lt;n&gt; e5  | 989 |&lt;p&gt; &#125;&quot;];
   node5 [label &#x3D; &quot;&#123;&lt;n&gt; t20 | 959 |&lt;p&gt; &#125;&quot;] ;
   node6 [label &#x3D; &quot;&#123;&lt;n&gt; o15 | 794 |&lt;p&gt; &#125;&quot;] ;
   node7 [label &#x3D; &quot;&#123;&lt;n&gt; s19 | 659 |&lt;p&gt; &#125;&quot;] ;

   node0:f0 -&gt; node1:n;
   node0:f1 -&gt; node2:n;
   node0:f2 -&gt; node3:n;
   node0:f5 -&gt; node4:n;
   node0:f6 -&gt; node5:n;
   node2:p -&gt; node6:n;
   node4:p -&gt; node7:n;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20211003141640.png" width="50%"/ loading="lazy">

<br>

<h1 id="8-最后及其它资料"><a href="#8-最后及其它资料" class="headerlink" title="8. 最后及其它资料"></a>8. 最后及其它资料</h1><p>可以看到，dot 这种语言语法简单，稍微学习就能编辑简单的脚本来描述复杂的图形。 对于这种方式生成图形，初始用时可能有些不习惯，毕竟使用这种“写代码”的方式来生成图形是很反直觉的。</p>
<p>但是熟悉之后就会发现，使用 dot 在画某些图形，特别是思维导图类时， dot 能帮助我们从烦琐的布局中解脱出来，让我们的思绪和注意力集中在真正的逻辑上。 专心思考一件事情时，任何一个分心点，都有可能让思维大打折扣。</p>
<p>在学习使用 dot 的过程中参考了以下资料，特此感谢：</p>
<ul>
<li><a href="http://www.graphviz.org/pdf/dotguide.pdf">http://www.graphviz.org/pdf/dotguide.pdf</a> （官方的教程）</li>
<li><a href="http://graphviz.org/Gallery.php">http://graphviz.org/Gallery.php</a> （点击图就能看到对应的 dot 代码）</li>
<li><a href="http://www.jianshu.com/p/5b02445eca1d">http://www.jianshu.com/p/5b02445eca1d</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/19900327">https://zhuanlan.zhihu.com/p/19900327</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/21993254">https://zhuanlan.zhihu.com/p/21993254</a></li>
<li><a href="http://liyanrui.is-programmer.com/posts/6261.html">http://liyanrui.is-programmer.com/posts/6261.html</a></li>
</ul>
]]></content>
      <categories>
        <category>学习 - Windows</category>
      </categories>
      <tags>
        <tag>graphviz</tag>
      </tags>
  </entry>
  <entry>
    <title>doxygen介绍和安装和在Linux下使用</title>
    <url>/posts/5350627/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>  <code>Doxygen</code>是一个程序的文档产生工具，可以将程序中的注释转换成说明文档或者说是API参考手册，从而减少程序员整理文档的时间。当然这里程序中的注释需要遵循一定的规则书写，才能让<code>Doxygen</code>识别和转化。</p>
<p>目前<code>Doxygen</code>可处理的程序语言包含<code>C/C++</code>、<code>Java</code>、<code>Objective-C</code>、<code>IDL</code>等，可产生出来的文档格式有<code>HTML</code>、<code>XML</code>、<code>LaTeX</code>、<code>RTF</code>等，此外还可衍生出不少其它格式，如<code>HTML</code>可以打包成<code>CHM</code>格式，而<code>LaTeX</code>可以通过一些工具产生出<code>PS</code>或是<code>PDF</code>文档等。</p>
<p>即: 通过代码里面的注释,生成<code>html</code> 或 <code>chm</code>这一类的手册说明,极其类似于qt帮助文档</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="下载doxygen"><a href="#下载doxygen" class="headerlink" title="下载doxygen:"></a>下载doxygen:</h2><p>官网: <a href="http://www.doxygen.nl/download.html">http://www.doxygen.nl/download.html</a></p>
<p>支持<strong>Windows</strong>&#x2F;<strong>macOS</strong>&#x2F;<strong>Linux</strong>平台(简直就是好人)</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191029213518.png"/ loading="lazy">

<br>

<h2 id="Linux下使用dexygen生成文档"><a href="#Linux下使用dexygen生成文档" class="headerlink" title="Linux下使用dexygen生成文档:"></a>Linux下使用dexygen生成文档:</h2><p>这里在<code>deepin v20( Linux) </code>演示:</p>
<ul>
<li>安装命令<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> doxygen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
截止到我安装的时候, 最新的版本是<strong>1.8.13</strong> (2019-10-29官网Linux版下载)</li>
<li>进入到工程项目文件夹下<code>~/projects/dtkwidget</code>, 使用如下命令生成<code>Doxyfile</code>文件(这是一个配置文件)<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">doxygen <span class="token parameter variable">-g</span>      //生成带详细注释的Doxyfile文件 约2120行
//或
doxygen <span class="token parameter variable">-s</span> <span class="token parameter variable">-g</span>   //生成不带详细注释的Doxyfile文件  约374行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>编辑使用<code>vim</code>编辑如下的<code>Doxyfile</code>文件;  其中这几点必须修改, 不然可能和预期的效果不一样<blockquote>
<p>&#x2F;&#x2F;必须要填写:<br>OUTPUT_DIRECTORY       &#x3D;&#x2F;home&#x2F;yuanyi&#x2F;projects&#x2F;out     &#x2F;&#x2F;输出存放文档的路径<br>RECURSIVE                           &#x3D; YES                          &#x2F;&#x2F;文件递归,包括子文件也要输出为文档<br>IMAGE_PATH                        &#x3D; .&#x2F;doc&#x2F;images      &#x2F;&#x2F;若是想要文档里面插入图片,需要存放图片路径</p>
<p>&#x2F;&#x2F;推荐修改<br>PROJECT_NAME                 &#x3D; “My Project”               &#x2F;&#x2F;生成文档的名称<br>OUTPUT_LANGUAGE        &#x3D; Chinese                          &#x2F;&#x2F;生成文档为中&#x2F;英文  English<br>PROJECT_NUMBER           &#x3D;1.0.0                                &#x2F;&#x2F;项目文档的版本号码</p>
</blockquote>
</li>
<li>生成的<code>Doxyfile</code>文件是必须放在工程项目的根目录下<code>~/[projects/dtkwidget](file:///home/yuanyi/projects/dtkwidget)</code>,默认也是生成在这里的<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">├── dtkwidget
    ├── <span class="token punctuation">..</span>.很多文件及文件夹
    ├── doc
    ├── Doxyfile
    ├── LICENSE
    └── README.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>在项目里面,  添加符合doxygen规则的代码注释,  便于生成文档</li>
<li>运行命令生成文档的<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">doxygen     //默认是等价于下面的doxygen Doxyfile,也可执行自定义Doxyfile文件
//或
doxygen Doxyfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>到输出目录查看生成的<code>html</code>文件夹,使用浏览器打开<code>index.html</code>文件,  其像动态网站一样,  帮助你早日熟悉项目工程的结构</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191029213442.png"/ loading="lazy">

<br>

<h2 id="生成其他格式如chm和注意"><a href="#生成其他格式如chm和注意" class="headerlink" title="生成其他格式如chm和注意:"></a>生成其他格式如chm和注意:</h2><p>这里是可以很多其他格式的, 一些常用的设置,  参考下图:</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191029213604.png"/ loading="lazy">

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果是制作 C 程序文档，该选项必须设为 YES，否则默认生成 C++ 文档格式</span>
OPTIMIZE_OUTPUT_FOR_C  <span class="token operator">=</span> YES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


]]></content>
      <categories>
        <category>学习 - Doxygen</category>
      </categories>
  </entry>
  <entry>
    <title>doxygen添加枚举在生成的文档里面显示</title>
    <url>/posts/53427761/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  类里面有着<strong>枚举</strong>；想要在生成的文件<code>html</code>文件可以直接预览</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>


<p>在类里面有<strong>枚举</strong>数值, 但是需要在生成html里面显示出来; 其中类里面的枚举如下:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">DFloatingMessage</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">DFloatingWidget</span></span>
<span class="token punctuation">&#123;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">enum</span> <span class="token class-name">MessageType</span> <span class="token punctuation">&#123;</span>
        TransientType<span class="token punctuation">,</span>  <span class="token comment">//临时的消息</span>
        ResidentType    <span class="token comment">//常驻的消息</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在对应的项目工程中, 可以写下如下的注释代码:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*!
 *
 * \~chinese \enum DFloatingMessage::MessageType
 * \~chinese DFloatingMessage::MessageType 定义了 DFloatingMessage 通知类型
 * \~chinese \var DFloatingMessage:MessageType DFloatingMessage::TransientType
 * \~chinese 临时的消息
 * \~chinese \var DDFloatingMessage:MessageType DFloatingMessage::ResidentType
 * \~chinese 常驻的消息
 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>生成的效果图如下:</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img2/20191029220402.png"/ loading="lazy">

]]></content>
      <categories>
        <category>学习 - Doxygen</category>
      </categories>
  </entry>
  <entry>
    <title>doxygen生成截图和注释图片在文档里面查看</title>
    <url>/posts/9bb474b0/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  在生成的文件<code>html</code>文件可以直接预览到插入的截图图片可以被查看，且手写的注释文档图片也可以被查看</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="添加注释型图片"><a href="#添加注释型图片" class="headerlink" title="添加注释型图片:"></a>添加注释型图片:</h3><p>添加的代码注释如下:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*!
* \~chinese \class QTest
* \~chinese \brief 在此处描述这个类的详细介绍
*
* \~chinese \htmlonly
* &lt;pre style="font-family: FreeMono, Consolas, Menlo, 'Noto Mono', 'Courier New', Courier, monospace;line-height: 100%;">
* 　　　┏┓　　　┏┓
* 　　┏┛┻━━━┛┻┓
* 　　┃　　　　　　　 ┃
* 　　┃　　　━　　　 ┃
* 　　┃　＞　　　＜┃
* 　　┃　　　　　　　 ┃
* 　　┃ . ⌒　..┃
* 　　┃　　　　　　　 ┃
* 　　┗━┓　　　┏━┛
* 　　　　┃　　　┃　Codes are far away from bugs with the animal protecting
* 　　　　┃　　　┃ 神兽保佑,代码无bug
* 　　　　┃　　　┃
* 　　　　┃　　　┃
* 　　　　┃　　　┃
* 　　　　┃　　　┃
* 　　　　┃　　　┗━━━┓
* 　　　　┃　　　　　　　┣┓
* 　　　　┃　　　　　　　┏┛
* 　　　　┗┓┓┏━┳┓┏┛
* 　　　　　┃┫┫　┃┫┫
* 　　　　　┗┻┛　┗┻┛
* &lt;/pre>
* \endhtmlonly
* \~chinese 这里什么都不想写.... know, 且和你说, 写代码注释很容易犯困
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>效果图片</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img2/20191029215730.png"/ loading="lazy">

<br>

<h3 id="添加真实型图片"><a href="#添加真实型图片" class="headerlink" title="添加真实型图片:"></a>添加真实型图片:</h3><ul>
<li>修改<code>Doxyfile</code>文件, 将存放图片的路径添加到<code>IMAGE_PATH = </code> 后面</li>
</ul>
<p>添加放入图片的路径; 若是存放父路径 “.&#x2F;doc” 也可以;  向下遍历查询到放的图片. 这里的路径是你存放静态图片的路径,  博主为”当前工程项目&#x2F;doc&#x2F;images”这个路径</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">IMAGE_PATH             <span class="token operator">=</span> ./doc/images <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>在工程项目里面,  具体的<code>*.cpp</code> 文件里面, 添加符合(doxygen)规范的注释,  便于生成</li>
</ul>
<p>实际用法:</p>
<blockquote>
<p>cd doc&#x2F;image<br>用法: image htmp 图片.png</p>
</blockquote>
<p>eg:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*!
 * \~chinese \class QTest
 * \~chinese \brief 这是一个演示的类的详细描述
 * \chiinese \image html gril.png
 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>然后执行生成文件即可,  查看预览效果</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img2/20191029215808.png"/ loading="lazy">

]]></content>
      <categories>
        <category>学习 - Doxygen</category>
      </categories>
  </entry>
  <entry>
    <title>gcc和g++的区别，编译.c和.cpp文件的区别</title>
    <url>/posts/61be1e74/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　在<a href="https://blog.csdn.net/qq_33154343/article/details/104639656">上一篇</a>中，最后为了测试 gcc 9.2.0 版本的安装是否成功。对创建的测试文件 main<font color=#D0087E size=4 face="幼圆">.cpp</font> 文件，执行 <code>gcc-9 main.cpp -o mainApp -lstdc++</code> 命令；虽然最后运行成功了；但是是始终是有一点困惑：</p>
<ul>
<li>调用 gcc 和 gcc-9❗️</li>
<li>能否自动执行 gcc 的时候，去掉 <code>-lstdc++</code>，使得看起来清爽起来 ⁉️</li>
</ul>
<p>最后查询一下。发现其中另有一番天地，差点就错过了。 <strong>本章主要讲解 gcc 和 g++的区别，编译.c和.cpp文件的区别</strong> ❓</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 (18G103)</code> 📎 <code>gcc 9.2.0</code></p>
<br>

<h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p>因为博主使用的是 MacOS 系统，也就是 Uinx 系统，和 Linux 还是有一点区别的。</p>
<p>在上面执行 <code>gcc-9 main.cpp -o mainApp -lstdc++</code> 的命令中，-lstdc++ 表示会去链接 STL 库。查询可知，是 gcc 和 g++ 对 .c .cpp 文件的执行严格程度不一样造成的；且还有是否会自动链接 STL 库的区别造成。</p>
<br>

<h3 id="MacOS-下-gcc-和-clang-区别："><a href="#MacOS-下-gcc-和-clang-区别：" class="headerlink" title="MacOS 下 gcc 和 clang 区别："></a>MacOS 下 gcc 和 clang 区别：</h3><p>Mac 在是自带 gcc 命令的（安装 xcode 后）。但这并非说真的有 gcc 编译器群，只是将终端里面的命令 gcc 映射调用 clang 编译器。在昨天我下载了真正的 gcc9.2.0 之后，调用它，就必须的使用 gcc-9 这个命令。</p>
<p><font color=#0000FF size=4 face="幼圆"><strong>为了后面的学习的完整性；后面坚持使用 gcc 9.2.0 在 MacOS 10.14 下进行 Linux 的相关命令学习。偶尔也会将 uos20（Debain 8） 系统作为验证一些命令或者习惯的使用。</strong></font> </p>
<p><font color=#0000FF size=4 face="幼圆"><strong>以后文章中的 gcc 指代的就是终端中调用的 gcc-9；文章中的 g++ 指代的就是终端中调用的 g++-9；</strong></font></p>
<p>也就是坚持在终端里面调用 gcc-9 和 g++-9 ；</p>
<br>

<h3 id="gcc-和-g-的区别："><a href="#gcc-和-g-的区别：" class="headerlink" title="gcc 和 g++的区别："></a>gcc 和 g++的区别：</h3><p>首先看一下两者的区别：</p>
<p>GCC:GNU Compiler Collection(GUN 编译器集合)，它可以编译C、C++、JAV、Fortran、Pascal、Object-C、Ada等语言。</p>
<p>gcc是GCC中的GUN C Compiler（C 编译器）</p>
<p>g++是GCC中的GUN C++ Compiler（C++编译器）</p>
<p>一个有趣的事实就是，就本质而言，gcc和g++并不是编译器，也不是编译器的集合，它们只是一种驱动器，根据参数中要编译的文件的类型，调用对应的GUN编译器而已，比如，用gcc编译一个c文件的话，会有以下几个步骤：</p>
<p>Step1：Call a preprocessor, like cpp.</p>
<p>Step2：Call an actual compiler, like cc or cc1.</p>
<p>Step3：Call an assembler, like as.</p>
<p>Step4：Call a linker, like ld</p>
<p>由于编译器是可以更换的，所以gcc不仅仅可以编译C文件</p>
<p>所以，更准确的说法是：<strong>gcc调用了C compiler，而g++调用了C++ compiler</strong></p>
<p><strong>gcc和g++的主要区别：</strong> </p>
<ol>
<li><p>对于 <em>.c和</em>.cpp文件，gcc分别当做c和cpp文件编译（c和cpp的语法强度是不一样的）</p>
</li>
<li><p>对于 <em>.c和</em>.cpp文件，g++则统一当做cpp文件编译</p>
</li>
<li><p>使用g++编译文件时，<strong>g++会自动链接标准库STL，而gcc不会自动链接STL</strong></p>
</li>
<li><p>gcc在编译C文件时，可使用的预定义宏是比较少的</p>
</li>
<li><p>gcc在编译cpp文件时&#x2F;g++在编译c文件和cpp文件时（这时候gcc和g++调用的都是cpp文件的编译器），会加入一些额外的宏，这些宏如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__GXX_WEAK__</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__cplusplus</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__DEPRECATED</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__GNUG__</span> <span class="token expression"><span class="token number">4</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__EXCEPTIONS</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__private_extern__</span> <span class="token expression"><span class="token keyword">extern</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>在用gcc编译c++文件时，为了能够使用STL，需要加参数 –lstdc++ ，但这并不代表 gcc –lstdc++ 和 g++等价。</p>
</li>
</ol>
<br>

<h3 id="再次实践："><a href="#再次实践：" class="headerlink" title="再次实践："></a>再次实践：</h3><br>

<p>创建 main.c 和 main.cpp 两个文件；里面内容都为</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// insert code here...</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello, World!\n"</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="使用-gcc-编译-c-文件："><a href="#使用-gcc-编译-c-文件：" class="headerlink" title="使用 gcc 编译 .c 文件："></a>使用 gcc 编译 .c 文件：</h4><p>运行 <code>gcc-9 main.c </code> 和 <code>gcc-9 main.c -lstdc++</code> 都编译不过。运行结果：</p>
  <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200303_204442.png" width="50%"/ loading="lazy">

<p><strong>结论：</strong> 即使添加 -lstdc++ 依旧报错，因为 iostream 是属于 c++的内容，*.c 文件使用 gcc 会当做 C语言的严格程度和范围来编译。<font color=#FF0000  size=4 face="幼圆"><strong>c语言</strong> 应该用 stdio.h，<strong>c++</strong> 才用 iostream</font> </p>
<h4 id="使用-gcc-编译-cpp-文件："><a href="#使用-gcc-编译-cpp-文件：" class="headerlink" title="使用 gcc 编译 .cpp 文件："></a>使用 gcc 编译 .cpp 文件：</h4><p>运行 <code>gcc-9 main.cpp</code> 编译失败；运行 <code>gcc-9 main.cpp -lstdc++</code> 编译运行成功。运行结果如下：</p>
  <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200303_205222.png" width="70%" / loading="lazy">

<p><strong>结论：</strong>  gcc 都是 将 cpp 按照 c++ 的严格程度和范围来编译，但是不会自动链接 STL 库。</p>
<h4 id="使用-g-编译-c-文件："><a href="#使用-g-编译-c-文件：" class="headerlink" title="使用 g++ 编译 .c 文件："></a>使用 g++ 编译 .c 文件：</h4><p>运行命令，运行结果：</p>
  <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200303_210956.png" width="50%" / loading="lazy">

<p><strong>结论：</strong> g++ 将 .c 按照 c++ 的严格程度和范围来编译，且会自动链接 STL 库。</p>
<h4 id="使用-g-编译-cpp-文件「推荐」："><a href="#使用-g-编译-cpp-文件「推荐」：" class="headerlink" title="使用 g++ 编译 .cpp 文件「推荐」："></a>使用 g++ 编译 .cpp 文件「推荐」：</h4><p>运行 <code>g++-9 main.cpp</code>，简直太清爽了。运行结果：</p>
  <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200303_210444.png" width="50%" / loading="lazy">

<p><strong>结论:</strong>  g++ 用来编译 .cpp 文件是最为清爽的和合适的。</p>
<br>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>gcc 和 g++ 都是根据 文件的后缀名称 .c .cpp；来判断是否以 C语言 还是 c++ 来编译文件。</p>
<p>且<strong>g++会自动链接标准库STL，而gcc不会自动链接STL</strong> 。</p>
<p>以后更推荐使用 g++。</p>
<br>

<h3 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h3><p><a href="https://github.com/xmuli/linuxExample/tree/master/02_c_cpp">02_c_cpp</a></p>
<br>

<p><strong>参考文章：</strong></p>
<p><a href="https://www.zhihu.com/question/20940822/answer/536826078">https://www.zhihu.com/question/20940822/answer/536826078</a> </p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
        <category>学习 - MacOS</category>
      </categories>
  </entry>
  <entry>
    <title>gcc工作流程：预处理，编译，汇编，链接</title>
    <url>/posts/2fcf9322/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　<font color=#D0087E size=4 face="幼圆"><strong>在 uinx&#x2F;Linux 下，使用 gcc 的工作流程：预处理，编译，汇编，链接。</strong></font> 这里实际测试，举例分析：使用 g++（用 c++）的编译 main.cpp ，最终得到可执行程序的过程分析。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 (18G103)</code> 📎 <code>gcc/g++ 9.2.0</code> </p>
<br>

<h3 id="gcc工作流程："><a href="#gcc工作流程：" class="headerlink" title="gcc工作流程："></a>gcc工作流程：</h3><ul>
<li><p>预处理(<code>gcc -E</code>;  <strong>预处理器cpp</strong>)  :<code>xxx.c --&gt; xxx.i</code>  (.i 文件本质还是.c 文件)</p>
<ul>
<li>宏替换</li>
<li>头文件展开</li>
<li>注释去掉</li>
</ul>
</li>
<li><p>编译（<code>gcc -S</code>; <strong>编译器 gcc</strong>）: <code>xxx.i --&gt; xxx.s</code></p>
<ul>
<li>生成汇编文件</li>
</ul>
</li>
<li><p>汇编（<code>gcc -c</code>； <strong>汇编器as</strong>）: <code>xxx.s  --&gt;  xxx.o</code></p>
<ul>
<li>生成二进制文件</li>
</ul>
</li>
<li><p>链接（<code>gcc</code>； <strong>链接器ld</strong>）</p>
<ul>
<li><code>xxx.o  --&gt;  xxx（可执行）</code></li>
</ul>
</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_image-20200118120643285.png"/ loading="lazy">

<br>

<h3 id="gcc常用参数："><a href="#gcc常用参数：" class="headerlink" title="gcc常用参数："></a>gcc常用参数：</h3><ul>
<li><code>-v/--version：</code> 查看版本</li>
<li><code>-I：</code> 指定包含头文件路径（推荐相对路径）</li>
<li><code>-c： </code> 汇编文件生成二进制文件 </li>
<li><code>-o： </code> 指定生成文件的名字</li>
<li><code>-g：</code> gcc调试时候，添加的参数</li>
<li><code>-D： </code> 编译的时候，生成一个你所指定的宏（场景：多使用在测试程序中）</li>
<li><code>-Wall： </code> gcc 编译时候，添加显示警告⚠️信息</li>
<li><code>-On：</code> 优化代码，n 是优化级别：1，2，3（3 就是最大，填写 100 也是 3）</li>
</ul>
<br>

<h3 id="例子验证："><a href="#例子验证：" class="headerlink" title="例子验证："></a>例子验证：</h3><ul>
<li><p><strong>创建c++源文件：</strong></p>
<p>创建一个 main.cpp 的源文件，内容如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// insert code here...</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello, World!\n"</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<br>

<ul>
<li><p><strong>gcc 预处理：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++-9 <span class="token parameter variable">-E</span> main.cpp <span class="token parameter variable">-o</span> main.i <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> 原始的 .cpp 文件：</p>
</li>
</ul>
<p>​       <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200304_142044.png" width="50%"/ loading="lazy"></p>
<ul>
<li><p><strong>gcc 编译：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++-9 <span class="token parameter variable">-S</span> main.i <span class="token parameter variable">-o</span> main.s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> 头文件展开，宏替换，去掉注释之后的 .cpp 文件。(.i 文件本质还是 .cpp 文件)</p>
</li>
</ul>
<p>​     <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200304_142209.png" width="50%"/ loading="lazy"></p>
<ul>
<li><p><strong>gcc 汇编：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++-9 <span class="token parameter variable">-c</span> main.s <span class="token parameter variable">-o</span> main.o  //-c 是小写，非大写C<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>生成的汇编文件：</p>
   <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200304_142314.png" width="50%"/ loading="lazy">


</li>
<li><p><strong>gcc 链接：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++-9 main.s <span class="token parameter variable">-o</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>生成的二进制文件（打开会看到乱码）：</p>
   <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200304_142338.png" width="50%"/ loading="lazy">


</li>
<li><p><strong>运行可执行程序：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>终端看到输出结果：Hello, World!</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200304_140529.png" width="60%"/ loading="lazy"></li>
</ul>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>gdb调试器的使用，初探全貌</title>
    <url>/posts/9157b0d0/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　在 Mac 下安装和调用 gdb 调试程序。和 gdb 一些常用的使用参数含义。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 </code> 📎 <code>gcc/g++ 9.2.0</code> 📎 <code>gdb8.3</code></p>
<br>

<h3 id="在-Mac-安装-gdb-程序："><a href="#在-Mac-安装-gdb-程序：" class="headerlink" title="在 Mac 安装 gdb 程序："></a>在 Mac 安装 gdb 程序：</h3><p>在 Linux 下面安装gdb 真的 so 容易； 但是在 Mac 上面，尤其是高版本的，安装过程中就会遇到各种坑，亲自把所有的坑都踩了一遍，安装教程如文：</p>
<p><a href="https://blog.csdn.net/qq_33154343/article/details/104784641">在MacOS10.14.6安装最新gdb8.3的详细教程，含可能遇到的所有坑(网上最新教程)</a></p>
<br>

<h4 id="编译程序："><a href="#编译程序：" class="headerlink" title="编译程序："></a>编译程序：</h4><p>沿用前面的项目测试测试代码 <a href="https://github.com/xmuli/linuxExample/tree/master/06_gdb">06_gdb</a>，执行命令 <code>g++-9 *.cpp -o mainApp -g</code> 生成带有调试信息的可执行文件 mainApp。 （对 C &#x2F; C++ 程序的调试，需要在编译前就加上-g选项:）</p>
 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200315_175719.png" width="90%"/ loading="lazy">

<br>

<h4 id="运行调试："><a href="#运行调试：" class="headerlink" title="运行调试："></a>运行调试：</h4><p>运行 <code>sudo gdb mainApp</code> 对可执行程序进行调试。</p>
<br>

<h3 id="gdb-介绍："><a href="#gdb-介绍：" class="headerlink" title="gdb 介绍："></a>gdb 介绍：</h3><p>GDB 是一个由 GNU 开源组织发布的、UNIX &#x2F; LINUX 操作系统下的、<strong>基于命令行的</strong> 、功能强大的程序<strong>调试工具。</strong>  </p>
<br>

<h3 id="gdb交互命令："><a href="#gdb交互命令：" class="headerlink" title="gdb交互命令："></a>gdb交互命令：</h3><p>启动gdb后，进入到交互模式，通过以下命令完成对程序的调试；注意高频使用的命令一般都会有缩写，熟练使用这些缩写命令能提高调试的效率；</p>
<br>

<h4 id="运行："><a href="#运行：" class="headerlink" title="运行："></a>运行：</h4><ul>
<li><code>run</code>：简记为 r ，其作用是运行程序，当遇到断点后，程序会在断点处停止运行，等待用户输入下一步的命令。</li>
<li><code>continue</code> （简写c ）：继续执行，到下一个断点处（或运行结束）</li>
<li><code>next</code>：（简写 n），单步跟踪程序，当遇到函数调用时，也不进入此函数体；此命令同 step 的主要区别是，step 遇到用户自定义的函数，将步进到函数中去运行，而 next 则直接调用函数，不会进入到函数体内。</li>
<li><code>step</code> （简写s）：单步调试如果有函数调用，则进入函数；与命令n不同，n是不进入调用的函数的</li>
<li><code>until</code>：当你厌倦了在一个循环体内单步跟踪时，这个命令可以运行程序直到退出循环体。</li>
<li><code>until + 行号</code>： 运行至某行，不仅仅用来跳出循环</li>
<li><code>finish</code>： 运行程序，直到当前函数完成返回，并打印函数返回时的堆栈地址和返回值及参数值等信息。</li>
<li><code>call 函数(参数)</code>：调用程序中可见的函数，并传递“参数”，如：call gdb_test(55)</li>
<li><code>quit</code>：简记为 q ，退出gdb</li>
</ul>
<br>

<h4 id="设置断点："><a href="#设置断点：" class="headerlink" title="设置断点："></a>设置断点：</h4><ul>
<li><p><code>break n</code> （简写b n）:在第n行处设置断点</p>
<p>（可以带上代码路径和代码名称： b OAGUPDATE.cpp:578）</p>
</li>
<li><p><code>b fn1 if a＞b</code>：条件断点设置</p>
</li>
<li><p><code>break func</code>（break缩写为b）：在函数func()的入口处设置断点，如：break cb_button</p>
</li>
<li><p><code>delete 断点号n</code>：删除第n个断点</p>
</li>
<li><p><code>disable 断点号n</code>：暂停第n个断点</p>
</li>
<li><p><code>enable 断点号n</code>：开启第n个断点</p>
</li>
<li><p><code>clear 行号n</code>：清除第n行的断点</p>
</li>
<li><p><code>info b</code> （info breakpoints） ：显示当前程序的断点设置情况</p>
</li>
<li><p><code>delete breakpoints</code>：清除所有断点：</p>
</li>
</ul>
<br>

<h4 id="查看源代码："><a href="#查看源代码：" class="headerlink" title="查看源代码："></a>查看源代码：</h4><ul>
<li><code>list</code> ：简记为 l ，其作用就是列出程序的源代码，默认每次显示10行。</li>
<li><code>list 行号</code>：将显示当前文件以“行号”为中心的前后10行代码，如：list 12</li>
<li><code>list 函数名</code>：将显示“函数名”所在函数的源代码，如：list main</li>
<li><code>list</code> ：不带参数，将接着上一次 list 命令的，输出下边的内容。</li>
</ul>
<br>

<h4 id="打印表达式："><a href="#打印表达式：" class="headerlink" title="打印表达式："></a>打印表达式：</h4><ul>
<li><code>print</code> 表达式：简记为 p ，其中“表达式”可以是任何当前正在被测试程序的有效表达式，比如当前正在调试C语言的程序，那么“表达式”可以是任何C语言的有效表达式，包括数字，变量甚至是函数调用。</li>
<li><code>print a</code>：将显示整数 a 的值</li>
<li><code>print ++a</code>：将把 a 中的值加1,并显示出来</li>
<li><code>print name</code>：将显示字符串 name 的值</li>
<li><code>print gdb_test(22)</code>：将以整数22作为参数调用 gdb_test() 函数</li>
<li><code>print gdb_test(a)</code>：将以变量 a 作为参数调用 gdb_test() 函数</li>
<li><code>display 表达式</code>：在单步运行时将非常有用，使用display命令设置一个表达式后，它将在每次单步进行指令后，紧接着输出被设置的表达式及值。如： display a</li>
<li><code>watch 表达式</code>：设置一个监视点，一旦被监视的“表达式”的值改变，gdb将强行终止正在被调试的程序。如： watch a</li>
<li><code>whatis</code> ：查询变量或函数</li>
<li><code>info function</code>： 查询函数</li>
<li><code>扩展info locals</code>： 显示当前堆栈页的所有变量</li>
</ul>
<br>

<h4 id="查询运行信息："><a href="#查询运行信息：" class="headerlink" title="查询运行信息："></a>查询运行信息：</h4><ul>
<li><code>where/bt</code> ：当前运行的堆栈列表；</li>
<li><code>bt backtrace</code> 显示当前调用堆栈</li>
<li><code>up/down</code> 改变堆栈显示的深度</li>
<li><code>set args 参数</code>:指定运行时的参数</li>
<li><code>show args</code>：查看设置好的参数</li>
<li><code>info program</code>： 来查看程序的是否在运行，进程号，被暂停的原因。</li>
</ul>
<br>

<h4 id="分割窗口："><a href="#分割窗口：" class="headerlink" title="分割窗口："></a>分割窗口：</h4><ul>
<li><code>layout</code>：用于分割窗口，可以一边查看代码，一边测试：</li>
<li><code>layout src</code>：显示源代码窗口</li>
<li><code>layout asm</code>：显示反汇编窗口</li>
<li><code>layout regs</code>：显示源代码&#x2F;反汇编和CPU寄存器窗口</li>
<li><code>layout split</code>：显示源代码和反汇编窗口</li>
<li><code>Ctrl + L</code>：刷新窗口</li>
</ul>
<br>

<p><strong>注解：</strong></p>
<p>交互模式下直接回车的作用是重复上一指令，对于单步调试非常方便；</p>
<br>

<h3 id="更强大的工具-cgdb："><a href="#更强大的工具-cgdb：" class="headerlink" title="更强大的工具 cgdb："></a>更强大的工具 cgdb：</h3><p><code>cgdb</code> 可以看作 gdb 的界面增强版,用来替代 gdb 的 gdb -tui。cgdb 主要功能是在调试时进行代码的同步显示，这无疑增加了调试的方便性，提高了调试效率。界面类似 vi，符合 unix &#x2F; linux 下开发人员习惯; 如果熟悉 gdb 和 vi，几乎可以立即使用 cgdb。</p>
<br>

<p><strong>转载于：</strong></p>
<p><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/gdb.html">gdb 调试利器</a></p>
<br>

<h3 id="常用自我检测："><a href="#常用自我检测：" class="headerlink" title="常用自我检测："></a>常用自我检测：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//测试回忆 <span class="token number">2020</span>-03-15：
brew和brew cask有什么区别？
g++ <span class="token parameter variable">-g</span>
启动 gdb mainApp
l
show ?size
<span class="token builtin class-name">set</span> ?size <span class="token number">20</span>   设置一次显示多少行代码
b 断点
i b      <span class="token punctuation">(</span>info<span class="token punctuation">)</span>  查看断点信息
d <span class="token number">2</span> <span class="token number">3</span> <span class="token punctuation">(</span>d <span class="token number">4</span>-11<span class="token punctuation">)</span> 删除断点
dis/ena <span class="token number">4</span>  设置/取消 无效断点
b <span class="token number">17</span> <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span> 设置条件断点


ptype b 查看变量类型
p a 查看变量的值（print）
n 执行下一行<span class="token punctuation">(</span>next<span class="token punctuation">)</span>  后面一直按回车


display a 每走一行代码，都显示出变量 a 的值
i display 查看所有的显示变量
undisplay <span class="token number">1</span> 不再显示变量的值（先运行 i display）
c 一次运行多行 <span class="token punctuation">(</span>continue<span class="token punctuation">)</span>
s 进入到函数体 <span class="token punctuation">(</span>step<span class="token punctuation">)</span>


start 停在 <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 的地方

r 停在了第一个断点 <span class="token punctuation">(</span>run<span class="token punctuation">)</span>


<span class="token builtin class-name">set</span> val i <span class="token operator">=</span> <span class="token number">5</span> 设置循环变量的值
<span class="token keyword">until</span> 跳出 <span class="token keyword">for</span> 循环 （此for 里面没有断点）
finsish 跳出函数体内部 （里面也没有断点）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
  </entry>
  <entry>
    <title>getOpenFileName标准对话框和自定义对话框的使用</title>
    <url>/posts/e996031c/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  了解标准对话框和自定义的对话框的使用，书写一个简单地例子；然后写了一个小的<code>Qt</code>例子，用来实现和验证它的空间的一些属性和功能的用法。</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-12_21-54-52_mark.png"/ loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><p><strong>编程环境：</strong>  <code>MacOS 10.14.6 (18G103)</code>     <strong>编程软件：</strong> <code>Qt 5.9.8</code>， <code>Qt Creator 4.8.2</code></p>
<p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>   <strong>编程软件：</strong>  <code>Qt 5.9.8</code>，<code>Qt Creator 4.8.2 (Enterprise)</code></p>
<br>

<h2 id="标准对话框："><a href="#标准对话框：" class="headerlink" title="标准对话框："></a>标准对话框：</h2><p>一个软件的设计，最后包含着很多的很多个窗体之间的交互，而且会有很多自定义的对话框和系统的标准消息对话框等出现，比如说：文件对话框，颜色对话框，字体对话框，消息对话框和确认对话框等等。</p>
<br>

<ul>
<li><input checked="" disabled="" type="checkbox"> <code>QFileDialog</code>  <strong>文件对话框</strong></li>
<li><input checked="" disabled="" type="checkbox"> <code>QColorDialog</code>  <strong>颜色对话框</strong></li>
<li><input checked="" disabled="" type="checkbox"> <code>QFontDialog</code>  <strong>字体对话框</strong></li>
<li><input checked="" disabled="" type="checkbox"> <code>QInputDialog</code>  <strong>输入对话框</strong></li>
<li><input checked="" disabled="" type="checkbox"> <code>QMessageBox</code>  <strong>消息对话框</strong></li>
</ul>
<p>下面展示一下上面这些在<code>windows</code>和<code>macOS</code>上面的样式：</p>
<h3 id="标准消息对话框："><a href="#标准消息对话框：" class="headerlink" title="标准消息对话框："></a>标准消息对话框：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"信息消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"information对话框的内容"</span><span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>Ok<span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>NoButton<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"警告消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"warning对话框的内容"</span><span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>Ok<span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>NoButton<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">critical</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"危机消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"critical对话框的内容"</span><span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>Ok<span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>NoButton<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">about</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"关于消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"abou 作者: 投我以木李，报之以琼玖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">aboutQt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"关于Qt消息对话框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>mac样式：</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-12_21-11-51_mark.png"/ loading="lazy">

<ul>
<li>win样式：</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191013_162030_17_mark.jpg"/ loading="lazy">

<br>

<h3 id="QFileDialog文件对话框："><a href="#QFileDialog文件对话框：" class="headerlink" title="QFileDialog文件对话框："></a>QFileDialog文件对话框：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QString fileNmae <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getOpenFileName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择一个文件"</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> fileter<span class="token punctuation">)</span><span class="token punctuation">;</span>

QString path <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getExistingDirectory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择一个目录【非文件】"</span><span class="token punctuation">,</span> currPath<span class="token punctuation">,</span> QFileDialog<span class="token double-colon punctuation">::</span>ShowDirsOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//最后一个参数，表示只显示路径</span>

QString fileNmae <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getSaveFileName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"保存文件"</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> fileter<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="QColorDialog颜色对话框"><a href="#QColorDialog颜色对话框" class="headerlink" title="QColorDialog颜色对话框:"></a>QColorDialog颜色对话框:</h3><p>颜色对话框如下图所示</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QColor color <span class="token operator">=</span> <span class="token class-name">QColorDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getColor</span><span class="token punctuation">(</span>initColor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择颜色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-12_21-53-18_mark.png"/ loading="lazy">     <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191014_000359_1_mark.jpg"/ loading="lazy"></p>
<br>

<h3 id="QFontDialog字体对话框"><a href="#QFontDialog字体对话框" class="headerlink" title="QFontDialog字体对话框:"></a>QFontDialog字体对话框:</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
QFont font <span class="token operator">=</span> <span class="token class-name">QFontDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getFont</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ok<span class="token punctuation">,</span> initFont<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-12_21-53-29_mark.png"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191212223615.png"/ loading="lazy"></p>
<br>

<h3 id="标准消息输入对话框："><a href="#标准消息输入对话框：" class="headerlink" title="标准消息输入对话框："></a>标准消息输入对话框：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QString text <span class="token operator">=</span> <span class="token class-name">QInputDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"输入文字对话框"</span><span class="token punctuation">,</span> <span class="token string">"请输入一个字符串"</span><span class="token punctuation">,</span> QLineEdit<span class="token double-colon punctuation">::</span>Normal<span class="token punctuation">,</span> <span class="token string">"默认输入的字符串"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>

QStringList list<span class="token punctuation">;</span>
    list<span class="token operator">&lt;&lt;</span><span class="token string">"2019-10-02"</span><span class="token operator">&lt;&lt;</span><span class="token string">"04:28"</span><span class="token operator">&lt;&lt;</span><span class="token string">"在武汉的卧室"</span><span class="token operator">&lt;&lt;</span><span class="token string">"敲代码"</span><span class="token operator">&lt;&lt;</span><span class="token string">"这会没有困意"</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> editable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token comment">//ComboBox是否可编辑</span>
    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    QString text <span class="token operator">=</span> <span class="token class-name">QInputDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"输入item对话框"</span><span class="token punctuation">,</span> <span class="token string">"请选择一个item"</span><span class="token punctuation">,</span> list<span class="token punctuation">,</span> index<span class="token punctuation">,</span> editable<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token class-name">QInputDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"输入整数对话框"</span><span class="token punctuation">,</span> <span class="token string">"请输入一个整数改变字体大小"</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max<span class="token punctuation">,</span> stepVal<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> ret <span class="token operator">=</span> <span class="token class-name">QInputDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"输入浮点数对话框"</span><span class="token punctuation">,</span> <span class="token string">"请输入一个整数改变字体大小"</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max<span class="token punctuation">,</span> val<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191208_225638.gif"/ loading="lazy">



<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191212_214919.gif"/ loading="lazy">

<br>

<h2 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h2><p>其中核心部分的源码，重点和一些难点以及需要注意的一些地方，贴出来如下，</p>
<p>其中  <strong>.h</strong> 文件如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXDIALOG_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXDIALOG_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QDialog></span></span>

<span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span>
<span class="token keyword">class</span> <span class="token class-name">ExDialog</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">ExDialog</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QDialog</span></span>
<span class="token punctuation">&#123;</span>
    Q_OBJECT

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">ExDialog</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">ExDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> slots<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">on_btnOpenFile_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//打开一个文件</span>
    <span class="token keyword">void</span> <span class="token function">on_btnOpenFiles_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//打开多个文件</span>
    <span class="token keyword">void</span> <span class="token function">on_btnExistingDir_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//选择已有目录</span>
    <span class="token keyword">void</span> <span class="token function">on_btnGetColor_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//选择颜色</span>
    <span class="token keyword">void</span> <span class="token function">on_btnGetFont_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//选择字体</span>
    <span class="token keyword">void</span> <span class="token function">on_btnSaveFile_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//保存文件</span>

    <span class="token keyword">void</span> <span class="token function">on_btnQuestion_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">on_btnInformation_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">on_btnWarning_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">on_btnCritical_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">on_btnAbout_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">on_btnAboutQt_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">on_btnGetString_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//输入字符串</span>
    <span class="token keyword">void</span> <span class="token function">on_btnGetItem_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//item选择输入</span>
    <span class="token keyword">void</span> <span class="token function">on_btnInt_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//输入整数</span>
    <span class="token keyword">void</span> <span class="token function">on_btnDouble_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//输入浮点数</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    Ui<span class="token double-colon punctuation">::</span>ExDialog <span class="token operator">*</span>ui<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXDIALOG_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中  <strong>.cpp</strong> 文件如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExDialog.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExDialog.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QFileDialog></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QColorDialog></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QFontDialog></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QInputDialog></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMessageBox></span></span>

<span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">ExDialog</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>
    <span class="token function">QDialog</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token double-colon punctuation">::</span>ExDialog<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"文件、颜色、字体、保存、消息、输入等对话框使用"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">ExDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//标准文件对话框QFileDialog+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnOpenFile_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString path <span class="token operator">=</span> <span class="token class-name">QDir</span><span class="token double-colon punctuation">::</span><span class="token function">currentPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//获取应用程序当前目录</span>
    QString fileter <span class="token operator">=</span> <span class="token string">"文本文件(*.txt);;图片文件(*.jpg *.gif);;所有文件(*.*)"</span><span class="token punctuation">;</span>

    QString fileNmae <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getOpenFileName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择一个文件"</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> fileter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> fileNmae<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>fileNmae<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnOpenFiles_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString path <span class="token operator">=</span> <span class="token class-name">QDir</span><span class="token double-colon punctuation">::</span><span class="token function">currentPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//获取应用程序当前目录</span>
    QString fileter <span class="token operator">=</span> <span class="token string">"文本文件(*.txt);;图片文件(*.jpg *.gif);;所有文件(*.*)"</span><span class="token punctuation">;</span>

    QStringList fileNmaeList <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getOpenFileNames</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择多个文件"</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> fileter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fileNmaeList<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>fileNmaeList<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnExistingDir_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString currPath <span class="token operator">=</span> <span class="token class-name">QCoreApplication</span><span class="token double-colon punctuation">::</span><span class="token function">applicationDirPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取应用程序当前目录</span>
    QString path <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getExistingDirectory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择一个目录【非文件】"</span><span class="token punctuation">,</span> currPath<span class="token punctuation">,</span> QFileDialog<span class="token double-colon punctuation">::</span>ShowDirsOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//最后一个参数，表示只显示路径</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnGetColor_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QPalette pal <span class="token operator">=</span> ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">palette</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//获取条调色板</span>
    QColor initColor <span class="token operator">=</span> pal<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span>QPalette<span class="token double-colon punctuation">::</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QColor color <span class="token operator">=</span> <span class="token class-name">QColorDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getColor</span><span class="token punctuation">(</span>initColor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择颜色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token comment">//因为没有.isEmpty(),故而使用.isValid()来判断</span>
        pal<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>QPalette<span class="token double-colon punctuation">::</span>Text<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">setPalette</span><span class="token punctuation">(</span>pal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnGetFont_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QFont initFont <span class="token operator">=</span> ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    QFont font <span class="token operator">=</span> <span class="token class-name">QFontDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getFont</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ok<span class="token punctuation">,</span> initFont<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnSaveFile_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString path <span class="token operator">=</span> <span class="token class-name">QDir</span><span class="token double-colon punctuation">::</span><span class="token function">currentPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//获取应用程序当前目录</span>
    QString fileter <span class="token operator">=</span> <span class="token string">"头文件(*.h);;源文件(*.cpp);;所有文件(*.*)"</span><span class="token punctuation">;</span>
    QString fileNmae <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getSaveFileName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"保存文件"</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> fileter<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileNmae<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>fileNmae<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//标准消息对话框+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnQuestion_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QMessageBox<span class="token double-colon punctuation">::</span>StandardButton ret <span class="token operator">=</span> <span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">question</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"问题消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"question对话框的内容"</span><span class="token punctuation">,</span>  QMessageBox<span class="token double-colon punctuation">::</span>Yes <span class="token operator">|</span> QMessageBox<span class="token double-colon punctuation">::</span>No <span class="token operator">|</span> QMessageBox<span class="token double-colon punctuation">::</span>Close<span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>NoButton<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> QMessageBox<span class="token double-colon punctuation">::</span>Yes<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"QMessageBox::yes 按钮被选中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">case</span> QMessageBox<span class="token double-colon punctuation">::</span>No<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"QMessageBox::No 按钮被选中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">case</span> QMessageBox<span class="token double-colon punctuation">::</span>Close<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"QMessageBox::Close 按钮被选中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"这是 switch 的default 的选项"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnInformation_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"信息消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"information对话框的内容"</span><span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>Ok<span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>NoButton<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnWarning_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"警告消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"warning对话框的内容"</span><span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>Ok<span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>NoButton<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnCritical_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">critical</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"危机消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"critical对话框的内容"</span><span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>Ok<span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>NoButton<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnAbout_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">about</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"关于消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"abou 作者: 投我以木李，报之以琼玖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnAboutQt_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">aboutQt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"关于Qt消息对话框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//标准输入对话框QInputDialog+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnGetString_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    QString text <span class="token operator">=</span> <span class="token class-name">QInputDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"输入文字对话框"</span><span class="token punctuation">,</span> <span class="token string">"请输入一个字符串"</span><span class="token punctuation">,</span> QLineEdit<span class="token double-colon punctuation">::</span>Normal<span class="token punctuation">,</span> <span class="token string">"默认输入的字符串"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>text<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnGetItem_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QStringList list<span class="token punctuation">;</span>
    list<span class="token operator">&lt;&lt;</span><span class="token string">"2019-10-02"</span><span class="token operator">&lt;&lt;</span><span class="token string">"04:28"</span><span class="token operator">&lt;&lt;</span><span class="token string">"在武汉的卧室"</span><span class="token operator">&lt;&lt;</span><span class="token string">"敲代码"</span><span class="token operator">&lt;&lt;</span><span class="token string">"这会没有困意"</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> editable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token comment">//ComboBox是否可编辑</span>
    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    QString text <span class="token operator">=</span> <span class="token class-name">QInputDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"输入item对话框"</span><span class="token punctuation">,</span> <span class="token string">"请选择一个item"</span><span class="token punctuation">,</span> list<span class="token punctuation">,</span> index<span class="token punctuation">,</span> editable<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>text<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnInt_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> stepVal <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pointSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token class-name">QInputDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"输入整数对话框"</span><span class="token punctuation">,</span> <span class="token string">"请输入一个整数改变字体大小"</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max<span class="token punctuation">,</span> stepVal<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        QFont font <span class="token operator">=</span> ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        font<span class="token punctuation">.</span><span class="token function">setPointSize</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"字体大小已经被设置为:"</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">number</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnDouble_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                 <span class="token comment">//小数点的位数</span>
    <span class="token keyword">double</span> val <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> ret <span class="token operator">=</span> <span class="token class-name">QInputDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"输入浮点数对话框"</span><span class="token punctuation">,</span> <span class="token string">"请输入一个整数改变字体大小"</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max<span class="token punctuation">,</span> val<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"浮点数大小为:"</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">number</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token char">'f'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a>【QtQDialogEx】</p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>Git 提交两次commit到同一分支，被糅合为一次Marge Request的解决方法:cherry-pick</title>
    <url>/posts/868626a3/</url>
    <content><![CDATA[<p><strong>简  述：</strong> <code>git</code> 提交两次<code>commit</code>到同一分支，且也<code>push</code>到同一个远程仓库的分支，会被糅合为一次<strong>Marge Request</strong>的解决方法：使用<code>cherry-pick</code>解决</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="需求背景："><a href="#需求背景：" class="headerlink" title="需求背景："></a>需求背景：</h2><p>我在本地分支master进行编码完成，然后请求合并代码，进行了如下行为：</p>
<blockquote>
<ol>
<li>commit  A1 ， 然后 push1 到 self 仓库；</li>
<li>网页gitLab上请求合并到公共分支origion；</li>
<li>commit  A2 ， 然后 push2 到 self 仓库；</li>
</ol>
</blockquote>
<p>然后我写A3的时候，意识到有如下情况会发生，赶紧新建一个新的分支branch_a3 临时保存一下A3修改</p>
<p>【问题】这个时候， 问题就产生了，origion 的 master 会自动将A1 +A2 的两次修改看做一次 Marge Request ；但是我想要的是，当做两次Marge Request 提交记录 ？现在的各个分支，情况如下图：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191013100800.png"/ loading="lazy">

<br>

<h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>先来看一些远程仓库名称，作为背景：origion 是所有人请求合并的公共远程仓库，self 是自己从origion 进行 fork的个人远程仓库，如图：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191013102554.png"/ loading="lazy">

<br>

<h3 id="可行思路："><a href="#可行思路：" class="headerlink" title="可行思路："></a>可行思路：</h3><blockquote>
<ol>
<li>———-以下为单独抽取A2进行一次提交请求合并———–</li>
<li>先进行回退到 A0 版本： reset A0</li>
<li>新建分支和跳转到 newBranch</li>
<li>使用 cherry-pick A2  ; <strong>只获取A2 的代码改动</strong> 添加到 newBranch 分支的 A0上面</li>
<li>再次推送到self的新的newBranch分支  （到这里已经把A2单独作为新的分支，提交一次改动）</li>
<li>网页进行请求合并</li>
<li>———–以下为A1+A2 恢复为 A1———–</li>
<li>checkout 跳转到 master 分支</li>
<li>先进行回退到 A1 版本：reset A1</li>
<li>再次推送到self的旧的master分支 （origion 的A1 提交也会自动刷新覆盖，只有A1提交）</li>
</ol>
</blockquote>
<br>

<h3 id="命令实现："><a href="#命令实现：" class="headerlink" title="命令实现："></a>命令实现：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">466e5d0  A0
73e40aa  A1
b7a3dc5  A2

<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> 466e5d0
<span class="token function">git</span> checkout  <span class="token parameter variable">-b</span> newBranch
<span class="token function">git</span> cherry-pick 73e40aa
<span class="token function">git</span> push self newBranch <span class="token parameter variable">-f</span>
网页进行请求合并

<span class="token function">git</span> checkout master
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> b7a3dc5
<span class="token function">git</span> push self master <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>学习 - Git</category>
      </categories>
  </entry>
  <entry>
    <title>GitHub加载图片丢失解决方案</title>
    <url>/posts/edb355c4/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　打开网站  <code>GitHub</code>  的时候，经常会遇到加载图片丢失，或者有的图片能够显示，又是不能显示出来；非要开全局代理才能所有头像、图片资源才能够显示出来。附上解决方案：强制指定域名走代理和修改 <code>hosts</code> 文件。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>



<h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p>在 <strong>💻：</strong>  <code>MacOS 10.14.6 </code> 📎 <code>win10 2004版本 x64</code>中，打开 <code>github</code> 或者相关网站的时候，经常图片资源没有加载出来，看到的效果就是用户头像缺失。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200621_045112_1.jpg" width="100%"/ loading="lazy"> 

<br>

<h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p><strong>定位问题：</strong></p>
<ol>
<li><p>在浏览器打开 github 网站，右键“检查（Ctrl + Shift + I）”；</p>
</li>
<li><p>进入 “网络-全部-标头”， 然后刷新此页面，再次加载本网页</p>
</li>
<li><p>查看获取文件失败的的报文的请求链接。发现是 <code>githubusercontent.com</code> 域名， 而非也是 “github.com” 域名</p>
</li>
<li><p>在 代理软件里添加 <code>||githubusercontent.com</code>，其中 || 表示匹配该域名的所有子域名，点击保存</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200621_045642_2.jpg" width="70%"/ loading="lazy">
</li>
<li><p>再次刷新网页，即可看到头像都加载出来了</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200621_045755_3.jpg" width="70%"/ loading="lazy"></li>
</ol>
<br>

<h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>有时候， 经过上面的操作后，大部分图片资源都加载出来了，但是还有少部分的头像没有被加载出来。 这就狠狠狠狠。。。。。</p>
<p><strong>原因：</strong> 本土网络环境emmmm， 估计是大概率被 DNS 给污染了， 这里就需要手动修改 hosts 了</p>
<p><strong>解决：</strong> </p>
<ul>
<li>查询域名对应的真实 IP</li>
<li>将其追加到 hosts文件中；</li>
</ul>
<p>可在<code>https://www.ipaddress.com/</code> 查询 <code>raw.githubusercontent.com </code>的真实<code>IP</code> ；</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200621060056.png" width="50%"/ loading="lazy">

<br>

<p>这里附上已经查询好了的，更新于 2022-01-208 日，[其中 <code>assets-cdn.github.com</code> 有四个，若是第一个失败了，则会解析第二个，依次（但是没有负载均衡的效果）]：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># GitHub Start </span>
<span class="token number">140.82</span>.113.3 github.com
<span class="token number">140.82</span>.113.3 gist.github.com
<span class="token number">185.199</span>.108.153 assets-cdn.github.com
<span class="token number">185.199</span>.109.153 assets-cdn.github.com
<span class="token number">185.199</span>.110.153 assets-cdn.github.com
<span class="token number">185.199</span>.111.153 assets-cdn.github.com
<span class="token number">185.199</span>.108.153 raw.githubusercontent.com
<span class="token number">185.199</span>.109.153 raw.githubusercontent.com
<span class="token number">185.199</span>.110.153 raw.githubusercontent.com
<span class="token number">185.199</span>.111.153 raw.githubusercontent.com
<span class="token number">185.199</span>.108.133 gist.githubusercontent.com
<span class="token number">185.199</span>.109.133 gist.githubusercontent.com
<span class="token number">185.199</span>.110.133 gist.githubusercontent.com
<span class="token number">185.199</span>.111.133 gist.githubusercontent.com
<span class="token number">185.199</span>.108.133 cloud.githubusercontent.com 
<span class="token number">185.199</span>.109.133 cloud.githubusercontent.com 
<span class="token number">185.199</span>.110.133 cloud.githubusercontent.com 
<span class="token number">185.199</span>.111.133 cloud.githubusercontent.com 
<span class="token number">185.199</span>.108.133 camo.githubusercontent.com
<span class="token number">185.199</span>.109.133 camo.githubusercontent.com
<span class="token number">185.199</span>.110.133 camo.githubusercontent.com
<span class="token number">185.199</span>.111.133 camo.githubusercontent.com
<span class="token number">185.199</span>.108.133 avatars0.githubusercontent.com
<span class="token number">185.199</span>.108.133 avatars1.githubusercontent.com
<span class="token number">185.199</span>.108.133 avatars2.githubusercontent.com
<span class="token number">185.199</span>.108.133 avatars3.githubusercontent.com
<span class="token number">185.199</span>.108.133 avatars4.githubusercontent.com
<span class="token number">185.199</span>.108.133 avatars5.githubusercontent.com
<span class="token number">185.199</span>.108.133 avatars6.githubusercontent.com
<span class="token number">185.199</span>.108.133 avatars7.githubusercontent.com
<span class="token number">185.199</span>.108.133 avatars8.githubusercontent.com
<span class="token comment"># GitHub End</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ul>
<li><code>hosts</code> 文件所在目录：<ul>
<li><strong>[win:]</strong>  <code>C:\Windows\System32\drivers\etc\hosts</code></li>
<li><strong>[Mac:]</strong>  <code>/etc/hosts</code></li>
<li><strong>[Linux:]</strong>  <code>/etc/hosts</code></li>
</ul>
</li>
</ul>
<p>OK， 到这里就是大功告成了，再怎么打开github网站，都不会有网页图片资源缺失的情况出现</p>
]]></content>
      <categories>
        <category>学习 - Git</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客插入视频bilibili 和 youtube的mv视频《take me hand 》</title>
    <url>/posts/c0c8973/</url>
    <content><![CDATA[<p>今天突然想到，小千代的，伴随着一首 <em>Take me hand</em> 突然的传入耳朵里面，感觉痒痒的难耐，许久之前就一眼看了忘记不了这个，耳朵里面也一直旋绕着这个旋律，实在是好听，故此写下一篇文章，用以分享和纪念</p>
<iframe frameborder="no" border="0" marginwidth

<p>&#x3D;”0” marginheight&#x3D;”0” width&#x3D;530 height&#x3D;86 src&#x3D;”&#x2F;&#x2F;music.163.com&#x2F;outchain&#x2F;player?type&#x3D;2&amp;id&#x3D;26092806&amp;auto&#x3D;0&amp;height&#x3D;66”&gt;</iframe></p>
<p><strong>bilibili 的mv版本：</strong></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>760<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>427<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//player.bilibili.com/player.html?aid=55654461&amp;cid=97299616&amp;page=1<span class="token punctuation">"</span></span> <span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">framespacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">allowfullscreen</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<iframe width="760" height="427" src="//player.bilibili.com/player.html?aid=55654461&cid=97299616&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<p><strong>youtube的mv版本：</strong></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>760<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>427<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.youtube.com/embed/4AXZbDAml6M<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">allow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture<span class="token punctuation">"</span></span> <span class="token attr-name">allowfullscreen</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<iframe width="760" height="427" src="https://www.youtube.com/embed/4AXZbDAml6M" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe




<p>添加视频代码:(长宽可以自己定义)</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>100</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>100</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>视频地址<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>添加 gif 代码:(长宽可以自己定义)</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>100</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>100</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gif 图片地址<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>学习 - Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>iPhone 13 Pro 更换『移植电芯』和『超容电池』🔋体验</title>
    <url>/posts/420a6665/</url>
    <content><![CDATA[<p><strong>简  述:</strong> 首发买的iPhone 13P （2021.09），随性使用一年出头，容量就暴跌 85%，对比朋友一起买的同款，还是95%。这已经基本得一天两充 &gt;_&lt;，不能忍受。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="考虑换电池"><a href="#考虑换电池" class="headerlink" title="考虑换电池"></a>考虑换电池</h2><ul>
<li>原厂电池 </li>
<li>移植电芯</li>
<li>超容电池</li>
</ul>
<p>“原厂电池” 太昂贵了，不如自己拆替换，多的钱买🥩🍖红烧吃吃。另外和两个方案就是“移植电芯”和“三方超容电池”。手机截止今天（2023.12.06），恰好约两年，这两个方法的电池都替换过。长期使用了一年，感觉可以来说下体验.</p>
<h3 id="Ⅰ-方案一"><a href="#Ⅰ-方案一" class="headerlink" title="Ⅰ 方案一"></a>Ⅰ 方案一</h3><p>开始换了第一块移植电芯的电池（2023.01），此时还市面上还没有超容电池量产。剪断旧电池的开排线版寄给店家，帮电焊后再寄回，自己换。电池费用 120 &#x3D; 电芯 70 + 手工费50，完美。刚替换以后确实超级能用，体验爽歪歪。开始有慢慢上涨回95%，今年11月后来又掉到84%，就又准备一块了。</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312292031006.jpg" width="100%"/ loading="lazy">

<p><strong>优点：</strong> ❶能显示电池容量❷原装苹果排线版，更安全❸理论上充电电流对电芯的最完美❹超便宜价格</p>
<p><strong>缺点：</strong> ❶排线版已有500多次电池循环，无法清零❷苹果的保护机制，充电次数超过500&#x2F;1000次，会有会有10%容量充不了，原生保修的电芯也一样，属无解。❸有替换技巧，电池容量才能慢慢上涨❹动手能力</p>
<br>

<h3 id="Ⅱ-方案二"><a href="#Ⅱ-方案二" class="headerlink" title="Ⅱ 方案二"></a>Ⅱ 方案二</h3><p>这次换了一块超容电芯3480毫安，有蹲到前不久的量产出来了（2023.11）。电池费用220，已经替换上使用20天，还顺便清了灰；拍照给店家得老师傅也说我整的挺干净得🎉；目前使用嘎嘎爽，下班回家还有60-70%⚡。后续使用几个月后，有空再来更新结果</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312292015157.jpg" width="100%"/ loading="lazy">



<p><strong>优点：</strong> ❶大容量100+%的电池，排线版0循环❷价格便宜</p>
<p><strong>缺点：</strong> ❶有弹窗，约15天后永久消失❷无法显示电池容量❸自己动手</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​	两次自己换电池都很满意的，均一把换成功，DIY 的拆开机快乐。</p>
<p>​	电池这就一个消耗品，随心所欲的用，购机至今有十分之二的时间会用到自动关机，再充电，真比较伤电池，但这种时刻不考虑保养，用起来也是爽快🍋🍃。一年换一块，也嘎嘎香。</p>
<h2 id="危险-Note"><a href="#危险-Note" class="headerlink" title="危险 Note"></a>危险 Note</h2><p>先写这么多，一些注意点晚点更新</p>
<p>原厂电池，504次循环容量就到 86%，<del>伤电池的用法已经示范过</del>；拆旧电池排线版，使用绝缘的✂，且电池用光再拆机，若如我这样大力掰弯，<del>心急了。</del>，有大概率见到爆炸🧨，<strong>注意安全；</strong></p>
<p> <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312292015011.png" width="40%"/ loading="lazy">  <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312292015992.jpg" width="58%"/ loading="lazy"></p>
<br>

<h2 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> 欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
]]></content>
      <categories>
        <category>学习 - Windows</category>
        <category>生活 - 闲暇的趣闻</category>
      </categories>
      <tags>
        <tag>工程经验</tag>
        <tag>偶然乐趣</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS执行npm install -g hexo-cli失败的解决方法</title>
    <url>/posts/e8ddf53b/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  按照官网安装<code>hexo</code>的教程命令；执行命令<code>npm install -g hexo-cli</code>时候， <strong>报错</strong>如下的解决方法</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> WARN checkPermissions Missing <span class="token function">write</span> access to /usr/local/lib/node_modules/hexo-cli
<span class="token function">npm</span> WARN checkPermissions Missing <span class="token function">write</span> access to /usr/local/lib/node_modules/hexo-cli/node_modules/chokidar
<span class="token function">npm</span> ERR<span class="token operator">!</span> code EACCES
<span class="token function">npm</span> ERR<span class="token operator">!</span> syscall access
<span class="token function">npm</span> ERR<span class="token operator">!</span> path /usr/local/lib/node_modules/hexo-cli
<span class="token function">npm</span> ERR<span class="token operator">!</span> errno <span class="token parameter variable">-13</span>
<span class="token function">npm</span> ERR<span class="token operator">!</span> Error: EACCES: permission denied, access <span class="token string">'/usr/local/lib/node_modules/hexo-cli'</span>
<span class="token function">npm</span> ERR<span class="token operator">!</span>  <span class="token punctuation">[</span>Error: EACCES: permission denied, access <span class="token string">'/usr/local/lib/node_modules/hexo-cli'</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
<span class="token function">npm</span> ERR<span class="token operator">!</span>   stack: <span class="token string">"Error: EACCES: permission denied, access '/usr/local/lib/node_modules/hexo-cli'"</span>,
<span class="token function">npm</span> ERR<span class="token operator">!</span>   errno: -13,
<span class="token function">npm</span> ERR<span class="token operator">!</span>   code: <span class="token string">'EACCES'</span>,
<span class="token function">npm</span> ERR<span class="token operator">!</span>   syscall: <span class="token string">'access'</span>,
<span class="token function">npm</span> ERR<span class="token operator">!</span>   path: <span class="token string">'/usr/local/lib/node_modules/hexo-cli'</span>
<span class="token function">npm</span> ERR<span class="token operator">!</span> <span class="token punctuation">&#125;</span>
<span class="token function">npm</span> ERR<span class="token operator">!</span> 
<span class="token function">npm</span> ERR<span class="token operator">!</span> The operation was rejected by your operating system.
<span class="token function">npm</span> ERR<span class="token operator">!</span> It is likely you <span class="token keyword">do</span> not have the permissions to access this <span class="token function">file</span> as the current user
<span class="token function">npm</span> ERR<span class="token operator">!</span> 
<span class="token function">npm</span> ERR<span class="token operator">!</span> If you believe this might be a permissions issue, please double-check the
<span class="token function">npm</span> ERR<span class="token operator">!</span> permissions of the <span class="token function">file</span> and its containing directories, or try running
<span class="token function">npm</span> ERR<span class="token operator">!</span> the <span class="token builtin class-name">command</span> again as root/Administrator.

<span class="token function">npm</span> ERR<span class="token operator">!</span> A complete log of this run can be found in:
<span class="token function">npm</span> ERR<span class="token operator">!</span>     /Users/yuanyi/.npm/_logs/2019-10-30T11_43_55_100Z-debug.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="安装背景："><a href="#安装背景：" class="headerlink" title="安装背景："></a>安装背景：</h2><p><code>hexo</code>官网：<a href="https://hexo.io/zh-cn/docs/index.html">https://hexo.io/zh-cn/docs/index.html</a></p>
<p>使用<code>macOS10.14.6</code>安装<code>hexo</code>的时候，采用官方的命令：<code>npm install -g hexo-cli</code>,安装出现，如下错误；</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img2/ss.png"/ loading="lazy">

<br>

<h2 id="报错原因："><a href="#报错原因：" class="headerlink" title="报错原因："></a>报错原因：</h2><h3 id="错误一-通常是这个原因-："><a href="#错误一-通常是这个原因-：" class="headerlink" title="错误一(通常是这个原因)："></a>错误一(通常是这个原因)：</h3><ul>
<li><p>错误原因❎：没有使用管理员权限安装</p>
<p>  注意：<strong>需要注意的点</strong>: 在安装<code>hexo</code>时,不要用 <code>sudo</code> 命令.</p>
<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>  第一步,赋予目录权限:</p>
<p>  第二步，安装<code>hexo</code>：</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chown</span> <span class="token parameter variable">-R</span> <span class="token variable"><span class="token variable">`</span><span class="token function">whoami</span><span class="token variable">`</span></span> /usr/local/lib/node_modules
<span class="token function">npm</span> <span class="token function">install</span> hexo-cli <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br>

<h3 id="错误二："><a href="#错误二：" class="headerlink" title="错误二："></a>错误二：</h3><ul>
<li><p>错误原因❎：由于<code>npm</code>的官方镜像源在国外,而由于国内”众所周知的”的网络原因,访问默认的官方镜像源常常会出问题.我们可以更改为国内的镜像源来加速软件的安装.</p>
<h4 id="解决方法：-1"><a href="#解决方法：-1" class="headerlink" title="解决方法："></a>解决方法：</h4></li>
</ul>
<p>更换<code>npm</code>镜像源，根据众多网友推荐， 推荐使用<strong>taobao</strong>的镜像源：</p>
<p><strong>永久替换<code>npm</code>为<code>taobao</code>的方法:</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>永久替换<code>npm</code>为<code>官方源</code>的方法:</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmjs.org/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>查看设置是的<code>npm</code>源否生效：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config get registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="提醒：使用淘宝源和使用官方源具有可能会请求失败，-这里推荐两种都尝试一下，根据自己的情况而定"><a href="#提醒：使用淘宝源和使用官方源具有可能会请求失败，-这里推荐两种都尝试一下，根据自己的情况而定" class="headerlink" title="提醒：使用淘宝源和使用官方源具有可能会请求失败， 这里推荐两种都尝试一下，根据自己的情况而定"></a>提醒：使用淘宝源和使用官方源具有可能会请求失败， 这里推荐两种都尝试一下，根据自己的情况而定</h4><p>结合上面，附上一张安装成功的图片（因为之前安装过， 所以如下）：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img2/Snipaste_2019-10-30_20-26-41_mark.png"/ loading="lazy">

<br>

<h2 id="错误三："><a href="#错误三：" class="headerlink" title="错误三："></a>错误三：</h2><p>忘记是哪里看到的一篇文章，结合我自己的上一篇关于hexo安装的教程经验， 也的确示发现有可能是权限不足够，在macOS系统下， 运行需要添加sudo命令:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> hexo-cli <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此处解决方案三为以上两种方法均失败下， 可以一试； 原理还有很多不懂，望各网友见笑， 此处此文到此，权当一处记录，但倘若能够给你启发， 帮助到你， 我也是很高兴的。 朝闻道，夕可死！ 且学海无涯， 愿所见所闻有所记录，不曾叹叹息在此间走一遭；数风流人物， 不过百载，时间逝，仍然记几许？野草于群星，各自精彩，愿今后皆可以望</p>
<br>

<p>下面这一篇文章， 真的写的很棒，也很是清晰，相比网上的其他一大都是一抄十，十传百，百传遍全网；但是都是不符合，或者无法解决实际， 且没有说原因， 直接几个命令，令我痛惜， 下面放一篇比较精雕细琢的文章，花了心思写的，在此参考，表示感谢</p>
<p>参考文章：<a href="https://www.itfanr.cc/2017/10/27/problems-for-configuring-hexo-blog-in-mac/">Mac系统下配置Hexo博客运行环境遇到的问题</a> </p>
]]></content>
      <categories>
        <category>学习 - MacOS</category>
        <category>学习 - Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>iPhone 13P 换超容电池，一年实记的&quot;电池循环次数-容量&quot;柱状图</title>
    <url>/posts/c5b909e4/</url>
    <content><![CDATA[<p><strong>简  述:</strong> 继上一篇 <a href="https://xmuli.tech/posts/420a6665/">iPhone 13P 更换”移植电芯”和”超容电池”🔋体验</a>，详细记录了如何更换这两种电池，以及各自的优略势对比。</p>
<p>一晃一年过去，时间真快，这次分享下记录了使用超容电池的 “循环次数 - 容量(mAh)- 电池寿命%” 之间的趋势图；手持 iPhone 13 Pro ，IOS 版本 15.6 。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<ul>
<li>图一为底部附带详细表格，方便对照，电池每循环多少次，其对应的电池实际剩余容量，以及对应的百分比</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202411202042129.png" alt="在这里插入图片描述" loading="lazy"></p>
<ul>
<li>图二充电次数作为 X 轴，可以明显看到电池容量随着时间的流失的降低趋势</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202411202101230.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>途中可看到，电池循环充电 226 次，都还是很坚挺的，基本 3000mAh 左右；再之后 就开始迅速掉电，但也不太离谱；使用接近一年共 350 次，电池容量还有 78%；实测质量很可靠了。</p>
<p>准备再购买一块时，发现有店家不仅价格降低了，且还承诺的一年质保，若一年内电池容量低于 80%，则可以换一块新的电池，当时作为第一批用户，至今本月实测使用 11 个月，用爱思助手和沙漏，都到了 79%（个人重度使用），符合要求，老板亦信守自己的承诺，发来了新电池，好评，遥祝大卖。</p>
<p>[ PS, 对于 Phone 13 Pro 电池使用三年的持续记录而言：]</p>
<ul>
<li>[a] 苹果原装电池：3095mAh （ 2021.09-2022.12 ），费用：0</li>
<li>[b] 移植电芯+原装排线版：包装显示 3150mAh （ 2023.01-2023.11 ），费用 120 &#x3D; 70 电芯 + 50 移植手工费</li>
<li>[c] 第一块超容电芯，包装显示 3480mAh （ 2023.11-2024.11 ），费用 228</li>
<li>[d] 第二块超容电芯，包装显示 3490mAh （ 2024.11-使用中），费用 0</li>
</ul>
<p><strong>耐用程度：</strong> a &gt; c &gt; b</p>
<p><strong>价格程度：</strong> a &gt; c &gt; b</p>
<p>至今三载，时常看坛哥们，讨论换电池的费用与质量的平衡，电池容量，各种讨论，已此实测数据共享诸君。</p>
]]></content>
      <categories>
        <category>学习 - Windows</category>
        <category>生活 - 闲暇的趣闻</category>
      </categories>
      <tags>
        <tag>工程经验</tag>
        <tag>偶然乐趣</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt之proxy()代理探究</title>
    <url>/posts/ff318565/</url>
    <content><![CDATA[<p><strong>简介：</strong>  Qt 的  <code>proxy()</code> 代理函数探究</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="查看源码："><a href="#查看源码：" class="headerlink" title="查看源码："></a>查看源码：</h2><p><strong>qt</strong>中源码查阅可看到：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*!
    \since 4.6

    \fn const QStyle *QStyle::proxy() const

    This function returns the current proxy for this style.
    By default most styles will return themselves. However
    when a proxy style is in use, it will allow the style to
    call back into its proxy.
*/</span>
<span class="token keyword">const</span> QStyle <span class="token operator">*</span> <span class="token class-name">QStyle</span><span class="token double-colon punctuation">::</span><span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">Q_D</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> d<span class="token operator">-></span>proxyStyle<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="问题起因："><a href="#问题起因：" class="headerlink" title="问题起因："></a>问题起因：</h2><p>在封装函数的时候，<br><code>int radius = proxy()-&gt;pixelMetric(PM_FrameRadius, opt, w);</code>    &#x2F;&#x2F;为什么这里使用<code>proxy()-&gt;</code>会显示报错，没有匹配到的相应的函数<br><code>//    int radius = DStyle::pixelMetric(PM_FrameRadius, opt, w);</code>　　　　　&#x2F;&#x2F;而下面的可以通过</p>
<br>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>检索 Qt 帮助手册：<code>pixelMetric</code>；发现一共有如下<font color=#D0087E size=4 face="幼圆"><strong>QStyle–&gt;QCommonStyle–&gt;QProxyStyle (只有这三个，依次为重写上一个)</strong></font></p>
<blockquote>
<p>int       QStyle::pixelMetric(QStyle::PixelMetric metric, const QStyleOption *option &#x3D; nullptr, const QWidget *widget &#x3D; nullptr) const</p>
<p>int QCommonStyle::pixelMetric(QStyle::PixelMetric m,      const QStyleOption *opt &#x3D; nullptr,    const QWidget *widget &#x3D; nullptr) const</p>
<p>int  QProxyStyle::pixelMetric(QStyle::PixelMetric metric, const QStyleOption *option &#x3D; nullptr, const QWidget *widget &#x3D; nullptr) const</p>
<p>int       DStyle::pixelMetric(QStyle::PixelMetric m,      const QStyleOption *opt &#x3D; nullptr,    const QWidget *widget &#x3D; nullptr) const override;</p>
</blockquote>
<br>

<h2 id="解惑"><a href="#解惑" class="headerlink" title="解惑"></a>解惑</h2><p>然而，上面的分析实际上，并没有什么卵用，用下面一句话解决：</p>
<p><code>proxy()</code>实际上就是返回它自己，相当于当前类的<code>this</code>指针；通过自己实际工程中的验证，也的确是这样这理解</p>
<p><strong>其源码英文的注释翻译如下：</strong></p>
<blockquote>
<p>此函数返回此样式的当前代理。 默认情况下，大多数样式都会返回。 然而当使用代理样式时，它将允许样式回调它的代理．</p>
</blockquote>
]]></content>
      <categories>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>Qt绘画扇形drawPie()和反三角函数qAcos()</title>
    <url>/posts/32d0bfe0/</url>
    <content><![CDATA[<p><strong>简介：</strong>  <strong>qt</strong>绘画扇形<code>drawPie()</code>，绘画出弧线； 和由三角形的长度计算出角度，利用反三角函数<code>qAcos()</code></p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="问题背景："><a href="#问题背景：" class="headerlink" title="问题背景："></a>问题背景：</h2><p>在绘画进度条控件中，进度滑块当处于一开始和快完成，有弧度部分的时候,想要看的过程比较自然，就要自己手动填充这一部分”梯形(腰是两个段圆弧)”;而一开始想到的居然是：直接求直线于弧线(圆角矩形的弧线部分)的交点的函数，我觉得应该是没有的。</p>
<br>

<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法:"></a>解决方法:</h2><p>将**”腰是圆弧梯形”**拆分为一个两个圆弧和一个(标准)等腰梯形来进行拆分，从而进行填。</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190929233536.png"/ loading="lazy">
其中需要计算角度

<br>

<h2 id="绘画扇形drawPie-："><a href="#绘画扇形drawPie-：" class="headerlink" title="绘画扇形drawPie()："></a>绘画扇形drawPie()：</h2><blockquote>
<p>void QPainter::drawPie(const QRect &amp;, int a, int alen)<br>参数1: 圆弧的圆心所处于矩形<br>参数2: 圆弧的开始始的角度°(单位1&#x2F;16度)<br>参数3: 圆弧的转动的角度°(单位1&#x2F;16度)</p>
</blockquote>
<p><strong>实际使用</strong>，注意其单位是<strong>1&#x2F;16角度</strong>，而不是<strong>弧度</strong>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">p<span class="token operator">-></span><span class="token function">drawPie</span><span class="token punctuation">(</span>topPointRect<span class="token punctuation">,</span><span class="token number">41</span> <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">90</span> <span class="token operator">-</span> <span class="token number">41</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>

<h2 id="反三角计算角度qAcos-："><a href="#反三角计算角度qAcos-：" class="headerlink" title="反三角计算角度qAcos()："></a>反三角计算角度qAcos()：</h2><p>由三角形的边计算角度；需要包含头文件</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QtMath></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>另外一个计算角度的函数</p>
<blockquote>
<p>qreal qAcos(qreal v)<br>Returns the arccosine of v as an angle in radians. Arccosine is the inverse operation of cosine.<br>参数: 直角边&#x2F;斜边  (注意用double)<br>返回结果: 是<strong>弧度</strong>为单位</p>
</blockquote>
<p>使用:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">qreal raw <span class="token operator">=</span> <span class="token function">qAcos</span><span class="token punctuation">(</span><span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//=41.4096弧度</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>

<h2 id="弧度和角度转换公式"><a href="#弧度和角度转换公式" class="headerlink" title="弧度和角度转换公式:"></a>弧度和角度转换公式:</h2><blockquote>
<p>弧度 &#x3D; 角度  *  π  &#x2F; 180   </p>
</blockquote>
<p>π所对应的宏为:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//M_PI	The ratio of a circle's circumference to diameter, π</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>绘画上图的黑色圆弧代码:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">qreal raw <span class="token operator">=</span> <span class="token function">qAcos</span><span class="token punctuation">(</span><span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> startRadius <span class="token operator">=</span> raw <span class="token operator">*</span> <span class="token number">180</span> <span class="token operator">/</span> M_PI<span class="token punctuation">;</span>
p<span class="token operator">-></span><span class="token function">drawPie</span><span class="token punctuation">(</span>topPointRect<span class="token punctuation">,</span>startRadius <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">90</span> <span class="token operator">-</span> startRadius<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="最后的效果："><a href="#最后的效果：" class="headerlink" title="最后的效果："></a>最后的效果：</h2><p>如图：然后同理，只需要将左侧的两个角都这样计算，然后同样填充蓝色，即可以做到圆角处的完美（当进度增加时候，加载想的自然）</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190929233601.png"/ loading="lazy">]]></content>
      <categories>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>Qt网络编程之使用cookie和ssl</title>
    <url>/posts/ce5301c5/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　最近使用网络，对于请求头和协议头，有一处挠头了下，看到这一篇有些触发后面实现了，觉得写得还挺好的，且后面可能正好要改进使用 <code>Cookies</code> 和 <code>ssl</code> ，先摆着在这里；</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="所使用的Qt版本：5-14-0"><a href="#所使用的Qt版本：5-14-0" class="headerlink" title="所使用的Qt版本：5.14.0"></a>所使用的Qt版本：5.14.0</h3><p>本例子基于这篇博客中的例子：《<a href="https://www.cnblogs.com/BlogPuppet/p/12804271.html">Qt使用HTTPS协议访问网站</a>》</p>
<br>

<h3 id="接收Cookies："><a href="#接收Cookies：" class="headerlink" title="接收Cookies："></a>接收Cookies：</h3><p>Cookie由返回的QNetworkReply获取，Qt已经做得很好了，我们只需要调用相关函数即可，像其他响应消息的头也可以由类似的方式获取。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QCoreApplication></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"TestNet.h"</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QCoreApplication <span class="token function">a</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>

    TestNet One<span class="token punctuation">;</span>
    One<span class="token punctuation">.</span><span class="token function">GetWeb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//main.cpp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QtNetwork></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QFile></span></span>

<span class="token keyword">class</span> <span class="token class-name">TestNet</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QObject</span></span>
<span class="token punctuation">&#123;</span>
    Q_OBJECT
<span class="token keyword">public</span><span class="token operator">:</span>
    QNetworkAccessManager <span class="token operator">*</span>m_manager <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    QNetworkRequest <span class="token operator">*</span>m_request <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token comment">//访问网站</span>
    <span class="token keyword">void</span> <span class="token function">GetWeb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//建立新对象</span>
        m_manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QNetworkAccessManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QNetworkRequest</span><span class="token punctuation">(</span><span class="token function">QUrl</span><span class="token punctuation">(</span><span class="token string">"https://gitee.com/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//设置SSL连接</span>
        QSslConfiguration config<span class="token punctuation">;</span>
        QSslConfiguration conf <span class="token operator">=</span> m_request<span class="token operator">-></span><span class="token function">sslConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        conf<span class="token punctuation">.</span><span class="token function">setPeerVerifyMode</span><span class="token punctuation">(</span>QSslSocket<span class="token double-colon punctuation">::</span>VerifyNone<span class="token punctuation">)</span><span class="token punctuation">;</span>
        conf<span class="token punctuation">.</span><span class="token function">setProtocol</span><span class="token punctuation">(</span>QSsl<span class="token double-colon punctuation">::</span>TlsV1SslV3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_request<span class="token operator">-></span><span class="token function">setSslConfiguration</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//连接槽</span>
        <span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">connect</span><span class="token punctuation">(</span>m_manager<span class="token punctuation">,</span><span class="token operator">&amp;</span>QNetworkAccessManager<span class="token double-colon punctuation">::</span>finished<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>TestNet<span class="token double-colon punctuation">::</span>GetWebFinished<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//发送Get请求</span>
        m_manager<span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">*</span>m_request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//访问后做的操作</span>
    <span class="token keyword">void</span> <span class="token function">GetWebFinished</span><span class="token punctuation">(</span>QNetworkReply <span class="token operator">*</span>reply<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//转换为utf-8编码，这样就可以显示中文了</span>
        QTextCodec <span class="token operator">*</span>codec <span class="token operator">=</span> <span class="token class-name">QTextCodec</span><span class="token double-colon punctuation">::</span><span class="token function">codecForName</span><span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QString getData <span class="token operator">=</span> codec<span class="token operator">-></span><span class="token function">toUnicode</span><span class="token punctuation">(</span>reply<span class="token operator">-></span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//获取Cookies</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>reply<span class="token operator">-></span><span class="token function">hasRawHeader</span><span class="token punctuation">(</span><span class="token string">"Set-Cookie"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            QByteArray cookie <span class="token operator">=</span> reply<span class="token operator">-></span><span class="token function">rawHeader</span><span class="token punctuation">(</span><span class="token string">"Set-Cookie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span>cookie<span class="token punctuation">.</span><span class="token function">toStdString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//TestNet.h</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

 <br>

<h3 id="发送Cookies"><a href="#发送Cookies" class="headerlink" title="发送Cookies:"></a>发送Cookies:</h3><p>首先我们先看一下用Fiddler抓包软件截取的Http请求包。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">POST https<span class="token operator">:</span><span class="token comment">//gitee.com/check_user_login HTTP/1.1</span>
Host<span class="token operator">:</span> gitee<span class="token punctuation">.</span>com
User<span class="token operator">-</span>Agent<span class="token operator">:</span> Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">;</span> rv<span class="token operator">:</span><span class="token number">75.0</span><span class="token punctuation">)</span> Gecko<span class="token operator">/</span><span class="token number">20100101</span> Firefox<span class="token operator">/</span><span class="token number">75.0</span>
Accept<span class="token operator">:</span> <span class="token operator">*</span><span class="token comment">/*
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Accept-Encoding: gzip, deflate, br
Referer: https://gitee.com/login
X-CSRF-Token: GbYJaqAJEXGRYoNtYXUlzdw06JNrqC1FGO7wJO8L+J8=
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
X-Requested-With: XMLHttpRequest
Content-Length: 22
Origin: https://gitee.com
Connection: keep-alive
Cookie: user_locale=zh-CN; oschina_new_user=false; Hm_lvt_24f17767262929947cc3631f99bfd274=1587994350,1587994363,1587994651,1587995075; remote_way=http; gitee-session-n=cVdXY3BBSG91a2JSWXRsR0gybVNZTXB6UUZoZU11dzdnNERRVjJNUmRSUzQ0NzZ5YkFHNjM5cG1Lbk82RHYrclVaQzRURjZIbFRsSGkybm1FQmdVR1M2dFJPZmhFdXNCK0JrRk9DVEVBQXdnVXF2V2tuYWw3aXRURUlEWkV6aXc0VUlwRGtJb1dCd0g2NFVxeW1IMC9MSHU2dnJHck1kY213ZEdDcWFFOU1OZTZtTWdKN1VkYVNTdGxVaUpIMUtpLS02K0Z1VzBFOHQyQ1FXWXpSYlhSZEVBPT0%3D--631c43af162f79e53290d6e86ac1ada72f92ffed; tz=Asia%2FShanghai; Hm_lpvt_24f17767262929947cc3631f99bfd274=1587995076</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p>这是我在登陆Gitee网站时浏览器发出的POST请求头，那么请问，这个请求头中有多少个cookie？</p>
<h3 id="答案是：有7个（有多少个等号就有多少个cookie，每个cookie用-分隔开来）"><a href="#答案是：有7个（有多少个等号就有多少个cookie，每个cookie用-分隔开来）" class="headerlink" title="答案是：有7个（有多少个等号就有多少个cookie，每个cookie用 ; 分隔开来）"></a>答案是：有7个（有多少个等号就有多少个cookie，每个cookie用 ; 分隔开来）</h3><p>至少按照Qt的方式是这样理解的（狗头）</p>
<p>所以，我们一般叫这玩意作：<strong>cookies</strong></p>
<p>而每一个cookie有两个基本属性，等号之前的属性名称为“name”，等号后面的属性为“value”；</p>
 <br>

<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QCoreApplication></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"TestNet.h"</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QCoreApplication <span class="token function">a</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>

    TestNet One<span class="token punctuation">;</span>
    One<span class="token punctuation">.</span><span class="token function">GetWeb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//main.cpp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QtNetwork></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QFile></span></span>

<span class="token keyword">class</span> <span class="token class-name">TestNet</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QObject</span></span>
<span class="token punctuation">&#123;</span>
    Q_OBJECT
<span class="token keyword">public</span><span class="token operator">:</span>
    QNetworkAccessManager <span class="token operator">*</span>m_manager <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    QNetworkRequest <span class="token operator">*</span>m_request <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    QList<span class="token operator">&lt;</span>QNetworkCookie<span class="token operator">></span> Web_cookies<span class="token punctuation">;</span>  <span class="token comment">//这么做的意图很明显了吧，QNetworkCookie是每一个cookie，QList是cookies</span>

    <span class="token comment">//访问网站</span>
    <span class="token keyword">void</span> <span class="token function">GetWeb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//建立新对象</span>
        m_manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QNetworkAccessManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QNetworkRequest</span><span class="token punctuation">(</span><span class="token function">QUrl</span><span class="token punctuation">(</span><span class="token string">"https://gitee.com/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//设置SSL连接</span>
        QSslConfiguration config<span class="token punctuation">;</span>
        QSslConfiguration conf <span class="token operator">=</span> m_request<span class="token operator">-></span><span class="token function">sslConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        conf<span class="token punctuation">.</span><span class="token function">setPeerVerifyMode</span><span class="token punctuation">(</span>QSslSocket<span class="token double-colon punctuation">::</span>VerifyNone<span class="token punctuation">)</span><span class="token punctuation">;</span>
        conf<span class="token punctuation">.</span><span class="token function">setProtocol</span><span class="token punctuation">(</span>QSsl<span class="token double-colon punctuation">::</span>TlsV1SslV3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_request<span class="token operator">-></span><span class="token function">setSslConfiguration</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//设置cookies</span>
        Web_cookies<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">QNetworkCookie</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">,</span><span class="token string">"Value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Web_cookies<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">QNetworkCookie</span><span class="token punctuation">(</span><span class="token string">"Test"</span><span class="token punctuation">,</span><span class="token string">"Net"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//向请求头里加入cookies</span>
        QVariant var<span class="token punctuation">;</span>
        var<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>Web_cookies<span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_request<span class="token operator">-></span><span class="token function">setHeader</span><span class="token punctuation">(</span>QNetworkRequest<span class="token double-colon punctuation">::</span>CookieHeader<span class="token punctuation">,</span>var<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//连接槽</span>
        <span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">connect</span><span class="token punctuation">(</span>m_manager<span class="token punctuation">,</span><span class="token operator">&amp;</span>QNetworkAccessManager<span class="token double-colon punctuation">::</span>finished<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>TestNet<span class="token double-colon punctuation">::</span>GetWebFinished<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//发送Get请求</span>
        m_manager<span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">*</span>m_request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//访问后做的操作</span>
    <span class="token keyword">void</span> <span class="token function">GetWebFinished</span><span class="token punctuation">(</span>QNetworkReply <span class="token operator">*</span>reply<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//NULL</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//TestNet.h</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p>然后呢，发送的Http请求头如下：</p>
<br>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">GET https<span class="token operator">:</span><span class="token comment">//gitee.com/ HTTP/1.1</span>
Host<span class="token operator">:</span> gitee<span class="token punctuation">.</span>com
Cookie<span class="token operator">:</span> Name<span class="token operator">=</span>Value<span class="token punctuation">;</span> Test<span class="token operator">=</span>Net
Connection<span class="token operator">:</span> Keep<span class="token operator">-</span>Alive
Accept<span class="token operator">-</span>Encoding<span class="token operator">:</span> gzip<span class="token punctuation">,</span> deflate
Accept<span class="token operator">-</span>Language<span class="token operator">:</span> zh<span class="token operator">-</span>CN<span class="token punctuation">,</span>en<span class="token punctuation">,</span><span class="token operator">*</span>
User<span class="token operator">-</span>Agent<span class="token operator">:</span> Mozilla<span class="token operator">/</span><span class="token number">5.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p><strong>有什么问题就不要留言了，不是我无情，而是我是“全宿制”学生党，我也很无奈。</strong></p>
<br>

<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p>转载原文：<a href="https://www.cnblogs.com/BlogPuppet/p/12805597.html">Qt网络编程之使用cookie</a> </p>
]]></content>
      <categories>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>Win10的20H2使用VS2019，拖曳窗口会崩溃</title>
    <url>/posts/f6612e2a/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　发现 Win10 的 20H2 的一个 BUG，使用 VS 2013、2015、2017 、2019 的窗口拖曳拆分、合并都会崩溃。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p>重装系统 win10，使用最新 20H2 + VS 2019，结果发现拖曳 VS 窗口进行合并或拆分时候，放完成松手完成时候， VS 都会崩溃重启，甚是不爽。详细版本如下：</p>
<blockquote>
<p>&#x2F;&#x2F; Win10 版本</p>
<p>版本	Windows 10 专业版		版本号	20H2<br>安装日期	‎2021&#x2F;‎4&#x2F;‎16		操作系统内部版本	19042.804<br>体验	Windows Feature Experience Pack 120.2212.551.0</p>
<p>&#x2F;&#x2F; VS 版本</p>
<p>Visual Studio Professional 2019  版本 16.4.12</p>
</blockquote>
<br>

<h3 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h3><p><strong>我的电脑 Win10 无法更新系统，VS 2019 虽然可联网更新，但是升级之后，可能项目会编译不过（进退两难）。</strong></p>
<blockquote>
<p>无法连接到更新服务。我们将稍后再试，你也可以立即进行检查。如果问题仍然存在，请确保你已连接到 Internet。</p>
</blockquote>
<p>​		很蛋疼的一点是，某种原因，网管把所有电脑把 win10 自动更新的域名断了（一开始还以为是此版本的 BUG，尝试多种方案均链接网络失败）。后灵光一闪，猜是网管掐了。气死了，气死了，气死了，不过电脑不更新了，好像也挺爽。</p>
<br>

<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h4 id="将就解决方案"><a href="#将就解决方案" class="headerlink" title="将就解决方案"></a>将就解决方案</h4><p>又不是不能用，不拖曳窗口就行，不会弄那就这样将就用</p>
<br>

<h4 id="临时解决方案"><a href="#临时解决方案" class="headerlink" title="临时解决方案"></a>临时解决方案</h4><p>虽然拖曳窗口会崩溃，但可以鼠标右键 “新建垂直文档组”。也达到目的，不过不够优雅</p>
<br>

<h4 id="优雅的解决方案"><a href="#优雅的解决方案" class="headerlink" title="优雅的解决方案"></a>优雅的解决方案</h4><p>编辑 <code>%InstallRoot%\Common7\IDE\devenv.exe.config</code>  和 <code>%LocalAppData%\Microsoft\VisualStudio\16.0_xxx\devenv.exe.config</code> ，并在AppContextSwitchOverrides 元素的 value 属性的结尾上添加以下代码。（找不到就用 Everything 搜索，修改hi前记得先备份原文件）。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">;</span><span class="token assign-left variable">Switch.System.Windows.Interop.MouseInput.OptOutOfMoveToChromedWindowFix</span><span class="token operator">=</span>true<span class="token punctuation">;</span><span class="token assign-left variable">Switch.System.Windows.Interop.MouseInput.DoNotOptOutOfMoveToChromedWindowFix</span><span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>重启 VS 2019，拖曳窗口合并拆分，完美且不会崩溃。 </p>
<br>

<h4 id="其他解决方案"><a href="#其他解决方案" class="headerlink" title="其他解决方案"></a>其他解决方案</h4><ul>
<li>对于 VS 2013、2015，只需要升级 win10 补丁即可，重启正常。</li>
<li>对于 2019 、只需升级 VS 到最新版本即可（<a href="https://developercommunity2.visualstudio.com/t/Unexpected-VS-crash-when-docking-or-spli/1323017">Microsoft  已修复</a>）。</li>
<li>对于 VS 2017，可以试试先升级系统，后升级 VS 。</li>
</ul>
<br>

<h2 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> </p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
]]></content>
      <categories>
        <category>学习 - Windows</category>
      </categories>
      <tags>
        <tag>Visual Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>在Win10环境下安装QtCreator5.9.8作为c++的IDE开发工具</title>
    <url>/posts/e2b9bdb5/</url>
    <content><![CDATA[<p><strong>简  述：</strong> 在 <code>windows10</code>环境下安装<code>Qt Creator5.9.8</code>作为<code>c++</code>的 <strong>IDE</strong>开发工具，学习和使用 <strong>qt框架学习</strong></p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1903</code>   <strong>编程软件：</strong>  <code>Qt 5.9.8</code>，<code>Qt Creator 4.8.2 (Enterprise)</code></p>
<br>

<h2 id="下载QtCreator："><a href="#下载QtCreator：" class="headerlink" title="下载QtCreator："></a>下载QtCreator：</h2><p><strong>qt官网下载地址：</strong> <a href="https://download.qt.io/archive/qt/">https://download.qt.io/archive/qt/</a></p>
<p>推荐下载⬇️的版本：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223210408.png" style="zoom:80%;" / loading="lazy">

<br>

<h2 id="安装QtCreator："><a href="#安装QtCreator：" class="headerlink" title="安装QtCreator："></a>安装QtCreator：</h2><ul>
<li>点击下一步（Next）：</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223210928.png" style="zoom:80%;" / loading="lazy">



<ul>
<li>点击跳过（SKip）：</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223211028.png" style="zoom:80%;" / loading="lazy">



<ul>
<li>点击下一步：</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223211130.png" style="zoom:80%;" / loading="lazy">



<ul>
<li>安装就选择默认位置，不建议更换其它盘，点击下一步：</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223211201.png" style="zoom:80%;" / loading="lazy">



<ul>
<li>选中所需要的模块，勾选即可，如下是我的个人安装目录和所需要的模块；以及解释每一个模块的含义</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223212933.png" style="zoom:80%;" / loading="lazy">



<ul>
<li>选中同意协议，然后点击下一步：</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223213305.png" style="zoom:80%;" / loading="lazy">



<ul>
<li>点击下一步：</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223213240.png" style="zoom:80%;" / loading="lazy">



<ul>
<li>点击安装：</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223213339.png" style="zoom:80%;" / loading="lazy">



<ul>
<li>耐心等待安装完成，约10分钟即可安装完成：</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223213412.png" style="zoom:80%;" / loading="lazy">



<ul>
<li>点击完成，到此，该软件成功安装完成：</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223213527.png" style="zoom: 80%;" / loading="lazy">



<h2 id="验证安装成功："><a href="#验证安装成功：" class="headerlink" title="验证安装成功："></a>验证安装成功：</h2><p>打开<code>Qt Creator 4.8.2 (Enterprise)</code>图标：</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223213821.png" loading="lazy"></p>
<p>然后点新建一个空的项目工程，</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223221307.png" loading="lazy"></p>
<p>然后运行（那个播放按钮），看到如下界面，即表示安装成功，可以开始新的编码之旅：</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223221201.png" loading="lazy"></p>
<h2 id="推荐关闭插件："><a href="#推荐关闭插件：" class="headerlink" title="推荐关闭插件："></a>推荐关闭插件：</h2><p>这里推荐关闭右侧的标红提醒，详细参考此博文：<a href="https://blog.csdn.net/qq_33154343/article/details/102943623">Qt Creator 关闭.cpp文件右侧的黄色警告</a></p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>“.inl”文件在C++工程的意义</title>
    <url>/posts/bbc9c22/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　<code>.inl</code> 在 C++ 大型工程项目中的作用？</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>　　最近看安全项目代码，发现基础公共库里面使用到了大量的</p>
<ol>
<li>内联 <code>__inline</code> 、</li>
<li>字符串 <code>typedef</code> 替换</li>
<li>模板 <code>template &lt; typename TYPE&gt;</code> 等；</li>
</ol>
<p>在公共 <code>src</code> 文件夹中，仅有 <code>.h</code> 和 <code>.inl</code> 文件，而无一 <code>.cpp</code> 文件？</p>
<br>

<h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p><strong>.inl 文件是什么？</strong></p>
<p>可以理解为 .cpp 文件</p>
<ol>
<li>文件后缀名是毫无意义的，最好的例子就是无任何扩展名的 STL 头文件。对编译器也没有特殊含义；</li>
<li>仅一种约定的规则，表明这里这里面是一些内联函数和模板的实现。</li>
<li>某种极端特殊情况下，可以解决互相包含和前置声明无法编译通过的场景。</li>
</ol>
<br>

<p><strong>何时使用？</strong></p>
<ol>
<li>用于内联函数的定义</li>
<li>用于功能模板的定义</li>
</ol>
<p>且通常会在 .h 文件的尾部，使用 #include 包含此文件。</p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序二 经验</category>
        <category>学习 - Windows</category>
      </categories>
      <tags>
        <tag>工程经验</tag>
      </tags>
  </entry>
  <entry>
    <title>一个微软自带的 notepad 所导致的问题</title>
    <url>/posts/463a4b4e/</url>
    <content><![CDATA[<p><strong>简  述：</strong> 纪录一个 Microsoft 自带的 notepad 所导致的问题，关于对 <strong>回车</strong> 和 <strong>换行</strong> 的解析。 </p>
<p>　　测试小姐姐，报一个 bug 让康康先，说软件的日志在 Win10 x64 上，输出显示会多一行空格，而 Win7 x86 下则不会多此空行。我听后？？？同一个 .dll 还能跑出不同效果来？？？？</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202203151520508.png" width="20%"/ loading="lazy">



<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>　　本想去敏后截图，但想了下还是直接写了例子演示，大概如图的 bug；💻为  <code>win10 21H2</code> 📎 <code>win7 sp1</code>。</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202203151518139.png" width="80%"/ loading="lazy">

<br>

<p>　　验证一番，确实可以复现，反而更加迷惑了。难道是对行尾结束标志，发生了历史演变？？？而恰前几天有写一篇如何修改 <code>Visual Studio</code> 行尾标志的文章 <a href="https://blog.csdn.net/qq_33154343/article/details/123366419">『Visual Studio实际仅增删数行，却显示文件所有行均发生变更』</a>。</p>
<p>　　赶紧去查查　“回车”、“换行” wiki 历史的区别。再调试一下代码输出，看看是不是历史的演变原因？</p>
<br>

<h3 id="回车换行CRLF"><a href="#回车换行CRLF" class="headerlink" title="回车换行CRLF"></a>回车换行CRLF</h3><p>　　前辈们创建了文字，书写了一行文字；想要换行继续写，就创建了一个『换行的 <strong>标记</strong>』，自然就需要使用某个符号来表示此换行的标记。</p>
<br>

<h4 id="打印机时代"><a href="#打印机时代" class="headerlink" title="打印机时代"></a>打印机时代</h4><p>　　此时还电脑还没有出现，打印机完成一个『换行的 <strong>操作</strong>』操作，需要执行 <code>回车</code> + <code>换行</code> 两个动作。</p>
<ul>
<li>『回车』：将游标移动到当前行的行首</li>
<li>『换行』：将游标移动到当前行的下一行</li>
</ul>
<p>用个视频感受一下： <a href="https://www.youtube.com/watch?v=FkUXn5bOwzk">How to Use a Typewriter</a> </p>
<iframe width="760" height="427" src="https://www.youtube.com/watch?v=FkUXn5bOwzk" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<br>

<h4 id="计算机时代"><a href="#计算机时代" class="headerlink" title="计算机时代"></a>计算机时代</h4><p>　　计算机出现了，照搬一些打印机的习惯，则两个动作被保留下来了。</p>
<br>

<p>回车符（CR）和换行符（LF）是文本文件用于标记换行的控制字符（<a href="https://en.wikipedia.org/wiki/Control_character">control characters</a>）或字节码（<a href="https://en.wikipedia.org/wiki/Bytecode">bytecode</a>）。</p>
<ul>
<li>CR &#x3D; <strong>Carriage Return</strong>，回车符号（<code>\r</code>，十六进制 ascii 码为<code>0x0D</code>，十进制 ascii 码为13），用于将鼠标移动到行首，并不前进至下一行。</li>
<li>LF &#x3D; <strong>Line Feed</strong>，换行符号（ <code>\n</code>, 十六进制 ascii 码为 <code>0x0A</code>，十进制 ascii 码为10）。</li>
</ul>
<p>紧邻的 CR 和 LF（组成 CRLF，<code>\r\n</code>，或十六进制 <code>0x0D0A</code>）将鼠标移动到下一行行首。（Windows 操作系统默认的文本换行符为 CRLF；Linux 以及 macOS 系统默认使用 LF，早期的 mac os 系统使用 CR 换行。）</p>
<br>

<p>　　需要用一个字符来表示『换行的 <strong>标记</strong>』。至于历史原因和想法的争议，Windows 使用了两个字符表示，Linux 和 MacOS 均是一个字符表示，其现在的规则如下：</p>
<ul>
<li><p>windows：<code>CR+LF</code> 表示此标记。两个标记按照此顺序且同时出现才被认为是</p>
</li>
<li><p>Linux &#x2F; MacOS：<code>LF</code>  表示此标记。</p>
</li>
<li><p>早期的 MacOS ：<code>CR</code> 表示此标记。   MacOS 9 版本及之前。</p>
</li>
</ul>
<br>

<p>感兴趣更详细，可参考 mozilla.org 和 notepad++ 的这两篇文档：</p>
<ul>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/CRLF">mozilla.org&#x2F;CRLF</a></p>
</li>
<li><p><a href="https://www.crifan.com/detailed_carriage_return_0x0d_0x0a_cr_lf__r__n_the_context/">【详解】回车 换行 0x0D 0x0A CR LF \r \n的来龙去脉</a></p>
</li>
</ul>
<br>

<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>　　有了上述知识储备，调试一下源码，发现打印每个文件路径时，会拼接字符串，每次都会添加 <code>\r\n</code> 字符串来表示换行。</p>
<p>写一个小例子验证下区别，分别拿到 win10 和 win 7 下去跑一下，使用 notepad++ 打开，两次效果都是一样的。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QFile <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"D:/ExCRLF.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
file<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token double-colon punctuation">::</span>WriteOnly <span class="token operator">|</span> QIODevice<span class="token double-colon punctuation">::</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>
file<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"(abcdefg1234hijk)\r[FOXES]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
file<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"(abcdefg1234hijk)\n[FOXES]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
file<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"(abcdefg1234hijk)\r\n[FOXES]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
file<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"(abcdefg1234hijk)\n\r[FOXES]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 Win10 21H2 中运行效果</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202203151620790.png" width="100%"/ loading="lazy">

<br>

<p>　　<strong>结论：</strong> 在 win 系统中，一个<code>&quot;\n&quot;</code> 的 C++ 字符会被标记为一个 <code>&quot;CRLF&quot;</code> 存储到文本文件中；一个<code>&quot;\r&quot;</code>  的 C++ 字符会被标记为一个 <code>&quot;CR&quot;</code>   存储到文本文件中。<strong>而在 notepad++ 中，无论是 <code>&quot;LR&quot;</code> 、<code>&quot;CR&quot;</code>、<code>&quot;CRLF&quot;</code> 都会被解析为换行操作后显示出来；但是早期的 win 下的 notepad 记事本不是，只能够解析 <code>&quot;CRLF&quot;</code> ；而这个 bug 一直到 2018.05 在 win10 中才被修复；</strong> 这是在微软维护 notepad 那个老哥写的 blog： <a href="https://devblogs.microsoft.com/commandline/extended-eol-in-notepad/">Introducing extended line endings support in Notepad</a> 。</p>
<p>最终就是展示到眼睛看到的效果。</p>
<ul>
<li><code>&quot;\r&quot;</code> ↔ <code>&quot;CR&quot;</code>                     被 notepad++ 解析为换行；早期 notepad 不做换行解析</li>
<li><code>&quot;\n&quot;</code> ↔ <code>&quot;CRLF&quot;</code>                 被  notepad++ 解析为换行；早期 notepad 不做换行解析</li>
<li><code>&quot;\r\n&quot;</code> ↔ <code>&quot;CR  CRLF&quot;</code>     被  notepad++ 解析为换行；早期 notepad 做换行解析</li>
</ul>
<br>

<p>　　<strong>真相图，同一个 txt 在 win7 下的早期记事本中解析错误，而 notepad++ 解析正确。</strong></p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202203151721210.png" width="100%"/ loading="lazy">

<br>

<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>　　上面分析可知，修改此 bug 的最好方式就是不作为修改，谁让软件生成的日志 .txt，使用默认使用 windows 打开，且系统保持向上兼容到 win7、和 win xp。也算是一种妥协！</p>
<p>若是想要解决跨平台，解析来自不同的系统的文件，判定收取的文件的换行是哪一个？可参考 <a href="https://stackoverflow.com/questions/10348292/qstringsplit-and-r-n-and-r-n-convention">QString::split() and “\r”, “\n” and “\r\n” convention</a></p>
<br>

<h3 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h3><p> <a href="https://github.com/XMuli/QtExamples">QtExamples</a> 【ExCRLF】，测试例子和打包二进制见此文件夹，自行查看体验</p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序二 经验</category>
        <category>学习 - Windows</category>
      </categories>
  </entry>
  <entry>
    <title>三亚之旅，让键盘先长几天草</title>
    <url>/posts/3b6c071c/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　忽翻出了去三亚之旅的照片，一次美好的看海,玩水之旅行。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_8189.JPG" width="100%"/ loading="lazy">



<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>​        在一个地方呆久了，总会幻想着有一日去另一个山清水秀之地，畅游一番，看另一方山水、一方人情。迟迟未去的理由也许大概是 <strong>“我也曾想仗剑走天涯，奈何 BUG 太多而没去”</strong> 。此次有了机会和时间，得以出发，增加一点见识、看看山水、享受一下阳光、沙滩、大海、以及…👫🏻</p>
<br>

<h3 id="游玩"><a href="#游玩" class="headerlink" title="游玩"></a>游玩</h3><p>​        还没来一个地方之前，就对她有着许些期待、一头小鹿四处跳跃在心中。先想着去哪里玩、玩些啥、然后乐呵的美滋滋遐想。</p>
<p>​		对于旅行，我更倾向于没有规划、走到哪里就玩到那哪里、随走随停，这才是我想的一种旅行。也毕竟一地的打卡景点之多，竟可能的全去，总有路上匆忙之感，丢了旅游的悠然与惬意。</p>
<p>​		在路上、也认识了一些新朋友，聊得投机，相约同行。且发现是一老司机（字面意），后租一车，想去哪里，我们就去哪里。芜湖~</p>
<p>​		刚到，就初缝套路深；先去一家路边小店买了一件椰树的游泳裤衩、拖鞋等。后半路遇其她商家、被告知成了肥羊了。略有小气，气不过，返回店家，怒气冲冲😤😤😤，后退还多余现金（多赚可忍，但卖数倍，就气不过了）。不过后面都基本正常，算是一个小插曲。</p>
<p>​		当然是先去海边拉，光着小脚丫，踩踩👣👣👣</p>
<br>

<p>​		记得，有去潜水🤿、去摸摸水底的🐟，给她们喂着一些鱼饲料，可能是来看她们的人多了，也不见怕人、但伸手去摸，依旧会快速的摇着尾部遁走；本以为喂饵的人会很多，不会怎么吃，可是实际发现还是依旧很贪吃，吃的一个快速和惬意；水底实际也是很浑浊的，仅勉强看清周围几十距离，周围漆黑，和📺的水底世界拍照，相差甚远了。</p>
<p>​		后面还去完了一些划水冲浪的项目，阿西，真的是天黑才停止。真的是摩托艇前面跑，溅起的浪花溅在脸上，感觉真的是又疼又闲又贵又刺激又好玩。</p>
<p>​		踩着海滩边的柔软细沙，光着脚，很舒服，旁边就是打着沙滩排球的俊男靓女。当然偶尔也会遇到有人趁你不注意，塞张小卡片到你手里。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210423223703.png" width="100%"/ loading="lazy">

<br>

<p>​		最后还去了三亚购物，先去的 Apple 店铺看的，不过比较小，那会 🍎 12 店铺没有了，略扫兴、本有意换个手机的，那就再接着用一年，坐等 IPhone 13 香 <del>（王守义十三香提前加持）</del>。后路过卖🍺的，好可惜，滴酒不沾的我，只是看看，没啥兴趣。</p>
<p>​		最后，一个男生去逛彩妆店和护肤品店、又能有什么坏心思呢？只不过是去给某个💃送点小礼物罢了。出乎意料之外的是，本以为这里不会有什么男生，结果男生至少占了三成🤦‍♂️，看起来都是买护肤送老婆。赶紧问了下好友里的小姐妹们 ，送小礼物应该送啥、让给出谋划策。每家店铺队伍都还挺长的。只记最后拎着三个大袋子，有一个还袋子压破了；买完才知道，这些不能走托运，得提着上飞机，早知道就，，氪，氪，氪，氪，氪，，，一直到现在都觉着里面的女生买东西太夸张了，现在只记得一些：神仙水、SK-II、雅诗南黛、什么珂、韵、娜、婷、什么红（真的是让人上头）。印象深刻的就是，中文名和英文名我对不上、找个店铺都找了好久，哭晕。</p>
<br>

<p>​		后也去让老司机开车车，带我们去兜兜风，还可以看到一些漂亮大姐姐，后视镜的墨镜才发现，车车就不认识了，那会还没拿驾照也不认识。有意思来了，后来另一个车的小姐姐也过来了，好像还竞速了一段距离。优点意思。（老司机你开慢点）</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_3564.JPG" width="100%"/ loading="lazy">

<br>

<h3 id="吃饭"><a href="#吃饭" class="headerlink" title="吃饭"></a>吃饭</h3><p>​		作为一个会经常在四处探店的人，寻找好吃的，怎么会放过此处的美味呢？首选就是海鲜，其次就是烧烤，哈哈哈哈哈哈，这东西，真的是出来了也还想吃。路途也遇一个大锅说带我去吃海鲜，知道了还有可以自行选购海鲜食材，店家来烧烤这种方式。哈哈哈哈哈哈哈哈😄😄，对于这个，做了功课的，找到一家叫什么小胡子的店铺，两家店面，在一条街上面对面开的，实际是一家，很值得一去，就是得先在远处停车好。里面海鲜都是活的，都让顾客自行挑选保证新鲜，一家店面选好之后，去另一家等待加工，坐等上菜即可。</p>
<p>​		记得点了皮皮虾，口感和一般皮皮虾不一般，咬下去的每一口都很清脆、味道中带点🌶感，还有海鲜的湿润、鲜味都尝的出来。还有<strong>清蒸石斑鱼</strong> ，这个真的吹爆它，清淡带着深海的感觉，肉质爽滑且鲜美，生动形象的形象，词穷，让人回味无穷。全场最佳，至今依稀记得其味道（可惜图片没找到了），不吃就错过了一个触动灵魂的美食，就可惜了。且。也有椰子饭，可能是饮食习惯的问题，不佳；还有海胆蒸鸡蛋，吃的没找到肉，问了下老板，说海胆就是壳子内壁薄薄的一层膜，我怀疑我是点了一个纯正的鸽子汤，海胆是啥味道完全没试出来，我都怀疑是没有吃到。。。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_3552.JPG" width="100%"/ loading="lazy">



<p>​		再后来就是吃了一些其它的店铺，记得点了数十份烤牡蛎，确实味道也好吃，不过感觉怎么价格和武汉差不多？？？然后还记得还去了一家东北菜馆，来了朋友推荐的锅包肉，吃吃喝喝，阔乐。然后走在路边会买一些椰子喝喝，感觉有点甜，遍地的🌴🌴🌴🌴🌴，在路两旁都是，然后有一种冒险岛的图感。</p>
<br>

<h3 id="住宿"><a href="#住宿" class="headerlink" title="住宿"></a>住宿</h3><p>​		游玩一天，夜间自然要睡觉，深入沉睡灵魂，蓄力次日的游玩。这里的自助也是很好的，穿了一个睡袍就下吃火锅🍲、小吃等自助，品种很多。吃的饱饱的、要歇一会再能离开。</p>
<p>​		还有一个游池，水很清澈、可惜了，我游泳是个半瓢水。然后在面疯狂的拍打着浪花、上午的水都是蓝且透亮的、阳光照射，甚是好看；而下午又太阳，水的颜色会变得深蓝透遂一点，👀看到很漂亮</p>
<p>​		而依栏杆看海面，甚至心旷神怡，拍的比较喜欢一张图；睡觉的地方，楼层比较高，视线也看开阔，旁边还有一阳台，有数把高椅，可以躺着；室内的风格是偏一点复古，看起来也很不错。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_3566.JPG" width="100%"/ loading="lazy">

<br>

<h3 id="再遇"><a href="#再遇" class="headerlink" title="再遇"></a>再遇</h3><p>​		倘若下次有机会再去，一定要再去吃一下那家店，的那家的清蒸石斑鱼，，是哒，我又馋了，好想再吃一次。</p>
]]></content>
      <categories>
        <category>生活 - 闲暇的趣闻</category>
      </categories>
      <tags>
        <tag>旅游</tag>
      </tags>
  </entry>
  <entry>
    <title>上海之旅，再让键盘长几天草</title>
    <url>/posts/31c5b72/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　出游，✈️✈️✈️，上海、迪士尼，芜湖~~</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210526224520.png" width="80%"/ loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>​		上海作为大城市，心慕已久。前往，欣欣然，顺道前往迪士尼，见识一番。</p>
<br>

<h3 id="游玩"><a href="#游玩" class="headerlink" title="游玩"></a>游玩</h3><h4 id="上海迪士尼"><a href="#上海迪士尼" class="headerlink" title="上海迪士尼"></a>上海迪士尼</h4><p>​		✈️✈️✈️，芜湖~，看看窗外的☁️，到达，乘车车，到达上海迪士尼。丢书包与酒店，再乘坐专线车送到门口。</p>
<p>​		步入大门，就是一侧就是巨大唐老鸭在水里面游着，下意识的就是这个 <strong>冲鸭</strong>。入园，又是一道大门，还需行李安检，再往前行，数十步，又是就是下图的最后一道门，可以看到米奇的标志 LOGO；以及确认是真的到了迪士尼，往前一步，就是女生们心心念念的之地（哪个少女不怀 <del>着心思想去一次？</del>）。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210526223852.png" width="60%"/ loading="lazy">

<br>

<p>​		<font color=#FE7207  size=4 face="幼圆"><strong>迪士尼的城堡里面又是长什么样子呢？</strong></font> 也是自己好奇了很久的一个问题😄</p>
<p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210526235015.png" width="47%"/ loading="lazy">  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_3714.JPG" width="47%"/ loading="lazy"></p>
<br>

<p>​		<font color=#FE7207 size=4 face="幼圆"><strong>想到可能今日（2021.05.20）可能相遇但却不相识？</strong></font> </p>
<p>​		本次出来玩，是没看日期的，来了才突然发现，遇上了一个好日子 <code>5.20</code>；闲逛着，发现给送了一条消息，易烊千玺也来了，还联名这个五周年的迪士尼米奇，以及刚坐了的这个旋转木马🎠🎠🎠；是不是有擦肩而过过</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4461.JPG" width="50%"/ loading="lazy">

<br>

<p>​		迪士尼的两大活动、以及自定活动各种景点，都需要自行去挖掘发现，去观看，以及去排队</p>
<p>​	1️⃣ 花车游行，可各种卡通动漫人物一起；看到此舞蹈，👸🏻公主抱，就是花车队伍的开始了，还有幸运观众坐车领队哦~</p>
<p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210526231705.png" width="43%"/ loading="lazy"><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4463.GIF" width="57%"/ loading="lazy"> </p>
<p>​	2️⃣ 景区自行游玩，怎么能够不打卡各处，体验一下各个之间风格呢？又以及怎么能够不留几张图片呢？为了这些小可爱们；对了，推荐“加勒比海盗” 和 “飞越地平线” 这两项目，很是震撼。看了都想二刷，不过还是要排队，哪怕是快速通道一样</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4432.JPG" width="60%"/ loading="lazy">



<p>​		3️⃣ 夜间大型烟花表演秀；烟花天空的绽放让人心醉，但却只是一瞬，但某平洋保险却能赞助好久，一直放好久的烟火；</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210526230255.png" width="80%"/ loading="lazy">

<br>

<h4 id="上海城市"><a href="#上海城市" class="headerlink" title="上海城市"></a>上海城市</h4><p>✅  迪士尼</p>
<p>✅  豫园</p>
<p>✅  外滩</p>
<p>✅  南京路步行街</p>
<p>✅  上海自然博物馆</p>
<p>✅  思南公馆</p>
<p>✅  城隍喵（划，庙）</p>
<p>✅  启瓶器（环球金融）</p>
<p>✅  ,,,</p>
<p>去了城隍庙，发现月老和财神爷是隔壁家的关系，一炷香，许两个愿望，还行？合成一个实现也行：饿，饭饭，小富婆</p>
<blockquote>
<p>上香： 姻缘 + 财神  &#x3D; 我的一个愿望</p>
</blockquote>
<p>至于外滩，一侧是钟楼（某银行）？另一侧则是江岸边，总有着很多的人，除了容易看到外国新娘👰🏻，还可以来学英语，真真的友人实景教学；登高楼，俯视整个陆家嘴以及黄浦江，上海夜景尽收眼底，灯火绚丽，向往；</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4430.JPG" width="80%"/ loading="lazy">

<br>

<h3 id="吃饭"><a href="#吃饭" class="headerlink" title="吃饭"></a>吃饭</h3><p>​		来一地方，自然需要品一方美食，上海作为大城市，有个熟悉的地道的上海人带我去尝尝本地菜，嘿嘿~。去了大茶壶的那个最老的店铺，特色生煎，各种口味仅此店才有，哈哈哈哈哈哈哈哈哈😁~~~，这就炒鸡开心了；然后还有着逸桂禾的阳春面，清淡，汤也好喝。想吃这种面很久了，今日得以一见。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4431.JPG" width="60%"/ loading="lazy">



<p>​		再然后其也尝了尝其它地方的美食，咋感觉像是，感觉上海早餐以这种生煎、甜品之类的为多，菜系也多为偏甜。当然了，作为初来乍到的异地人，基本全部带有偏甜的，略有吃不习惯。晚上附近一个人找了家地道的川菜馆，阿西，阿西，阿西，当然还是无辣不欢🌶🌶🌶；特意点的中辣、中麻；夹了第一筷子🥢，放下了，然后喝了一口水。心情复杂，心情复杂，心情复杂，真的是心情复杂；</p>
<p>​		这是吃饭吃了很久的一次，一筷子一筷子的漫不经心。前天问了问撩拨了前台的两个小姐姐。</p>
<p>你是本地上海人嘛？</p>
<p>嗯嗯，是哒。</p>
<p>你觉得你们这们川菜够辣不？</p>
<p>不辣。</p>
<p>。。。。  </p>
<p>我不仅觉得不辣，不麻，甚是还有点甜。</p>
<p>随后仙女掩面一笑，动人心神。拎包，下班</p>
<br>

<h3 id="住宿"><a href="#住宿" class="headerlink" title="住宿"></a>住宿</h3><p>​		“上海迪士尼酒店” 与 “玩具总动员酒店” 是最靠近上海迪士尼的两个酒店，都充满着可爱的动漫人物😊；入住后的酒店并非想象中的奢华，但细节却甚是干净，已有专门的小车车来接送去迪士尼的侧门，不用去像第一天那样去正门排队入园。</p>
<p>​		后几日，换了住宿之地，临江而望，东方明珠和环球金融中心即在眼前，略意外的是，感觉那塔没有开灯，或许是太早了，还没到点。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4426.JPG" width="50%"/ loading="lazy">

<h3 id="再遇"><a href="#再遇" class="headerlink" title="再遇"></a>再遇</h3><p>​		🛫🛫🛫，回家，此番玩的尽心，品尝了一番甜系的上海菜；回家，继续吃吃习惯的菜品，无辣不欢，解解馋</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4453.GIF" width="80%"/ loading="lazy">



<p><strong>后记：</strong>  千万不要像我一样一个人单独去迪士尼，还巧合是 5.20 这一天，还巧合是易烊千玺也去的一天。不然你会知道那些情侣请你帮她们拍照的时候，当看到你是一个人独行的时候，就很 🐶🐶🐶；后还遇到了单人通道，可惜那天也被关闭了，呜呜呜呜~~~；不像我，只能想，有个妹妹说，不像我，只会心疼一下哥哥。</p>
]]></content>
      <categories>
        <category>生活 - 闲暇的趣闻</category>
      </categories>
      <tags>
        <tag>旅游</tag>
      </tags>
  </entry>
  <entry>
    <title>上班两年干了些啥？该思考人生</title>
    <url>/posts/f5f1bb34/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  第一次上班，第一份工作，工作了两年，回想一下这两年我都干了些啥？学到了一些啥？以及思考一下以后我想干啥？略困惑，需要思考下人生。亦是这两年的一份年度总结。亦是初次写的一篇不成熟的 2019-2020 的年度总结。</p>
<p><strong>1. 我是谁？</strong></p>
<p><strong>2. 我想做什么？</strong></p>
<p><strong>3. 我在做什么？</strong></p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/065fb0ef38cb2a733ec131e239889c2b.gif" width="60%"/ loading="lazy">



<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="缘分"><a href="#缘分" class="headerlink" title="缘分"></a>缘分</h3><p>​		七月份的武汉，酷暑难耐，刚出象牙塔，手持简历，四处奔走。可能第一次的记忆都会比较深刻？那是一次愉快的面试，依稀记得面试房间空调很凉快，面试官的手指修长且很白，长相清秀，看着比我大一两载，过程很聊得来，有一种所学前面有所相似，很开心，就这样巧合进到 <code>Deepin</code> （武汉深之度）了。</p>
<br>

<h3 id="初始"><a href="#初始" class="headerlink" title="初始"></a>初始</h3><p>​		入职第一天，老大即是面试官 zccrs，意外的惊喜。初次接触商业代码，但是却没有什么文档，甚是辛苦大佬搬个小板凳，坐在我旁边，手把手教我，刚开始一周代码都是他写的帮我提交的，于是提交了；老大也是大佬，却很是主动和热情（如同夏日的一丝凉风，带来记忆中的凉爽）；一同进来的几个上小伙伴，也都互相一起学习，纷纷想自己所会的部分主动教予他们，互相学习，氛围很棒，也很舒适。</p>
<p>​		当第一眼看到 <code>Deepin v15</code> 时候，甚至惊艳，界面竟然如此美观，尤其是磨砂、透明、任务栏、右侧控制中心、全屏启动器、以及锁屏样式，就是惊艳至极。<strong>很多美好的事物可能就是初次看到，然后以感觉惊艳以至记忆深刻吧。</strong> 这里好好夸夸我们大设计师 shule1987  老师，且还可以安装 <code>QQ</code> 和 微信等（当时来消息盯着这个任务栏摇头晃脑看了好久），甚至很多其他软件都可以直接在应用商店中安装；</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/Untitled.gif" width="50%"/ loading="lazy">

<p>​			</p>
<p>​			之前在校只浅浅用过 Ubuntu，未深入接触过 Linux 其它发行版，也未曾听说过 Deepin，后来才知原来在此领域早已经有名气。<br>​			<strong>番外：</strong> 工作一个月后，恰好回答过一篇知乎，无意成了首答 <a href="https://www.zhihu.com/question/344339517/answer/817025546">zhihu.com</a> ，</p>
<br>

<h3 id="完成-List"><a href="#完成-List" class="headerlink" title="完成 List"></a>完成 List</h3><h4 id="工作的收获"><a href="#工作的收获" class="headerlink" title="工作的收获"></a>工作的收获</h4><p>已经完成 List：</p>
<ol>
<li><p>✅  维护和开发 DTK 库</p>
</li>
<li><p>✅  实现社区用户渴望的小功能</p>
</li>
<li><p>✅  维护和更新仓库对外部开源事宜</p>
</li>
<li><p>✅  额外参与开源社区和 GitHub 项目</p>
</li>
<li><p>✅  开发自己的小软件：网速插件、截图等</p>
</li>
<li><p>✅  软件已上架 Deepin Store、Spark Store 等</p>
</li>
<li><p>✅  推进和打通外部贡献者给内部贡献代码的渠道</p>
</li>
<li><p>✅  在 BBS 和 TG 上为国际用户解决困惑</p>
</li>
<li><p>✅  搭建和完善 DTK 官网文档</p>
</li>
<li><p>✅  主持演讲 “技术分享会”</p>
</li>
<li><p>✅  技术文章收到了稿费</p>
</li>
<li><p>✅  个人 Qt &#x2F; C++ 系列文章完善</p>
</li>
<li><p>✅  纂写专利底稿，且是专利的第一作者是自己名字</p>
</li>
<li><p>✅  和群友划水、吹牛（这个也算）</p>
</li>
</ol>
<br>

<p>​		本职工作大致分为两个阶段，前期维护和开发 DTK 这个核心库，是 Deepin &#x2F; UOS 全家桶软件的核心基石；对 Qt 的源码看的比较多、尤其是原生控件的绘画实现、和使用了解的比较多，知识深度发展。后期巧合下成了全职负责社区相关，极大地丰富了广度和各种接触面，也满足了对于开源社区的在运作方式好奇心、开源协议相关的知识、接触开源这个圈子相关；也为后面推动、打通外部贡献者在 GitHub 直接提交贡献到内部代码审查平台上的渠道留下了契机。</p>
<p>​		后恰好用工具统计过，参与 <code>DTK</code> 核心库的开发与维护，大约贡献 <a href="https://github.com/linuxdeepin/qt5integration">qt5integration</a>  10% 的代码、以及百分之几的 <a href="https://github.com/linuxdeepin/dtkwidget">dtkwidget</a> 的代码。当然现在现在这个比例随着规模在逐渐扩大，比率后面会越来越小（随着新人添砖加瓦），对此是乐于看见的和有所期待。当熟悉写好了 Qt 的控件时候，就对社区用户的一些愿望，就有相帮他们实现。比如审美的个体差异：大圆角。既然大佬们没事时间，而我恰好又有空，那么就我来吧；后主导和开发 “圆角自定义”功能，在社区版 Deepin 上设置了 UI 修改开关、以及可用命令的方式。为了商业版也可以修改，我也给给留了一个可命令修改的方式，后面产品如果可以有想法的话。只需要去掉一行 if 代码即可；对于如何修改，则可以参考 <a href="https://xmuli.blog.csdn.net/article/details/109232878">此文</a>。</p>
<p>​		空闲的晚上，有开发两款网速插件，1️⃣一个简版 <a href="https://github.com/xmuli/lfxSpeed">lfxSpeed</a>  作为 DDE-DOCK 的插件实现，用的 DTK 开发，精简功能且单一，我用这就觉着挺好，也已经上架 Deepin 和星火商店。2️⃣再后来感觉希望能够支持其它桌面环境，甚至支持 Win 和 Mac，于是全部重构，重新设计，设计成了桌面悬浮模式和同时支持任务栏模式，开发了 <a href="https://github.com/xmuli/NetSpeed">NetSpeed</a>  。最后时间时间空闲，越写越大，不可收拾，想通了不应该有万能的程序，功能过于复杂，容易吃力不讨好，且代码量指数级上升。随后精简和砍掉了冗余功能，做成了 Linux 下所有桌面都可通用的，哪位大佬有空可以直接帮我打包到其他发行版中（2021.12 更新 ：那天蓦然的看了下，发现下载量 1.1K+ ，<a href="https://github.com/ClayStan">ClayStan</a> 说有空给整打包 apt 一下）。3️⃣另外还开发了一个小的本地截图软件 <a href="https://github.com/xmuli/ShotX">ShotX</a>，哈哈哈哈， logo 继承了 Deepin 的风格，找的某设计的小姐姐帮忙实现的，一直觉得挺好看的。最核心的截图功能（支持多屏）已经实现，基本功能实现了，只是没打包，后面有空再整🕊🕊🕊~~~ 咕咕咕咕。（ 2021.12 更新，现在已经又重构设计实现了一版，等待写成公开仓库）</p>
<p>​		投稿<a href="https://www.uniontech.com/wp-content/uploads/2020/10/uniontech%E6%BA%90%E7%A0%812020%E5%B9%B49%E6%9C%88%E5%88%8A.pdf">《UNIONTECH 源码 • 2期》</a>，收到了人生的第一笔稿费，和印有自己文章的实体书。</p>
<p>目的为了降低后来者上手 <code>DTK</code> 的门槛和作为内部培训资料，书写了一些文档和搭建了一些网站（此处感谢亦感谢部署中的小伙伴和社区的帮助）</p>
<ul>
<li><code>DTK</code> 的个人积累系列文章，也包含 Qt 控件的使用： <a href="https://github.com/xmuli/QtExamples">QtExamples</a> </li>
<li>搭建 <code>Deepin / DTK</code> 的官方文档：<a href="https://docs.deepin.org/">docs.deepin.org</a> </li>
<li>制作 DTK 的相关 PPT 和会议分享：<a href="https://github.com/linuxdeepin/docs/tree/master/Resources/DTK">《DTK 框架分享.pptx 》等</a> </li>
<li>分享会 DDE 如何移植到其他 Linux 发行版：<a href="https://xmuli.tech/posts/78cd25f3/">DDE移植Arch流程</a> </li>
<li>制作虚包 deepin-sdk 和，方便安装 DTK 的开发环境：</li>
<li>DTK 的中文 API 文档能在本地 Qt 助手直接无缝查看：<a href="https://xmuli.tech/posts/3f6b9501/">DTK 文档嵌入 Qt  Assistants</a></li>
</ul>
<br>

<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_3572.JPG" width="100%"/ loading="lazy">

<p>​		其中重点感谢帮助我搭建和推动过程的一些大佬们的协助，和热情的帮助，得以使得有些东西能够被顺利完成。</p>
<br>

<h4 id="技术的学习"><a href="#技术的学习" class="headerlink" title="技术的学习"></a>技术的学习</h4><p>已经完成 List：</p>
<ol>
<li>✅  CMake 的学习</li>
<li>✅  为 Qt 提交 PATH</li>
<li>✅  完善博客搭建和部署</li>
<li>✅  熟知 Linux 的发行版区别、自由软件和免费软件、开源协议之间的关系</li>
<li>✅  制作 <code>dde-dock</code> 的插件 、安装配置文件（用户级和系统级）、国际化翻译的切换和处理</li>
<li>✅  学习： <code>Qt</code> 的控件绘画和使用；<code>Linux</code> 系统学习之 ❶基础编程 ❷系统编程 ❸网络编程  <a href="https://github.com/xmuli/linuxExample">🔗</a></li>
<li>✅  体验：Mac、Window、Linux（UOS、Deepin、Ubuntu、Arch）之间反复横跳、体验各自的优缺点。</li>
</ol>
<p>​		嗷嗷~，记得一开始当时有重绘好些控件，Code View 时比较严格，且设计师要精确到像素，放大且不模糊失真（5K 🍎 🖥看效果，开发用的 1080 分辨率，唉，当时好想也用高分屏开发，流下口水）；不过最后效果就是，普通屏开发，但在高分屏上看 DDE 依旧很清晰，奶思；要求严格是非常值得的。</p>
<br>

<h4 id="生活的体验"><a href="#生活的体验" class="headerlink" title="生活的体验"></a>生活的体验</h4><p>已经完成 List：</p>
<ol>
<li>✅  看书</li>
<li>✅  旅游</li>
<li>✅  拿驾照</li>
<li>✅  烹饪炒菜 </li>
<li>✅  美食探店：<a href="https://blog.csdn.net/qq_33154343/article/details/120661981">藕汤</a></li>
<li>✅  自替换 iPhone 电池</li>
<li>✅  补番少年时动漫和 TVB </li>
<li>✅  手游 CFM 苹果区等级同安卓</li>
<li>✅  购买 4K 27 寸显示器、MBP 13 、音响购买</li>
</ol>
<br>

<p>​		得益于公司的 965 的不加班，以及遇到很好的一个房东，能够每个月不足十分一的工资用来租房；且还有很多的时间，可以用来看一些哲学书籍📚（尤其当技术书籍看疲倦时），甚是思想甚是满足。驾照在在大学就考了科一、科三，后遇教练跳槽、再他被开了的奇葩遭遇。后没时间，三年过期遇上疫情，被延期了半年，出乎意料外的幸运，重新拿钱单学一科二，赶在时间过期的前半个月，拿到驾照小本；考前练车被毕恭毕敬称之为董教练、科二共十八人全一把过，就称为老董🤣🤣，对于萌新第一次开车上路的感觉可以参见 <a href="https://xmuli.blog.csdn.net/article/details/115049769">此说说</a>。</p>
<p>​		人不挑食，可柑橘附近的饭菜一言难尽，于是逼得我自行买锅，点亮我的烹饪技能树，现如今家常小炒基本 OK，，氪氪氪，本是不想学这的，娜娜的无奈🤷🏻‍♀️，em，当然也有偶尔翻车的时候，含着泪，好吃好吃好吃。不知是离家许久了，还是思家了。尽然偶时会回忆小小时候奶奶煲的藕汤、发疯了到处探寻武汉的藕塘店，几乎武汉所有的藕汤店都去过了，清一色的粉藕，汤都是好喝；可我还是想找一家脆的藕汤、无它、喜欢罢了。也有朋友带我去各个大家的店铺去吃，初次去吃此烤肉时候，就一个感觉：爽~~ 这才是吃烤肉应该打开的方式。</p>
<p>​		第一次尝试做西餐，我的这个七分熟，咋样？ 然后炒菜凉菜和炒菜等都有尝试一番过。</p>
<p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_43942.JPG" width="50%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4395.JPG" width="45%"/ loading="lazy"></p>
<p>​		对于炒饭这种，我是很有好奇的，感觉我有时候可以炒的很好看。对于煎锅的使用，当然，有时候使用也会翻车成了下图的🥟，，大概是强行将煮饺尝试做煎饺，嗷呜~~~，没错，是哒，我当时就是炒鸡想吃煎饺。对于吃饭我向来是比较不挑食的，哪怕是朴素一餐也可以接受，但是倘若老婆饼里面没有老婆，哪则是不可的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4397.JPG" width="45%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4401.JPG" width="48%"/ loading="lazy"></p>
<p>​		练车时候，手机🔋很快就没了，加上偶尔也会折腾下电子产品，想着自行拆机换一下新电池，就说干就干，心里还有点小预期，拆坏了就换 12，可看来是想让 8P 再战一年。另一方面，常用电脑，对于操作系统 Linux、Window、Mac 这三者之间用哪一个？总是反复横跳，喜欢它们各自的优点、爱不释手，但是各自的缺点又略有难以忍受，最后的解决方案是“小孩子才做选择题”，买了心心念念的 🍎 MBP 和 HUAWEI (Mate Book pr ) 只有这款支持 4 K，醉了醉了，也知道自己最适合的就是一个 27 寸的 4K 屏幕即可，使用最舒服的姿势。对于 PC 游戏一直不感兴趣、大概是小学时候去过了，长大了反而没兴趣？？？手游也只有一个 CFM 从内测玩到现在，腾讯的氪金游戏硬生生的完成了打卡得装备的游戏。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/1111223.gif" width="70%"/ loading="lazy">

<br>

<h4 id="额外相遇"><a href="#额外相遇" class="headerlink" title="额外相遇"></a>额外相遇</h4><p>期间已遇到 List （见证）：</p>
<p>​		自我上班起，恰好经历（遇到）的如下：</p>
<ul>
<li>参与 Deepin V15 开发 V20 版本，UI 等样式全新大改版</li>
<li>更换 LOGO 为 UOS（后同时保持 Deepin ）</li>
<li>恢复断更新九个月的开源代码在 <a href="https://github.com/linuxdeepin">GitHub</a> 上，开心😄</li>
<li>武汉深之度被融资，成立更大规模的公司统信软件</li>
<li>背后的某股票猛涨了 10 倍（虽然至今都没玩这东西，从我入职那天就开始涨，涨到了年底）</li>
<li>公司搬迁到更大的一个地方，更多的楼层</li>
<li>公司人数由 200 一年多涨到 2000+ 人规模</li>
<li>然后在全国各地开设置子公司，规模急速扩张</li>
</ul>
<br>

<h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p>​		遇到带我的架构老大（大佬 zzcrs），学习了很多技能和为人品质，很是感激。</p>
<p>​		遇到 Hualet ，得见原来总监大佬的温文尔雅和和善，也有多被照顾，很是感激。</p>
<p>​	    遇到舒老师，原来设计大佬可以这么帅还有艺术感，生活的 volg 给人美感和温暖，很是感激。</p>
<p>​		遇到每天开心的竹子 ，主动亦热情，知识广度丰富带我接触更多，很是感激。		</p>
<p>​		遇到产品，性格可是我所缺少的那一面，既向往，也舒畅，很是感激。</p>
<p>​		遇到教会我生活，遇到带我们去吃烤肉，遇到认真负责，遇到陪我聊天灌水，分享生活经历和人情，很是感激。</p>
<p>​		遇到还有很多很多的小伙伴和大佬们，还有小姐姐们，每一个都很珍贵，很珍惜，在此一并感谢。</p>
<br>

<h3 id="离开"><a href="#离开" class="headerlink" title="离开"></a>离开</h3><p>​		2021.04 初递交了离职报告，离开 “统信软件（亦 Deepin）”，虽有不舍亦不后悔。来的匆匆，走的也匆匆。氛围很好的一家公司，也可以学习到很多知识，有很多的空闲时间去思考一些人生，想要去推进的事情，大佬也会很支持和提供资源，同事之间的氛围也很棒，设计的舒老师又帅又好说话、设计的妹子人美声甜，产品的大姐姐们也奶思，甚至还可以带薪撩拨测试的小妹子，大佬对于开源社区这方面也是很支持，亦是很适合新人推荐的，虽离开，但给予我一段很好的回忆。 也有想去完成一些它的事情，记录曾经的我的桌子布局，留以纪念这两年。</p>
<p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_2393%202.JPG" width="45%"/ loading="lazy">   <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_1447%202.JPG" width="45%"/ loading="lazy"></p>
<br>

<h3 id="新相遇"><a href="#新相遇" class="headerlink" title="新相遇"></a>新相遇</h3><p>​		睡过一觉，又是新的一天，新的一天也是元气满满的一天，迎接今日份的新开始，认识新的朋友，新的经历，新的懵懂与无知，新的公司，新的进步，新的相遇。邂逅，<strong>看到本文也是缘分，若是想来我呆过这两家之一，均可帮忙内推这两家。</strong></p>
<p>​        再见，统信（Deepin），感谢相逢。</p>
<p>​		你好，金山，有幸能为 WPS 贡献代码。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4404.JPG" width="40%"/ loading="lazy">
]]></content>
      <categories>
        <category>生活 - 闲暇的趣闻</category>
      </categories>
      <tags>
        <tag>年度总结</tag>
        <tag>偶然乐趣</tag>
        <tag>Deepin</tag>
        <tag>WPS</tag>
      </tags>
  </entry>
  <entry>
    <title>东京 ⇄ 京都游记⛩️</title>
    <url>/posts/b665eba9/</url>
    <content><![CDATA[<p><strong>简  述:</strong>  以前旅行偏向散漫、随心随意，睡觉恣意，一日两处景点、亦两日一景点。慢慢轻食、随意晃荡。</p>
<p>本次的旅行提早一月便有了规划，做了新的行程规划，感受不一样的愉悦旅程。结束后时间都甚是愉悦，今空闲，欣欣然记载之。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>



<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>“人总是在接近幸福时倍感幸福，在幸福进行时却患得患失。”</strong>  由于这次行程行程已被安排妥当，知道具体出行日期，比较期待；</p>
<p>于是乎在到来前的一个月，每日都很开心，心理美滋滋的。像极了小时候等待春节过年，所期待的。这段时间应是最快乐的时间，出游那几日是同样的快乐。提前得知的消息，使得这份快乐持续的加长，美好的回忆。搁置一段时间后，回忆写此篇时，愈感前半句情绪。</p>
<h2 id="一、行前准备"><a href="#一、行前准备" class="headerlink" title="一、行前准备"></a>一、行前准备</h2><ol>
<li><p><strong>签证与机票</strong></p>
<p>   签证提前一个月办理好，淘宝选的单次旅游签、有效期 90 天，可停留 15 天。包含本地流量卡七日。全部电子资料即可，约 7 工作日即可收到办理通过的材料。</p>
</li>
<li><p><strong>交通规划</strong></p>
<p>京东 ⇄ 京都⛩️两地都想去，当然是多选择。行程提前预定新干线的票，有两种席位，提前订官网会有一定折扣。地铁🚇和遍地的贩卖机基本都可使用西瓜卡 Suica 进行支付。</p>
</li>
<li><p><strong>住宿安排</strong></p>
<p>出行日若高峰期，推荐提预定。酒店前台大多都有自动机，使用护照扫描即可 Check In。</p>
</li>
<li><p><strong>出发🛫</strong></p>
<p>坐等落地</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202504201550250.jpg" width="80%"/ loading="lazy"></li>
</ol>
<h2 id="二、东京篇"><a href="#二、东京篇" class="headerlink" title="二、东京篇"></a>二、东京篇</h2><blockquote>
<p><strong>城北赏花火🎆，</strong></p>
<p><strong>城南拍镰仓📸，</strong></p>
<p><strong>城东赴机场🛫，</strong></p>
<p><strong>城中闹东京🌆，</strong></p>
<p><strong>城西晃京都⛩️，</strong></p>
<p><strong>途经观富士山🗻。</strong></p>
<p><strong>同游漫步，吃本地食物，赏当地景色，一切都很好，有雨有晴天，有白天同赶路，夜间漫步赏烟火。</strong></p>
</blockquote>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202504201815353.JPG" width="400"/ loading="lazy">



<h3 id="1-经典地标与打卡点"><a href="#1-经典地标与打卡点" class="headerlink" title="1. 经典地标与打卡点"></a>1. 经典地标与打卡点</h3><ul>
<li><p>JR 秋叶原属二次元聚集地，周边、手办、相关电子产品等比较多。</p>
</li>
<li><p>涉谷十字路口、原宿竹下通、表参道，浅草寺·雷门</p>
</li>
<li><p>于东京塔 &#x2F; 晴空塔 的顶楼看风景看日落风景，日落时段，仰躺的，任由有风来风去，微风徐徐，看着似是可及的云，想是去抚摸一朵，细细把玩一番；待到天变暗，东京市区的霓虹灯逐渐亮起，伫立俯瞰，感城市之繁华，视听触感均震撼之。 若是出去迷路迟到预期一会，和前台讲一声，亦可登梯上楼，另外买票是需要提前预定的，官网日落票基本秒售罄。</p>
</li>
<li><p>花火大会甚至漂亮壮观，烟花易逝，体验是恒。吸引着很多男男女女、青年老少，在快开始之时，已然换装出发，步行而至。沿河道前行，一路是静谧的乡下，夜逐黑、星星明亮⭐，多见于一家人坐于在小板凳、摇摇椅，或卧于餐布上，一家人吃吃喝喝闹闹，且时不时抬头看着从一处处的绽放烟花🎇。超大烟花时，同样会驻足拍照打卡，于间隙往前行。一路上氛围和感观极佳，十分欣欣然。</p>
<p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2025/202504201836572.jpg" width="45%"/ loading="lazy"> <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2025/202504201836708.jpg" width="45%"/ loading="lazy"></p>
<p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2025/202504201836686.jpg" width="45%"/ loading="lazy"> <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2025/202504201842986.GIF" width="45%"/ loading="lazy"></p>
</li>
</ul>
<h3 id="2-深度文化体验"><a href="#2-深度文化体验" class="headerlink" title="2. 深度文化体验"></a>2. 深度文化体验</h3><ul>
<li><p>明治神宫的樱花、红叶之美，还有柯南等场景巡礼</p>
</li>
<li><p>城市间马路的卫生都很整洁，天空湛蓝，有风时走着会愉快，边走边聊，不知疲倦，口渴停在售卖机，每次换个口味，继续聊天</p>
<p>城市垃圾箱偏少，一个袋子有时兜里揣小半天。7-11连锁店出售热饮食，但不提供座椅，只能站着吃囧。。。</p>
</li>
</ul>
<h3 id="3-美食与夜生活"><a href="#3-美食与夜生活" class="headerlink" title="3. 美食与夜生活"></a>3. 美食与夜生活</h3><ul>
<li>居酒屋串烧、特色拉面店、寿司吧推荐。各有特色，其中拉面有的油稍重，但整体口感还是很棒的，本地小菜品多偏向精致，不一样的味道。另外仅面食算主食，而煎饺、米饭都算是小食，成田点餐是必须点主食，否则不出餐。后方知方觉，看着一人点了三人份的的主食，含泪都吃饱饱饱饱的。</li>
<li>意料之外的住宿酒店附近的提供汤浴，使得行程更加圆满一丝，一点小的心心念念。泡一泡，舒服很多。</li>
<li>新宿歌舞伎町夜游，主街的两排女生，面容自然带笑，倒是自己显得羞涩腼腆，老脸一红。再行数十步至十字路口，伫立看着大屏的牛郎排行榜，颜值都很高，也很赏心悦目。</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2025/202504201824895.jpg" width="45%"/ loading="lazy"> <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2025/202504201825927.png" width="47%"/ loading="lazy"></p>
<h2 id="三、京都篇⛩️"><a href="#三、京都篇⛩️" class="headerlink" title="三、京都篇⛩️"></a>三、京都篇⛩️</h2><h3 id="1-交通切换：新干线体验"><a href="#1-交通切换：新干线体验" class="headerlink" title="1. 交通切换：新干线体验"></a>1. 交通切换：新干线体验</h3><ul>
<li><p>东京 ⇄ 京都的新干线种类，乘车感受偏上旅行巴士的随意，车程费小贵。但一节车厢，仅几人，且还是各国游客偏多；欧美旅行客背的书包真的大，男女都是🥲，还有一个超超大行李箱。如果行李甚大，则需要单独为行李购票，放于单独的车间区域</p>
</li>
<li><p>车内设施可很是干净整洁，乘客也少带来很棒的体验，且途中会经过富士山🗻，开心的拍下</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2025/202504201834572.GIF" width="60%"/ loading="lazy"></li>
</ul>
<h3 id="2-寺社巡礼"><a href="#2-寺社巡礼" class="headerlink" title="2. 寺社巡礼"></a>2. 寺社巡礼</h3><ul>
<li><p>伏见稻荷大社千本鸟居、本地博物馆，上二楼方知是去看了一个中国古诗人的专展，他乡时空上遇到了老乡，属另一个专馆最后一次展览。</p>
</li>
<li><p>清水寺及三年坂、二年坂，去时人多，仅拍个建筑半身，C 想早起再来一趟，大抵偏爱此地；随后我都定好⏰，准备早起了，但知我爱睡懒觉，后也就没起来。甚至贴心，倒是略不好意思，我其实是真的可以起床的，这个点。</p>
</li>
<li><p>金阁寺、银阁寺概览</p>
<p>一步一景，未至看图是一种神往，亲至时亦是一种神奇感觉。</p>
</li>
</ul>
<h3 id="3-岚山·竹林漫步"><a href="#3-岚山·竹林漫步" class="headerlink" title="3. 岚山·竹林漫步"></a>3. 岚山·竹林漫步</h3><ul>
<li>竹林小径、古屋石台阶，咔咔咔拍了些许</li>
<li>多处遇到小火车，似镰仓经典绿皮火车图片，原是真的跑，侧身而过，很近</li>
</ul>
<h3 id="4-京都美食推荐"><a href="#4-京都美食推荐" class="headerlink" title="4. 京都美食推荐"></a>4. 京都美食推荐</h3><ul>
<li>抹茶甜品、豆腐料理、和风怀石，精致的小食物。买了一个抹茶的冰淇凌，味道苦苦的，和预想中口感不一样，，，，有趣。伴手礼选了一些抹茶的，，，</li>
</ul>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2025/202504201822781.jpg" width="100%"/ loading="lazy">

<p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2025/202504201823656.jpg" width="45%"/ loading="lazy"> <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2025/202504201828513.png" width="50%"/ loading="lazy"></p>
<h2 id="四、结语"><a href="#四、结语" class="headerlink" title="四、结语"></a>四、结语</h2><p>本次旅行印象很棒，干净整洁，礼貌，饮食和居住等。与我而言，</p>
<ul>
<li>去看风景的路上、</li>
<li>看风景的路上、</li>
<li>属于景美人美、同行者更美甚</li>
<li>都是最美好的时光回忆</li>
</ul>
]]></content>
      <categories>
        <category>生活 - 闲暇的趣闻</category>
      </categories>
      <tags>
        <tag>旅游</tag>
      </tags>
  </entry>
  <entry>
    <title>为 Windows10 22H2 启用 Microsoft Copilot 功能</title>
    <url>/posts/d591d39e/</url>
    <content><![CDATA[<p><strong>简  述:</strong>  作为 Window 10 22H2 的长期使用者，也开发了一个 OpenAI ChatGPT 的 <a href="https://blog.csdn.net/qq_33154343/article/details/135488438">客户端</a>，但自己还一直没启用 微软的 Copilot，氪！~；今天有空，就给开启，细致体验一下其 UI&#x2F;UX 的交互和功能的程度。然后理论 Win11 开启的话亦是同理。且是免费可以用，不需要加入内测通道之类的。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402021609578.png" width="100%"/ loading="lazy">

<br>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Processor	       12th Gen Intel(R) Core(TM) i7-12850HX   2.10 GHz<br>Installed RAM	32.0 GB (31.7 GB usable)<br>System type	   64-bit operating system, x64-based processor</p>
<p>Edition	             Windows 10 Pro<br>Version	            22H2<br>OS build	          19045.3930<br>Experience	      Windows Feature Experience Pack 1000.19053.1000.0</p>
<br>

<h2 id="启用-Copilot-步骤"><a href="#启用-Copilot-步骤" class="headerlink" title="启用 Copilot 步骤"></a>启用 Copilot 步骤</h2><ul>
<li><strong>地区限制</strong>：目前 Windows Copilot 仅限于美国、北美、英国，以及部分亚洲，南美国家的用户可正常使用（国内目前<strong>无法直接使用</strong></li>
<li><strong>硬件限制</strong>：微软已确认 Windows Copilot 只能在内存为 4GB及以上 ，屏幕分辨率为 720P以上。</li>
<li><strong>网络限制：</strong> 能够访问相关网站</li>
</ul>
<p>截至今日 2024.02.02 ，如下步骤开启是亲测可行的；</p>
<h3 id="开启-Copilot-入口"><a href="#开启-Copilot-入口" class="headerlink" title="开启 Copilot 入口"></a>开启 Copilot 入口</h3><ol>
<li><p><strong>“设置” &gt; “系统” &gt; “关于”</strong>，确保操作系统内部版本号为 Build 19045.3754 (KB5032278)  或更高</p>
<p>若有需要亦可手动下载 <a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB5032278">KB5032278</a> 这个包，实测版本大于即可，没这个 KB 也可以成功。</p>
</li>
<li><p>Github下载 <a href="https://github.com/thebookisclosed/ViVe/releases">ViveTool</a> 并将其解压，用于开启 Windows 设备上启用隐藏的实验性功能。</p>
<p>进入下载目录，管理员执行如下：</p>
<pre class="line-numbers language-none"><code class="language-none">vivetool &#x2F;enable &#x2F;id:46686174,47530616,44755019<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>执行成功提示如下</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402021518406.png" width="100%"/ loading="lazy">
</li>
<li><p>重启系统后。观察 Windows Copilot 出现于右下角通知处？若未出现，也可右键任务栏，看是否有Windows Copilot相关的字样，启用即可。</p>
</li>
<li><p>若是步骤 3 失败，则打开注册表，进入 <code>Computer\HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\Shell\Copilot\BingChat</code> 后，将 IsUserEligible 数值修改为 1，再重复步骤3，即可看到 Copilot 图标</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402021524465.png" width="100%"/ loading="lazy">
</li>
<li><p>开启成功</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402021527371.png" width="90%"/ loading="lazy"></li>
</ol>
<br>

<h3 id="启用-Copilot-功能"><a href="#启用-Copilot-功能" class="headerlink" title="启用 Copilot 功能"></a>启用 Copilot 功能</h3><ol>
<li><p>“Settings - Data &amp; time - Region”，将 “Country or region” 设置为 US；最后本机 “ Language” 设置如下.语言应该不是必须的。</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402021531962.png" width="70%"/ loading="lazy">
</li>
<li><p>必须下载最新版本的 <strong>Edge Beta</strong> 版本，<a href="https://www.microsoft.com/zh-cn/edge/download/insider?form=MA13FJ">Become a Microsoft Edge Insider | Microsoft Edge</a>，安装后可卸载旧的 Edge。此刻再点击，右侧任务栏 Copilot，即可享受。若是想要使用 “文生图” 的功能，需要采用 在 Edge Beta 中登录自己账号，就可以立即在 Edge 中使用 Coplot 功能。</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402021554740.png" width="100%"/ loading="lazy">


</li>
<li><p>最后，也可在系统自带的中使用 Copilot 中，体验使用 AI 带来的生成式的效率和创意。</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402182209854.png" width="100%"/ loading="lazy"></li>
</ol>
<br>

<h2 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a>  欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！</p>
]]></content>
      <categories>
        <category>学习 - Windows</category>
        <category>学习 - AIGC</category>
      </categories>
      <tags>
        <tag>ChatGPT</tag>
      </tags>
  </entry>
  <entry>
    <title>主机信息查询QHostInfo和QNetworkInterface查询IP等</title>
    <url>/posts/b79e1b5c/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  了解主机信息查询<code>QHostInfo</code>和<code>QNetworkInterface</code>查询IP等函数接口的使用，书写一个简单地例子；然后写了一个小的 <strong>Qt</strong>例子，用来实现和验证它的空间的一些属性和功能的用法。</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191225_214953_mark.png"/ loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><p><strong>编程环境：</strong>  <code>MacOS 10.14.6 (18G103)</code>   <strong>编程软件：</strong> <code>Qt 5.9.8</code>， <code>Qt Creator 4.8.2</code></p>
<br>

<h2 id="网络相关知识："><a href="#网络相关知识：" class="headerlink" title="网络相关知识："></a>网络相关知识：</h2><p>终于讲解到了我之前就心心恋恋的网络模块的知识了，有几个点一直是很想涉及的知识模块👏👏👏；一个是网络，另外一个就是多线程的相关知识；柑橘🍊现在很多电脑💻的应用程序都会使用到这两个部分的知识模块，再➕一个数据库📚就是&#x3D;&#x3D;App？  成为一个独立的开发者，可以写一个自己喜欢的exe或者app，慢慢打磨；人生易短，做自己喜欢的事情，💰不￥$$💰的都是无所谓的。谁都有离开的一天，die是不可避免的，可我们如何证明自己来这这里玩过几十载呢？总的留下一些什么的痕迹吧~</p>
<p><strong>或许朝闻道，夕死可矣~       ???</strong></p>
<p>来自一个<code>12-25</code>🎄🎄🎄🎄：夜间没人约会的+上班的孤独狗 ➜ 🐶👨 的一篇博客📝</p>
<p>有点跑偏了：</p>
<p>网络模块的相关知识，主要就是七层协议原理 和它们衍生出来的网络协议，有N多种，其中经过时间的检验和筛选，现在常用的就是<code>TCP/IP</code>协议族，展开就是TCP，UDP，HTTP，HTTPS，ftp，socket等等</p>
<h3 id="网络相关："><a href="#网络相关：" class="headerlink" title="网络相关："></a>网络相关：</h3><p>建议开始之前，先问问自己如下问题，自己能够区分概念是什么，自己懂了吗❓❓❓</p>
<ul>
<li>mac地址</li>
<li>IP地址</li>
<li>port端口</li>
<li>主机名</li>
<li>子网掩码，A&#x2F;B&#x2F;C&#x2F;D四类地址</li>
<li>数据包？ 报文？自定义协议？</li>
<li>通信协议有哪些？</li>
<li>三次握手🤝，四次挥手👋？</li>
<li>TCP&#x2F;UDP&#x2F;Http区别</li>
<li>数据包经过路由器如何转到下一台设备？</li>
<li>一款程序是怎么在局域网之间通信的？</li>
<li>一款程序是怎么在互联网之间通信的？</li>
</ul>
<p>关于网络更底层的协议和实现的原理的相关学习知识，可以多看看👀下面这两个视频链接，我就是之前学习的此mooc网络课，觉得讲解的很棒，故此口口相传的推荐出来：</p>
<ul>
<li><p><strong>华南理工大学 计算机网络 MOOC</strong> </p>
<p>  <a href="https://www.bilibili.com/video/av40766904">https://www.bilibili.com/video/av40766904</a></p>
</li>
<li><p>**州电子科技大学 计算机网络自学笔记 MOOC  **<a href="https://www.bilibili.com/video/av40761275">https://www.bilibili.com/video/av40761275</a></p>
</li>
</ul>
<br>

<h2 id="QHostInfo属性："><a href="#QHostInfo属性：" class="headerlink" title="QHostInfo属性："></a>QHostInfo属性：</h2><p>得益于<code>Qt</code>强大的封装库，上面的很多细节都不用深究，只需要创建一两个对象，然后调用他们的函数，就可以获得他们的网络相关的信息；</p>
<p><code>QHostInfo</code>类可以通过静态函数localHostName()获取 <strong>本机的主机名</strong> 再通过fromName()函数可以获取到 <strong>IP地址</strong>，而lookupHost()则是通过异步方式查询到这个主机的IP地址。</p>
<table>
<thead>
<tr>
<th align="center">类别</th>
<th align="left">函数原型</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">公共函数</td>
<td align="left">QList<QHostAddress> addresses()</td>
<td align="left">返回与hostName()关联的IP地址列表</td>
</tr>
<tr>
<td align="center">公共函数</td>
<td align="left">HostInfoError error()</td>
<td align="left">如果主机查找失败，返回失败类型</td>
</tr>
<tr>
<td align="center">公共函数</td>
<td align="left">QString errorString()</td>
<td align="left">如果主机查找失败，返回错误描述字符串</td>
</tr>
<tr>
<td align="center">公共函数</td>
<td align="left">QString hostName()</td>
<td align="left">返回通过IP查找的主机名称</td>
</tr>
<tr>
<td align="center">公共函数</td>
<td align="left">int lookupld()</td>
<td align="left">返回本次查找的id</td>
</tr>
<tr>
<td align="center">静态函数</td>
<td align="left">void abortHostLookup(int id)</td>
<td align="left">中断主机查找</td>
</tr>
<tr>
<td align="center">静态函数</td>
<td align="left">QHostInfo fromName(QString &amp;name)</td>
<td align="left">返回指定主机名IP的地址</td>
</tr>
<tr>
<td align="center">静态函数</td>
<td align="left">QString localDomainName()</td>
<td align="left">返回本机DNS域名</td>
</tr>
<tr>
<td align="center">静态函数</td>
<td align="left">QString localHostName()</td>
<td align="left">返回本机主机名</td>
</tr>
<tr>
<td align="center">静态函数</td>
<td align="left">int lookupHost(QString byname, QObject *receiver, char *member)</td>
<td align="left">以异步方式根据主机名查找主机的IP地址，并返回一个表示本次查找的ID，可用于abortHostLookup()</td>
</tr>
</tbody></table>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//QHostInfo 获取主机信息</span>
    QString hostName <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token double-colon punctuation">::</span><span class="token function">localHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"本地主机名称:"</span> <span class="token operator">+</span> hostName <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    QHostInfo hostInfo <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token double-colon punctuation">::</span><span class="token function">fromName</span><span class="token punctuation">(</span>hostName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QList<span class="token operator">&lt;</span>QHostAddress<span class="token operator">></span> list <span class="token operator">=</span> hostInfo<span class="token punctuation">.</span><span class="token function">addresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token function">foreach</span> <span class="token punctuation">(</span>QHostAddress var<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">bool</span> bIPv4 <span class="token operator">=</span> ui<span class="token operator">-></span>checkBox<span class="token operator">-></span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>bIPv4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//只显示 IPv4</span>
            bIPv4 <span class="token operator">=</span> QAbstractSocket<span class="token double-colon punctuation">::</span>IPv4Protocol <span class="token operator">==</span> var<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            bIPv4 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token comment">//显示 IPv4 和 IPv6</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>bIPv4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"协议："</span> <span class="token operator">+</span> <span class="token function">protocolName</span><span class="token punctuation">(</span>var<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"本机IP地址"</span> <span class="token operator">+</span> var<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="QNetworkInterface属性："><a href="#QNetworkInterface属性：" class="headerlink" title="QNetworkInterface属性："></a>QNetworkInterface属性：</h2><p><code>QNetworkInterface</code>类是可以获得应用程序的主机的所有IP地址和网络地址接口的列表。静态函数allInterfaces()返回主机上所有网络接口的列表，一个网络接口可能包含多个IP地址，每个IP地址与地址掩码或广播地址的关联；当然也有一个简版的获取函数allAddresses()可以获取到，但是不会返回子网掩码和广播的IP地址。</p>
<table>
<thead>
<tr>
<th>类别</th>
<th>函数原型</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>公共函数</td>
<td>QList<QNetworkAddress Entry> addressEntries()</td>
<td>返回该网络接口（包含子网掩码+广播地址）的IP地址列表</td>
</tr>
<tr>
<td>公共函数</td>
<td>QString hardwareAddress()</td>
<td>返回该接口的低级硬件地址，以太网里就是MAC地址</td>
</tr>
<tr>
<td>公共函数</td>
<td>QString humanReadableName()</td>
<td>返回可以读懂的接口名称没如果名称不确定，得到的就是name()的返回值</td>
</tr>
<tr>
<td>公共函数</td>
<td>bool isValid()</td>
<td>如果接口信息有效就返回true</td>
</tr>
<tr>
<td>公共函数</td>
<td>QString name()</td>
<td>返回主机上所有IP地址的列表</td>
</tr>
<tr>
<td>静态函数</td>
<td>QList<QHostAddress> allAddresses()</td>
<td>返回主机上面的所有IP地址的列表</td>
</tr>
<tr>
<td>静态函数</td>
<td>QList<QNetworklnterface> allInterfaces()</td>
<td>返回主机上面的所有接口的网络列表</td>
</tr>
</tbody></table>
<br>

<h2 id="QAbstractSocket属性："><a href="#QAbstractSocket属性：" class="headerlink" title="QAbstractSocket属性："></a>QAbstractSocket属性：</h2><p><strong>QAbstractSocket::NetworkLayerProtocol 枚举</strong>:</p>
<p>该枚举描述了Qt中使用的网络层协议值。</p>
<table>
<thead>
<tr>
<th>Constant</th>
<th>Value</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>QAbstractSocket::IPv4Protocol</td>
<td>0</td>
<td>IPv4</td>
</tr>
<tr>
<td>QAbstractSocket::IPv6Protocol</td>
<td>1</td>
<td>IPv6</td>
</tr>
<tr>
<td>QAbstractSocket::AnyIPProtocol</td>
<td>2</td>
<td>Either IPv4 or IPv6</td>
</tr>
<tr>
<td>QAbstractSocket::UnknownNetworkLayerProtocol</td>
<td>-1</td>
<td>Other than IPv4 and IPv6</td>
</tr>
</tbody></table>
<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>这里上一张运行效果图：</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191216_201205_GIF.gif"/ loading="lazy">

<br>

<h2 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h2><p>其中核心部分的源码，重点和一些难点以及需要注意的一些地方，贴出来如下</p>
<p><strong>其中.h头文件如下：</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXQHOSTINFO_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXQHOSTINFO_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QWidget></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QAbstractSocket></span></span>
<span class="token keyword">class</span> <span class="token class-name">QHostInfo</span><span class="token punctuation">;</span>


<span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span>
<span class="token keyword">class</span> <span class="token class-name">ExQHostInfo</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">ExQHostInfo</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QWidget</span></span>
<span class="token punctuation">&#123;</span>
    Q_OBJECT

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">ExQHostInfo</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">ExQHostInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    QString <span class="token function">protocolName</span><span class="token punctuation">(</span>QAbstractSocket<span class="token double-colon punctuation">::</span>NetworkLayerProtocol protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//通过协议类型返回协议名称</span>

<span class="token keyword">private</span> slots<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">on_btnGetHostInfo_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//QHostInfo查询主机名和IP</span>
    <span class="token keyword">void</span> <span class="token function">on_btnAllAddresses_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//QNetworkInterface::allAddresses()</span>
    <span class="token keyword">void</span> <span class="token function">on_btnAllInterfaces_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//QNetworkInterface::allInterfaces()</span>
    <span class="token keyword">void</span> <span class="token function">on_btnFindIP_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//QHostInfo查询左侧域名IP地址</span>
    <span class="token keyword">void</span> <span class="token function">on_btnClean_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//清空文本框信息</span>

    <span class="token keyword">void</span> <span class="token function">onLookedUpHostInfo</span><span class="token punctuation">(</span><span class="token keyword">const</span> QHostInfo<span class="token operator">&amp;</span> host<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//查询主机信息的槽函数</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    Ui<span class="token double-colon punctuation">::</span>ExQHostInfo <span class="token operator">*</span>ui<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXQHOSTINFO_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>其中.cpp源文件如下：</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExQHostInfo.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExQHostInfo.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QHostInfo></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QNetworkInterface></span></span>

<span class="token class-name">ExQHostInfo</span><span class="token double-colon punctuation">::</span><span class="token function">ExQHostInfo</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>
    <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token double-colon punctuation">::</span>ExQHostInfo<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token string">"QHostInfo/QNetworkInterface查询主机网络状态："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">ExQHostInfo</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">ExQHostInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//通过协议类型返回协议名称</span>
QString <span class="token class-name">ExQHostInfo</span><span class="token double-colon punctuation">::</span><span class="token function">protocolName</span><span class="token punctuation">(</span>QAbstractSocket<span class="token double-colon punctuation">::</span>NetworkLayerProtocol protocol<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>protocol<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>IPv4Protocol<span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token string">"IPv4 Protocol"</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>IPv6Protocol<span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token string">"IPv6 Protocol"</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> QAbstractSocket<span class="token double-colon punctuation">::</span>AnyIPProtocol<span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token string">"Any IP Protocol"</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token string">"Unknow Network Layer Protocol"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//QHostInfo 获取主机信息</span>
<span class="token keyword">void</span> <span class="token class-name">ExQHostInfo</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnGetHostInfo_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString hostName <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token double-colon punctuation">::</span><span class="token function">localHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"本地主机名称:"</span> <span class="token operator">+</span> hostName <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    QHostInfo hostInfo <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token double-colon punctuation">::</span><span class="token function">fromName</span><span class="token punctuation">(</span>hostName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QList<span class="token operator">&lt;</span>QHostAddress<span class="token operator">></span> list <span class="token operator">=</span> hostInfo<span class="token punctuation">.</span><span class="token function">addresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token function">foreach</span> <span class="token punctuation">(</span>QHostAddress var<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">bool</span> bIPv4 <span class="token operator">=</span> ui<span class="token operator">-></span>checkBox<span class="token operator">-></span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>bIPv4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//只显示 IPv4</span>
            bIPv4 <span class="token operator">=</span> QAbstractSocket<span class="token double-colon punctuation">::</span>IPv4Protocol <span class="token operator">==</span> var<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            bIPv4 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token comment">//显示 IPv4 和 IPv6</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>bIPv4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"协议："</span> <span class="token operator">+</span> <span class="token function">protocolName</span><span class="token punctuation">(</span>var<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"本机IP地址"</span> <span class="token operator">+</span> var<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExQHostInfo</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnAllAddresses_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QList<span class="token operator">&lt;</span>QHostAddress<span class="token operator">></span> list <span class="token operator">=</span> <span class="token class-name">QNetworkInterface</span><span class="token double-colon punctuation">::</span><span class="token function">allAddresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token function">foreach</span> <span class="token punctuation">(</span>QHostAddress var<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">bool</span> bIPv4 <span class="token operator">=</span> ui<span class="token operator">-></span>checkBox<span class="token operator">-></span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>bIPv4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//只显示 IPv4</span>
            bIPv4 <span class="token operator">=</span> QAbstractSocket<span class="token double-colon punctuation">::</span>IPv4Protocol <span class="token operator">==</span> var<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            bIPv4 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token comment">//显示 IPv4 和 IPv6</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>bIPv4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"协议："</span> <span class="token operator">+</span> <span class="token function">protocolName</span><span class="token punctuation">(</span>var<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"本机IP地址"</span> <span class="token operator">+</span> var<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExQHostInfo</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnAllInterfaces_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QList<span class="token operator">&lt;</span>QNetworkInterface<span class="token operator">></span> list <span class="token operator">=</span> <span class="token class-name">QNetworkInterface</span><span class="token double-colon punctuation">::</span><span class="token function">allInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token function">foreach</span> <span class="token punctuation">(</span>QNetworkInterface var<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>var<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>

        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"设备名称："</span> <span class="token operator">+</span> var<span class="token punctuation">.</span><span class="token function">humanReadableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"硬件地址："</span> <span class="token operator">+</span> var<span class="token punctuation">.</span><span class="token function">hardwareAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        QList<span class="token operator">&lt;</span>QNetworkAddressEntry<span class="token operator">></span> entry <span class="token operator">=</span> var<span class="token punctuation">.</span><span class="token function">addressEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">foreach</span> <span class="token punctuation">(</span>QNetworkAddressEntry ent<span class="token punctuation">,</span> entry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"  IP 地址："</span> <span class="token operator">+</span> ent<span class="token punctuation">.</span><span class="token function">ip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"  子网掩码："</span> <span class="token operator">+</span> ent<span class="token punctuation">.</span><span class="token function">netmask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"  子网广播："</span> <span class="token operator">+</span> ent<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExQHostInfo</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnFindIP_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString hostName <span class="token operator">=</span> ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//域名</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"正在查找域名的服务器的主机信息："</span> <span class="token operator">+</span> hostName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">QHostInfo</span><span class="token double-colon punctuation">::</span><span class="token function">lookupHost</span><span class="token punctuation">(</span>hostName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onLookedUpHostInfo</span><span class="token punctuation">(</span>QHostInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExQHostInfo</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnClean_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//查询主机信息的槽函数</span>
<span class="token keyword">void</span> <span class="token class-name">ExQHostInfo</span><span class="token double-colon punctuation">::</span><span class="token function">onLookedUpHostInfo</span><span class="token punctuation">(</span><span class="token keyword">const</span> QHostInfo <span class="token operator">&amp;</span>host<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QList<span class="token operator">&lt;</span>QHostAddress<span class="token operator">></span> list <span class="token operator">=</span> host<span class="token punctuation">.</span><span class="token function">addresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        QHostAddress host <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">bool</span> bIpv4 <span class="token operator">=</span> ui<span class="token operator">-></span>checkBox<span class="token operator">-></span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//只显示IPv4</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>bIpv4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//只显示 IPv4</span>
            bIpv4 <span class="token operator">=</span> QAbstractSocket<span class="token double-colon punctuation">::</span>IPv4Protocol <span class="token operator">==</span> host<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            bIpv4 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token comment">//显示 IPv4 和 IPv6</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>bIpv4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"协议："</span> <span class="token operator">+</span> <span class="token function">protocolName</span><span class="token punctuation">(</span>host<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>host<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br>

<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a> 【QtQHostInfoEx】</p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>乱码原因产生和解决方案</title>
    <url>/posts/aaa00ace/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　<strong>“乱码”</strong> ， 应该是很多人都遇到过的问题。以前总是网上简单搜一下、然后设置一下，然后重启生效，就没有去管了。 对其乱码原理有一些模糊，但是实则是不知道，因为我给其 ta 人解释清楚。直到这次再次遇到了乱码的问题，再一遍的查阅资料之后，，，后面直接解决了。 弄清楚原理之后，就感觉很多写博客都很累赘，但是又没有写清楚。遂自己动手来一篇，希望可以达到言简意赅。</p>
<blockquote>
<p>以后博客会写的尽量精简，，，</p>
</blockquote>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="故事背景："><a href="#故事背景：" class="headerlink" title="故事背景："></a>故事背景：</h2><p>将所有的软件和资料，全部从 Mac 迁移到 Win 的时候，发现了 <code>git bash</code> 出现了乱码，按照网上只有解决方案、但是没有原理解释的博文一通乱试，无果。于是决定自己自己弄清楚原理，然后自己成功的解决了： <a href="https://xmuli.blog.csdn.net/article/details/109567337">Git Bash 在win10 显示中文为数字的解决方案</a></p>
<br>

<h2 id="乱码原因："><a href="#乱码原因：" class="headerlink" title="乱码原因："></a>乱码原因：</h2><h3 id="用一个小例子开头："><a href="#用一个小例子开头：" class="headerlink" title="用一个小例子开头："></a>用一个小例子开头：</h3><p>乱码产生的原因，用一个具体的例子解释下： 再文本编辑器中，随手写下一段话，然后按照每 4 个字节大小保存一个字符，将其翻译为 4 * 8 位 个 0 &#x2F; 1 二进制，保存到内存里面，当按下“保存”的是时候，这一串二进制就存在了硬盘里面； 但在另外一个电脑中打开这个文本文件， 然后将这一串二进制从硬盘读取、加载到内存，然后按照每 3 字节的顺序，将其翻译为对应的字符，最后发现出现全文都是乱码。</p>
<p>这个例子，感觉可以比较的理解乱码原因（虽然不全面、不正确、但是却可以以点破面，便于理解乱码的原因）。</p>
<br>

<h3 id="乱码历史原因："><a href="#乱码历史原因：" class="headerlink" title="乱码历史原因："></a>乱码历史原因：</h3><blockquote>
<p>Linux： 一些皆文件</p>
</blockquote>
<p>这句话，对于整个计算机来说，都是一样的，所有的文件类型（文本信息、照片、音乐、视频等）都只是 0&#x2F;1 的二进制段。而将这一段纯 01010101…. 的二进制翻译为人可以看得懂的字符串信息，就叫解码；将人能看得懂的字符串保存为纯二进制，按照某种关系，这就是编码后保存。</p>
<br>

<p>计算机最开始只有少数的字母和符号，将其按照一张表格，将每一个字母或者符号找到一个对应的数字，然后以二进制段的形式保存（这个二进制段的长度暂定于 一个字节长度，恰好 128 个），这个映射关系被称为 <code>ASCII 编码</code>。后来随着其他各国的本地语言加入，就扩展这个映射表，前面的128 个 “字母或符号”，还是按照一个字节的长度，还是这个顺序。然后从 129 开始，就按照本国的语言，创建“某汉字”对应“某数字”，然后“某数字”保存到 x 字节中；其他国家也是这样，不过是将 “某汉字” 替换为“某拉丁文”、“某西欧文”等。然后这个 x 字节，随着时间的多次改版，也由2 –&gt; 3 –&gt; 4 –&gt; 2~~4 个字节长度。</p>
<blockquote>
<p>中国大陆常用编码：简体中文， <code>GBK</code></p>
<p>台湾常用：繁体中文，  <code>BIG5</code>  （是指代当时台湾五个著名的中文厂商的名称：大千、倚天、國喬、零壹、精業）</p>
</blockquote>
<br>

<p>这个问题只是解决了本国语言和英文。当时面对另外一个场景，就傻眼了：一篇文献中，同时要引用中文、西欧文、拉丁文、小语种的文字呢？？？ 于是在 20 世纪  80 年代末，大家坐在一起，决定讨论下这个事情，于是 Unicode 统一码联盟成立。 于 1991.10 发布了 Unicode 1.0, 到了 2012.1.31，发布到了 Unicode  6.1。</p>
<p>需要注意的是：</p>
<ul>
<li><p>Unicode 是「字符集」，字符集：为每一个「字符」分配一个唯一的 ID（学名为码位 &#x2F; 码点 &#x2F; Code Point）；</p>
</li>
<li><p>UTF-8 是「编码规则」, 编码规则：将「码位」转换为字节序列的规则（编码&#x2F;解码 可以理解为 加密&#x2F;解密 的过程）；</p>
</li>
</ul>
<br>

<p>在 Unicode 尚未成熟的年代， Windows是使用各个国家的多 字节编码，来支持每个国家的语言的。 在 巨硬的 WinNT 发布之后，所有的 API 改用了 UTF-16 编码方式。</p>
<br>

<blockquote>
<p>Unicode 编码开始只有65536个字符空间。</p>
<p>UCS-2： 恒定用 2 字节表示所有字符。</p>
<p>UCS-4（或UTF-32）： 恒定用 4 字节表示所有字符</p>
<p>UTF-16：  当Unicode字符超过65536之后，参考「多字节编码」，通过双字节扩展四 字节的方式表示所有字符</p>
<p>UTF-8：  每一个字符按规则编码 为1～4任一字节组合。中文通常为3字节长。 </p>
<p>UTF-8 + bom： 和 UTF-8 的去区别就是，文件开头有 U+FEFF；</p>
</blockquote>
<br>

<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>感觉就是一句话，用什么 [编码规则] 保存为何种形式的二进制段，就用同样的[编码规则]来读取。自然就不会出现乱码了。</p>
<br>

<h2 id="字符保存等价形式："><a href="#字符保存等价形式：" class="headerlink" title="字符保存等价形式："></a>字符保存等价形式：</h2><p>当然，自己也可以测试一下</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 因此以下几行等价（以 UTF-8编码保存 C++源文件）：</span>
<span class="token keyword">const</span> <span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"最喜欢C++了！"</span><span class="token punctuation">;</span> 
<span class="token keyword">const</span> <span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\xe6\x9c\x80\xe5\x96\x9c\xe6\xac\xa2\x43\x2b\x2b\xe4\xba\x86\xef\xbc\x81"</span><span class="token punctuation">;</span> 
<span class="token keyword">const</span> <span class="token keyword">char</span> s3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0xe6</span><span class="token punctuation">,</span> <span class="token number">0x9c</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xe5</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0x9c</span><span class="token punctuation">,</span> <span class="token number">0xe6</span><span class="token punctuation">,</span> <span class="token number">0xac</span><span class="token punctuation">,</span> <span class="token number">0xa2</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x2b</span><span class="token punctuation">,</span> <span class="token number">0x2b</span><span class="token punctuation">,</span> <span class="token number">0xe4</span><span class="token punctuation">,</span> <span class="token number">0xba</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0xef</span><span class="token punctuation">,</span> <span class="token number">0xbc</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p><strong>参考：</strong></p>
<ul>
<li><a href="https://xmuli.blog.csdn.net/article/details/109565311">位（bit）、字节(Byte)、MB(兆位)之间的换算关系</a></li>
<li><a href="https://www.cnblogs.com/flyingeagle/articles/9825302.html">UTF-8与UTF-8 BOM</a></li>
<li><a href="https://www.youtube.com/watch?v=t9nKPJDITNw">中文乱码形成的原因</a></li>
<li>《从此乱码是路人.pdf  平芜泫  2012 年 09 月》 </li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/99617767">输出乱码原因：古文码、口字码、符号码、问号码、棍拷码</a></li>
<li><a href="https://www.zhihu.com/question/23374078">Unicode 和 UTF-8 有什么区别？</a></li>
</ul>
<br>

<h3 id="系列地址："><a href="#系列地址：" class="headerlink" title="系列地址："></a>系列地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a></p>
<p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 QT &#x2F; DTK 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - 底层兼架构</category>
      </categories>
      <tags>
        <tag>乱码</tag>
      </tags>
  </entry>
  <entry>
    <title>人的一生七八十年，到底该如何度过？</title>
    <url>/posts/b7a609d6/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　<strong>二十岁的所困惑所思考：</strong> 人的一生七八十年，到底该如何度过？入社会之前又该如何准备？</p>
<span id="more"></span>



<p>​		二十多岁的困惑有很多，先从比较宏观的方面作为切入点。此前每每夜深人静，我经常会思考：<strong>人的一生七八十年，到底该怎么样活度过？怎么样度过或许自己才会没有遗憾？</strong>这个问题，直到后来才清晰了起来。</p>
<br>

<p>​		<strong>如何拥有自己独立的意识呢？</strong>上大学之前，一切的都是按部就班，两耳不闻窗外事那种，生活枯燥而又无趣。但是上了大学后，最大的收获是给了我很多时间去思考，开始感受大学这个小的象牙塔，以及它里面的规则。第一年，每一门课都是认真的听老师授课，虽然学习末期考试，所有学科的成绩都是85&#x2F;90+，与我分数相似高的只有一两人。但是学院多数人基本没怎么听课(部分基本没听过一节讲)，但是也都75&#x2F;80+，我感觉到了有点气。为什么我花费了大把时间和去做课后习题，和大家分数难以拉开差距呢？并且，我发现在只需要及格就过，<strong>大学的分数好像没有什么重量级的意义。</strong></p>
<br>

<p>​		那是我第一次开始思考学习以外的问题，个人意识开始萌芽。<strong>发现所有科目都高强度的学习，是很吃力不讨好的一件事情。关键是一件完全没有必要的事情，于是就只学习和本专业关系比较紧密，和感趣的课程，其它闲杂课程全部划水可以及格即可。</strong>人生此阶段的学习包袱丢掉了一大包。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200318_223754.png" width="30%"/ loading="lazy">

<br>

<p>​		<strong>我开始思考自己的兴趣和爱好，我在大学剩下三年应该做一些什么事情？</strong>我喜欢古风古诗词，传统学术的道与技，听带戏腔的网易云歌曲，我向往沉醉于互联网传奇大佬的神话。想要为大四那年毕业，实习找一份薪水不错的编程工作。于是去图书馆借阅了两本本上几十年前一位台湾老学究写的《论语别裁》，自购《浪潮之巅》《目送》等，报名了一个编程培训班，闲暇之余，听歌逛校门前的一个湖，那会还觉着有挺大。</p>
<br>

<p>​		<strong>从书籍中，</strong>在看古论语今新解意中，个人三观正确的框架有了基础的搭建，了解了互联网巨头公司百年流传沉浮和各自的转型应对，还有了一点对家庭情亲母爱的那种理解，附上了一点点的小文艺；还有我的编程语言，也开始入门学习打基础；和朋友一起讨论学习和聚餐也给自己生活带一抹又一抹的彩色。所有行为为两年后实习，找一份待遇较高的实习，回校答辩时候能够和同学谈起待遇之时，满足一下心理，能够嘚瑟一下打下基础，为步入社会走技术人员路线埋下伏笔，万一某一天变成了技术大佬呢？</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200318_223736.png" width="35%"/ loading="lazy">

<br>

<p>​		<strong>工作初，如何能够在工作之外的时间给自己充电？有时间冲突怎么破？</strong> 得益于公司的早九晚六，周末双休，能够让我在晚上继续学习新的知识，和思考很多新的人生困惑和无聊的问题；也得益于公司有开源社区，有着良好的沟通氛围。</p>
<p>​		<strong>想到人生，不管财富积累多少，外貌差异不想尽同，都约七八十年度过一生，该如何度过自己的一生呢？</strong>才不愧于来这个时间驻足停留看看美丽世间。或有钱于沉醉于物质享受，纸醉金迷，享受人间；或贫困潦倒，繁琐于家中鸡毛蒜皮小事；或彻夜实验室专心科研；或叛逆转向自我封闭；或在底层奋斗拼搏尝试跃进上层社会，至少尝试过；或亦或是白嫖完文章不点赞；亦或是我没见过的一种方式来度过一生。</p>
<p>​		<strong>这里我已经找了到让我开心的事情，参与 github 开源项目，提交贡献。</strong>可以增进技术，体验跨地域和陌生人组队，提高自己的影响力， 提供稳定可靠的软件给使用者用，让他们开心。使用技术，让科技造福社会。（若是不懂，此相当于义务开发项目，助人乐己，且全凭兴趣做自己喜欢的事情，还可以推荐社会进步）</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/IMG_12843.GIF" width="20%"/ loading="lazy">

<br>

<p>​		<strong>或许你暂时还是不能够找到的爱好，来度过人生一个大阶段的事情？</strong>你可以将<strong>自己兴趣 + 专业 + 预想的生活 + 你会感到开心 + 薪酬</strong> (没它不能维持生活)，按照这个公式找到你所想要的生活方式，度过一生的某一阶段。若是遇到了对某件事强烈的心动和想参与，请忽略前文，直接去干；若是尝试发觉不对，后期还可以随着自己的规划去调整。人生虽苦短，却不乏精彩甜甜。</p>
<p>​		也可看一些非技术类的书籍，感受一下社会的脉搏与跳动，观看社会百态的一角落。尝试理解每一件事件背后深层次的原因。思路跳跃，隔段时间再想这个问题？早晚会发现新大陆。</p>
]]></content>
      <categories>
        <category>生活 - 闲暇的趣闻</category>
      </categories>
      <tags>
        <tag>偶然乐趣</tag>
      </tags>
  </entry>
  <entry>
    <title>人间烟火-藕汤篇</title>
    <url>/posts/5a16a940/</url>
    <content><![CDATA[<p>​	藕汤，是小时候的记忆里的下雪天的火炉子，黑漆漆的蜂窝煤上跳跃着红红的🔥；上面压着一厚重的大瓦罐，随着奶奶一堆排骨和藕块加入到里面，再添水，盖上盖；地下的通风口页仅留对准卡口的小缝隙；以保证长时间的不熄，过了一夜后，端着冒着白气的一碗给我~。  </p>
<p>​	于是乎此记忆就永远被定格到了这里，不消散。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><strong>本文初发于 “<a href="https://xmuli.tech/">偕臧的小站</a>“，同步转载于此。</strong></p>
</blockquote>
<br>

<p>​	只记得那一年的大雪，落得屋子庭院和四周都是白茫茫的一片，兴奋的趴着看向窗外，大雪飘零，一直持续着；厨房的瓦罐藕汤在火炉子上发出嘶嘶的声音~~。以及奶奶多次前去换煤和加水的背影，构成了小时候家的部分回忆。</p>
<p>​	后略年长，一直不偏好喜欢喝汤，即使藕汤亦是如此。可毕业工作一年后，天逐渐冷、哈着气，生出白雾~。</p>
<p>​	忽然一日开始想和藕汤了，开始想念我的奶奶了。再后来后续的一段时间，愈加的特别的想要去喝藕汤，或是想要尝一下其中滋味、滋补一下身体；亦或许是在想家和家人。</p>
<p>​	独一份的藕汤乡愁，是回忆小时候奶奶的藕汤，亦是回忆小时候的无忧无虑。遂周末抽空就满大武汉的的去探店–专职去寻找藕汤，当然，也有其它美食，但在其它篇中再书写。</p>
<br>

<hr>
<p><font color=#008000><strong>燕子煨汤馆</strong></font></p>
<p>​	武汉的一家小店，在武汉的中心老城区，依稀记得老板有两家店铺，相距不远。但去的最多、也是最频繁的是下面店铺，得单独开车一个多小时，只为了一碗十几元的藕汤。</p>
<p>​	连续的两个月，去了约四、五次，中间没去的就是穿插去探其它店铺的藕汤了。巧合的是，每次去都是安利一个人陪同我去（多年的发小同学、熟识的漂亮的小仙女、工位旁的好基友等），只为分享美食与这份快乐。</p>
<p>​	使用小时候印象中的火炉子和蜂窝煤慢慢熬出来的汤，随着汤干再加水；最后出来的汤清淡、入口润后、带着淡淡葱花香、以及入味的排骨味、每一口都是回味无穷（<strong>清、香、淡、暖</strong>）；最后轻咬一口粉藕，牙齿还未相碰，口中藕块便已成两瓣；细细咀嚼入喉，一股丝滑的温暖入胃。除了舒适惬意之外，就便是回味无穷。虽然去途远、但属实值得。且因个人喜好此清淡但入味的汤、故甚是推荐，此汤入口极佳，感觉灵魂都会汤（水）给滋补修复了。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/QQ%E5%9B%BE%E7%89%8720210928013457.gif" width="45%"/ loading="lazy">

<br>

<hr>
<p><font color=#008000><strong>爱喝汤</strong></font></p>
<p>​	此店铺相距商家不远、相隔几站即到；记得也是在老城区中间窜梭、最后走过一转角落、右转后径前行直数十余步，即可到门口。</p>
<p>​	其老板（亦是厨师，记得好像师承小桃园）一手鸡汤已经炉火纯青，其藕汤也独具一格、意料之外的是可以其它配料等（如粉条、年糕等，记得此类有很多），随喜好添加，甚是惊喜。和上一家对比，其味道明显有不同风格。</p>
<p>​	此处藕汤、色泽偏向乳白，带有油星点缀，且久置一会，其上便会浮上薄薄一层黄油。整体味道略偏向甜，记忆中里面还有一丝鸡汤的味道（老板偶尔也会将鸡骨汤作为藕汤的汤底）。其藕也是粉藕、但浓汤带微油，入喉的感觉为 <strong>甜、鲜、油香</strong>。最后价格也不贵，越 20 出头。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/%E8%97%95%E6%B1%A4IMG_0830.JPG" width="43%"/ loading="lazy">

<br>

<hr>
<p><font color=#008000><strong>董厨煨汤馆</strong></font></p>
<p>​	此店铺亦是相隔一条街，每次都是先遇到此店铺，再前行，才到上面两家。也是去过的藕汤数家中店铺面中最大的一家。记得第一次去的时候，中午 12 点才出发，最后抵达已近 14 点，进店，告示方知营业时间 11：00-14：00 和 16：00-忘了。刚好过点，但却是一路饿着肚子和专程前来来的，难忍，故去其其他家。</p>
<p>​	后再次单独前来，掐着饭点来的，得以满足。记得生意很好，人多且没位置，不愿久等；推荐下与一阿姨等人拼桌之，后意外的与之交谈甚欢、同是专门为探店藕汤、也同是希望想要找到一份脆藕的藕汤。每个店有每个店的特色，记得这里的的价格略贵七十多；点的是招牌的藕汤，等待，上汤，期待的搓搓手，最后上来的分量确实很足（当时两人都没吃完一份，才吃了 1&#x2F;2）。</p>
<p>​	印象里面，油很重、且有大骨头，有吮吸骨头之快感。整体影响比较偏向油腻，应该是适合多人一起来，再点数个青菜、和点心之类，汤为主菜。一群人共同食之，应该会很佳。其藕亦是粉藕，汤的味道和整体感觉为 <strong>厚油、量大、鼾、略甜、大骨头吮吸的快乐</strong> 。像本次独点一藕汤（量也大），重油之下缺青菜来压油腻感，几勺舀下去便已经饱了；亦或是与我食偏好清淡（但入味）有关。但店铺其食客众多，相比亦是有其出彩之处，只是此来匆匆一尝，还未曾被我发现罢了。后打包回去，发现此藕汤用来泡饭，味道倒是不错。开心~~</p>
<p>​	至于对应的汤图暂没找到，好像被误删了<del>（相册翻找了两遍未发现）</del>。</p>
<br>

<hr>
<p>​	在武汉探店（藕汤系类）中，发现均为粉藕、可幼时的记忆和舌头的味蕾告诉我，自己更想吃到脆藕的藕汤，后续亦会持续探店，希望会有所发现，但估计脆藕这类只有家里才能吃到吧，虽然略有缺憾、但现有粉藕口感亦是也很满足。后续若有比较适合的藕汤店铺，再来更新此文。 </p>
<p>​	人各有饮食的偏好、若是恰好找到一家和味蕾共震，偶尔去之，每一口便都是满满的幸福。</p>
]]></content>
      <categories>
        <category>生活 - 闲暇的趣闻</category>
      </categories>
      <tags>
        <tag>人间烟火</tag>
      </tags>
  </entry>
  <entry>
    <title>仪表盘 QSlider + 数值显示 QLCD_NUmber 的介绍及用法</title>
    <url>/posts/7bb9802c/</url>
    <content><![CDATA[<p><strong>简介：</strong>  仪表盘<code>QSlider</code>和数值显示<code>QLCD_NUmber</code>的讲解和使用。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p>
<p><strong>编程软件：</strong>  <code>visual studio 2015</code>， <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p>
<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>先上一个最终的运行效果图：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190918200740.gif"/ loading="lazy">

<br>

<h2 id="系列博文："><a href="#系列博文：" class="headerlink" title="系列博文："></a>系列博文：</h2><p><strong>比较紧密的关联博文参考：</strong></p>
<ul>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/100944831">滑动条<code>QSlider</code>和<code>QAbstractSlider</code>的介绍和用法</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/101003081"><code>QSlider</code>、<code>QScrollBar</code>、<code>QProgressBar</code>控件的联动</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/101003115">仪表盘<code>QSlider</code>的讲解和使用</a></li>
</ul>
<br>

<h2 id="继承关系："><a href="#继承关系：" class="headerlink" title="继承关系："></a>继承关系：</h2><p><code>QSlider</code>移动条、<code>QScrollBar</code>滚动条、进度条这三个控件，都是继承于<code>QAbstractSlider</code>类，其中关于<strong>QSlider和QAbstractSlider属性</strong>讲解，参考已经发过的文章<a href="https://blog.csdn.net/qq_33154343/article/details/100944831">https://blog.csdn.net/qq_33154343&#x2F;article&#x2F;details&#x2F;100944831</a> ；关于这几个控件的继承关系如下图：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190918192923.png"/ loading="lazy">

<br>

<h2 id="QDial属性："><a href="#QDial属性：" class="headerlink" title="QDial属性："></a>QDial属性：</h2><ul>
<li>QDial是仪表盘式的组件，通过旋转表盘获得输入值。QDial的特有的属性包括以下两种。</li>
</ul>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">notchesVisible</td>
<td align="center">表盘的小刻度是否可见</td>
</tr>
<tr>
<td align="center">notchTarget</td>
<td align="center">表盘刻度间的间隔像素值</td>
</tr>
</tbody></table>
<br>

<h2 id="QLCDNumber属性："><a href="#QLCDNumber属性：" class="headerlink" title="QLCDNumber属性："></a>QLCDNumber属性：</h2><ul>
<li>QLCDNumber是模拟LCD显示数字的组件，可以显示整数或小数，但就如实际的LCD一样，要设定显示数字的个数。显示整数时，还可以选择以不同进制来显示，如十进制、二进制、十六进制。其主要属性如下。</li>
</ul>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">digitCount</td>
<td align="center">显示的数的位数，如果是小数，小数点也算一个数位</td>
</tr>
<tr>
<td align="center">smallDecimalPoint</td>
<td align="center">是否有小数点，如果有小数点，就可以显示小数</td>
</tr>
<tr>
<td align="center">mode</td>
<td align="center">数的显示进制，通过调用函数setDecMode）、setBinMode（）、setOctMode）、setHexMode（）可以设置为常用的十进制、二进制、八进制、十六进制格式。</td>
</tr>
<tr>
<td align="center">value</td>
<td align="center">返回显示值，浮点数。若设置为显示整数，会自动四舍五入后得到整数，设置为intValue的值。如果smallDecimalPoint&#x3D;true，设置value时可以显示小数，但是数的位数不能超过digitCount。</td>
</tr>
<tr>
<td align="center">intValue</td>
<td align="center">返回显示的整数值</td>
</tr>
</tbody></table>
<p><strong>例如</strong>，若smallDecimalPoint-true，digitCount&#x3D;3，设置value&#x3D;2.36，则界面上LCDNumber组件会显示为2.4；若设置value&#x3D;1456.25，则界面上LCDNumber组件只会显示145。所以，用QLCDNumber作为显示组件时，应注意这些属性的配合。</p>
<br>

<h2 id="核心源码："><a href="#核心源码：" class="headerlink" title="核心源码："></a>核心源码：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//notchesVisible:表盘的小刻度是否可见</span>
<span class="token comment">//notchTarget：表盘刻度间间隔的像素值</span>
<span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>dial<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onDisplayLCD</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"QDial表盘输入，在LCD以多种进制显示"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
    
ui<span class="token operator">-></span>lcdNumber<span class="token operator">-></span><span class="token function">display</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//显示LCD</span>
ui<span class="token operator">-></span>lcdNumber<span class="token operator">-></span><span class="token function">setBinMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置LCD显示二进制数</span>
ui<span class="token operator">-></span>lcdNumber<span class="token operator">-></span><span class="token function">setOctMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置LCD显示八进制数</span>
ui<span class="token operator">-></span>lcdNumber<span class="token operator">-></span><span class="token function">setDecMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置LCD显示十进制数</span>
ui<span class="token operator">-></span>lcdNumber<span class="token operator">-></span><span class="token function">setHexMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置LCD显示十六进制数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a> 【QtQdialQLCDEx】</p>
<br>



]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>位（bit）、字节(Byte)、MB(兆位)之间的换算关系</title>
    <url>/posts/41b8f9c5/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　位（bit）、字节(Byte)、MB(兆位)之间的换算关系</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">B是Byte的缩写，B就是Byte，也就是字节（Byte）；b是bit的缩写，b就是bit，也就是比特位（bit）。
B与b不同，注意区分，KB是千字节，Kb是千比特位。

<span class="token number">1</span>MB（兆字节） <span class="token operator">=</span> <span class="token number">1024</span>KB（千字节）<span class="token operator">=</span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span>B<span class="token punctuation">(</span>字节<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1048576</span>B<span class="token punctuation">(</span>字节<span class="token punctuation">)</span>；
<span class="token number">8</span>bit（比特位）<span class="token operator">=</span> <span class="token number">1</span>Byte（字节）；
<span class="token number">1024</span>Byte（字节）<span class="token operator">=</span> <span class="token number">1</span>KB<span class="token punctuation">(</span>千字节<span class="token punctuation">)</span>；
<span class="token number">1024</span>KB（千字节）<span class="token operator">=</span> <span class="token number">1</span>MB（兆字节）<span class="token punctuation">;</span>
<span class="token number">1024</span>MB <span class="token operator">=</span> <span class="token number">1</span>GB<span class="token punctuation">;</span>
<span class="token number">1024</span>GB <span class="token operator">=</span> <span class="token number">1</span>TB<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


]]></content>
      <categories>
        <category>学习 - 底层兼架构</category>
      </categories>
  </entry>
  <entry>
    <title>使用gpg提交遇到error:gpg数据签名失败fatal:写提交对象失败</title>
    <url>/posts/66c9c8f8/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　在 <code>mac</code> 上面配置好了 <code>gpg</code> 的相关密钥之后，尝试带着 <code>gpg</code>  验证提交 commit，发现报错如下：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200510_005503.png" width="60%"/ loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 </code> 📎 <code>Qt 5.12.8</code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p>
<br>

<h3 id="报错问题："><a href="#报错问题：" class="headerlink" title="报错问题："></a>报错问题：</h3><p>当按照教程，在 <code>Mac</code>上面配置好了<code>gpg</code> 的教程之后，尝试带验证提交 <code>commit</code> 到 <code>github</code> 上，发现报错如下： </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">error: gpg 数据签名失败
fatal: 写提交对象失败<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br>

<h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>将下面的三个步骤都运行一遍：</p>
<ul>
<li><p>在<code>.zshrc</code>里面加入一行代码 <code>export GPG_TTY=$(tty)</code></p>
</li>
<li><p><strong>重启 gpg-agent</strong></p>
<p>第一次配置，必须重启，否则签名会失败，命令如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gpgconf –kill gpg-agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>重启终端（或者新开一个终端标签）</p>
</li>
</ul>
<p>成功之后即可以看到：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200510005133.png" width="30%"/ loading="lazy">

<br>

<h3 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h3><p>下面的 1，2 两篇是如何创建 gpg 和使用，3，4 篇是实际第一使用会遇到的错误解决方法。</p>
<p><a href="https://zhuanlan.zhihu.com/p/76861431">在Github上使用GPG的全过程</a></p>
<p><a href="https://www.xiexianbin.cn/git/2017-06-06-git-gpg/index.html">Git 使用 GPG 签名你的 Commit</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/97984430">解决GPG签名失败的问题</a></p>
<p><a href="https://gist.github.com/repodevs/a18c7bb42b2ab293155aca889d447f1b">github gist</a></p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
        <category>学习 - MacOS</category>
      </categories>
  </entry>
  <entry>
    <title>修改 Doxygen 主题，生成 Qt 风格的文档</title>
    <url>/posts/af3370a3/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　在 <a href="https://xmuli.blog.csdn.net/article/details/114580630">上一篇</a> 中，成功自定义 <code>.qch</code> 文档手册在 <code>Qt Assistants</code> 中查看。但 Doxygen 默认的模板美观度还需提升，<font color=#D0087E size=4 face="STFangsong">这里记录一下修改 doxygen 主题，生成 Qt 风格的的主题样式。</font></p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/Peek 2021-03-10 14-52.gif" width="90%"/ loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>​		系统环境： <code>doxygen 1.8.13</code> &amp;&amp; <code>UOS v20</code> &amp;&amp; <code>Qt Assistants 5.11.3</code></p>
<br>

<h3 id="切换-doxygen-主题风格-例子"><a href="#切换-doxygen-主题风格-例子" class="headerlink" title="切换 doxygen 主题风格(例子)"></a>切换 doxygen 主题风格(例子)</h3><p>​		找到一个基于 <code>Qt4</code> 官方文档的样式：<a href="https://github.com/skozlovf/doxygen-qmi-style">doxygen-qmi-style</a> ，克隆之后，放在 <a href="https://github.com/xmuli/QtExamples/tree/master/CustomQch">CustomQch</a> 下，然后修改配置如下，实际例子可以参见：<a href="https://github.com/xmuli/QtExamples/blob/35d524ef6726d502d5da470c7a67270bd7484e2d/CustomQch/Doxyfile#L1166">L1166</a> </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">BRIEF_MEMBER_DESC <span class="token operator">=</span> NO                             <span class="token comment"># Project section</span>
HTML_HEADER <span class="token operator">=</span> <span class="token variable">$&#123;path_to_qmi&#125;</span>/header.html           <span class="token comment"># HTML section</span>
HTML_FOOTER <span class="token operator">=</span> <span class="token variable">$&#123;path_to_qmi&#125;</span>/footer.html
HTML_STYLESHEET <span class="token operator">=</span> <span class="token variable">$&#123;path_to_qmi&#125;</span>/qmi.css<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<p>​		再次执行 <code>doxygen</code> 生成一遍，本例子 CustomQch 文件夹新主题效果如下：</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210309_165602.png" width="70%"/ loading="lazy">

<br>

<h3 id="开源项目提交（实战）"><a href="#开源项目提交（实战）" class="headerlink" title="开源项目提交（实战）"></a>开源项目提交（实战）</h3><p>​		在实战中学习，将 <code>DTK</code> 的开发手册集成到本地机器的 <code>Qt Assistants</code> 中，修改皮肤样式的提交如下：</p>
<ol>
<li><a href="https://github.com/linuxdeepin/dtk/commit/77d8402878515ba2a59ac9782059fddf3e49a8ca"># 77d8402</a> ： 添加 <code>Qt</code> 风格文档主题</li>
<li><a href="https://github.com/linuxdeepin/dtk/commit/ab94ca8f79fe31768165740cd4c486605c99e5dc"># ab94ca8f</a> ：修改 <code>Doxygen</code> 配置文件，使用 <code>Qt</code> 文档主题</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#################################################################################</span>
<span class="token comment">##  2020-03-10 配置 Doxygen 生成 html + latex + .qhp + .qch 四种格式（DTK 项目）   ##</span>
<span class="token comment">#################################################################################</span>

PROJECT_NAME           <span class="token operator">=</span> <span class="token string">"Deepin Tool Kit"</span>  <span class="token comment"># 生成文档的名称</span>
PROJECT_NUMBER         <span class="token operator">=</span> <span class="token number">2021.03</span>            <span class="token comment"># 项目文档的版本号码</span>
PROJECT_BRIEF          <span class="token operator">=</span> <span class="token string">"Deepin Tool Kit is the toolkit used to built deepin style Apps"</span> <span class="token comment">#一行简短的描述</span>
OUTPUT_DIRECTORY       <span class="token operator">=</span> ./doc              <span class="token comment"># 输出存放文档的路径 </span>
OUTPUT_LANGUAGE        <span class="token operator">=</span> Chinese            <span class="token comment"># 生成文档为中/英文 English</span>
BRIEF_MEMBER_DESC      <span class="token operator">=</span> YES                <span class="token comment"># 在 file 和 class 文档里面会有简短的描述</span>
SHORT_NAMES            <span class="token operator">=</span> YES                <span class="token comment"># 生成更短的文件名</span>

ALIASES                <span class="token operator">=</span> <span class="token assign-left variable">target</span><span class="token operator">=</span><span class="token string">"<span class="token entity" title="\a">\a</span>nchor"</span>   <span class="token comment"># 略困惑的一个参数</span>
ALIASES               <span class="token operator">+=</span> <span class="token assign-left variable">section1</span><span class="token operator">=</span><span class="token string">"\section"</span>
ALIASES               <span class="token operator">+=</span> l<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token string">"<span class="token entity" title="\r">\r</span>ef <span class="token entity" title="\1">\1</span>"</span>
ALIASES               <span class="token operator">+=</span> b<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token string">"<span class="token entity" title="\b">\b</span> <span class="token entity" title="\1">\1</span>"</span>
ALIASES               <span class="token operator">+=</span> color<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token string">"&lt;span style='border: 1px solid black; width:10px; height:10px; background-color:<span class="token entity" title="\1">\1</span>; display:inline-block;'>&lt;/span> <span class="token entity" title="\2">\2</span>"</span>
ALIASES               <span class="token operator">+=</span> href<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token string">"&lt;a href='<span class="token entity" title="\1">\1</span>'><span class="token entity" title="\2">\2</span>&lt;/a>"</span>

EXTENSION_MAPPING      <span class="token operator">=</span> .h <span class="token operator">=</span>C++            <span class="token comment"># 覆盖或者扩展这个内置的语言映射</span>
CPP_CLI_SUPPORT        <span class="token operator">=</span> YES                <span class="token comment"># 微软 C++/CLI 语言开启</span>
CASE_SENSE_NAMES       <span class="token operator">=</span> YES                <span class="token comment"># No，只解析小写字母的文件; true 解析可以大写字母文件</span>

INPUT                  <span class="token operator">=</span> ./dtkwidget/ <span class="token punctuation">\</span>     <span class="token comment"># 包含指定文件或者目录</span>
                         ./dtkcore/ <span class="token punctuation">\</span>
			             ./dtkgui/ <span class="token punctuation">\</span>
			             ./qt5integration/
			             
RECURSIVE              <span class="token operator">=</span> YES                <span class="token comment"># 文件递归,包括子文件也要输出为文档</span>

EXCLUDE                <span class="token operator">=</span>  ./dtkcore/tool <span class="token punctuation">\</span>  <span class="token comment"># 不解析如下文件或者目录</span>
                          ./dtkcore/tools <span class="token punctuation">\</span>
                          ./dtkcore/tests <span class="token punctuation">\</span>
                          ./dtkwidget/examples <span class="token punctuation">\</span>
                          ./dtkwidget/src/widgets/private

EXCLUDE_SYMBOLS        <span class="token operator">=</span>                    <span class="token comment"># 排除一些文件, namespace, clas, fun 等</span>
IMAGE_PATH             <span class="token operator">=</span> dtkwidget/doc/images <span class="token punctuation">\</span>   <span class="token comment"># 文档里面插入图片的存放路径</span>
                         dtkcore/doc/images
                         
SOURCE_BROWSER         <span class="token operator">=</span> YES                 <span class="token comment"># true 文档和源码交叉引用</span>

HTML_HEADER            <span class="token operator">=</span> ./doxygen-qmi-style/header.html    <span class="token comment"># doxygen 主题头部网页</span>
HTML_FOOTER            <span class="token operator">=</span> ./doxygen-qmi-style/footer.html    <span class="token comment"># doxygen 主题底部网页</span>
HTML_STYLESHEET        <span class="token operator">=</span> ./doxygen-qmi-style/qmi.css        <span class="token comment"># doxygen 主题网页样式表 CSS</span>

HTML_TIMESTAMP         <span class="token operator">=</span> YES                <span class="token comment"># 生成的 html 底部页面生成的日期和时间</span>
GENERATE_QHP           <span class="token operator">=</span> YES                <span class="token comment"># 使用命名空间、生成 .qch ，此必须开启</span>
QCH_FILE               <span class="token operator">=</span> <span class="token punctuation">..</span>/dtk.qch         <span class="token comment"># 通过 html 生成的 qch 路径</span>
QHP_NAMESPACE          <span class="token operator">=</span> <span class="token string">"com.deepin.dtk.5.4"</span>  <span class="token comment"># 命名空间要是唯一的，才能在 Qt 助手里面显示</span>
QHP_CUST_FILTER_NAME   <span class="token operator">=</span> YES                <span class="token comment"># 指定一个自定义的过滤器添加</span>
QHG_LOCATION           <span class="token operator">=</span> qhelpgenerator     <span class="token comment"># 使用 qhelpgenerator 工具将 qhp 转换为 qch</span>
GENERATE_TREEVIEW      <span class="token operator">=</span> YES                <span class="token comment"># 使用树状的索引应生成结构来显示层次信息</span>
GENERATE_LATEX         <span class="token operator">=</span> YES                <span class="token comment"># 输出 LaTeX 文件</span>
MACRO_EXPANSION        <span class="token operator">=</span> YES                <span class="token comment"># 展开所有的宏名</span>
   
INCLUDE_PATH           <span class="token operator">=</span> dtkcore <span class="token punctuation">\</span>          <span class="token comment"># 预处器会处的文件夹</span>
                         dtkwidget <span class="token punctuation">\</span>
			 			 dtkgui <span class="token punctuation">\</span>
			 			 qt5integration
			 			 
PREDEFINED             <span class="token operator">=</span> <span class="token string">"DTK_NAMESPACE=Dtk"</span> <span class="token punctuation">\</span>                <span class="token comment"># 指定一个或多个宏名称</span>
                         <span class="token string">"DTK_BEGIN_NAMESPACE=namespace Dtk &#123;"</span> <span class="token punctuation">\</span>
                         <span class="token string">"DTK_END_NAMESPACE=&#125;"</span> <span class="token punctuation">\</span>
                         <span class="token string">"DTK_USE_NAMESPACE=using namespace Dtk;"</span> <span class="token punctuation">\</span>
                         <span class="token string">"DCORE_NAMESPACE=Core"</span> <span class="token punctuation">\</span>
                         <span class="token string">"DTK_CORE_NAMESPACE=Dtk::Core"</span> <span class="token punctuation">\</span>
                         <span class="token string">"DCORE_BEGIN_NAMESPACE=namespace Dtk &#123; namespace Core &#123;"</span> <span class="token punctuation">\</span>
                         <span class="token string">"DCORE_END_NAMESPACE=&#125;&#125;"</span> <span class="token punctuation">\</span>
                         <span class="token string">"DCORE_USE_NAMESPACE=using namespace Dtk::Core;"</span> <span class="token punctuation">\</span>
                         <span class="token string">"DWIDGET_NAMESPACE=Widget"</span> <span class="token punctuation">\</span>
                         <span class="token string">"DTK_WIDGET_NAMESPACE=Dtk::Widget"</span> <span class="token punctuation">\</span>
                         <span class="token string">"DWIDGET_BEGIN_NAMESPACE=namespace Dtk &#123; namespace Widget &#123;"</span> <span class="token punctuation">\</span>
                         <span class="token string">"DWIDGET_END_NAMESPACE=&#125;&#125;"</span> <span class="token punctuation">\</span>
                         <span class="token string">"DWIDGET_USE_NAMESPACE=using namespace Dtk::Widget;"</span>
                         
EXPAND_AS_DEFINED      <span class="token operator">=</span> YES                 <span class="token comment"># 指定应扩展的宏名称列表</span>

TAGFILES               <span class="token operator">=</span> tags/qtcore.tags<span class="token operator">=</span>https://doc.qt.io/qt-5/ <span class="token punctuation">\</span>  <span class="token comment"># 添加外部文档的位置</span>
			 			 tags/qtgui.tags<span class="token operator">=</span>https://doc.qt.io/qt-5/ <span class="token punctuation">\</span>
			 			 tags/qtwidgets.tags<span class="token operator">=</span>https://doc.qt.io/qt-5/ 
			 			 
DOT_PATH               <span class="token operator">=</span> /usr/local/bin      <span class="token comment"># 安装 graphviz，此路径确保可以找到 dot 工具</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h3><p>​		附，是真的少，这里推荐几个样式表，想要略佳的 <code>CSS</code> 样式表，最完美的大概率的得自己写鸭（逃跑，，，</p>
<ul>
<li><a href="https://github.com/Velron/doxygen-bootstrapped">doxygen-bootstrapped</a> ：效果见 <a href="https://biogearsengine.com/documentation/index.html">预览</a>  </li>
<li><a href="https://github.com/skozlovf/doxygen-qmi-style">doxygen-qmi-style</a> ：效果见 <a href="http://skozlovf.github.io/doxygen-qmi-style/libxmlpp/classxmlpp_1_1CommentNode.html">预览1</a>  和 <a href="http://skozlovf.github.io/doxygen-qmi-style/qwt/">预览2</a></li>
<li><a href="https://github.com/Tencent/rapidjson/tree/master/doc/misc">rapidjson</a> ：效果见 <a href="http://rapidjson.org/">预览</a></li>
</ul>
<br>

<h3 id="系列地址："><a href="#系列地址：" class="headerlink" title="系列地址："></a>系列地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a>  【CustomQch】</p>
<p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 <code>QT / DTK</code> 学习，附学习由浅入深的目录。</p>
<p>​		</p>
]]></content>
      <categories>
        <category>学习 - Qt</category>
        <category>学习 - Doxygen</category>
      </categories>
  </entry>
  <entry>
    <title>修改typora主题的字体</title>
    <url>/posts/60a3437a/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　在 mac 中修改 typora 主题的英文和中文的字体，使得码字更加舒服（win 也有效）。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="书写环境："><a href="#书写环境：" class="headerlink" title="书写环境："></a>书写环境：</h3><p><strong>💻：</strong>  <code>MacOS 10.14.6 </code> 📎 <code>typora  0.9.9.32.1</code></p>
<br>

<h3 id="痛点与需求："><a href="#痛点与需求：" class="headerlink" title="痛点与需求："></a>痛点与需求：</h3><p>在 mac 上面默认是使用的 github.css 主题的文字。发现 其中 I 与 l 显示效果相同（大写的 i 与小写的 L）；长得一样，容易混淆；</p>
<p>于是就产生了想要修改一下 typora 的英文显示字体，干脆顺便把中文字体也一起换掉。</p>
<ul>
<li><p><strong>当前效果：</strong></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200514_104516.png" width="20%"/ loading="lazy">
</li>
<li><p><strong>期望效果：</strong></p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200514_104558.png" width="20%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="修改-css-配置："><a href="#修改-css-配置：" class="headerlink" title="修改 css 配置："></a>修改 css 配置：</h3><p>步骤如下：</p>
<ul>
<li><p>打开 <code>typora-偏好设置-外观-打开主题设置</code>，进入目录文件下</p>
  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200514_104623.png" width="90%"/ loading="lazy">
</li>
<li><p>将原文件 <code>github.css</code> 备份一份，重名为 <code>github.css.backup</code>,留作为日后恢复</p>
  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200514_104658.png" width="90%"/ loading="lazy"> 
</li>
<li><p>修改 <code>github.css</code> 文件，使用文本编辑器打开，查找 <code>font-family</code> ，找到如下</p>
<ul>
<li><p>将可以找到如下的内容 </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>
    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Open Sans"</span><span class="token punctuation">,</span><span class="token string">"Clear Sans"</span><span class="token punctuation">,</span><span class="token string">"Helvetica Neue"</span><span class="token punctuation">,</span>Helvetica<span class="token punctuation">,</span>Arial<span class="token punctuation">,</span>sans-serif<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>51<span class="token punctuation">,</span> 51<span class="token punctuation">,</span> 51<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.6<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>然后将其替换为</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>
    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Monaco"</span><span class="token punctuation">,</span><span class="token string">"PingFangSC-Regular"</span><span class="token punctuation">,</span><span class="token string">"Helvetica Neue"</span><span class="token punctuation">,</span>Helvetica<span class="token punctuation">,</span>Arial<span class="token punctuation">,</span>sans-serif<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>51<span class="token punctuation">,</span> 51<span class="token punctuation">,</span> 51<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.6<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>其他的 font-family 都是不需要替换的，</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200514_105039.png" width="90%"/ loading="lazy"></li>
</ul>
</li>
<li><p><font color=#FF0000  size=4 face="幼圆">修改完成之后，一定要重启 typora，才会在再次生效 </font></p>
</li>
</ul>
<br>

<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a><strong>说明：</strong></h3><ul>
<li><p>通常使用到的只是 <code>font-family: &quot;Monaco&quot;,&quot;PingFangSC-Regular&quot;,&quot;Helvetica Neue&quot;,Helvetica,Arial,sans-serif;</code>   </p>
<p>通常只是第一个值；第一位表示文章遇到的英文都显示为 <code>Monaco</code> 字体（也只有英文）；其次遇到的中文，再用 <code>PingFangSC-Regular</code> 字体来显示；倘若本机中没有底这两种字体，再顺延尝试第三个 Helvetica 字体和第四个 Helvetica 字体。</p>
</li>
</ul>
<br>

<h3 id="关于字体选择："><a href="#关于字体选择：" class="headerlink" title="关于字体选择："></a>关于字体选择：</h3><ul>
<li><strong>mac 下：</strong><ul>
<li>英文字体：Monaco</li>
<li>中文字体：PingFangSC-Regular</li>
</ul>
</li>
<li><strong>win 下：</strong><ul>
<li>英文字体：Consolas</li>
<li>中文字体：？（随你喜好）</li>
</ul>
</li>
</ul>
<p>这两款字体字体，大概是对应平台使用起来，最舒服的字体，经过多次尝试之后；其中 mac 下是默认没安装 Consolas 字体的。</p>
<br>

<h3 id="mac-安装-Consolas-字体："><a href="#mac-安装-Consolas-字体：" class="headerlink" title="mac 安装 Consolas 字体："></a>mac 安装 Consolas 字体：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 原文链接：[install consolas on mac](https://gist.github.com/avalonalex/8125197)</span>
<span class="token comment"># Thanks to this post:</span>
<span class="token comment"># http://blog.ikato.com/post/15675823000/how-to-install-consolas-font-on-mac-os-x</span>

$ brew <span class="token function">install</span> cabextract
$ <span class="token builtin class-name">cd</span> ~/Downloads
$ <span class="token function">mkdir</span> consolas
$ <span class="token builtin class-name">cd</span> consolas
$ <span class="token function">curl</span> <span class="token parameter variable">-O</span> http://download.microsoft.com/download/f/5/a/f5a3df76-d856-4a61-a6bd-722f52a5be26/PowerPointViewer.exe
$ cabextract PowerPointViewer.exe
$ cabextract ppviewer.cab
$ <span class="token function">open</span> CONSOLA*.TTF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p>附带苹方字体的中英文对照：</p>
<table>
<thead>
<tr>
<th>中文</th>
<th>font-family（英文）</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>苹方-简 常规体</td>
<td>PingFangSC-Regular</td>
<td></td>
</tr>
<tr>
<td>苹方-简 极细体</td>
<td>PingFangSC-Ultralight</td>
<td></td>
</tr>
<tr>
<td>苹方-简 细体</td>
<td>PingFangSC-Light</td>
<td></td>
</tr>
<tr>
<td>苹方-简 纤细体</td>
<td>PingFangSC-Thin</td>
<td></td>
</tr>
<tr>
<td>苹方-简 中黑体</td>
<td>PingFangSC-Medium</td>
<td></td>
</tr>
<tr>
<td>苹方-简 中粗体</td>
<td>PingFangSC-Semibold</td>
<td></td>
</tr>
</tbody></table>
<br>

<p>常见字体中英文对照：</p>
<table>
<thead>
<tr>
<th>中文名</th>
<th>英文名</th>
<th>Unicode</th>
<th>Unicode 2</th>
</tr>
</thead>
<tbody><tr>
<td>Mac OS</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>华文细黑</td>
<td>STHeiti Light [STXihei]</td>
<td>534E65877EC69ED1</td>
<td>华文细黑</td>
</tr>
<tr>
<td>华文黑体</td>
<td>STHeiti</td>
<td>534E65879ED14F53</td>
<td>华文黑体</td>
</tr>
<tr>
<td>华文楷体</td>
<td>STKaiti</td>
<td>534E658769774F53</td>
<td>华文楷体</td>
</tr>
<tr>
<td>华文宋体</td>
<td>STSong</td>
<td>534E65875B8B4F53</td>
<td>华文宋体</td>
</tr>
<tr>
<td>华文仿宋</td>
<td>STFangsong</td>
<td>534E65874EFF5B8B</td>
<td>华文仿宋</td>
</tr>
<tr>
<td>丽黑 Pro</td>
<td>LiHei Pro Medium</td>
<td>4E3D9ED1 Pro</td>
<td>丽黑 Pro</td>
</tr>
<tr>
<td>丽宋 Pro</td>
<td>LiSong Pro Light</td>
<td>4E3D5B8B Pro</td>
<td>丽宋 Pro</td>
</tr>
<tr>
<td>标楷体</td>
<td>BiauKai</td>
<td>680769774F53</td>
<td>标楷体</td>
</tr>
<tr>
<td>苹果丽中黑</td>
<td>Apple LiGothic Medium</td>
<td>82F9679C4E3D4E2D9ED1</td>
<td>苹果丽中黑</td>
</tr>
<tr>
<td>苹果丽细宋</td>
<td>Apple LiSung Light</td>
<td>82F9679C4E3D7EC65B8B</td>
<td>苹果丽细宋</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Windows</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>新细明体</td>
<td>PMingLiU</td>
<td>65B07EC6660E4F53</td>
<td>新细明体</td>
</tr>
<tr>
<td>细明体</td>
<td>MingLiU</td>
<td>7EC6660E4F53</td>
<td>细明体</td>
</tr>
<tr>
<td>标楷体</td>
<td>DFKai-SB</td>
<td>680769774F53</td>
<td>标楷体</td>
</tr>
<tr>
<td>黑体</td>
<td>SimHei</td>
<td>9ED14F53</td>
<td>黑体</td>
</tr>
<tr>
<td>宋体</td>
<td>SimSun</td>
<td>5B8B4F53</td>
<td>宋体</td>
</tr>
<tr>
<td>新宋体</td>
<td>NSimSun</td>
<td>65B05B8B4F53</td>
<td>新宋体</td>
</tr>
<tr>
<td>仿宋</td>
<td>FangSong</td>
<td>4EFF5B8B</td>
<td>仿宋</td>
</tr>
<tr>
<td>楷体</td>
<td>KaiTi</td>
<td>69774F53</td>
<td>楷体</td>
</tr>
<tr>
<td>仿宋_GB2312</td>
<td>FangSong_GB2312</td>
<td>4EFF5B8B_GB2312</td>
<td>仿宋_GB2312</td>
</tr>
<tr>
<td>楷体_GB2312</td>
<td>KaiTi_GB2312</td>
<td>69774F53_GB2312</td>
<td>楷体_GB2312</td>
</tr>
<tr>
<td>微软正黑体</td>
<td>Microsoft JhengHei</td>
<td>5FAEx8F6F6B639ED14F53</td>
<td>微软正黑体</td>
</tr>
<tr>
<td>微软雅黑</td>
<td>Microsoft YaHei</td>
<td>5FAE8F6F96C59ED1</td>
<td>微软雅黑</td>
</tr>
</tbody></table>
<br>

<h2 id="去掉-H2-标题下的横线"><a href="#去掉-H2-标题下的横线" class="headerlink" title="去掉 H2 标题下的横线"></a>去掉 H2 标题下的横线</h2><p>还是同一个 css 文件，注释掉如下行</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h2</span> <span class="token punctuation">&#123;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.75em<span class="token punctuation">;</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.225<span class="token punctuation">;</span>
    <span class="token comment">/* border-bottom: 1px solid #eee; 注释掉这一行*/</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>参考：</strong></p>
<ul>
<li><a href="https://www.cnblogs.com/asheng2016/p/8979282.html">把typora改为微软雅黑+Consolas</a> </li>
<li><a href="https://support.typora.io/Add-Custom-CSS/">https://support.typora.io/Add-Custom-CSS/</a></li>
<li><a href="https://support.typora.io/About-Themes/">https://support.typora.io/About-Themes/</a></li>
</ul>
]]></content>
      <categories>
        <category>学习 - MacOS</category>
      </categories>
  </entry>
  <entry>
    <title>元对象系统 MOC (Meat-Object System) 的对象 MetaObject 和(含动态)属性 Propert 的用法</title>
    <url>/posts/e78f52cc/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　讲解元对象系统<code>moc</code>(<strong>Meat-Object System</strong>)的对象<code>MetaObject</code>和(含动态)属性<code>Propert</code>的用法。没想到这一篇会延期如此之久之久。 <strong>（此篇有大部分是借鉴书籍和或互联网），因为作者写的很棒，故大篇幅的直接借鉴过来了</strong> 。其中文中有些少部分是自己照着修改了一点，稍加改写而成的。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20 amd64</code> 📎 <code>Qt 5.11.3</code> </p>
<p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 </code> 📎 <code>Qt 5.12.6</code></p>
<p>　　<strong>💻：</strong>  <code>win10 x64</code> 📎 <code>Qt 5.12.7</code></p>
<br>

<h3 id="元对象系统"><a href="#元对象系统" class="headerlink" title="元对象系统:"></a>元对象系统:</h3><p>​	Qt 的元对象系统 (<code>Meta-Object System</code>) 提供了对象之间通信的信号与槽机制、运行时类型信息和动态属性系统。</p>
<p>​	<font color=#FF0000  size=4 face="幼圆"><strong>元对象系统由以下三个基础组成：</strong></font></p>
<ul>
<li><p><font color=#FF0000  size=4 face="幼圆">QObject类是所有使用元对象系统的类的基类。</font></p>
</li>
<li><p><font color=#FF0000  size=4 face="幼圆">在一个类的private部分声明 Q OBJECT 宏，使得类可以使用元对象的特性，如动态属性、信号与槽。</font></p>
</li>
<li><p><font color=#FF0000  size=4 face="幼圆">MOC (元对象编译器)为每个 QObjeet 的子类提供必要的代码来实现元对象系统的特性。构建项目时，MOC工具读取 C++ 源文件，当它发现类的定义里有 Q_ OBJECT 宏时，它就会为这个类生成另外一个包含有元对象支持代码的 C++ 源文件，这个生成的源文件连同类的实现文件一起被编译和连接。</font></p>
</li>
<li><p><strong>除了信号与槽机制外，元对象还提供如下一些功能。</strong></p>
</li>
<li><p>Qbjet::metaOject()函数返回类关联的元对象，元对象类 QMetaObject 包含了访问元对象的一些接口口函数，例如 QMetabjet:classNamec() 函数可在运行时返回类的名称字符串。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QObject <span class="token operator">*</span>obj <span class="token operator">=</span> <span class="token keyword">new</span> QPushButton<span class="token punctuation">;</span>
obj<span class="token operator">-></span><span class="token function">metaObject</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">classNane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回"QPushButton</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


</li>
<li><p><code>QMetaOjct::newInstance()</code>函数创建类的一个新的实例。</p>
</li>
<li><p>Q0bjct:inherits(const char *className)函数判断一个对象实例是否是名称为 className 的类或 QObject 的子类的实例。例如:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QTimer <span class="token operator">*</span>timer <span class="token operator">=</span> <span class="token keyword">new</span> QTimer<span class="token punctuation">;</span>  <span class="token comment">// OTimer是oobject的子类</span>
timer<span class="token operator">-></span><span class="token function">inherits</span> <span class="token punctuation">(</span><span class="token string">"QTimer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回true</span>
timer<span class="token operator">-></span><span class="token function">inherits</span> <span class="token punctuation">(</span><span class="token string">"QObject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回true</span>
timer<span class="token operator">-></span><span class="token function">inherits</span> <span class="token punctuation">(</span><span class="token string">"QAbstractButton"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回false. 不是QAbatractButton的子类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>QObject::tr()</code> 和 <code>Qbjet::trUtf8()</code> 函数可翻译字符串，用于多语言界面设计。</p>
</li>
<li><p><code>QObjct:setProperty()</code> 和 <code>Q0bjct:property()</code> 函数用于通过属性名称动态设置和获取属性值。</p>
<p>对于 QObject 及其子类，还可以使用 <code>qobject_cast()</code> 函数进行动态投射(dynamic cast)。例如，假设 QMyWidget 是 QWidget 的子类并且在类定义中声明了Q_OBJECT宏。创建实例使用下面的语句: </p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Q0bject <span class="token operator">*</span>obj <span class="token operator">=</span> <span class="token keyword">new</span> QMyWidget<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>变量 obj 定义为 QObject 指针,但它实际指向 QMyWidget 类,所以可以正确投射为 QWidget，即: </p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Qwidget <span class="token operator">*</span>widget <span class="token operator">=</span> <span class="token generic-function"><span class="token function">qobject_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Qwidget <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>从 QObject 到 QWidget 的投射是成功的，因为 obj 实际是 QMyWidget 类，是 QWidge 的子类。也可以将其成功投射为 QMyWidget，即:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QMyWidget <span class="token operator">*</span>myWidget <span class="token operator">=</span> <span class="token generic-function"><span class="token function">qobject_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>QMyWidget <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>投射为 QMyWidget是成功的，因为 qoiect_cast() 并不区分 Qt 内建的类型和用户自定义类型。但是，若要将 obj 投射为 QLabel 则是失败的，因为 QMyWidget 不是 Qlabel 的子类。即: </p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QLabe1 <span class="token operator">*</span>labol <span class="token operator">=</span> <span class="token generic-function"><span class="token function">qobject_caot</span><span class="token generic class-name"><span class="token operator">&lt;</span>QLabe1 <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br></li>
</ul>
<h3 id="属性系统："><a href="#属性系统：" class="headerlink" title="属性系统："></a>属性系统：</h3><h4 id="属性定义："><a href="#属性定义：" class="headerlink" title="属性定义："></a>属性定义：</h4><p>Qt提供一个Q PROPERTY0宏可以定义属性，它也是基于元对象系统实现的。Qt 的属性系統与C++编译器无管，可以用任何柝准的C++编译器定义属性的Qt C++程序。</p>
<ul>
<li><p>在QObijct的子奬中，用宏Q PROPERTYO定文属性，其使用格式如下:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">Q_PROPERTY</span><span class="token punctuation">(</span>type <span class="token function">name</span>
             <span class="token punctuation">(</span>READ getFunction <span class="token punctuation">[</span>WRITE setFunction<span class="token punctuation">]</span> <span class="token operator">|</span>
              MEMBER memberName <span class="token punctuation">[</span><span class="token punctuation">(</span>READ getFunction <span class="token operator">|</span> WRITE setFunction<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
             <span class="token punctuation">[</span>RESET resetFunction<span class="token punctuation">]</span>
             <span class="token punctuation">[</span>NOTIFY notifySignal<span class="token punctuation">]</span>
             <span class="token punctuation">[</span>REVISION <span class="token keyword">int</span><span class="token punctuation">]</span>
             <span class="token punctuation">[</span>DESIGNABLE <span class="token keyword">bool</span><span class="token punctuation">]</span>
             <span class="token punctuation">[</span>SCRIPTABLE <span class="token keyword">bool</span><span class="token punctuation">]</span>
             <span class="token punctuation">[</span>STORED <span class="token keyword">bool</span><span class="token punctuation">]</span>
             <span class="token punctuation">[</span>USER <span class="token keyword">bool</span><span class="token punctuation">]</span>
             <span class="token punctuation">[</span>CONSTANT<span class="token punctuation">]</span>
             <span class="token punctuation">[</span>FINAL<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p> Q_PROPERTY宏定义属性的一些主要关键字的意义如下。</p>
<p>● READ 指定一个读取属性值的函数，没有 MEMBER 关键字时必须设置READ.</p>
<p>● WRITE指定一个设定属性值的函数， 只读属性没有WRITE设置。</p>
<p>● MEMBER指定一个成员变量与属性关联，成为可读可写的属性，无需再设置READ和WRITE.</p>
<p>● RESET是可选的，用于指定一个设置属性缺省值的函数。</p>
<p>● NOTIFY是可选的，用于设置一个信号， 当属性值变化时发射此信号.</p>
<p>● CONSTANT表示属性値是一常数，対于一个対象实例，READ 指定的函数返回値是常数，但是每个实例的返回值可以不一-样。具有CONSTANT关键字的属性不能有WRITE和NOTIFY关键字。</p>
<p>FINAL表示所定文的属性不能被子美重栽。QWidget类定义属性的一-些例子如下:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Q_ <span class="token function">PROPERTY</span> <span class="token punctuation">(</span><span class="token keyword">bool</span>  focus READ hasFocus<span class="token punctuation">)</span>
Q_ <span class="token function">PROPERTY</span><span class="token punctuation">(</span>b0ol enabled READ isEnabled WRITE setEnabled<span class="token punctuation">)</span>
Q_ <span class="token function">PROPERTY</span> <span class="token punctuation">(</span>QCursor cursor READ cursor WRITE setCursor RESET <span class="token function">unsetCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
<br>

<h4 id="属性的使用"><a href="#属性的使用" class="headerlink" title="属性的使用:"></a>属性的使用:</h4><p>不管是否用READ和WRITE定义了接口函数，只要知道属性名称就可以通过QObjct:property()读取属性值，并通过QObject:setProperty0设置属性值。例如:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QPushButton <span class="token operator">*</span>button <span class="token operator">=</span> <span class="token keyword">new</span> QPushButton<span class="token punctuation">;</span>Q0bject <span class="token operator">*</span>object <span class="token operator">=</span> button<span class="token punctuation">;</span>
object<span class="token operator">-></span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"flat"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> isFlat<span class="token operator">-</span> object<span class="token operator">-></span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">"flat"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="动态属性"><a href="#动态属性" class="headerlink" title="动态属性:"></a>动态属性:</h4><p> QObject:setPropert()函数可以在运行时为类定义一个新的属性，称之为动态属性。动态属性是针对类的实例定义的。动态属性可以使用Qbjct:property()查询，就如在类定义里用 Q_PROPERTY 宏定义的属性一样。</p>
<p>  例如，在数据表编辑界面上，一些字段是必填字段，就可以在初始化界面时为这些字段的关联显示组件定义一个新的required属性，并设置值为”true”，如:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">editName<span class="token operator">-></span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"required"</span>，<span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
comboSex<span class="token operator">-></span> <span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"required"</span><span class="token punctuation">.</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
checkAgree<span class="token operator">-></span> <span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"required"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>  然后，可以应用下面的样式定义将这种必填字段的背景颜色设置为亮绿色</p>
<p><code>*[required=&quot;true&quot;] (background-color: lime)</code></p>
<br>

<h4 id="类的附加信息"><a href="#类的附加信息" class="headerlink" title="类的附加信息:"></a>类的附加信息:</h4><p>  属性系统还有一个宏Q CLASSINFO0.可以为类的元对象定义“名称-值” 信息，如:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">QMyC1ass</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QObject</span></span>
<span class="token punctuation">&#123;</span> 
  Q_OBJECT
  <span class="token function">Q_CLASSINFO</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">,</span> <span class="token string">"Wang"</span> <span class="token punctuation">)</span>
  <span class="token function">Q_CLASSINFO</span><span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token string">"UPC"</span> <span class="token punctuation">)</span>
  <span class="token function">Q_CLASSINFO</span><span class="token punctuation">(</span><span class="token string">"version "</span>，<span class="token string">"3.0.1"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>用Q CLASSINFOQ宏定义附加类信息后，可以通过元对象的一些函数获取类的附加信息，如classInfo(int )获取某个附加信息，函数原型定义如下: .</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QMetaClassInfo QMetaObject<span class="token operator">:</span> <span class="token operator">:</span><span class="token function">classInfo</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token keyword">const</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回值是 QMetaClassInfo 类型，有name()和value()两个函数，可获得类附加信息的名称和值。</p>
<br>

<h3 id="核心源码："><a href="#核心源码：" class="headerlink" title="核心源码："></a>核心源码：</h3><p>　写了一个例子：</p>
<p>ExPerson.h</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXPERSON_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXPERSON_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QObject></span></span>

<span class="token keyword">class</span> <span class="token class-name">ExPerson</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QObject</span></span>
<span class="token punctuation">&#123;</span>
    Q_OBJECT

    <span class="token comment">//类的附加信息：名称————值</span>
    <span class="token function">Q_CLASSINFO</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">,</span> <span class="token string">"touwoyimuli"</span><span class="token punctuation">)</span>
    <span class="token function">Q_CLASSINFO</span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">,</span> <span class="token string">"1.0.0"</span><span class="token punctuation">)</span>
    <span class="token function">Q_CLASSINFO</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span> <span class="token string">"Qt5 Meta Object and Property Example"</span><span class="token punctuation">)</span>

    <span class="token comment">//属性定义</span>
    <span class="token function">Q_PROPERTY</span><span class="token punctuation">(</span><span class="token keyword">int</span> age READ getAge WRITE setAge NOTIFY ageChanged<span class="token punctuation">)</span>    <span class="token comment">//属性age; 方法getAge()和setAge()对其读写; 设置信号ageChanged()</span>
    <span class="token function">Q_PROPERTY</span><span class="token punctuation">(</span>QString name MEMBER m_name<span class="token punctuation">)</span>     <span class="token comment">//属性name 与类成员变量m_name关联</span>
    <span class="token function">Q_PROPERTY</span><span class="token punctuation">(</span><span class="token keyword">int</span> score MEMBER m_score<span class="token punctuation">)</span>       <span class="token comment">//属性score与类成员变量m_score关联</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">ExPerson</span><span class="token punctuation">(</span>QString name<span class="token punctuation">,</span> QObject <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//属性 READ 函数</span>
    <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//属性 WRITE 函数</span>

    <span class="token keyword">void</span> <span class="token function">incAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//单独写一个接口，与属性无关</span>

signals<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">ageChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//属性age发生改变的信号函数</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> m_age <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    QString m_name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> m_score <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXPERSON_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>ExWidget.h</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXWIDGET_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXWIDGET_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QWidget></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExPerson.h"</span></span>

<span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span>
<span class="token keyword">class</span> <span class="token class-name">ExWidget</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">ExWidget</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QWidget</span></span>
<span class="token punctuation">&#123;</span>
    Q_OBJECT

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">ExWidget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">ExWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> slots<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">onAgeChange</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//自定义的槽函数</span>
    <span class="token keyword">void</span> <span class="token function">onSpinValChange</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">onBtnClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//UI界面的槽函数</span>
    <span class="token keyword">void</span> <span class="token function">onBtnBoyInc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">onBtnGrilInc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">onClassInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    Ui<span class="token double-colon punctuation">::</span>ExWidget <span class="token operator">*</span>ui<span class="token punctuation">;</span>

    ExPerson<span class="token operator">*</span> m_boy<span class="token punctuation">;</span>
    ExPerson<span class="token operator">*</span> m_girl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXWIDGET_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>ExPerson.cpp</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExPerson.h"</span></span>

<span class="token comment">//加一个参后的构造函数</span>
<span class="token class-name">ExPerson</span><span class="token double-colon punctuation">::</span><span class="token function">ExPerson</span><span class="token punctuation">(</span>QString name<span class="token punctuation">,</span> QObject <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">QObject</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token class-name">ExPerson</span><span class="token double-colon punctuation">::</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> m_age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExPerson</span><span class="token double-colon punctuation">::</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_age <span class="token operator">=</span> value<span class="token punctuation">;</span>
    emit <span class="token function">ageChanged</span><span class="token punctuation">(</span>m_age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//发射信号</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExPerson</span><span class="token double-colon punctuation">::</span><span class="token function">incAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_age<span class="token operator">++</span><span class="token punctuation">;</span>
    emit <span class="token function">ageChanged</span><span class="token punctuation">(</span>m_age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//发射信号</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>ExWidget.cpp</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExWidget.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExWidget.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMetaProperty></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span></span>

<span class="token class-name">ExWidget</span><span class="token double-colon punctuation">::</span><span class="token function">ExWidget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token double-colon punctuation">::</span>ExWidget<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_boy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ExPerson</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_boy<span class="token operator">-></span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_boy<span class="token operator">-></span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_boy<span class="token operator">-></span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">,</span> <span class="token string">"Boy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//动态属性</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>m_boy<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ExPerson<span class="token double-colon punctuation">::</span>ageChanged<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ExWidget<span class="token double-colon punctuation">::</span>onAgeChange<span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_girl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ExPerson</span><span class="token punctuation">(</span><span class="token string">"张丽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_girl<span class="token operator">-></span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_girl<span class="token operator">-></span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_girl<span class="token operator">-></span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">,</span> <span class="token string">"Gril"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//动态属性</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>m_girl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ExPerson<span class="token double-colon punctuation">::</span>ageChanged<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ExWidget<span class="token double-colon punctuation">::</span>onAgeChange<span class="token punctuation">)</span><span class="token punctuation">;</span>

    ui<span class="token operator">-></span>spinBoy<span class="token operator">-></span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"isBoy"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//动态属性</span>
    ui<span class="token operator">-></span>spinGril<span class="token operator">-></span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"isBoy"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>spinGril<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSpinValChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>spinBoy<span class="token punctuation">,</span>  <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSpinValChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>btnBoyAdd<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onBtnBoyInc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>btnGrilAdd<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onBtnGrilInc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>btnMetaObject<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onClassInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>btnClean<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onBtnClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"元对象MetaObject和(含动态)属性Propert的用法"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">ExWidget</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">ExWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExWidget</span><span class="token double-colon punctuation">::</span><span class="token function">onAgeChange</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">Q_UNUSED</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>   <span class="token comment">//参数val没使用，避免警告</span>

    ExPerson<span class="token operator">*</span> person <span class="token operator">=</span> <span class="token generic-function"><span class="token function">qobject_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>ExPerson <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">sender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//类型投射</span>
    QString name <span class="token operator">=</span> person<span class="token operator">-></span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString sex <span class="token operator">=</span> person<span class="token operator">-></span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> age  <span class="token operator">=</span> person<span class="token operator">-></span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">//通过接口函数，获得年龄</span>
                                                             <span class="token comment">//或使用 int age  = person->property("age").toInt();</span>
    ui<span class="token operator">-></span>textEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>sex <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">asprintf</span><span class="token punctuation">(</span><span class="token string">",年龄=%d"</span><span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExWidget</span><span class="token double-colon punctuation">::</span><span class="token function">onSpinValChange</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">Q_UNUSED</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>

    QSpinBox<span class="token operator">*</span> spin <span class="token operator">=</span> <span class="token generic-function"><span class="token function">qobject_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>QSpinBox <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">sender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//类型投射</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>spin<span class="token operator">-></span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">"isBoy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        m_boy<span class="token operator">-></span><span class="token function">setAge</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>spinBoy<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        m_girl<span class="token operator">-></span><span class="token function">setAge</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>spinGril<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExWidget</span><span class="token double-colon punctuation">::</span><span class="token function">onBtnClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>textEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExWidget</span><span class="token double-colon punctuation">::</span><span class="token function">onBtnBoyInc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_boy<span class="token operator">-></span><span class="token function">incAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExWidget</span><span class="token double-colon punctuation">::</span><span class="token function">onBtnGrilInc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_girl<span class="token operator">-></span><span class="token function">incAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExWidget</span><span class="token double-colon punctuation">::</span><span class="token function">onClassInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> QMetaObject<span class="token operator">*</span> meta <span class="token operator">=</span> m_boy<span class="token operator">-></span><span class="token function">metaObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    ui<span class="token operator">-></span>textEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>textEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"==元对象信息(Meta Object)==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>textEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"类名称: %1\n"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>meta<span class="token operator">-></span><span class="token function">className</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>textEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"属性(property)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> meta<span class="token operator">-></span><span class="token function">propertyOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> meta<span class="token operator">-></span><span class="token function">propertyCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        QMetaProperty prop <span class="token operator">=</span> meta<span class="token operator">-></span><span class="token function">property</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> propName <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QString propValue <span class="token operator">=</span> m_boy<span class="token operator">-></span><span class="token function">property</span><span class="token punctuation">(</span>propName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>textEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"属性名称=%1， 属性值= %2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>propName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>propValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    ui<span class="token operator">-></span>textEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>textEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"classInfo:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> meta<span class="token operator">-></span><span class="token function">classInfoOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> meta<span class="token operator">-></span><span class="token function">classInfoCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        QMetaClassInfo classInfo <span class="token operator">=</span> meta<span class="token operator">-></span><span class="token function">classInfo</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>textEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"Name=%1， Value= %2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>classInfo<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>classInfo<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h3><p>　　附上的最后的运行效果图一览：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200504_220444.gif" width="70%"/ loading="lazy">

<br>

<h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a> 【QtMeatObjectEx】</p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>入门分析，多线程竞争为何不安全？</title>
    <url>/posts/8d66635b/</url>
    <content><![CDATA[<p><strong>简介：</strong> 入门级别讲解，分析多线程竞争同一共享资源，运行结果不符预期的原因；故书一简例，讲解何谓 <strong>非线程安全</strong> ？以及使用 atomic  和 mutex 来解决此缺陷场景，最终 <strong>线程安全</strong> 获得预期结果。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="受众"><a href="#受众" class="headerlink" title="受众"></a>受众</h3><p>　　有基本的多线程理论知识，但未曾深入研究 “运行不符预期结果” 的萌新？亦或对多线程未曾了解，道听途说、知识点模糊，实际不甚理解原理的读者。都是本文的最佳读者。若已早熟练和精通于多线程项目，可直接关闭本文，珍惜时间，可以用来干点其它的什么，摸个🐟，喝杯肥宅快乐水（加冰）。</p>
<br>

<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>　　在  <code>win10 21H1</code> 📎  <code>Visual Studio 2019</code> 的环境中，写了一个最简单的多线程例子，下面来分析一波：</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;thread&gt;
#include &lt;iostream&gt;
using namespace std;

int g_num &#x3D; 0;

void addition()
&#123;
    for (int i &#x3D; 0; i &lt; 5000; ++i) &#123;
        g_num++;
    &#125;
&#125;

int main()
&#123;
    thread th1(addition);
    thread th2(addition);
    th1.join();
    th2.join();

    cout &lt;&lt; &quot;g_num:&quot; &lt;&lt; g_num &lt;&lt; endl;

    return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>　　同时起两个线程 th1，th2；不做任何限制；对同一全局变量 g_num 进行写增加操作；<strong>预期</strong> 运行结果<u>一定</u>为 10000。<strong>理由为</strong> 即使是两个线程经过 CPU 时间片轮转、互相争夺此 g_num 变量的写增加；但是总的是次数来看，Line 7-12 即使互相咬合交替执行（线程竞争），但最终此函数 addition()（此段代码片）都一定被运行了 5000 + 5000 &#x3D; 10000 次；并且此处只有一行自增代码，是不应该会有问题的。</p>
<br>

<p><strong>实际运行结果</strong> 为：有时候能数据为 10000， 有时候低于 10000，两者概率都很大。和预期的不符合，被打脸了😰；</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2022/20220112160258.png" width="50%"/ loading="lazy">



<p>　　故疯狂吐槽 CPU 不讲武德，明明代码片会运行 10000 次，但是最终结果经常不符合预期（偶尔会符合预期），完全不可控。此被称为 <strong>线程不安全</strong>，出现了多线程竞争情况，导致结果未能符合预期。</p>
<br>

<p>造成差异的 <strong>根因分析</strong> ：</p>
<p>　　即使是仅一行 <code>g_num++;</code>  代码，也属于高级语言，被编译器翻译为汇编（低级语言）后，是被解释为多行汇编语言执行的; 而 CPU 每次执行的最小单位可看作是一条精简的指令（此处姑且理解为一行汇编代码）。你以为只执行一行代码 C++ 代码，实际则是执行三行汇编代码。此属于非原子操作、或非最小执行单位的机器指令。此时多线程切换出去，某种巧合情况下会得出错误结果（下文有详细分析）。</p>
<br>

<hr>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>　　以上也仅仅是揣测，下面一块看实锤。在 VS 2019 中 <code>Line 9：  g_num++;</code>  处行打上 F9  断点，Debug 模式下 F5 调试卡住此行，右键菜单选中 “转到反汇编(T) ”，可看到如下代码片，进行 C++ 的对应的汇编分析。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">        g_num++;
00C310EF  mov         ecx,dword ptr [g_num (0C353F8h)]          &#x2F;&#x2F; 将 g_num 的内容写入到 ecx
00C310F5  add         ecx,1                                     &#x2F;&#x2F; 计数器 ecx 数值加 1
00C310F8  mov         dword ptr [g_num (0C353F8h)],ecx          &#x2F;&#x2F; 将 ecx 的内容写入到 g_num 中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>此三行汇编分析至此，只能说真的已到了最底层，无法再往下给你刨更底层了<del>（ 01010101 二进制可不算）</del>。</p>
<br>

<p><strong>汇编语言储备：</strong></p>
<ul>
<li>mov 指令：据传送指令，用于将一个数据从源地址传送到目标地址（寄存器间的数据传送本质上也是一样的）。其特点是不破坏源地址单元的内容。</li>
<li>add 指令: 加法指令, 两数相加。</li>
<li>ecx：计数器(counter), 是重复(REP)前缀指令和LOOP指令的内定计数器。</li>
</ul>
<br>

<p>　　结合代码分析多线程运行：</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2022/20220112_154750.png" width="90%"/ loading="lazy">

<p>对于出现多线程竞争情况，实际运行结果为 5000 多，化抽象为一具体理解。每次执行 <code>g_num++;</code> 三行汇编代码时，线程 th1 、th2 每次都按照如下循序交替运行；</p>
<ul>
<li>【1步骤】th1:  A</li>
<li>【2步骤】th2: ①</li>
<li>【3步骤】th1:  B</li>
<li>【4步骤】th2: ②</li>
</ul>
<br>

<p>　　按照此顺序来模拟执行一遍，每一步骤结果如下：</p>
<table>
<thead>
<tr>
<th align="center">&#x2F;&#x2F; 第一次进来 g_num &#x3D; 0</th>
<th></th>
<th align="center">ecx的值</th>
<th align="center">ptr[g_num (0C353F8h)]的数值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">执行【1步骤】th1:  A</td>
<td></td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center"></td>
<td></td>
<td align="center">1</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center"></td>
<td></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">执行【2步骤】th2: ①</td>
<td></td>
<td align="center">0（非希望的结果，线程竞争错误根因）</td>
<td align="center">0( 此时未被改变)</td>
</tr>
<tr>
<td align="center"></td>
<td></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">执行【3步骤】th1:  B</td>
<td></td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center"></td>
<td></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">执行【4步骤】th2: ②</td>
<td></td>
<td align="center">1</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center"></td>
<td></td>
<td align="center">1</td>
<td align="center">1(虽共运行两次加1，可最终结果却为1)</td>
</tr>
</tbody></table>
<p>　　可发现，线程 th1 和 th2 各自<strong>交替</strong> 的执行一遍完整的  addition() 函数后，共执行了两遍对 <code>g_num++</code>  的操作，但是其结果只会增加一遍。每次按照此顺序线程交替歌执行 5000 次后，最终的结果就是 5000。但实际总有那么几次是被 th1 执行完成了后，才切换到 th2 执行，故而实际运行结果为 5000出点头左右；也算是印证了无限制的多线程竞争读写同一资源，会出现不符合预期的情况。</p>
<br>

<hr>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>　　问题产生了，那么我们应该如何修正、或避免此情况呢？实际的解决的方式就有很多种了，这里提两种方案，最终代码如下</p>
<ul>
<li>定义为 <a href="https://en.cppreference.com/w/cpp/atomic/atomic">原子变量操作 atomic</a> ；</li>
<li>对多线程访问的共享资源进行<a href="https://en.cppreference.com/w/cpp/thread/mutex">加锁 mutex</a></li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;atomic&gt;
#include &lt;mutex&gt;
#include &lt;thread&gt;
#include &lt;iostream&gt;
using namespace std;

&#x2F;&#x2F; 方案一：定义为原子变量 atomic
&#x2F;&#x2F;atomic&lt;int&gt; g_num &#x3D; 0;

&#x2F;&#x2F; 方案二：加锁 mutex
int g_num &#x3D; 0;
mutex g_mutex;

void addition()
&#123;
	for (int i &#x3D; 0; i &lt; 5000; ++i) &#123;
        g_mutex.lock();
        g_num++;
        g_mutex.unlock();
    &#125;
&#125;

int main()
&#123;
    thread th1(addition);
    thread th2(addition);
    th1.join();
    th2.join();

    cout &lt;&lt; &quot;g_num:&quot; &lt;&lt; g_num &lt;&lt; endl;

    return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="方案一（atomic）"><a href="#方案一（atomic）" class="headerlink" title="方案一（atomic）"></a>方案一（atomic）</h4><p>　　如果每次能够将 <code>g_num++;</code> 的三行汇编捆绑打包，执行完这一坨之后， CPU 才会切到其它线程，那么此问题便迎刃而解。巧了；前辈们早提供工具实现此愿望  – 原子操作 atomic；</p>
<p>只需要修改一行代码即可，即可保证此自增代码一定是原子操作的。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; atomic
atomic&lt;int&gt; g_num &#x3D; 0;   &#x2F;&#x2F; 替换 int g_num &#x3D; 0;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>　　再看一眼汇编也发生了变化，从而确保了此行对  g_num 的自增一定是原子操作级别的（姑且理解为：此原子行为不可再分割多个步骤；或 CPU 一定是运行此捆绑的几行后，才会切给其它线程）；</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2022/20220112171733.png" width="70%"/ loading="lazy">

<p>无论运行多少次，此结果一定是符合预期的 10000；此也被称作为 <strong>线程安全</strong> 。和使用单线程运行和结果是一致的。</p>
<br>

<h4 id="方案二（mutex）"><a href="#方案二（mutex）" class="headerlink" title="方案二（mutex）"></a>方案二（mutex）</h4><p>　　在 <code>g_num++;</code> 的上面使用同一把互斥锁 <code>mutex g_mutex;</code> 对共享资源进行加锁和解锁，确保共享全局变量的写操作，每次<strong>仅</strong> 只能有一个线程对其写操作，使用期间其它线程不能对此写操作，若其它线程代码执行到加锁处，则变更为等待状态；只有被当前线程使用完毕解锁后，其它线程才可以去加锁，进行数值修改，修改完成后也会对应的解锁。如此循环往复。最终也是得到符合预期的结果，加锁后也属于 <strong>线程安全</strong> 的。<strong>加锁的原理</strong> 对应现实生活，就是多人上厕所，先进去的把厕所门关了，后来的人只能门外等着，上一个人用完后开门后，其他人才能进去；循环往复（就像历史总是循环交替一样）。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 加锁 mutex
int g_num &#x3D; 0;
mutex g_mutex;

void addition()
&#123;
	for (int i &#x3D; 0; i &lt; 5000; ++i) &#123;
        g_mutex.lock();
        g_num++;
        g_mutex.unlock();
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h5 id="额外探索"><a href="#额外探索" class="headerlink" title="额外探索"></a>额外探索</h5><p>　　使用加锁的目的和预期我们已经达到了，但是可以再更进一步探索；故意写一行 cout &lt;&lt; 打印语句，再执行加锁；</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;  mutex
int g_num &#x3D; 0;
mutex g_mutex;

void addition()
&#123;
	for (int i &#x3D; 0; i &lt; 5000; ++i) &#123;
        cout &lt;&lt; &quot;threadId:&quot; &lt;&lt; this_thread::get_id() &lt;&lt; &quot;  g_num:&quot; &lt;&lt; g_num &lt;&lt; endl;
        g_mutex.lock();  &#x2F;&#x2F; 尝试和上一行的 cout 行互换位置
        g_num++;
        g_mutex.unlock();
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>　　发现 g_num 的最终结果 <strong>总</strong> 是符合预期的，但是 cout &lt;&lt; 输出语句出现了错乱！！！ 是不是有一种时曾相识的感觉，甚是眼熟；你看像不像“这一行被翻译为了多行汇编指令，但是这一推汇编指令还没执行完毕，就被 CPU 通过时间片轮转，切换到其他线程了。” ？？？</p>
<p>　　cout&lt;&lt;  的底层是会调用系统级的输出函数的，此时会由用户态切换为内核态；且打印语句一般也耗时（相对），结合两者情况，是很容易出现下图的此情况的，输出语句被交替执行。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2022/20220112181103.png" width="80%"/ loading="lazy">

<p>而将 <code>g_mutex.lock();</code> 和 <code>cout &lt;&lt; xxx</code> 行互换时，运行的结果每一行都是符合预期的。运行结果全是这种，整整齐齐的：</p>
<pre class="line-numbers language-none"><code class="language-none">threadId:21496  g_num:9994
threadId:21496  g_num:9995
threadId:21496  g_num:9996
threadId:21496  g_num:9997
threadId:21496  g_num:9998
threadId:21496  g_num:9999
g_num:10000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a>【ExThreadSafety】</p>
<br>

<hr>
<h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>　　若是自己写例子的话，推荐在 for 循环中 的次数写大一点；加写一句 printf() 或 cout&lt;&lt; 输出，都是很容易得到线程不安全的运行结果。另外若是写在 main() 中，则用 <code>th1.join();</code> 函数，用来阻塞等待线程退出，获取线程退出的状态；而在类或者函数中，则使用 <code>.detach()</code> 来设置设置线程分离的属性。关于差异差异可参考 <a href="https://xmuli.blog.csdn.net/article/details/105620043">此文</a> 。</p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序二 经验</category>
        <category>学习 - Windows</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>分享如何拥有一份私人的『开源代码签名证书』</title>
    <url>/posts/92a415a2/</url>
    <content><![CDATA[<p><strong>简  述:</strong>  讲解如何拥有一份私人的代码签名证书，还是 『开源代码签名证书』→ </p>
<p><font color=#D0087E size=6 face="STFangsong">Open Source Code Signing Certificate 🎉🎉🎉</font></p>
<p>当自己写的软件开发完毕后，若想进行商店软件发布，则下一步需要搞定<strong>『代码签名证书』</strong>。给你的 EXE 标记一个戳，写上一个被 Microsoft 所认证的签名。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312282213353.jpg" width="100%"/ loading="lazy">

<br>

<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/135487951">分享如何拥有一份私人的『开源代码签名证书』</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/136334975">Sunny截图上架Microsoft Store及Linux商店流程的指北</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/136373241">嘿嘿！开发了一款 Sunny 截图 &amp; 钉图，亦支持“屏幕识图”和“OCR”的软件</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/130053230">基于 QT 开发 FLIPPED ：简易且漂亮的跨平台截图贴图软件</a></li>
<li>更多教程 → <a href="https://github.com/XMuli/QtExamples">QtExamples</a></li>
</ul>
<br>

<h2 id="代码签名证书的作用"><a href="#代码签名证书的作用" class="headerlink" title="代码签名证书的作用"></a>代码签名证书的作用</h2><p>代码签名证书（Code Signing Certificates）是什么？有什么用？</p>
<ol>
<li>运行程序时候，<strong>UAC 弹窗</strong>（User Account Control）上面会显示 <strong>“发布者（Publisher）”</strong> 的名字；</li>
<li>用户下载 EXE&#x2F;DLL 之后，通过查看属性签名，可以确保是该发布者发布的，未经过任何篡改</li>
<li><strong>上架 Microsoft Store 时候，必须要有被 Microsoft 所认可的的签名证书</strong>；反之则会被拒。一些三方商城同理。</li>
</ol>
<h2 id="代码签名证书的分类"><a href="#代码签名证书的分类" class="headerlink" title="代码签名证书的分类"></a>代码签名证书的分类</h2><p>证书分为三类</p>
<ul>
<li><strong>EV 代码签名</strong>：企业级别，价格最昂贵，无需积累任何信誉，就可以直接通过 <a href="https://learn.microsoft.com/en-us/windows/security/operating-system-security/virus-and-threat-protection/microsoft-defender-smartscreen/">Microsoft Defender SmartScreen</a>，不会触发此弹窗或者误杀；申请门槛也随最高的，需要提交公司执照等有效信息。</li>
<li><strong>Standard 代码签名</strong>：标准代码签名，价格相对 EV 便宜许多，也支持个人申请，理想的个人推荐；初次运行，会 Microsoft Defender SmartScreen 弹窗提示，当程序被足够多的用户使用后，在 Windows 中积累的信誉足够多，后面也不会弹出此弹窗。</li>
<li><strong>Open Source 代码签名</strong>：开源作者代码签名，价格最低，目前还能提供的厂商，都是人类文明之光，申请条件为开源的个人开发者。相传，在很多年前，这种证书各大厂商都是免费提供的，但随着 Window 系统 xp -&gt; 7&#x2F;8&#x2F;10&#x2F;11 的变迁，出于系统级的安全设计考虑，诞生出 “User Account Control” 弹窗；以及信任和不信任，还有证书的高昂，现如今基本没有厂商提供了此类证书。</li>
</ul>
<p>Code Signing Certificates 的价格 &#x2F; 年；</p>
<table>
<thead>
<tr>
<th></th>
<th>Signing in the Cloud</th>
<th>Signing - code</th>
<th>Signing - set</th>
</tr>
</thead>
<tbody><tr>
<td>EV</td>
<td>€ 379</td>
<td>€ 329</td>
<td>€ 359</td>
</tr>
<tr>
<td>Standard</td>
<td>€ 189</td>
<td>€ 129</td>
<td>€ 159</td>
</tr>
<tr>
<td>Open Source</td>
<td>€ 49</td>
<td>€ 25</td>
<td>€ 69</td>
</tr>
</tbody></table>
<p>注：购买实物的时候，还会有约 € 35 的运费 + 23% 的税费，默认是  DHL 快递。</p>
<h2 id="代码签名证书的购买"><a href="#代码签名证书的购买" class="headerlink" title="代码签名证书的购买"></a>代码签名证书的购买</h2><p>现代 (2024 年) 的签名证书购买 ，分为两类；</p>
<ul>
<li><p>**云上: ** 手机上使用 OTP + PC 联网条件</p>
</li>
<li><p>**本地: ** 实体的 cryptographic card  + card reader； </p>
<ul>
<li><p>一种是大的密码卡片 + 大的读卡器</p>
</li>
<li><p>另一种是类似于手机卡卡片 + USB 读卡器</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312282203223.png" width="60%"/ loading="lazy"></li>
</ul>
</li>
</ul>
<p>在线付款有较大概率性会被拒；手机提示信用卡支付成功，但是网站提示交易失败。通常等待三天左右，会自动原始账单返回，但是由于汇率和莫名的手续费，每次失败会损失约 ￥20 。可尝试切换支付方式或信用卡和切换节点。</p>
<h2 id="手动签名流程"><a href="#手动签名流程" class="headerlink" title="手动签名流程"></a>手动签名流程</h2><p>因我购买的是开源代码签名证书，其支持以下数字签名：</p>
<ul>
<li>UNIX&#x2F;Linux 软件</li>
<li>Firefox 和 Netscape 的扩展</li>
<li>Java 小程序</li>
<li>基于JAVA技术的互联网应用</li>
<li>ActiveX 组件和控件</li>
<li>二进制文件 (.exe .dll 等)</li>
</ul>
<p><strong>步骤如下：</strong></p>
<ol>
<li><p>付款成功</p>
</li>
<li><p>激活账号</p>
</li>
<li><p>验证本人以及开源开发者的身份</p>
</li>
<li><p>等待验证通过邮件，和按照邮件提示操作，里面的二维码都是是一次性的，一口气按照操作提示好</p>
</li>
<li><p>下载 SimplySign Desktop，，使用签名工具时必须联网验证身份 token；</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202401091823052.png" width="50%"/ loading="lazy">  

<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202401091826787.png" width="100%"/ loading="lazy"></li>
<li><p>使用 signtool + CMD进行签名</p>
<ol>
<li><p>打开 SimplySign Desktop 输入验证后，通过调用 Windows 自带的 signtool.exe 工具，来实现对 EXE &#x2F; DLL 的签名；参数如下</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">&gt; signtool.exe
  Valid commands:
    sign       --  Sign files using an embedded signature.
    timestamp  --  Timestamp previously-signed files.
    verify     --  Verify embedded or catalog signatures.
    catdb      --  Modify a catalog database.
    remove     --  Remove embedded signature(s) or reduce the size of an
                   embedded signed file.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>输入如下命令签名，盖上自己的章</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202401091833615.png" width="100%"/ loading="lazy"></li>
</ol>
</li>
<li><p>查看 EXE 属性，确认签名成功；最后对 EXE 签名成功，右键属性可查看到。</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312282222979.jpg" width="80%"/ loading="lazy"></li>
</ol>
<h2 id="上架-Microsoft-Store"><a href="#上架-Microsoft-Store" class="headerlink" title="上架 Microsoft Store"></a>上架 Microsoft Store</h2><p>当签上名后，就可上架 Microsoft Store ；也可以上架三方 XX 软件管家&#x2F; 商城，但通常需要提供软著和额外的其它文件。</p>
<p>这部分下次有空时，另单独写一篇，详细介绍上架流程全程；</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312282206422.png" width="100%"/ loading="lazy">

<p>下载地址：<a href="https://github.com/XMuli/ThinkyMatePages/releases">GitHub</a> ，这是一个ChatGPT 免费使用的跨平台客户端；更多介绍参见官网 <a href="https://thinkymate.xmuli.tech/">thinkymate.xmuli.tech</a> 。</p>
<br>

<h2 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> 欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
]]></content>
      <categories>
        <category>学习 - Windows</category>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - C/C++ 序三 商业</category>
        <category>专栏 - 项目实战开发</category>
      </categories>
      <tags>
        <tag>工程经验</tag>
        <tag>个人能力提升</tag>
      </tags>
  </entry>
  <entry>
    <title>列表控件QListWidget和工具按钮QToolButton的和用法</title>
    <url>/posts/52f018fb/</url>
    <content><![CDATA[<p><strong>简介：</strong> 主要讲解 <code>QListWidget</code>和<code>QToolButton</code>的和用法，其中还有<strong>QToolBar</strong>、<strong>QToolBox</strong>、<strong>QTabWidget</strong>这些简单是讲解和使用</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​		<strong>详情：</strong>  见简介，另外还有已下主要知识点</p>
<ul>
<li>删除<code>item</code>时候：<code>takeItem()</code></li>
<li><strong>QToolButton</strong>的<code>PopupMode</code>属性，和<code>setDefaultAction()</code>默认行为</li>
<li>给<strong>QListWidget</strong>添加鼠标右键弹出菜单</li>
</ul>
<br>

<p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p>
<p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p>
<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>先上一个最终的运行效果图：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190921162110.gif"/ loading="lazy">

<br>

<h2 id="布局设计图"><a href="#布局设计图" class="headerlink" title="布局设计图:"></a>布局设计图:</h2><p>其中的布局设计，如下图</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190921162322.png"/ loading="lazy">

<p>这个其中主要是创建多个<code>Action()</code>, 然后使用添加到工具栏和按钮上面，从而得相同的效果</p>
<br>

<h2 id="takeItem-移除item："><a href="#takeItem-移除item：" class="headerlink" title="takeItem()移除item："></a>takeItem()移除item：</h2><p><strong>删除item时候，takeItem(row)函数只是移除，不删除对象：</strong></p>
<ul>
<li><strong>其中删除QListWidget的item时候，需要注意：</strong><font color=#FE7207  size=3 face="幼圆"><strong>一定要手动删除其创建的item</strong></font></li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190901193426.png"/ loading="lazy">

<p>翻译如下：</p>
<blockquote>
<p>从列表小部件中的给定行中删除并返回项;否则返回0。从列表小部件中删除的项目将不会由Qt管理，并且需要手动删除。</p>
</blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//actDel删除一个指定的ListWidget的列表项</span>
<span class="token keyword">void</span> <span class="token class-name">ExQListWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actDel_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> row <span class="token operator">=</span> ui<span class="token operator">-></span>listWidget<span class="token operator">-></span><span class="token function">currentRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QListWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> ui<span class="token operator">-></span>listWidget<span class="token operator">-></span><span class="token function">takeItem</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//删除该为row的item， 并且返回指针</span>
    <span class="token keyword">delete</span> item<span class="token punctuation">;</span>                                                       <span class="token comment">//手动删除对象</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="PopupMode的属性-下拉小箭头"><a href="#PopupMode的属性-下拉小箭头" class="headerlink" title="PopupMode的属性(下拉小箭头):"></a>PopupMode的属性(下拉小箭头):</h2><p><strong>QToolButton的PopupMode属性，和setDefaultAction()默认行为：</strong></p>
<p>文档如下，例子如下面代码</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190901220227.png"/ loading="lazy">

<ul>
<li>ToolBar 添加项选择（带下拉框） 和退出；右侧一个按钮也添加一个项的选择</li>
</ul>
<p>添加下图所示的两个地方</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190901223509.png"/ loading="lazy">

<p>【上图靠上的QToolButton】其风格样式属性是<code>setPopupMode(QToolButton::InstantPopup)</code>；和靠下面那个有区别，<strong>点击所有地方都会弹出菜单</strong>（由代码的ToolBotton的样式故意设置不一样进行演示的）</p>
<p>【上图靠下的QToolButton】其风格样式属性是<code>setPopupMode(QToolButton::MenuButtonPopup)</code>；默认可以点击<strong>左侧主体</strong>（非右侧三角形状的下拉部分），也会有反应(但是不弹出菜单)；<strong>只有点击右侧有三角形区域，才会弹出菜单</strong>，默认激活<code>setDefaultAction(ui-&gt;actSelPopMenu)</code>；而<strong>actSelPopMenu</strong>又在Design里面与<strong>actSelInvs</strong>进行了关联。所以点击其左侧部分，相当于点击了反选</p>
<p>其中代码如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//ToolBar 添加项选择（带下拉框） 和退出；右侧一个按钮也添加一个项的选择</span>
<span class="token keyword">void</span> <span class="token class-name">ExQListWidget</span><span class="token double-colon punctuation">::</span><span class="token function">creatorPopMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//创建菜单</span>
    QMenu<span class="token operator">*</span> menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QMenu</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                         <span class="token comment">//创建弹出式菜单</span>
    menu<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actSelAll<span class="token punctuation">)</span><span class="token punctuation">;</span>
    menu<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actSelInvs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    menu<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actSelNone<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//右侧ListWidget， 其上方的toolBtn按钮</span>
    <span class="token comment">//设置toolBtnSelectItem的多个属性：PopupMode、ToolButtonStyle等（在Design已经设置）</span>
    ui<span class="token operator">-></span>toolBtnSelectItem<span class="token operator">-></span><span class="token function">setDefaultAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actSelPopMenu<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//关联action</span>
    ui<span class="token operator">-></span>toolBtnSelectItem<span class="token operator">-></span><span class="token function">setMenu</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment">//设置下拉菜单menu</span>

    <span class="token comment">//工具栏QToolBar上面的下拉菜单样式按钮</span>
    QToolButton<span class="token operator">*</span> toolBtn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QToolButton</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    toolBtn<span class="token operator">-></span><span class="token function">setPopupMode</span><span class="token punctuation">(</span>QToolButton<span class="token double-colon punctuation">::</span>InstantPopup<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">//下拉式菜单样式属性</span>
    toolBtn<span class="token operator">-></span><span class="token function">setToolButtonStyle</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>ToolButtonTextUnderIcon<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//设置汉字出现在icon下面</span>
    toolBtn<span class="token operator">-></span><span class="token function">setDefaultAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actSelPopMenu<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//关联action</span>
    toolBtn<span class="token operator">-></span><span class="token function">setMenu</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token comment">//关联菜单</span>
    ui<span class="token operator">-></span>toolBar<span class="token operator">-></span><span class="token function">addSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                           <span class="token comment">//添加隔栏</span>
    ui<span class="token operator">-></span>toolBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>toolBtn<span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token comment">//添加到工具栏</span>

    <span class="token comment">//添加退出按钮</span>
    ui<span class="token operator">-></span>toolBar<span class="token operator">-></span><span class="token function">addSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>toolBar<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actExit<span class="token punctuation">)</span><span class="token punctuation">;</span>                                   <span class="token comment">//添加退出按钮</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="给QListWidget添加鼠标右键弹出菜单："><a href="#给QListWidget添加鼠标右键弹出菜单：" class="headerlink" title="给QListWidget添加鼠标右键弹出菜单："></a>给QListWidget添加鼠标右键弹出菜单：</h2><blockquote>
<p>只要是继承于<strong>QWidget</strong>均有<strong>customContextMenuRequested</strong>这个信号，是鼠标右键发射的信号；可以用来创建和运行右键快捷菜单</p>
</blockquote>
<ul>
<li><strong>设置QListWidget支持右键菜单,这句话一定要有</strong>， 不然下面的设置不会生效</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ui<span class="token operator">-></span>listWidget<span class="token operator">-></span><span class="token function">setContextMenuPolicy</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>CustomContextMenu<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>实现菜单细节：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//鼠标右键自定义快捷菜单</span>
<span class="token keyword">void</span> <span class="token class-name">ExQListWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_listWidget_customContextMenuRequested</span><span class="token punctuation">(</span><span class="token keyword">const</span> QPoint <span class="token operator">&amp;</span>pos<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"11111111"</span><span class="token punctuation">;</span>
    <span class="token function">Q_UNUSED</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span>
    QMenu<span class="token operator">*</span> menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QMenu</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                         <span class="token comment">//创建菜单</span>
    menu<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actListInit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    menu<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actAdd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    menu<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actDel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    menu<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actClear<span class="token punctuation">)</span><span class="token punctuation">;</span>
    menu<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actInsert<span class="token punctuation">)</span><span class="token punctuation">;</span>
    menu<span class="token operator">-></span><span class="token function">addSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    menu<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actSelAll<span class="token punctuation">)</span><span class="token punctuation">;</span>
    menu<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actSelNone<span class="token punctuation">)</span><span class="token punctuation">;</span>
    menu<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actSelInvs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    menu<span class="token operator">-></span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token class-name">QCursor</span><span class="token double-colon punctuation">::</span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token comment">//在鼠标光标位置显示右键快捷菜单</span>
    <span class="token keyword">delete</span> menu<span class="token punctuation">;</span>                                                           <span class="token comment">//手工创建的指针必须手工删除</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>实现效果：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190901224141.png"/ loading="lazy">

<br>

<h2 id="关于初始化QListWidgetItem按钮："><a href="#关于初始化QListWidgetItem按钮：" class="headerlink" title="关于初始化QListWidgetItem按钮："></a>关于初始化<code>QListWidgetItem</code>按钮：</h2><p>左侧的初始化ListWidget，点击之前会确认右上角的<strong>□可编辑复选框</strong>是否被勾上√， <strong>其完整含义是：□ 框 初始化的成员，是否设置为可编辑，若勾选，那么初始化的成员都是可以别编辑的</u></strong>**</p>
<p>且新创建的<strong>QListWidgetItem</strong>项，应该的<strong>Flags</strong>属性一般设置为如下</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//actListInit初始化ListWidget的列表项listWidget</span>
<span class="token keyword">void</span> <span class="token class-name">ExQListWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actListInit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QListWidgetItem<span class="token operator">*</span> item<span class="token punctuation">;</span>                                          <span class="token comment">//每一行都是一个QListWidgetItem</span>
    QIcon icon<span class="token punctuation">;</span>
    icon<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/images/github.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> chk <span class="token operator">=</span> ui<span class="token operator">-></span>checkBox<span class="token operator">-></span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">//是否可编辑</span>

    ui<span class="token operator">-></span>listWidget<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QListWidgetItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(ui->listWidget);            //创建一个item</span>
        item<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"初始化 第%1个项item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置文字</span>
        item<span class="token operator">-></span><span class="token function">setIcon</span><span class="token punctuation">(</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token comment">//设置icon图标</span>
        item<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">//设置选中方式</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>chk<span class="token punctuation">)</span>                                                    <span class="token comment">//可编辑</span>
            item<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsEditable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            item<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>

        ui<span class="token operator">-></span>listWidget<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment">//添加项item到listWidget里面</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="核心源码："><a href="#核心源码：" class="headerlink" title="核心源码："></a>核心源码：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//actInsert在ListWidget的列表项中插入一个项item</span>
<span class="token keyword">void</span> <span class="token class-name">ExQListWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actInsert_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QListWidgetItem<span class="token operator">*</span> item<span class="token punctuation">;</span>                                           <span class="token comment">//每一行都是一个QListWidgetItem</span>
    QIcon icon<span class="token punctuation">;</span>
    icon<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/images/gril.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> chk <span class="token operator">=</span> ui<span class="token operator">-></span>checkBox<span class="token operator">-></span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">//是否可编辑</span>

    item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QListWidgetItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token comment">//创建一个item</span>
    item<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"插入一个项item: "</span> <span class="token operator">+</span> <span class="token class-name">QDateTime</span><span class="token double-colon punctuation">::</span><span class="token function">currentDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-mm-dd hh:MM:ss:zzz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//设置文字</span>
    item<span class="token operator">-></span><span class="token function">setIcon</span><span class="token punctuation">(</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span>                                              <span class="token comment">//设置icon图标</span>
    item<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">//设置选中方式</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>chk<span class="token punctuation">)</span>                                                          <span class="token comment">//可编辑</span>
        item<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsEditable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        item<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>

    ui<span class="token operator">-></span>listWidget<span class="token operator">-></span><span class="token function">insertItem</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>listWidget<span class="token operator">-></span><span class="token function">currentRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加项item到listWidget里面</span>
<span class="token punctuation">&#125;</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>

<span class="token comment">//actAdd添加一个指定的ListWidget的列表项</span>
<span class="token keyword">void</span> <span class="token class-name">ExQListWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actAdd_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QListWidgetItem<span class="token operator">*</span> item<span class="token punctuation">;</span>                                           <span class="token comment">//每一行都是一个QListWidgetItem</span>
    QIcon icon<span class="token punctuation">;</span>
    icon<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/images/TREE.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> chk <span class="token operator">=</span> ui<span class="token operator">-></span>checkBox<span class="token operator">-></span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">//是否可编辑</span>

    item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QListWidgetItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token comment">//创建一个item</span>
    item<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"添加一个项item: "</span> <span class="token operator">+</span> <span class="token class-name">QDateTime</span><span class="token double-colon punctuation">::</span><span class="token function">currentDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-mm-dd hh:MM:ss:zzz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//设置文字</span>
    item<span class="token operator">-></span><span class="token function">setIcon</span><span class="token punctuation">(</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span>                                              <span class="token comment">//设置icon图标</span>
    item<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">//设置选中方式</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>chk<span class="token punctuation">)</span>                                                          <span class="token comment">//可编辑</span>
        item<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsEditable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsUserTristate <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        item<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsUserTristate <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>

    ui<span class="token operator">-></span>listWidget<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment">//添加项item到listWidget里面</span>
<span class="token punctuation">&#125;</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>

<span class="token comment">//设置全选</span>
<span class="token keyword">void</span> <span class="token class-name">ExQListWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actSelAll_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> nCount <span class="token operator">=</span> ui<span class="token operator">-></span>listWidget<span class="token operator">-></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        QListWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> ui<span class="token operator">-></span>listWidget<span class="token operator">-></span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        item<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>Checked<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>

<span class="token comment">//设置QListWidget的当前item发生变化，触发的信号,会在右侧显示出来</span>
<span class="token keyword">void</span> <span class="token class-name">ExQListWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_listWidget_currentItemChanged</span><span class="token punctuation">(</span>QListWidgetItem <span class="token operator">*</span>current<span class="token punctuation">,</span> QListWidgetItem <span class="token operator">*</span>previous<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>previous <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>
            ui<span class="token operator">-></span>lineEditRight<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"当前项:%1；  前一项%2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>current<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token string">"不存在"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            ui<span class="token operator">-></span>lineEditRight<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"当前项:%1；  前一项%2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>current<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>previous<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a>【QtQListWidgetEx】</p>
<br>



]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>刚买的域名怎么绑定自己博客？再白嫖一年的SSL，使用https访问博客</title>
    <url>/posts/7ba1510/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　本篇只是说说怎么将刚买的域名绑定到自己的博客； 又如何白嫖一年的 SSL 证书，给你博客网站访问去掉<em>不安全</em> 访问标签，使用 https 访问博客网址。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="背景铺垫："><a href="#背景铺垫：" class="headerlink" title="背景铺垫："></a>背景铺垫：</h3><p>使用 Hexo + githubPage 搭建的博客，想要绑定域名 + 开启 https 访问。</p>
<p>将博客绑定域名，启用 SSL 证书，升级为 https 访问，其具体操作步骤如下：</p>
<ol>
<li>购买域名</li>
<li>绑定博客地址和域名（设置域名解析）</li>
<li>启用白嫖 SSL 证书，设置 https 方式。</li>
<li>配置 github 博客仓库，勾选中 <code>Enforce HTTPS</code> 功能。</li>
</ol>
<br>

<h3 id="服务商购买域名："><a href="#服务商购买域名：" class="headerlink" title="服务商购买域名："></a>服务商购买域名：</h3><p>选择一个服务商，这里以阿里云的万网为例：<a href="https://wanwang.aliyun.com/domain/">wanwang.aliyun.com</a> ；在这里购买你所想要的域名（极少部分不能够备案，极其不推荐购买）。选好之后，按照流程，创建实名模板，绑定联系邮箱，付钱下单，然后到 <code>控制中心-域名服务中去</code>。 选择你购买的域名下的右侧 <code>解析</code> 设置。</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_20200308_012701.png" width="70%"/ loading="lazy">

<br>

<h3 id="设置域名解析："><a href="#设置域名解析：" class="headerlink" title="设置域名解析："></a>设置域名解析：</h3><p>以我自己的为例：</p>
<p>顶级域名: xmuli.tech<br>博客地址: <a href="https://touwoyimuli.github.io/">https://touwoyimuli.github.io</a></p>
<p>打开终端，ping 一下博客的地址，得到博客服务器的地址：<code>185.199.111.153</code>；</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_20200308_013049.png" width="60%"/ loading="lazy">



<p>然后将域名解析的设置为如下：</p>
<p>选择 A 类，将子域名解析到对应的 ip 地址的服务器。</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_20200308_013736.png" width="100%"/ loading="lazy">



<p>这里的 TTL 的含义是，修改一行配置之后，这个解析要十分钟才能够生效。在 10 分钟后，再次在浏览器里面打开此网址。会显示 github 的 404 页面；此时说明解析已经生效，但是还有一步骤没有设置。</p>
<p>进入到本地电脑的 blog 的文件夹，在 source 文件夹下创建 CNAME 文件，在里面写下你的域名；前面不要加 http ，https ，www 或者最后面还有一个 &#x2F; 这些符号。</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_20200308_014715.png" width="70%"/ loading="lazy">



<p>在执行如下熟悉的命令，将 blog 文件夹的内容生效且上传到站点：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean   //清除旧的缓存数据
hexo g <span class="token parameter variable">-d</span>    //配置和同步上传到 github 仓库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<p>在此打开访问网址， 会发现成功的打开你的博客网址了（第一次解析会有点慢）。</p>
<br>

<h3 id="启用-SSL，设置-https-访问："><a href="#启用-SSL，设置-https-访问：" class="headerlink" title="启用 SSL，设置 https 访问："></a>启用 SSL，设置 https 访问：</h3><p>此时会发现，该网址被标记为不安全，原因是访问的全称<br>是 <a href="http://xmuli.tech/">http://xmuli.tech</a> ，而非是 <a href="https://xmuli.tech/">https://xmuli.tech</a> 这个。</p>
<p>查询了一下，githubPage 是支持 https 方式，但是不能够直接上传 SSL 证书。被限制住了。</p>
<p>于是乎你的网址就被标记为不安全；作为文艺青年，这怎么能够容忍，wtf！！！</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_Snip20200307_204719.png" width="70%"/ loading="lazy">



<p>必须给它安排了，此时的将 http 升级为 https 的解决方式如下：</p>
<ul>
<li>借用 CloudFlare CDN 提供商的服务</li>
<li>使用 SSL 证书（白嫖一年）</li>
<li>自己价格不菲购买证书，部署到机器，机器部署<code>nginx</code>，<code>stunnel</code>等代理</li>
</ul>
<p>作为一个在家蹲了快两个月，躲避疫情的<del>穷且屌丝的</del>工程师，我倾向于第二条，这是无意之中开启的新世界大门；</p>
<p>钱不是问题，关键是对于咳咳，技术的兴趣的折腾。</p>
<p>打开阿里云控制台的 <code>基本信息</code>，选择  <code>开启 SSL 证书</code>，</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_Snip20200307_210418.png" width="60%"/ loading="lazy">

 

<p>然后点击购买 “GeoTrust” 的证书，默认是第一个。。。。。。为何藏起如此之深！！！</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_Snip20200307_210507.png" width="70%"/ loading="lazy">



<p>作为一口气买了 10 年的域名，因为<del>钱不是问题，</del>懒惰管理，选择购买年限最长的 SSL 证书，省去一年年的续费，准备 付款下单一气呵成，等等，，这个有点超出了，，，（数了数费用的小数点，这玩意怎么比域名还贵，还是续费方式的。不能够买断）。不好思思， 我再去看看其他方式加上小绿锁。</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_Snip20200307_210541.png" width="50%"/ loading="lazy">



<p>就在这个页面，发现有 <code>个人版的证书 </code> ，且免费，果断下单，完成次笔交易。此刻双方都表示合作很愉快</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_Snip20200307_210717.png" width="50%"/ loading="lazy">



<p>接下来就是配置证书，点击证书的右侧的 <code>证书申请</code> ，再填写一下，等待大约 10 分钟，会看到上面那张图里面 ，配置域名解析的图，里面多出一行 txt 的配置，看到她出来，就属于配置成功。<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_Snip20200307_211124.png" width="100%"/ loading="lazy"></p>
<br>

<h3 id="开启-github-blog-仓库的HTTPS："><a href="#开启-github-blog-仓库的HTTPS：" class="headerlink" title="开启 github blog 仓库的HTTPS："></a>开启 github blog 仓库的HTTPS：</h3><p>还差最后一脚，进入到 github 的这个对应的博客的仓库，点击 <code>setitng</code>，往下翻网页， 找到 <code>GitHub Pages </code> 这个标签，勾选中 <code>Enforce HTTPS</code> 这一栏。然后再次在浏览器里面输入网址，会发现 显示为安全的访问。</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_20200308_023426.png" width="50%"/ loading="lazy">

 

 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_Snip20200307_202022.png" width="50%"/ loading="lazy">



<p>再次点击网页浏览，会发现为安全的访问，小锁的标记也有了，且无论是输入 http， 域名，旧的 github.io 方式，都会被强制跳转为 https 链接方式浏览。开心。</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_20200308_024317.png" width="70%"/ loading="lazy">

<br>

<h3 id="一年之后："><a href="#一年之后：" class="headerlink" title="一年之后："></a>一年之后：</h3><p>不过在 SSL 一年后到期，可以再次购买此证书一年；或者尝试使用 <a href="https://www.cloudflare.com/">CloudFlare</a> 来解决（方式参考文末链接），亦或是那个时候，你已经有个很多个证书。毕竟事情总是在发展和变化的。另外，还白嫖了一篇配置文章，还图文并茂，点个赞留言再留如何？下次一定也可以啊！</p>
<br>

<p><strong>参考：</strong></p>
<p><a href="https://tzhou2018.github.io/2018/04/%E4%B8%BAGitHub-Pages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%B9%B6%E6%B7%BB%E5%8A%A0SSL-%E5%BC%80%E5%90%AFHTTPS%E5%BC%BA%E5%88%B6/">为GitHub Pages自定义域名并添加SSL-开启https强制</a> </p>
<p><a href="https://juejin.im/post/5a308ae551882540f363879a">为你的hexo博客配置个性域名</a> </p>
]]></content>
      <categories>
        <category>学习 - Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>创建 QKeySequenceEdit() 后，显示方块■◆乱码</title>
    <url>/posts/17760087/</url>
    <content><![CDATA[<p><strong>简  述:</strong> 创建的 <strong>Qt QKeySequenceEdit</strong> 快捷键编辑框，显示方块■◆乱码。</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202207132322385.png" width="40%"/ loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>　　💻  <code>win10 21H2</code> 📎 <code>Qt 5.12.11</code> 📎  <code>Visual Studio 2019</code> </p>
<p>　　产生口字的方块乱码原因，通常是以 UTF-8 方式读取 GBK 编码的中文。对于此类编码问题，我早已没有问题。故，且再次检验过所有编码相关，根本不是我的原因：很明显，是 <code>new QKeySequenceEdit()</code> 出现了问题。</p>
<br>

<p>PS： 如果不懂乱码原因和如何解决，请参考如下 <a href="https://github.com/XMuli/QtExamples">QtExamples</a> 的第六部分章节，摘取其中两篇：极简和根因探究</p>
<ul>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/99617767">古文码、口字码、符号码、问号码、棍拷码</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/120661967">愿编程不再乱码(含Qt)-根因深究</a></li>
</ul>
<br>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>　　最后发现是因为混用了，导致的</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">new</span> <span class="token function">QKeySequence</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>CTRL <span class="token operator">+</span> Qt<span class="token double-colon punctuation">::</span>Key_Shift <span class="token operator">+</span> Qt<span class="token double-colon punctuation">::</span>Key_Y<span class="token punctuation">)</span>  <span class="token comment">// error 混用了</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>

<p>正确的用法，参考 Qt Assistant</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">QKeySequence</span><span class="token punctuation">(</span>QKeySequence<span class="token double-colon punctuation">::</span>Print<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">QKeySequence</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"Ctrl+P"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// "+" 的左右不能有 "空格"</span>
<span class="token function">QKeySequence</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"Ctrl+p"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">QKeySequence</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>CTRL <span class="token operator">+</span> Qt<span class="token double-colon punctuation">::</span>Key_P<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>学习 - C/C++ 序二 经验</category>
        <category>学习 - Windows</category>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>初次上班的感觉</title>
    <url>/posts/dad5df92/</url>
    <content><![CDATA[<p>​	实习两月余，身体已虚，非她，而是代码，可悲乎？</p>
<p>​	如今，时长得思考一下，倘若离开公司，自己有那些收获？学到了什么？</p>
<p>2019-07-19更新</p>
<p>不是觉得累，要有学习的前进方向。</p>
<p>2019-09-25 更新：</p>
<p>或许有了对比，才愈加感觉之前那家公司，其实并不是自己所喜欢的方向，当初辞职实习愈发觉得不遗憾</p>
]]></content>
      <categories>
        <category>生活 - 闲暇的趣闻</category>
      </categories>
  </entry>
  <entry>
    <title>又是一年春好色（辛丑年）</title>
    <url>/posts/2d307b31/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　辛丑年正月初二，又是一年春好色。记烟花夜空绽放，美丽而又美好。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p>​		</p>
<p>​		年初二，沐浴阳光☀️，待午晌后，酒足饭饱；宾客来者，姐夫周者有兴致，相约垂钓，另一人，同附和，携吾共赴河边，垂钓或渔网之🎣🎣🎣。</p>
<br>

<p>​		乃驱车，路至一小路转角，遇一车，车窗互视，是二叔亲姐，惠姐姐，也幼时疼爱我者，高兴，简聊之。后至二叔家，询其幼子：“钓竿何在？” ， 曰：“不知”。遂与之，房间共寻之，不得，返。继而电话询二叔，知鱼竿所置之处，复返；再遇惠姐姐与其良人；与其详聊生活、工作等之境况，甚欢。同时继而寻竿，取之，返程。</p>
<br>

<p>​		左持一篓，右握一鱼竿，余者有携渔网、铁铲、饵等。一起大步，欣欣然往；至于河边，见河面，两侧浑水，水草浮生，中间清澈，有甚多鱼排队缓慢游之；亦见数条红尾鲤鱼，体型较大。亦有鲫鱼纹丝不动，亦不惧人，身旁偶有泡泡上浮。二人手执杆垂钓，一人渔网之。静待良久，不上钩，遂挪另一古桥，再次垂钓之。看水波涟漪、水面映日，波光粼粼，微风清徐，惬意舒适，悠哉自然。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210213232842.png" width="50%"/ loading="lazy">

<br>

<p>​		良久，天渐黑，起鱼竿返家。鱼篓空空来，亦空空而反。门口闲聊，一小儿童，吾侄儿，见吾等归来，童言无忌望向二叔：“爸爸，鱼呢？”。其妻、姑姑、奶奶、爷爷、叔叔等，一顿，皆哄堂大笑，玩笑再起：“钓鱼，鱼呢？”。甚至开心，一起等皆感其乐一堂。</p>
<br>

<p>​		恰逢另两幼侄游玩归家，带饮料、小吃和烟花、爆竹🧨🧨🧨等。恰好，心有一大胆想法，点一炷香，与两幼侄共归其垂钓处。途中，一侄点燃其爆竹，扔之于菜地，硝烟起，一大坑（记载于此，便日后可忆）；至于古桥，爆竹扔于鱼儿出没处，见鱼腹大白，疑晕，不久摇摇尾巴，惊吓逃遁之。后与一起点燃，爆竹声声入耳，响彻云霄，心有一惊，亦同时开心至极。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210213233714.png" width="50%"/ loading="lazy">

<br>

<p>​		毕，归家。餐后，再次闲聊八卦等消遣。后提议共放烟花共欣赏，一群大小孩，皆一起点燃绽放烟火。有多个置于地面，有各手持一杆，约定共点燃之，拍照片、volg 等留作回忆。间隙，母亲言：“姐弟皆一家人，即使皆放烟火，也都是左手叉腰，微斜身体，右手持冲天烟火，期间言辞姿势等也相差无几，当真是快乐。”   年就是家人的团聚， 与平日难得一见的亲人等，团聚一堂，吃瓜果零食，共吃一桌佳肴菜，谈一年变化，互道牵挂于担心，彼此之间互相祝福，共同期待来的一年更好。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210213-231258.gif" width="50%"/ loading="lazy">

<br>

<p>​		记辛丑年正月初二夜，共赏烟花美景，虽易逝，但美好留于回忆不易逝；书写初三，忽感今天亦是情人节，顺祝你们祝新年梦想成真，所有有情人：愿年年岁岁永相依，朝朝暮暮心相携，柔情似水，佳期如梦。</p>
<br>

<p><strong>望两姓联姻，一堂缔约，良缘永结，匹配同称；</strong></p>
<p><strong>便看此日桃花灼灼，宜室宜家，卜他年瓜瓞绵绵，尔昌尔炽；</strong></p>
<p><strong>谨以白头之约，书向鸿签，终好将红叶之盟，载明鸳谱。</strong></p>
]]></content>
      <categories>
        <category>生活 - 闲暇的趣闻</category>
      </categories>
      <tags>
        <tag>新年</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Deepin 研发 DDE 的时光</title>
    <url>/posts/2a832e7a/</url>
    <content><![CDATA[<p>​		漫步，回住宅的路上，天已渐黑，今，风儿也甚是喧嚣；脸上略感冰冷，大概是寒冬，外加临近过年，忽回忆前一年，感时间的流逝，略有所感、、 来水一篇</p>
<p>​		书上说，文章都说讲究脉络清晰、神不散；可我写文章，对于非技术类，更喜汪洋恣肆、随心所欲、不想过多。想多了就缺少某种感觉。在本篇完成之后，闲来无事， Google 了下，居然看到许多大佬也有写过此类研发新的。发现除了 <a href="https://blog.justforlxz.com/">justforlxz</a> 说过： 造轮子就是 Deepin 的传统。我觉得应该加一句： 写研发心得也是 Deepin 的传统之一。 噫嘘唏，危栽，感又入一坑。思来想去，必须得将此段置于前。</p>
<p>​		</p>
<p>​		<strong>六月毕业，寻第一份工作。</strong> 记得武汉的夏天，热外的燥热，那天持着简历，来到金融港的某栋 6 楼面试；面试官温文尔雅，很年轻，看着与我差不多同龄，交谈间感知，比我多一丝成熟与稳重。面试过程貌而不生分，一直到最后的结束都甚是愉悦（技术面很是愉快）。临走时被一间展示厅吸引，里面有着很多漂亮且简洁的应用程序的 logo、和注意到大家头发也比较多，应该可以保住我的头发，嗯！就决定来了，结缘，于是 Deepin 也有了自己工位。（后将初次工作的场景写了出来，虽然略答不对问，但意外成了热门高赞，原来大家都比较喜欢<del>吃瓜</del>？？？ 有兴趣可看：[zhihu.com](如何评价华为官方Matebook14 Linux版? - 偕臧的回答 - 知乎 <a href="https://www.zhihu.com/question/344339517/answer/817025546">https://www.zhihu.com/question/344339517/answer/817025546</a>) ）。 </p>
<p>​		<strong>在一个热情、舒适且友好的环境成为一名研发是一件很快乐的事情。</strong> 负责 <code>DTK</code> 库的开发和维护，初始，遇到不会，zccrs 就坐在我们几个新人旁边，手把手教导怎么敲 DTK 的代码和 Git 的使用；柑橘上班的第一周，代码都是他帮敲的、甚是不好意思（现在脸皮已经厚多了）；七月起， DTK 处于开始改写大量 Qt 控件样式的时期，基本所有常用控件都要写一遍，还有一些新增加的自定义控件。虽然工作量较多，开发者很少，且在赶时间开发新功能、但却没有 KPI，但是大家的热情和主动都很高，会互相之间，主动帮助其他人解惑，或者帮助自己和他人共同进步，氛围甚是融洽，舒适而又愉快。且后面这种氛围一直延续至今，让人舒适。</p>
<p>​		<strong>DTK 最初是基本缺乏文档的，全靠口口相传。</strong> 使得库的维护者，也只能靠阅读源码、以及前辈们的口口相传。记得开发应用软件的研发们，被迫一起看源码来开发软件，而非有完善的文档可供查阅；也会在网页通讯平台中，被它们一直追着问有哪些接口？当前要实现的但是没有对应接口，该如何处理之类？此时处于高速发展期的 DTK，接口也有着大量的增加和修改，同时逐渐考虑向下兼容；那个时候我就在想，如果 DTK 要是有文档该多好啊；且非常希望能够为 DTK 团队扩人，感觉仅 2、3 人写不过来。不过后来时间证明完成了（只能说大佬们太肝了），要保重身体。且如今的 DTK 团队也扩大了，接口也越加稳定和支持向下兼容，真的是棒极了。（设计师给的图觉得真的好看），关于 DTK 的历史可看 <a href="https://xmuli.tech/posts/974df8a3/">此处</a></p>
<p>​		<strong>在开源社区后，就一直致力于 DTK、DDE、社区的推广（举办知识分享、PPT 交流等）和文档的完善。</strong> 在开发 DTK 过程中，通过 zccrs 等指导，将 DTK 的原理抽出来了，独自写出了原生的控件自绘皮肤、以及会自己创建自定义控件，写成了一个 Qt 和 DTK 的入门代码例子，写了面向维护者 DTK 的文档 （<a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a>）。虽然比较费时费力，但是想到能够帮助更多的人入门<del>（入坑）</del>，想想就觉得开心，同时也感觉自己进步而开心。没有文档是我心中一直所缺憾，感觉学起来不了解其历史，很辛苦和缺乏一些趣味，但倘若每一个后来者再重复，岂不是呜呼哀哉！！！但是我既然学过，那就有必要让后来人降低台阶，更加方便的入门。于是后来，专职负责 Deepin 社区版，有了很多时间，终于腾出手来将 DTK （且上升为 Deepin） 的文档整理出来了。作为一个比文艺骚年，首先文档界面不能比较 low？在搭建 <code>docsify</code> 、 <code>vuepress</code> 、 <code>gitbooks</code>、 <code>blog</code>、<code>变种主题</code> 等后，熟悉了每一个坑，综合选出了一个美观且易于维护的框架来搭建文档，且修缮了一些旧的文档。<strong>现在 DTK 相关文档集合</strong> ：<a href="https://docs.deepin.org/pages/45e05f/">https://docs.deepin.org/pages/45e05f</a> </p>
<p>​		<strong>在社区通常是自我驱动，能够获取更多的独立成长，以及感受到团队伙伴的帮助。</strong> 属于你想完成什么？调研？可行性分析？它需要怎么做？如何获取帮助？如何去与人沟通交协调等等等？前面参与 Deepin 发布版本和 Bug 修复，后参与开源社区的建设，自由度和灵活度都有很宽松，灵活度和一些规则都比较宽松，但同时又责任重大。在这里，你想为社区做什么事情，如何去吸引人参与贡献？协调和组织一些开源活动？然后大佬们通常支持你，且提供帮助。围绕着 Deepin 的上下游，社区关系维护、和开源布道等，让你做想做的事情，也可以让你学你想学的知识。这里也可以感受到很多的代码之外的东西，亦是受益匪浅。</p>
<p>​		最后，开卷有益，与人沟通快乐。写完之后，竟然感觉有几分的痛快淋漓，虽有点行笔凌乱，但所言已至于文中，最近白天有点忙，晚上码字，一霹雳啪啦的，就又到了凌晨 了。不熬夜了，先苟了，睡觉（。</p>
<p>​		</p>
<p>、</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
        <category>生活 - 闲暇的趣闻</category>
      </categories>
      <tags>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Mac 编译成功运行 qt5.15 源码：debug 和 release 版本</title>
    <url>/posts/8b05b275/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　在 <code>Mac</code> 上编译 <code>qt 5.15</code> 源码，<code>debug</code> 和 <code>release</code> 版本。感觉每一个学 <code>C++/Qt</code> 的人，大概都会早晚都会这么一个念头，去编译一下 Qt 源码，只是有去尝试或者没有尝试过罢了。本文提供一个详细的编译全程和原文翻译。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=5 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://xmuli.tech/">xmuli.tech</a>，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​		下载最新的 <code>Qt</code>  源码(5.15.2)来编译一下，编译一个 release 和 debug 的最新代码；当然，也可以只编译所有源码其中的一些子模块；或者直接下载子模块代码；和再编译一下 QtCreator ；源码官方的<a href="https://download.qt.io/official_releases/qt/">下载地址</a> 。<br>​		这里将 qt-everywhere 和 qtbase 的源码都编译一下；且分别编译一下</p>
<p>首先可以参考对应的官方编译说明：</p>
<ul>
<li>英文原文： <a href="https://xmuli.tech/posts/59cc7a9d/">HOW TO BUILD QT5（5.15）</a> </li>
<li>中文译文：<a href="https://xmuli.tech/posts/df7f9a4d/">如何构建 QT5（5.15）</a> </li>
<li>再结合本篇文章实践，实际过程和其原文略有差异，文章标注注意点。</li>
</ul>
<br>

<p><strong><a href="https://download.qt.io/official_releases/qt/5.15/5.15.2/submodules/qtbase-everywhere-src-5.15.2.tar.xz">README</a> 上说：</strong></p>
<ul>
<li><p>Perl 5.8或更高版本</p>
</li>
<li><p>Python 2.7或更高版本</p>
</li>
<li><p>支持C++11标准的C++编译器</p>
</li>
</ul>
<br>

<p><strong>实际本机环境：</strong> <code>MacOS 10.14.6</code> 📎 <code>Command_Line_Tools_for_Xcode_11.3.1</code> 📎 <code>Perl v5.32.1</code> 📎<code>Python 3.9.2</code> 📎 <code>支持 c++11 标准</code> </p>
<p><strong>处理器：</strong> 2.3 GHz 四核 Intel Core i5 （后面提供编译耗时参考）</p>
<br>

<h2 id="编译-QtEveryWhere-源码"><a href="#编译-QtEveryWhere-源码" class="headerlink" title="编译 QtEveryWhere 源码"></a>编译 QtEveryWhere 源码</h2><h3 id="编译-Release-版本"><a href="#编译-Release-版本" class="headerlink" title="编译 Release 版本"></a>编译 Release 版本</h3><p>下载 qt 全部源码： <a href="https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz">qt-everywhere-src-5.15.2.tar.xz</a> 。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> qt-everywhere-src-5.15.2.tar.xz
<span class="token builtin class-name">cd</span> qt-everywhere-src-5.15.2
./configure <span class="token parameter variable">-prefix</span> ~/Qt/qteverywhere5.15.2 <span class="token parameter variable">-release</span> <span class="token parameter variable">-opensource</span> <span class="token parameter variable">-nomake</span> tests
<span class="token function">make</span> <span class="token parameter variable">-j8</span>                                   <span class="token comment"># 耗时 52 min</span>
<span class="token function">make</span> <span class="token function">install</span>                               <span class="token comment"># 安装到 ~/Qt/qteverywhere5.15.2 下，共 689.7 MB </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p><font color=#D0087E size=4 face="幼圆"><strong>注意：</strong></font> </p>
<p>执行 <code>./configure</code> 脚本时（第 3 行）： <code>~/Qt/qteverywhere5.15.2</code> 为执行 <code>make install</code> 的安装路径；然后执行命令脚本，生成的临时文件都在 <code>.obj/release/</code> 下</p>
<p><strong>若是编译 <code>release</code> 版本加  <code> -nomake example</code>会失败，应去掉；若是编译 <code>debug</code> 版本可加  <code> -nomake example</code>，可顺利编译成功；</strong> ，遇到如下选择，按下 y 后回车；确认使用开源许可证即可</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Type <span class="token string">'L'</span> to view the GNU Lesser General Public License version <span class="token number">3</span> <span class="token punctuation">(</span>LGPLv3<span class="token punctuation">)</span>.
Type <span class="token string">'G'</span> to view the GNU General Public License version <span class="token number">2</span> <span class="token punctuation">(</span>GPLv2<span class="token punctuation">)</span>.
Type <span class="token string">'y'</span> to accept this license offer.
Type <span class="token string">'n'</span> to decline this license offer.
 
Do you accept the terms of either license? y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p>执行 <code>make -j8</code> 时候，看到如下，即表示编译成功</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/Library/Developer/CommandLineTools/usr/bin/clang++ <span class="token parameter variable">-stdlib</span><span class="token operator">=</span>libc++ <span class="token parameter variable">-headerpad_max_install_names</span>  <span class="token parameter variable">-arch</span> x86_64 <span class="token parameter variable">-isysroot</span> /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -mmacosx-version-min<span class="token operator">=</span><span class="token number">10.13</span> -Wl,-rpath,@executable_path/<span class="token punctuation">..</span>/Frameworks -Wl,-rpath,@loader_path/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/lib <span class="token parameter variable">-o</span> minibrowser.app/Contents/MacOS/minibrowser .obj/main.o .obj/qrc_qml.o   -F/Users/xmuli/project/qt-build/qt-everywhere-src-5.15.2/qtdeclarative/lib -F/Users/xmuli/project/qt-build/qt-everywhere-src-5.15.2/qtwebview/lib -F/Users/xmuli/project/qt-build/qt-everywhere-src-5.15.2/qtbase/lib <span class="token parameter variable">-framework</span> QtQuick <span class="token parameter variable">-framework</span> QtWebView <span class="token parameter variable">-framework</span> QtGui <span class="token parameter variable">-framework</span> AppKit <span class="token parameter variable">-framework</span> Metal <span class="token parameter variable">-framework</span> QtQmlModels <span class="token parameter variable">-framework</span> QtQml <span class="token parameter variable">-framework</span> QtNetwork <span class="token parameter variable">-framework</span> QtCore <span class="token parameter variable">-framework</span> DiskArbitration <span class="token parameter variable">-framework</span> IOKit <span class="token parameter variable">-framework</span> OpenGL <span class="token parameter variable">-framework</span> AGL <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>

<h3 id="验证-Qt-编译成功"><a href="#验证-Qt-编译成功" class="headerlink" title="验证 Qt 编译成功"></a>验证 Qt 编译成功</h3><p>下载 mac 版本的 <a href="https://download.qt.io/official_releases/qtcreator/4.14/4.14.0/qt-creator-opensource-mac-x86_64-4.14.0.dmg">qtcreator4.14.0</a> ，安装后打开。选中 <strong>“首选项-Kits-Qt Versions”</strong> ，将我们安装好的路径拷贝进去，保存 OK；</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210222_160844.png" width="90%"/ loading="lazy">

<br>
然后切换到 **“首选项-Kits-Kits”** ，选中 Desktop 64bit 那一个，然后在其中 Qt version 中下拉，选取我们刚才的设置的 Qt 版本，保存；

<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210222_160925.png" width="90%"/ loading="lazy">

<br>
再创建一个默认的 test 空的 qwidget 空测试项目，其中编译套件选中我们刚才所选；

<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210222_161021.png" width="70%"/ loading="lazy">

<br>

<p>点击 IDE 的编译，运行，即可成功</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210222_161107.png" width="100%"/ loading="lazy">

<br>

<h2 id="编译-QtBase-源码"><a href="#编译-QtBase-源码" class="headerlink" title="编译 QtBase 源码"></a>编译 <code>QtBase</code> 源码</h2><h3 id="编译-Release-版本-1"><a href="#编译-Release-版本-1" class="headerlink" title="编译 Release 版本"></a>编译 Release 版本</h3><p>下载 qtbase 源码：<a href="https://download.qt.io/official_releases/qt/5.15/5.15.2/submodules/qtbase-everywhere-src-5.15.2.tar.xz">qtbase-everywhere-src-5.15.2.tar.xz</a> </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> qtbase-everywhere-src-5.15.2.tar.xz
<span class="token builtin class-name">cd</span> qtbase-everywhere-src-5.15.2/
./configure <span class="token parameter variable">-prefix</span> ~/Qt/qtbase5.15.2 <span class="token parameter variable">-release</span> <span class="token parameter variable">-opensource</span> <span class="token parameter variable">-nomake</span> tests
<span class="token function">make</span> <span class="token parameter variable">-j8</span>                                        <span class="token comment"># 14:44</span>
<span class="token function">make</span> installs                                   <span class="token comment"># 安装到 ~/Qt/qtbase5.15.2 下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>PS：</strong> 第三行中：</p>
<p>编译成功，查看到 <code>~/Qt/qtbase5.15.2</code>  有很多新文件夹；</p>
<br>

<h3 id="编译-Debug-版本"><a href="#编译-Debug-版本" class="headerlink" title="编译 Debug 版本"></a>编译 Debug 版本</h3><blockquote>
<p>ERROR: debug-only framework builds are not supported. Configure with -no-framework if you want a pure debug build.</p>
</blockquote>
<p>由于上面提示，framework 模块不支持 debug 模式，故编译命名改为如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> qtbase-everywhere-src-5.15.2.tar.xz
<span class="token builtin class-name">cd</span> qtbase-everywhere-src-5.15.2
./configure <span class="token parameter variable">-prefix</span> ~/Qt/qtbase5.15.2.debug <span class="token parameter variable">-debug</span> <span class="token parameter variable">-opensource</span> <span class="token parameter variable">-nomake</span> tests <span class="token parameter variable">-nomake</span> examples -no-framework
<span class="token function">make</span> <span class="token parameter variable">-j8</span>                                   <span class="token comment"># 耗时约 8 min </span>
<span class="token function">make</span> <span class="token function">install</span>                               <span class="token comment"># 安装到 ~/Qt/qtbase5.15.2.debug 下，共 159.8 MB</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>编译成功，查看到 <code>~/Qt/qtbase5.15.2.debug</code>  有很多新文件夹，欲想验证 qtbase 编译成功否，可参考如上。</p>
<br>

<h2 id="截图成功"><a href="#截图成功" class="headerlink" title="截图成功"></a>截图成功</h2><p>很棒，编译的几个版本全部都过了，来一张全家福纪念一下；后面会再重新编译一下 Qt Creator 的源码；虽然上面两个有⚠️符号，但是一样可以编译项目通过</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210222172355.png" width="60%"/ loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210301110418.png" width="100%"/ loading="lazy">

<br>

<h2 id="若遇报错注意："><a href="#若遇报错注意：" class="headerlink" title="若遇报错注意："></a>若遇报错注意：</h2><p>若遇报错如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -debug-and-release</span>
clang: error: no such <span class="token function">file</span> or directory: <span class="token string">'/Users/xmuli/project/qt-build/qtbase-everywhere-src-5.15.2/lib/libqtpcre2_debug.a'</span>
make<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span><span class="token punctuation">..</span>/<span class="token punctuation">..</span>/lib/QtCore.framework/QtCore_debug<span class="token punctuation">]</span> Error <span class="token number">1</span>
make<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>debug-release-install<span class="token punctuation">]</span> Error <span class="token number">2</span>
make<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>sub-corelib-install_subtargets<span class="token punctuation">]</span> Error <span class="token number">2</span>
make: *** <span class="token punctuation">[</span>sub-src-install_subtargets<span class="token punctuation">]</span> Error <span class="token number">2</span>

<span class="token comment"># -release</span>
clang: **error:** no such <span class="token function">file</span> or directory: <span class="token string">'/Users/xmuli/project/qt-build/qtbase-everywhere-src-5.15.2/lib/libqtpcre2.a'</span>
make<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span><span class="token punctuation">..</span>/<span class="token punctuation">..</span>/lib/QtCore.framework/QtCore<span class="token punctuation">]</span> Error <span class="token number">1</span>
make<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>sub-corelib-install_subtargets<span class="token punctuation">]</span> Error <span class="token number">2</span>
make: *** <span class="token punctuation">[</span>sub-src-install_subtargets<span class="token punctuation">]</span> Error <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>原因:</strong>  执行了<code>make install -j8</code> ，一边编译，一边安装，造成了依赖关系顺序的问题，就会报错如上</p>
<p>make -j4 qt-everywhere 需要 1h 30 min，博主亲测；建议买个好的 CPU，人生时间不应浪费在等待上，莫要如我</p>
<br>

<h2 id="系列："><a href="#系列：" class="headerlink" title="系列："></a>系列：</h2><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a></p>
<p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 QT &#x2F; DTK 学习，附学习由浅入深的目录。</p>
]]></content>
      <categories>
        <category>学习 - MacOS</category>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>在Linux中，编写入门的makefile文件，然后逐渐迭代</title>
    <url>/posts/11bba156/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　在 <code>Uinx / Linux</code> 下，写下这篇适合小白学习的入门教程，理解 <code>make</code>，<code>makefile</code> 文件。和开始编写自己的 <code>makefile</code> 文件，使用 <code>make</code> 命令执行，生成我们所需要的项目。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 (18G103)</code> 📎 <code>gcc/g++ 9.2.0</code> </p>
<br>

<h3 id="make-介绍："><a href="#make-介绍：" class="headerlink" title="make 介绍："></a>make 介绍：</h3><ul>
<li>make 是 Linux 自带的构建器。</li>
<li>构建规则是依据 makefile 文件内容</li>
</ul>
<p>代码变成可执行文件，叫做<strong>编译</strong> ；先编译这个，还是先编译那个（即编译的安排），叫做<strong>构建</strong> 。</p>
<p>更多参考：<a href="https://blog.csdn.net/qq_33154343/article/details/98170236">make、makefile、cmake、qmake都是什么，有什么区别？</a> </p>
<br>

<h3 id="makefile-介绍："><a href="#makefile-介绍：" class="headerlink" title="makefile 介绍："></a>makefile 介绍：</h3><h4 id="命名："><a href="#命名：" class="headerlink" title="命名："></a>命名：</h4><ul>
<li>该文件的名称是唯一：<code>makefile</code> 或 <code>Makefile</code></li>
</ul>
<br>

<h4 id="规则："><a href="#规则：" class="headerlink" title="规则："></a>规则：</h4><ul>
<li><p>目标，依赖，命令</p>
</li>
<li><p>一个完整的 makefile 文件，由多个规则组成</p>
<ul>
<li>最上面的一行规则，是<strong>终极目标</strong> ，下面的都是<strong>过程目标</strong></li>
</ul>
<p><font color=#D0087E size=4 face="幼圆">目标: 依赖</font></p>
<p><font color=#D0087E size=4 face="幼圆">	命令          &#x2F;&#x2F;此处有 Tab 缩进，不能用多个空格代替</font></p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token comment">#一个规则 eg :</span>
<span class="token target symbol">mainApp</span><span class="token punctuation">:</span> *.cpp
	g++ *.cpp -o mainApp  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
<br>

<h4 id="执行原理："><a href="#执行原理：" class="headerlink" title="执行原理："></a>执行原理：</h4><ul>
<li>检测依赖是否存在？<ul>
<li>向下搜索下边的规则，下面的规则通常是用来生成依赖的</li>
</ul>
</li>
<li>判断是否重新编译生成？<ul>
<li>最终目标文件的创建时间一定是要晚于中间的生成的目标(作为依赖文件)</li>
</ul>
</li>
<li>若是本某条规则没有写依赖<ul>
<li>那么它永远是最新的目标文件（本条为，分析第五版的 make clean）</li>
</ul>
</li>
</ul>
<br>

<h3 id="编写自己的-makefile-文件："><a href="#编写自己的-makefile-文件：" class="headerlink" title="编写自己的 makefile 文件："></a>编写自己的 makefile 文件：</h3><h4 id="准备铺垫："><a href="#准备铺垫：" class="headerlink" title="准备铺垫："></a>准备铺垫：</h4><p>依旧沿用<a href="https://blog.csdn.net/qq_33154343/article/details/104692370">上一篇</a>文章的工程代码，且有讲解 gcc&#x2F;g++ 的用法，项目代码内容预览如下：</p>
 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/81soxRT22.png" width="90%"/ loading="lazy">



<p>这里按照想法，以前是执行 <code>g++-9 *.cpp -o mainApp</code> 这一行命令，现在使用 makefile 规则，使用 make 命令执行，就相当于使用另外一个语言（规则），来重写这句话。于是乎，我们使用 vim 创建 makefile 文件，在里面写下如下语句；然后执行 make，即可得到 mainApp 可执行程序（我们的目标），就属于大功告成。</p>
<br>

<h4 id="第1版本："><a href="#第1版本：" class="headerlink" title="第1版本："></a>第1版本：</h4><p>讲道理，将 gcc 命令写成符合 makefile 规则（参考上面）的语句就好了，最简单的想法如下，其中 mainApp 的名称是任意的，是最后生成的终极目标的可执行程序的名称。写好后保存，终端执行执行 make ，就得到了我们所需要的。</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">mainApp</span><span class="token punctuation">:</span> *.cpp
	g++-9 *.cpp -o mainApp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br>

<h4 id="第2版本："><a href="#第2版本：" class="headerlink" title="第2版本："></a>第2版本：</h4><ul>
<li><strong>改进之处：</strong> <ul>
<li>避免改动一个 .cpp，但是所有 .cpp 文件都要重新编译为 .O 文件</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">mainAPP</span><span class="token punctuation">:</span> *.o
	g++-9 *.o -o mainApp

<span class="token target symbol">*.o</span><span class="token punctuation">:</span> *.cpp
	g++-9 -c *.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="第3版本："><a href="#第3版本：" class="headerlink" title="第3版本："></a>第3版本：</h4><ul>
<li><strong>改进之处：</strong><ul>
<li>使用 makefile 里面的变量</li>
<li><font color=#FF0000  size=4 face="宋体">$( )</font>  表示取变量里面的值</li>
<li><font color=#FF0000  size=4 face="宋体">%.o: %.cpp</font>  模式匹配，相当于公式，两个百分号是同一个 “量”</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">val_a <span class="token operator">=</span> ExAdd.o ExDiv.o ExMul.o ExSub.o main.o  <span class="token comment">#赋值给变量 val_a</span>
val_app <span class="token operator">=</span> mainAPP

<span class="token target symbol"><span class="token variable">$</span>(val_app)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>val_a<span class="token punctuation">)</span>
	g++-9 <span class="token variable">$</span><span class="token punctuation">(</span>val_a<span class="token punctuation">)</span> -o <span class="token variable">$</span><span class="token punctuation">(</span>val_app<span class="token punctuation">)</span>    <span class="token comment">#可替换为 g++-9 $^ -o $(val_app)</span>

<span class="token target symbol">%.o</span><span class="token punctuation">:</span> %.cpp
	g++-9 -c <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="第4版本："><a href="#第4版本：" class="headerlink" title="第4版本："></a>第4版本：</h4><ul>
<li><strong>改进之处：</strong><ul>
<li><strong>使用自动变量：</strong><ul>
<li><font color=#D0087E size=4 face="幼圆">$@</font> 规则中的目标</li>
<li><font color=#D0087E size=4 face="幼圆">$ &lt;</font> 规则中的第一个依赖</li>
<li><font color=#D0087E size=4 face="幼圆">$^</font> 规则中的所有依赖</li>
<li><font color=#FF0000  size=4 face="幼圆">它们只能够认识本条规则的命令，在本条规则中使用</font></li>
</ul>
</li>
<li><strong>使用函数：</strong><ul>
<li><font color=#D0087E size=4 face="幼圆">wildcard</font>  为查找指定文件夹，里面的指定类型的文件，后面为参数</li>
<li><font color=#D0087E size=4 face="幼圆">patsubst</font>  为字符替换函数</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">val_a <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">wildcard</span> ./*.cpp<span class="token punctuation">)</span>
val_b <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">patsubst</span> %.cpp, %.o, <span class="token variable">$</span><span class="token punctuation">(</span>val_a<span class="token punctuation">)</span><span class="token punctuation">)</span>
val_app <span class="token operator">=</span> mainAPP

<span class="token target symbol"><span class="token variable">$</span>(val_app)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>val_b<span class="token punctuation">)</span>
	g++-9 <span class="token variable">$^</span> -o <span class="token variable">$</span><span class="token punctuation">(</span>val_app<span class="token punctuation">)</span>


<span class="token target symbol">%.o</span><span class="token punctuation">:</span> %.cpp
	g++-9 -c <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="第5版本："><a href="#第5版本：" class="headerlink" title="第5版本："></a>第5版本：</h4><ul>
<li><strong>改进之处：</strong><ul>
<li>添加工程项目清理中间功能，避免手动清理，只需要运行 <code>make clean</code> 这个中间目标即可</li>
</ul>
</li>
<li>若是工程文件夹下，有和 makefile 的中间目标同名的文件。那么依据<strong>检测依赖是否存在的工作原理</strong> ，其会不执行，且冲突。（它认为编译的依赖文件   clean ，最新且存在的）<ul>
<li>解决：声明为伪目标 .PHONY:</li>
</ul>
</li>
</ul>
<p>(若是最存在同名文件) ，其目标文件 claen 又没有依赖文件，所以总是最新的，也就不会执行 make clean 的下面命令</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token comment">#.PHONY: clean   #明伪目标: 不会做依赖和更新检查( 文件日期时间先后判断)</span>
<span class="token target symbol">clean</span><span class="token punctuation">:</span> 
<span class="token comment">#	-mkdir /abc  # 第一个"-"   表示若是执行失败，则执行后面会的命令，</span>
	-rm <span class="token variable">$</span><span class="token punctuation">(</span>val_b<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>val_app<span class="token punctuation">)</span>   <span class="token comment">#后面-f 是强制执行 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h3><ul>
<li><p>写好 makefile 文件</p>
</li>
<li><p>执行 make 命令</p>
</li>
<li><p>不再需要演示，执行清理命令[运行中间规则]：make clean</p>
 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200309_183011.png" width="80%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="代码下载："><a href="#代码下载：" class="headerlink" title="代码下载："></a>代码下载：</h3><p><a href="https://github.com/touwoyimuli/linuxExample/tree/master/05_makefile">05_makefile</a> </p>
<br>

<p><strong>其它：</strong></p>
<p>假装有其 ta ，，， （点个赞）？</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
        <category>学习 - MacOS</category>
      </categories>
  </entry>
  <entry>
    <title>在MacOS10.14.6安装最新gdb8.3的详细教程，含可能遇到的所有坑(网上最新教程)</title>
    <url>/posts/a75b2ced/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　在 mac 使用 gdb 调试程序时候，会遇到报错如下，本文就是专门解决这个问题的。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> run
Starting program: /Users/muli/project/github/linuxExample/06_gdb/mainApp 
Note: this version of macOS has System Integrity Protection.
Because `startup-with-shell' is enabled, gdb has worked around this by
caching a copy of your shell.  The shell used by <span class="token string">"run"</span> is now:
    /Users/muli/Library/Caches/gdb/bin/zsh
Unable to <span class="token function">find</span> Mach task port <span class="token keyword">for</span> process-id <span class="token number">20050</span>: <span class="token punctuation">(</span>os/kern<span class="token punctuation">)</span> failure <span class="token punctuation">(</span>0x5<span class="token punctuation">)</span>.
 <span class="token punctuation">(</span>please check gdb is codesigned - see taskgated<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>在 MacOS 10.14.6 的系统下，发现安装 gdb 8.3 （当前最新） 的坑不是一般的多，那真真的多。鉴于网上的教程都是过时的，且按照某一篇， 你是不可能顺利运行安装成功的。所以浪费我昨天一个晚上解决这个问题（我的时间也很宝贵的），今天又花费一晚上时间，完成这篇图文并茂的的安装教程。作为一个日后的记录和给后来者一个方便。</p>
<p>也<strong>是目前网上最新最详细的在 mac 安装 gdb 的教程</strong> ；其中大概思路：</p>
<ul>
<li>创建整证书，证书授权</li>
<li>关闭 SIP 安全防护，重启系统；</li>
<li>sudo 运行 gdb 调试；</li>
<li>kill 卡死进程， 再次重新 gdb 调试；</li>
<li>成功</li>
</ul>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="笔记本系统环境："><a href="#笔记本系统环境：" class="headerlink" title="笔记本系统环境："></a>笔记本系统环境：</h3><p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 </code> </p>
<br>

<h3 id="查看是否安装-gdb"><a href="#查看是否安装-gdb" class="headerlink" title="查看是否安装 gdb:"></a>查看是否安装 gdb:</h3><ul>
<li><p>执行 <code>brew search gdb</code> ，搜索 brew 仓库：</p>
 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185237.png" width="70%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="命令-brew-安装-gdb："><a href="#命令-brew-安装-gdb：" class="headerlink" title="命令 brew 安装 gdb："></a>命令 brew 安装 gdb：</h3><ul>
<li><p>执行 <code>brew install gdb</code> 使用 brew 工具安装 gdb （默认最新），等待安装完毕；</p>
</li>
<li><p>执行 <code>which gdb</code> 查看安装的路径为 <code>/usr/local/bin/gdb</code> </p>
 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185446.png" width="70%"/ loading="lazy">
</li>
<li><p>执行 <code>gdb -v</code> 查看的 gdb 安装版本，版本为 <code>8.3</code></p>
 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185458.png" width="80%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="创建系统证书："><a href="#创建系统证书：" class="headerlink" title="创建系统证书："></a>创建系统证书：</h3><ul>
<li><p>打开 <strong>钥匙串访问</strong> </p>
 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185515.png" width="20%"/ loading="lazy">


</li>
<li><p>左上角进入 <code>钥匙串访问 - 证书助理 - 创建证书</code></p>
 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185639.png" width="50%"/ loading="lazy">


</li>
<li><p>创建证书， 名称随意，如 gdb_codesigned ，其中选择为 <strong>自签名根证书</strong> ，<strong>代码签名</strong> ，还有✅ <strong>让我覆盖这些默认值</strong> </p>
 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185816.png" width="50%"/ loading="lazy">


</li>
<li><p>后面一路<strong>点击下一步，不用做任何修改</strong> ，贴出来中间的过程图</p>
 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185829.png" width="50%"/ loading="lazy">

 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185835.png" width="50%"/ loading="lazy">

 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185840.png" width="50%"/ loading="lazy">

 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185844.png" width="50%"/ loading="lazy">

 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185849.png" width="50%"/ loading="lazy">

 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185854.png" width="50%"/ loading="lazy">

 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185858.png" width="50%"/ loading="lazy">

 
</li>
<li><p>一直到这步骤，进行修改，选择 “<strong>系统</strong> “， </p>
 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185915.png" width="50%"/ loading="lazy">


</li>
<li><p>证书创建成功 （若是失败，参考下面解决方案）</p>
 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_191146.png" width="50%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="修改证书："><a href="#修改证书：" class="headerlink" title="修改证书："></a>修改证书：</h3><ul>
<li><p><strong>双击</strong> 证书打开， 勾选使用 <strong>始终信任</strong> ，然后关闭此此窗口，会自动保存修改</p>
 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_191412.png" width="70%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="对证书授权："><a href="#对证书授权：" class="headerlink" title="对证书授权："></a>对证书授权：</h3><ul>
<li><p>执行 <code>codesign -fs gdb_codesigned /usr/local/bin/gdb</code> 命令，<strong>给证书授权</strong>；在执行 <code>echo &quot;set startup-with-shell off&quot; &gt;&gt; ~/.gdbinit</code> ， <strong>关闭 MacOS 系统的 SIP 安全验证</strong> ；设置完这咯爱那个步骤后， <strong>要重启电脑</strong> ，使得配置生效。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">codesign <span class="token parameter variable">-fs</span> gdb_codesigned /usr/local/bin/gdb
<span class="token builtin class-name">echo</span> <span class="token string">"set startup-with-shell off"</span> <span class="token operator">>></span> ~/.gdbinit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_211131.png" width="80%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="验证-gdb-证书创建，关闭-SIP-成功："><a href="#验证-gdb-证书创建，关闭-SIP-成功：" class="headerlink" title="验证 gdb 证书创建，关闭 SIP 成功："></a>验证 gdb 证书创建，关闭 SIP 成功：</h3><ul>
<li><p>使用一个小的 c++ 项目测试下，<a href="https://github.com/touwoyimuli/linuxExample/tree/master/05_makefile">下载地址</a>，执行 <code>g++-9 *.cpp -o mainApp -g</code>  生成可调试的<strong>可执行程序</strong> mainApp  ，然后运行 <code>sudo gdb mainApp</code></p>
 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_192435.png" width="70%"/ loading="lazy"></li>
</ul>
<br>

<hr>
<h3 id="期间可能会遇到的奇怪的问题？"><a href="#期间可能会遇到的奇怪的问题？" class="headerlink" title="期间可能会遇到的奇怪的问题？"></a>期间可能会遇到的奇怪的问题？</h3><h4 id="遇到证书创建失败？"><a href="#遇到证书创建失败？" class="headerlink" title="遇到证书创建失败？"></a>遇到证书创建失败？</h4><ul>
<li><p>若是失败，看到下图提示：</p>
 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185938.png" width="50%"/ loading="lazy">


</li>
<li><p>解决方法：则重头创建一次系统证书，最后这一步选择 “<strong>登录</strong>” ，编绘创建成功。</p>
 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/image-20200310191044729.png" width="50%"/ loading="lazy">


</li>
<li><p>且证书创建成功后，需要手动将其从登录区域， 移动到系统区域</p>
</li>
</ul>
 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_191315.png" width="70%"/ loading="lazy">



<br>

<h4 id="遇到-Unable-to-find-Mach-task-port-for-process-id-2358-os-kern-failure-0x5-："><a href="#遇到-Unable-to-find-Mach-task-port-for-process-id-2358-os-kern-failure-0x5-：" class="headerlink" title="遇到 Unable to find Mach task port for process-id 2358: (os/kern) failure (0x5).："></a>遇到 <code>Unable to find Mach task port for process-id 2358: (os/kern) failure (0x5).</code>：</h4><ul>
<li><p>出现如下如下代码：  <code>Unable to find Mach task port for process-id 2358: (os/kern) failure (0x5).</code> <code>(please check gdb is codesigned - see taskgated(8))</code> </p>
 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_212227.png" width="80%"/ loading="lazy">


</li>
<li><p>解决方法：按下 <code>control + z</code> <strong>退出终端</strong> ，<strong>使用 sudo 权限</strong> ，运行命令 <code>sudo gdb mainApp</code> 调试</p>
</li>
</ul>
<br>

<h4 id="遇到-New-Thread-0x1303-of-process-971-卡死"><a href="#遇到-New-Thread-0x1303-of-process-971-卡死" class="headerlink" title="遇到 [New Thread 0x1303 of process 971] 卡死:"></a>遇到 <code>[New Thread 0x1303 of process 971]</code> 卡死:</h4><ul>
<li><p>出现如下代码 <code>[New Thread 0x1303 of process 971]</code> 代码，被进程被卡死（<strong>通常第一次会遇到这个问题）</strong> 。</p>
 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_192247.png" width="80%"/ loading="lazy"></li>
</ul>
<br>

<ul>
<li><p>解决方法：按下 <code>control + z</code> <strong>退出终端</strong>，执行 <code>killall 2415</code> 杀死该进程；然后再次运行 <code>sudo gdb mainApp</code> 调试， 按下 <code>r</code> 调试。</p>
 <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_192130.png" width="70%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="一些必须注意点"><a href="#一些必须注意点" class="headerlink" title="一些必须注意点:"></a>一些必须注意点:</h3><ul>
<li>执行命令时候，证书生效，有的带 -f 参数；</li>
<li>命令 <code>codesign -fs gdb_codesigned /usr/local/bin/gdb</code> 时候，<code>gdb_codesigned</code> 要换成你的证书名称</li>
<li>有的证书博客证书的起名称为 gdb_cert， 但是命令 和终端截图为 gdb-cert； 注意短杠</li>
<li>另外一个是 dgb 最好需要带绝对路径，避免找不到；</li>
<li><strong>看完这篇教程，一定要点赞</strong></li>
</ul>
<br>

<p><strong>参考博客：</strong></p>
<p><a href="https://zhuanlan.zhihu.com/p/68398728">在macOS10.14上使用GDB的教程</a></p>
<p><a href="https://www.zhihu.com/question/264381471">macbook创建自签名根证书失败,怎么办？</a></p>
<p><a href="https://blog.csdn.net/zg_hover/article/details/82453862">mac book上安装和使用gdb</a></p>
<p><a href="https://studygolang.com/articles/26715?fr=sidebar">Tips:如何优雅的使用GDB调试Go</a></p>
<p><a href="https://segmentfault.com/a/1190000004136351">解决GDB在Mac下不能调试的问题</a></p>
<p><a href="https://blog.csdn.net/angus_monroe/article/details/78515468">MAC OSX系统使用gdb编译程序时的报错处理</a></p>
<p><a href="https://juejin.im/post/5acdc6bef265da239a6029f4">macOS High Sierra下无法使用gdb的解决办法</a></p>
]]></content>
      <categories>
        <category>学习 - MacOS</category>
      </categories>
  </entry>
  <entry>
    <title>在MacOS上面通过brew命令安装gcc编译器集</title>
    <url>/posts/20cab4ae/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　在 <code>MacOS 10.14.6</code> 里面使用命令 <code>brew</code> 下载、安装 <code>gcc</code> 编译器集。并且写一个小的例子 .cpp 文件来编译运行，下载的 gcc 是否成功。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 (18G103)</code></p>
<br>

<h3 id="GCC-简介："><a href="#GCC-简介：" class="headerlink" title="GCC 简介："></a>GCC 简介：</h3><p><font color=#D0087E size=4 face="幼圆">GCC是库和前端的全面集合，使您能够将源代码编译成二进制应用程序。</font> </p>
<p>GNU 编译器集合（简称<strong>GCC）</strong>包括 C，Objective-C，C ++，Java，Fortran，Go 和 Ada 的前端，以及所提及语言的库。</p>
<p>GCC 是 GNU 工具链的主要组成部分，它是根据 GNU 通用公共许可证发行的，在自由软件的持续增长中起着核心作用。</p>
<p>最初，GCC 仅处理 C 编程语言，但是随着其他前端的开发，GCC 扩展到可以编译 C++，Objective-C，Objective-C ++，Go，Fortran，Ada，Java等。</p>
<p>GCC 还提供对多种处理器体系结构的支持，因此，它经常用作免费和专有应用程序的开发工具。GCC 也可用于大多数嵌入式平台，包括 AMCC，Symbian 和基于 Freescale Power Architecture 的芯片。</p>
<p>GNU 编译器集合还针对各种平台，例如 Dreamcast 和 PlayStation 等视频游戏机。而且，GCC 是许多类Unix 操作系统的标准编译器，包括 Linux 和 BSD 系列，FreeBSD 和 LLVM 系统。</p>
<br>

<h3 id="GCC-官网："><a href="#GCC-官网：" class="headerlink" title="GCC 官网："></a>GCC 官网：</h3><p><a href="https://mac.softpedia.com/get/Development/Compilers/GCC.shtml">GCC for Mac 官网</a> </p>
<br>

<h3 id="GCC-命令安装："><a href="#GCC-命令安装：" class="headerlink" title="GCC 命令安装："></a>GCC 命令安装：</h3><ul>
<li><p><strong>查看 gcc 版本：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew search gcc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<p>其中第一个为 gcc 默认的当前最高版本。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210315230852.png" width="90%"/ loading="lazy">



<ul>
<li><p><strong>安装 gcc :</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> gcc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>默认是安装官网里面最高的版本，截图可知是 gcc 9.2</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210315230913.png" width="90%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="查看-gcc-安装版本"><a href="#查看-gcc-安装版本" class="headerlink" title="查看 gcc 安装版本:"></a>查看 gcc 安装版本:</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>发现显示的 gcc 这个名字，已经被占了，实际是通过映射来调用 clang ；</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210315230933.png" width="90%"/ loading="lazy">



<p>但其实是安装成功了的，通过一个命令的安装地址可知是 gcc 9.2 版本，所以，可以看出正确版本的查看命令：<code>gcc-9 -v</code>  （按下 Tab）；其中要调用正真的 gcc 工具就使用用 <code>gcc-9</code> , 而非 gcc（clang）；</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210315230954.png" width="80%"/ loading="lazy">

<br>

<h3 id="验证-gcc-安装是否成功："><a href="#验证-gcc-安装是否成功：" class="headerlink" title="验证 gcc 安装是否成功："></a>验证 gcc 安装是否成功：</h3><p>创建一个名称为 <code>main.cpp</code> 的文本，写入以下内容：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//  Created by muli on 2020/3/2.</span>
<span class="token comment">//  Copyright © 2020 muli. All rights reserved.</span>
<span class="token comment">//</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// insert code here...</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello, World!\n"</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>运行 <code>gcc-9 main.cpp -o mainApp -lstdc++</code>，用 gcc 编译生成 main.cpp 文件生成一个名称为 mainApp 的可执行程序「Linux 下的文件默认是没有后缀名的」；其中编译选项添加 -lstdc++ ，即使用标准C++库，否则你 Mac 下回编译失败。运行命令 <code>./mainApp</code> 执行 mainApp 程序，查看输出结果：</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210315231018.png" width="40%"/ loading="lazy">



<p>结论：使用 gcc 编译生成连接运行程序成功。</p>
<br>

<h3 id="其它疑问："><a href="#其它疑问：" class="headerlink" title="其它疑问："></a>其它疑问：</h3><p>关于上面执行 <code>gcc-9 main.cpp -o mainApp -lstdc++</code> 中，执行这个语句带上 <code>-lstdc++</code> 这个参数；始终觉得有点困惑，需要深究一下。 在下一篇中再作探究。</p>
<br>

<h3 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h3><p><a href="https://github.com/xmuli/linuxExample/tree/master/01_test_gcc">01_test_gcc</a> </p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
        <category>学习 - MacOS</category>
      </categories>
  </entry>
  <entry>
    <title>在MacOS解决&quot;修改“Applications”需要输入管理员名称和密码&quot;的方法</title>
    <url>/posts/65d36fa4/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  在<code>MacOS10.14.6</code>上面，安装一些网站（或官网）的下载的离线安装包，经常会遇到安装过程中会遇到<font color=#D0087E size=4 face="幼圆">“修改“Applications”需要输入管理员名称和密码”</font>的问题，下面提供一种简单的解决方法：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/download.jpg"/ loading="lazy">



<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因:"></a>出现原因:</h2><p><code>apple系统</code>出于安全性的考量，对于非 <code>AppStore</code> 官方的都是建议慎重下载和警告示的阻止安装，但是并非一点机会都不给安装；</p>
<br>

<h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><ul>
<li><font color=#D0087E size=4 face="幼圆">最佳解决：</font></li>
</ul>
<p>直接将 <code>xxx.dmg</code> 下载好的应用程序安装，双击打开:（若下载就是<code>xxx.app</code>更好，直接进入下一步骤）</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-11-24_18-25-34_mark.png"/ loading="lazy">



<p>在下图中，直接将<code>xxx.app</code>直接拖入到 <code>应用程序</code>中，如下图 :</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191124182943.png"/ loading="lazy">



<p>然后再<code>启动</code>中就可以正常运行了此项目了</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191124183126.png"/ loading="lazy">]]></content>
      <categories>
        <category>学习 - MacOS</category>
        <category>学习 - 代理</category>
      </categories>
  </entry>
  <entry>
    <title>在Mac上打不开“uPic.dmg”，因为 Apple 无法检查其是否包含恶意软件</title>
    <url>/posts/326d4d13/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　在我的 💻  <code>MacOS 10.14.6 </code>  上面，第一次遇如下问题，附上解决方法</p>
<blockquote>
<p>打不开“ xxx”，因为 Apple 无法检查其是否包含恶意软件。</p>
</blockquote>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="问题背景："><a href="#问题背景：" class="headerlink" title="问题背景："></a>问题背景：</h3><p>昨天晚上才重装的 <code>MacOS</code> 系统，遇到一个软件的时候，使用谷歌浏览器在 <code>github</code> 上面下载 .<code>dmg</code> 镜像的时候，直接双击报错如下：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200509_141858.png" width="70%"/ loading="lazy">



<br>

<h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>简单纯朴：在 <strong>访达</strong> 里找到这个应用，右键点击打开</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200509_141908.png" width="70%"/ loading="lazy">]]></content>
      <categories>
        <category>学习 - MacOS</category>
      </categories>
  </entry>
  <entry>
    <title>在Mac上面安装HomeBrew失败的解决方案：修改hosts文件</title>
    <url>/posts/42ca01bf/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　在重装 <code>Mac</code> 系统的 💻 上，安装  <code>HomeBrew</code> ，执行官方命令失败，报错 <code>curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</code>  的 <font color=#D0087E size=4 face="幼圆"><strong>解决方法： 修改 hosts 文件 [使用<code>raw.githubusercontent.com</code>的真实IP]</strong></font> 。</p>
<p><code>Google</code> 了下，网上那转载了一篇文章已经有几十遍了，或许也对你不起效吧，即使想找一篇不一样的也这么的困难，还是我自己动手；如果对你有效，就把这篇顶上去，为其他人节约时间，提供一个新的方法的、</p>
<blockquote>
<h3 id="更新-2022-08-26"><a href="#更新-2022-08-26" class="headerlink" title="更新 2022-08-26"></a>更新 2022-08-26</h3><p>不浪费时间，珍爱生命，直接使用封装好的 HomeBrew 脚本（国内镜像）：<a href="https://zhuanlan.zhihu.com/p/111014448">https://zhuanlan.zhihu.com/p/111014448</a></p>
</blockquote>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="问题背景："><a href="#问题背景：" class="headerlink" title="问题背景："></a>问题背景：</h3><p>在我的  <code>MacOS 10.14.6 </code>  上面，执行命令 <code>/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;</code> 之后，显示连接 github 失败。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 报错原因</span>
curl: <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> Failed to connect to raw.githubusercontent.com port <span class="token number">443</span>: Connection refused<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br>

<h3 id="报错原因："><a href="#报错原因：" class="headerlink" title="报错原因："></a>报错原因：</h3><p>由于某种原因，导致<code>github</code>的<code>raw.githubusercontent.com</code>域名解析被污染了，所以，需要通过修改<code>hosts</code>解决这个问题；</p>
<br>

<h3 id="解决方案-修改-hosts-文件-："><a href="#解决方案-修改-hosts-文件-：" class="headerlink" title="解决方案[修改 hosts 文件]："></a>解决方案[修改 hosts 文件]：</h3><p><font color=#FF0000  size=4 face="幼圆"><strong>前提条件：</strong></font>  安装了 <code>xcode</code> 或者 <code>Command Line Tools for Xcode</code></p>
<p>若是不需要使用 xcode 开发，只用安装后者即可，命令如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xcode-select <span class="token parameter variable">--install</span>  //安装 Command Line Tools <span class="token keyword">for</span> Xcode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>

<ol>
<li><p>查阅真实的 <code>IP</code> 地址：</p>
<p>在<code>https://www.ipaddress.com/</code>查询<code>raw.githubusercontent.com</code>的真实IP。</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200508_153350.png" width="70%"/ loading="lazy">


</li>
<li><p>修改 <code>hosts</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在文件最后一行加上，然后保存 </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">199.232</span>.68.133 raw.githubusercontent.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


</li>
<li><p>再次输入<a href="https://brew.sh/">Homebrew 官网 </a>命令 </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/bin/bash <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/master/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


</li>
<li><p>等待即可安装成功</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200508_160252.png" width="90%"/ loading="lazy"></li>
</ol>
<br>

<h3 id="换国内镜像源："><a href="#换国内镜像源：" class="headerlink" title="换国内镜像源："></a>换国内镜像源：</h3><p>安装完成之后，当然是要进行替换 <code>Homebrew</code> 和 <code>Homebrew Bottles</code> 换源，否则就是浪费时间。</p>
<p>下面的国内镜像源任选其一：</p>
<ul>
<li>使用中科大的源：<a href="https://lug.ustc.edu.cn/wiki/mirrors/help/brew.git">替换及重置Homebrew默认源</a> （具体操作如下）</li>
<li>使用清华的源：<a href="https://mirror.tuna.tsinghua.edu.cn/help/homebrew/">Homebrew&#x2F;Linuxbrew 镜像使用帮助</a></li>
</ul>
<br>

<h4 id="替换及重置Homebrew默认源"><a href="#替换及重置Homebrew默认源" class="headerlink" title="替换及重置Homebrew默认源"></a>替换及重置Homebrew默认源</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#替换brew.git:</span>
<span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span><span class="token variable">)</span></span>"</span>
<span class="token function">git</span> remote set-url origin https://mirrors.ustc.edu.cn/brew.git

<span class="token comment">#替换homebrew-core.git:</span>
<span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span><span class="token variable">)</span></span>/Library/Taps/homebrew/homebrew-core"</span>
<span class="token function">git</span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="Homebrew-Bottles源"><a href="#Homebrew-Bottles源" class="headerlink" title="Homebrew Bottles源"></a>Homebrew Bottles源</h4><p>Homebrew Bottles 是 Homebrew 提供的二进制代码包，目前镜像站收录了以下仓库：</p>
<ul>
<li>homebrew&#x2F;homebrew-core</li>
<li>homebrew&#x2F;homebrew-dupes</li>
<li>homebrew&#x2F;homebrew-games</li>
<li>homebrew&#x2F;homebrew-gui</li>
<li>homebrew&#x2F;homebrew-python</li>
<li>homebrew&#x2F;homebrew-php</li>
<li>homebrew&#x2F;homebrew-science</li>
<li>homebrew&#x2F;homebrew-versions</li>
<li>homebrew&#x2F;homebrew-x11</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 对于bash用户：</span>
<span class="token builtin class-name">echo</span> <span class="token string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> <span class="token operator">>></span> ~/.bash_profile
<span class="token builtin class-name">source</span> ~/.bash_profile

<span class="token comment"># 对于zsh用户：</span>
<span class="token builtin class-name">echo</span> <span class="token string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> <span class="token operator">>></span> ~/.zshrc
<span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h3><p><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/homebrew-bottles">LUG@USIC</a></p>
<p><a href="https://blog.ponycool.com/archives/88.html">Mac安装Homebrew</a></p>
<p><a href="https://www.cnblogs.com/yanht/p/brew-note.html">Mac下安装brew</a></p>
<p><a href="https://github.com/jackzhaoyu/ceshi/blob/master/homebrew.rb">homebrew.rb</a> 文件</p>
]]></content>
      <categories>
        <category>学习 - MacOS</category>
      </categories>
  </entry>
  <entry>
    <title>在Mac使用Wine运行Windows软件：PanDownload_Beat(非虚拟机)</title>
    <url>/posts/15e60acb/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　<strong>在 MacOS10.14.6 中，安装 Wine 运行 Windows 软件百度网盘。详细讲述 Wine 的下载，安装，使用教程。</strong> <font color=#0000FF size=4 face="幼圆"><strong>本篇也是在 Mac下使用破解版不限速百度云 PanDownload_Beat ，直接运行该程序，非安装虚拟机方式使用。</strong></font></p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="运行环境："><a href="#运行环境：" class="headerlink" title="运行环境："></a>运行环境：</h3><p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 </code> 📎 <code>XQuartz &gt;= 2.7.7 </code> 📎 <code>winehq-stable-5.0</code> 📎 <code>PanDownload_Beat2.2.2</code></p>
<br>

<h3 id="Wine-简述："><a href="#Wine-简述：" class="headerlink" title="Wine 简述："></a>Wine 简述：</h3><p>　　Wine （“Wine Is Not an Emulator” 的首字母缩写）是一个能够在多种 POSIX-compliant 操作系统（诸如 Linux，macOS 及 BSD 等）上运行 Windows 应用的兼容层。Wine 不是像虚拟机或者模拟器一样模仿内部的 Windows 逻辑，而是將 Windows API 调用翻译成为动态的 POSIX 调用，免除了性能和其他一些行为的内存占用，让你能够干净地集合 Windows 应用到你的桌面。</p>
<p>　　Wine　通过提供一个兼容层来将　Windows　的系统调用转换成与　POSIX　标准的系统调用。它还提供了　Windows　系统运行库的替代品和一些系统组件的替代品。为了避免著作权问题，Wine　主要使用黑箱测试逆向工程来编写。</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_193945.png" width="60%"/ loading="lazy">



<p><font color=#D0087E size=5 face="幼圆">其相关官网：</font></p>
<ol>
<li><p><strong>wine：</strong></p>
<p>官网：<a href="https://www.winehq.org/">https://www.winehq.org/</a></p>
<p>github: <a href="https://github.com/wine-mirror/wine">https://github.com/wine-mirror/wine</a></p>
</li>
<li><p><strong>wineBottle:</strong></p>
<p>官网：<a href="https://winebottler.kronenberg.org/">https://winebottler.kronenberg.org/</a></p>
</li>
<li><p><strong>WineSkin：</strong></p>
<p>官网：<a href="http://wineskin.urgesoftware.com/">http://wineskin.urgesoftware.com/</a></p>
</li>
<li><p><strong>PlayOnMac:</strong></p>
<p><a href="https://www.playonmac.com/en/">https://www.playonmac.com/en/</a></p>
</li>
<li><p><strong>CrossOver：</strong></p>
<p>官网：<a href="https://www.codeweavers.com/">https://www.codeweavers.com/</a></p>
</li>
</ol>
<p>注：CrossOver 若想支持正版，请选择🇺🇸官网网址， 不要误进入某马丁杰克的代理的国内网址；</p>
<br>

<h3 id="前期准备："><a href="#前期准备：" class="headerlink" title="前期准备："></a>前期准备：</h3><h4 id="xquartz-介绍："><a href="#xquartz-介绍：" class="headerlink" title="xquartz 介绍："></a>xquartz 介绍：</h4><p>　　<font color=#FF0000  size=4 face="幼圆"><strong>xquartz 是苹果系统中支持窗口界面的一个项目；</strong> </font><br><strong>先决条件：</strong></p>
<ol>
<li>XQuartz &gt;&#x3D; 2.7.7</li>
<li>不能将Gatekeeper设置为阻止未签名的程序包。</li>
</ol>
<p><strong>安装：</strong> .pkg文件和tarball存档均可在<a href="https://dl.winehq.org/wine-builds/macosx/download.html">https://dl.winehq.org/wine-builds/macosx/download.html上获得</a>。对于没有经验的用户，建议从.pkg文件安装。</p>
<p>　　Wine 的运行需要 <code>xquartz</code> 的支持，如果先没有安装 xquartz 就直接安装Wine 程序，就会直接报错。</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_113553.png" width="60%" / loading="lazy">

<h4 id="安装-xquartz，执行安装命令："><a href="#安装-xquartz，执行安装命令：" class="headerlink" title="安装 xquartz，执行安装命令："></a>安装 xquartz，执行安装命令：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew cask <span class="token function">install</span> xquartz //XQuartz可以使用安装；安装最后一步需要输入密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_114138.png" width="60%" / loading="lazy">

<br>

<h3 id="下载-wine-（MacOS-版）程序："><a href="#下载-wine-（MacOS-版）程序：" class="headerlink" title="下载 wine （MacOS 版）程序："></a>下载 wine （MacOS 版）程序：</h3><p>　　<font color=#FF0000  size=4 face="幼圆">开发和稳定分支的正式WineHQ软件包可用于macOS 10.8至10.14 <em><strong>（Wine不适用于macOS Catalina 10.15）</strong></em>。</font></p>
<p>官网：<a href="https://dl.winehq.org/wine-builds/macosx/download.html">https://dl.winehq.org/wine-builds/macosx/download.html</a> </p>
<p>地址：<a href="https://pan.baidu.com/s/1fjoK8BFANtEt5fzyD2Dx_Q">https://pan.baidu.com/s/1fjoK8BFANtEt5fzyD2Dx_Q</a>  密码:4qrz</p>
<p><strong>版本说明：</strong></p>
<ul>
<li>“Wine Stable”：公开的稳定版（推荐）</li>
<li>“Wine Development”：开发版本</li>
<li>“Wine Staging”：在发布稳定版之前的最后一个测试版本</li>
</ul>
<p>&lt;img src&#x3D;”<a href="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_120637.png&quot;">https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_120637.png&quot;</a> width&#x3D;”60%”</p>
<br>

<h3 id="安装-wine-程序："><a href="#安装-wine-程序：" class="headerlink" title="安装 wine 程序："></a>安装 wine 程序：</h3><ol>
<li><p>双击 winehq-stable-5.0.pkg 程序</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_114927.png" width="60%" / loading="lazy">
</li>
<li><p>选择为所有用户安装</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_114953.png" width="60%" / loading="lazy">
</li>
<li><p>勾选 64bit，用于可以安装 windows 的 64 位软件</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_115047.png" width="60%" / loading="lazy">
</li>
<li><p>等待安装过程</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_115103.png" width="60%" / loading="lazy">

 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_115117.png" width="60%" / loading="lazy">

 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_115124.png" width="60%" / loading="lazy">
</li>
<li><p>安装成功</p>
<p>安装成功会在启动器里面，出现如下如的图标；但是启动之后</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_115149.png" style="zoom:50%;" / loading="lazy"></li>
</ol>
<br>

<h3 id="运行-wine-程序："><a href="#运行-wine-程序：" class="headerlink" title="运行 wine 程序："></a>运行 wine 程序：</h3><p>　　Wine Stable 这个软件，启动之后，并不会有常见的 GUI 界面，只有一个终端的界面，并且运行该软件只能够使用命令；幸运的是，命令非常简单</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_115313.png" width="70%"/ loading="lazy"> 



<p>运行我想要安装的 <code>BaiduNetdisk_6.8.9.1.exe</code> （带路径）程序，在终端输入如下命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wine /Users/muli/softInstll/BaiduNetdisk_6.8.9.1.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_115703.png" width="70%" / loading="lazy">



<p>运行之后，会发现没有更新 wine 的配置，要安装 Wine Gecko 安装器，点击安装即可。下载速度非常之慢，挂着梯子耐心等待；若是中间失败，可以点击取消，多次重复安装，一直到等到全部下载和安装成功。</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_115800.png" width="70%"/ loading="lazy">

 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_120422.png" width="70%"/ loading="lazy">



<p>安装成功：</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_133245.png" width="70%"/ loading="lazy">



<p>也可以执行命令 <code>winecfg</code>，来进行修改配置文件：</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_122856.png"  width="50%" / loading="lazy">



<p>就是享受使用的成果时候，在 MacOS 里面使用该 windows 的百度网盘， 享受 mac 没有的隐藏空间功能和正常的使用快乐。可以看到，在 svip 的加速下，可以实现高速下载。 </p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_192533.png" width="90%"/ loading="lazy">

<br>

<h3 id="用-wine-运行-win-官网百度网盘-程序："><a href="#用-wine-运行-win-官网百度网盘-程序：" class="headerlink" title="用 wine 运行 win(官网百度网盘) 程序："></a>用 wine 运行 win(官网百度网盘) 程序：</h3><ul>
<li><p><strong>方式一：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//执行命令
wine 路径+xxx.exe  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


</li>
<li><p><strong>方式二：</strong></p>
<p>鼠标右键执行，如图</p>
 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_200943.png"  width="70%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="用-wine-运行-win-破解PanDownload-程序【非虚拟机】："><a href="#用-wine-运行-win-破解PanDownload-程序【非虚拟机】：" class="headerlink" title="用 wine 运行 win(破解PanDownload) 程序【非虚拟机】："></a>用 wine 运行 win(破解PanDownload) 程序【非虚拟机】：</h3><p>下载 PanDownload_v2.2.2 版本之后，打开文件，运行如下，然后扫码登录自己的账号，自行下载，可见速度可以没有被线速。</p>
 <img src="https://i.imgur.com/7qOjcx1.png" width="70%"/ loading="lazy">



 <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_mark_Snip20200306_123148.png" width="90%"/ loading="lazy">

<br>

<h3 id="PanDownload-v2-2-2下载地址："><a href="#PanDownload-v2-2-2下载地址：" class="headerlink" title="PanDownload_v2.2.2下载地址："></a>PanDownload_v2.2.2下载地址：</h3><ul>
<li><p><strong>PC 内测版：</strong> </p>
<ul>
<li>链接:<a href="https://pan.baidu.com/s/1FNdXvzoWJX4JfWSsaJsoUw">https://pan.baidu.com/s/1FNdXvzoWJX4JfWSsaJsoUw</a>  密码:87d1</li>
</ul>
</li>
<li><p><strong>PC 正式版：</strong></p>
<ul>
<li>链接:<a href="https://pan.baidu.com/s/1vSxzgw2wWHb5fQ_OCfoc5w">https://pan.baidu.com/s/1vSxzgw2wWHb5fQ_OCfoc5w</a>  密码:nibj</li>
</ul>
</li>
<li><p><strong>Android 版本：</strong> </p>
<ul>
<li>链接:<a href="https://pan.baidu.com/s/1DDPwdpBpA0oP7uJgTAdsdw">https://pan.baidu.com/s/1DDPwdpBpA0oP7uJgTAdsdw</a>  密码:k69u</li>
</ul>
</li>
</ul>
<p>更新时间 20202-03-06</p>
<br>

<h3 id="点个赞？"><a href="#点个赞？" class="headerlink" title="点个赞？"></a>点个赞？</h3><p>不看看本小结的小标题？</p>
]]></content>
      <categories>
        <category>学习 - MacOS</category>
      </categories>
  </entry>
  <entry>
    <title>在子类里使用 using 父类 父类函数名fun</title>
    <url>/posts/a10aaeda/</url>
    <content><![CDATA[<p><strong>简介：</strong>  在子类里使用 <code>using</code> 父类:: 父类函数名<code>fun</code>;  这算是一个<strong>c++<strong>的知识点吧，自己在一个项目中看到却不理解的地方， 自己的搜索关键词为：</strong>派生类</strong> 中 <strong>使用 using</strong> <code>父类 :: 函数名</code>；所以这一篇的名称就取名为这个</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font><br><br></p>
</blockquote>
<h2 id="派生类里使用using原因："><a href="#派生类里使用using原因：" class="headerlink" title="派生类里使用using原因："></a>派生类里使用using原因：</h2><p>如果基类中成员函数有多个重载版本，派生类可以重定义所继承的<font color=#FF0000 size=4 face="幼圆"> 0 个或多个版本</font>，但是<font color=#FF0000 size=4 face="幼圆"> <strong>通过派生类型只能访问派生类中重定义的那些版本</strong></font>，所以如果派生类想通过自身类型使用所有的重载版本，则派生类必须<strong>要么重定义所有重载版本</strong>，<strong>要么一个也不重定义</strong>。有时类需要仅仅重定义一个重载集中某些版本的行为，并且想要继承其他版本的含义，在这种情况下，为了重定义需要特化的某个版本而不得不重定义每一个基类版本，可能会令人厌烦。可以在派生类中为重载成员名称提供 using 声明（为基类成员函数名称而作的 using 声明将该函数的所有重载实例加到派生类的作用域），使派生类不用重定义所继承的每一个基类版本。一个 using 声明只能指定一个名字，不能指定形参表，使用using声明将名字加入作用域之后，派生类只需要重定义本类型确实必须定义的那些函数，对其他版本可以使用继承的定义。</p>
<p><font color=#FF0000 size=4 face="幼圆"><strong>“隐藏”是指派生类的函数屏蔽了与其同名的基类函数，规则如下：</strong></font></p>
<p><font color=#FF0000 size=4 face="幼圆">1、如果派生类的函数与基类的函数同名，但是参数不同。</font>此时，不论有无<code>virtual</code>关键字，基类的函数将被隐藏（注意别与重载混淆）。</p>
<p><font color=#FF0000 size=4 face="幼圆">2、如果派生类的函数与基类的函数同名，并且参数也相同，但是基类函数没有<code>virtual</code>关键字。</font>此时，基类的函数被隐藏（注意别与覆盖混淆）</p>
<br>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">My</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">My</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span>QString str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> QString str<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">fun02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">fun02</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">fun02</span><span class="token punctuation">(</span>QString str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">fun02</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> QString str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MySon</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">My</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MySon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">fun02</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>

    <span class="token keyword">using</span> My<span class="token double-colon punctuation">::</span>fun<span class="token punctuation">;</span>    <span class="token comment">//本篇所讲</span>
    <span class="token keyword">using</span> My<span class="token double-colon punctuation">::</span>fun02<span class="token punctuation">;</span>  <span class="token comment">//本篇所讲</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    MySon mySon<span class="token punctuation">;</span>
    mySon<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//只一个"智能提示":是int类型</span>

    mySon<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//此(含自己)后面三个都是得益于 using My::fun; 而可以使用</span>
    mySon<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//仍然手写调用My::fun(QString)其他类型, 可以被调用</span>
    mySon<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"ac"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    mySon<span class="token punctuation">.</span><span class="token function">fun02</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//重写的那个函数,也是唯一的一个的"智能提示"的 int类型</span>
    mySon<span class="token punctuation">.</span><span class="token function">fun02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//此(含自己)后面三个都是得益于 using My::fun02; 而可以使用</span>
    mySon<span class="token punctuation">.</span><span class="token function">fun02</span><span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mySon<span class="token punctuation">.</span><span class="token function">fun02</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>调用同名函数<code>fun</code> 或者 <code>fun02</code>  就只有通过一个<code>My::</code>来调用</p>
<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925194915.jpg"/ loading="lazy">



<p><strong>补充一点：</strong> 使用<code>using My::fun;    //本篇所讲</code>和<code>using My::fun02;  //本篇所讲</code>，在派生类MySon若是想调用同名函数<code>fun</code> 或者 <code>fun02</code>  就只有通过一个<code>My::</code>来调用</p>
<br>

<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p>测试源码：<a href="https://github.com/touwoyimuli/2018_02_C_CPlus/tree/master/08_%E5%9C%A8%E5%AD%90%E7%B1%BB%E9%87%8C%E7%94%A8%20using%20%E7%88%B6%E7%B1%BB%EF%BC%9A%EF%BC%9A%E7%88%B6%E7%B1%BB%E5%87%BD%E6%95%B0%E5%90%8D/test">test c++ 使用 using 测试</a></p>
<br>

<p><strong>参考文章:</strong> </p>
<p> <a href="https://blog.csdn.net/CNHK1225/article/details/47152311">C++ using关键字作用 （重载父类函数）</a></p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序一 技法</category>
        <category>学习 - 底层兼架构</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>基于 QT 开发的 FLIPPED 一款简易且漂亮的跨平台截图软件</title>
    <url>/posts/bc74ebe4/</url>
    <content><![CDATA[<p><strong>简  述:</strong> 新开发的一款跨平台的截图贴图的软件作品， <strong>FLIPPED</strong>：Simple and beautiful cross-platform screenshot software。</p>
<br>



<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<iframe width="760" height="427" src="//player.bilibili.com/player.html?aid=352984575&bvid=BV1rX4y1D7EZ&cid=1037119662&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>


<br>

<h2 id="FLIPPED"><a href="#FLIPPED" class="headerlink" title="FLIPPED"></a>FLIPPED</h2><div align="center">
  <p>
      <h1>
      <a href="https://github.com/XMuli/Flipped">
          <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303121608051.svg"  alt="FLIPPED" / loading="lazy">
      </a>
      <br/>
      FLIPPED
    </h1>
    <br/>
    <h4>Simple and beautiful cross-platform screenshot software.</h4>
  </p>
</div>
<br>

<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/135487951">分享如何拥有一份私人的『开源代码签名证书』</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/136334975">Sunny截图上架Microsoft Store及Linux商店流程的指北</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/136373241">嘿嘿！开发了一款 Sunny 截图 &amp; 钉图，亦支持“屏幕识图”和“OCR”的软件</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/130053230">基于 QT 开发 FLIPPED ：简易且漂亮的跨平台截图贴图软件</a></li>
<li>更多教程 → <a href="https://github.com/XMuli/QtExamples">QtExamples</a></li>
</ul>
<br>

<h2 id="运行预览"><a href="#运行预览" class="headerlink" title="运行预览"></a>运行预览</h2><h3 id="视频演示"><a href="#视频演示" class="headerlink" title="视频演示"></a>视频演示</h3><ul>
<li>[P1] <a href="https://www.bilibili.com/video/BV1rX4y1D7EZ?p=1">FLIPPED-MACOS 运行演示</a></li>
<li>[P2] <a href="https://www.bilibili.com/video/BV1rX4y1D7EZ?p=2">FLIPPED-WINDOWS 运行演示</a></li>
<li>[P3] <a href="https://www.bilibili.com/video/BV1rX4y1D7EZ?p=3">FLIPPED-LINUX 运行演示</a></li>
</ul>
<br>

<h3 id="截图演示"><a href="#截图演示" class="headerlink" title="截图演示"></a>截图演示</h3><p><strong>MACOS</strong></p>
<img src="C:\Users\XMuli\Desktop\202303121457071.jpg" width="100%"/ loading="lazy">

<p><strong>WINDOWS</strong></p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303121616530.jpg" width="100%"/ loading="lazy">

<p><strong>LINUX</strong></p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303121447431.jpg" width="100%"/ loading="lazy">

<br>

<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>贴图（钉图）</li>
<li>多屏截图，延时截图，自定义截图</li>
<li>智能识别窗口矩形（Windows &amp; Linux）</li>
<li>矩形、椭圆、箭头、画笔、马赛克、文本、序号</li>
<li>撤销、重做（多级）、保存、取消、拷贝到剪切板</li>
<li>截图框样式三套，且主题色提供自定义；屏幕十字线样式自定义</li>
<li>国际化：英文、简体中文、繁体中文；字体和字号自定义</li>
</ul>
<br>

<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table>
<thead>
<tr>
<th>按键</th>
<th>描述</th>
<th>模式</th>
</tr>
</thead>
<tbody><tr>
<td><kbd>←</kbd>, <kbd>↓</kbd>, <kbd>↑</kbd>, <kbd>→</kbd> ( <kbd>A</kbd>, <kbd>S</kbd>, <kbd>W</kbd>, <kbd>D</kbd> )</td>
<td>移动选中框位置 1 像素</td>
<td>局部</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd> + <kbd>←</kbd>, <kbd>↓</kbd>, <kbd>↑</kbd>, <kbd>→</kbd></td>
<td>扩展选中框尺寸 1 像素</td>
<td>局部</td>
</tr>
<tr>
<td><kbd>Alt</kbd> + <kbd>←</kbd>, <kbd>↓</kbd>, <kbd>↑</kbd>, <kbd>→</kbd></td>
<td>收缩选中框尺寸 1 像素</td>
<td>局部</td>
</tr>
<tr>
<td><kbd>Shift</kbd> + <kbd>←</kbd>, <kbd>↓</kbd>, <kbd>↑</kbd>, <kbd>→</kbd></td>
<td>移动选中框位置 10 像素</td>
<td>局部</td>
</tr>
<tr>
<td><kbd>Shift</kbd> + <kbd>Ctrl</kbd> + <kbd>←</kbd>, <kbd>↓</kbd>, <kbd>↑</kbd>, <kbd>→</kbd></td>
<td>扩展选中框尺寸 10 像素</td>
<td>局部</td>
</tr>
<tr>
<td><kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>←</kbd>, <kbd>↓</kbd>, <kbd>↑</kbd>, <kbd>→</kbd></td>
<td>收缩选中框尺寸 01 像素</td>
<td>局部</td>
</tr>
<tr>
<td><kbd>Shift</kbd> + <kbd>F4</kbd></td>
<td>快速保存截图</td>
<td>局部</td>
</tr>
<tr>
<td><kbd>Esc</kbd></td>
<td>退出</td>
<td>局部</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><kbd>F6</kbd></td>
<td>窗口智能截图</td>
<td>全局</td>
</tr>
<tr>
<td><kbd>F7</kbd></td>
<td>延时截图</td>
<td>全局</td>
</tr>
<tr>
<td><kbd>F8</kbd></td>
<td>全屏截图</td>
<td>全局</td>
</tr>
</tbody></table>
<br>

<h2 id="架构思路"><a href="#架构思路" class="headerlink" title="架构思路"></a>架构思路</h2><p>技术架构属初看觉着很简单，耗时几天就能写一个 Demo 级的截图，如很早写的 <a href="https://github.com/XMuli/ShotX">ShotX</a>。</p>
<p>但后来心心念念，准备正式写一个具有高级&#x2F;商业的软件时候，就属于有点规模。其属细节点超级多；</p>
<br>

<p><strong>思路：</strong></p>
<ol>
<li>创建一个 QWidget 窗口，去掉标题栏后，全屏且置顶</li>
<li>捕获此刻多屏幕状态保存为 QPixamp，然后绘画在 QWidget 最底层</li>
<li>再绘画一层透明黑色作为遮罩</li>
<li>将 QWidget 放于虚拟桌面的左上角；后面注意相对坐标和绝对坐标的转换</li>
<li>判断当前所处模式：Wait &#x2F; Select &#x2F; Move &#x2F;  Draw &#x2F; Stretch，标记</li>
<li>根据模式标记，对鼠标的  Press &#x2F; Move &#x2F; Release 事件进行对应的操作；重点是鼠标放下和松开时的 QPoint <ul>
<li>捕获模式：智能窗口 &#x2F; 全屏截图 &#x2F; 延时截图 &#x2F; 自定义截图 等</li>
<li>绘画模式则细分：一级绘画栏和二级绘画栏（愈加精确的参数）</li>
<li>拉伸可为：拉伸已绘图形 &#x2F; 选中框 &#x2F; … ，操作是可见区域的任意一个图案</li>
<li>移动同上类似</li>
</ul>
</li>
<li>重复迭代步骤 6，进行标注等功能</li>
<li>导出图片保存到本机路径 &#x2F; 剪切板。</li>
<li>亦可直接贴图（钉住）在屏幕上，然后进行缩放和透明度等操作，作为写作时的参照。</li>
</ol>
<br>

<h2 id="细节打磨"><a href="#细节打磨" class="headerlink" title="细节打磨"></a>细节打磨</h2><p>写的时候，保证开发过程的多平台编译，push 代码时触发构建 CI&#x2F;CD， 及生成对应平台的包便于安装。</p>
<p>截图的工作量、尤其是细节的实现是挺多的。需要花时间来打磨产品和优化细节，让它成为美观又好用的一款软件，再造一个极佳的轮子。</p>
<p>绝知此事要躬行；列举开发过程中遇到的具体困境，以供后来者参考。</p>
<br>

<h3 id="实际问题"><a href="#实际问题" class="headerlink" title="实际问题"></a>实际问题</h3><ol>
<li>FLIPPED 开发在不同系统上、使用不同的 Kit Tools 上面均不会乱码？</li>
<li>项目使用第三方开源库时，选择 <code>git submodule</code> 还 <code>git treemodule</code> 命令呢？</li>
<li>选用何种 LOG 会性能和成本最佳？便于后面定位和分析</li>
<li>CMake 管理跨平台项目，生各平台的 IDE 的解决方案</li>
<li>Window 上自带一些基础宏的数据类型含义？</li>
<li>项目运行直接显示后，按键盘无响应的定位和解决。</li>
<li>Qt 控件显示的方块 ■◆ 乱码？</li>
<li>Linux 如何构建打包为 .deb 文件？</li>
<li>Window 如何构建一件安装的 .exe? 书写构建的脚本？</li>
<li>———————————– 更多进阶细节问题———————————-</li>
<li>如何实现一个完美的无边框窗口（跨平台）？</li>
<li>如何实现一个完美的透明磨砂效果（跨平台）？</li>
<li>Windows 和 Linux 支持一次截多个屏幕，MacOS 没有对应接口，如何实现呢？</li>
<li>如何书写 .yml 的脚本，构建私人的 CI&#x2F;CD 呢？</li>
<li>Window &#x2F; Linux &#x2F; MacOS 下如何获取所有窗口的位置和尺寸，以及其它更多信息呢？</li>
<li>如何实现国际化 I18N？尤其是未使用 Qt Designer  创建 .ui 文件，遇到无 <code>ui-&gt;retranslateUi(this)</code> 函数？</li>
<li>如何解决快捷键 和 Action 调用不同截图？</li>
<li>如何确保 MacOS 上的效果和 Window上面保持外观的一致？</li>
<li>如何解决使用 ESC 取消截图后的内存泄露问题？QPointer 、智能指针、还是单例？</li>
<li>对于使用单例模式不止一处时，可采用奇异玄幻模板？</li>
<li>代码如何更好的解耦和是适当位置，采用适当的设计模式？</li>
<li>如何绘制自己的独有的控件？</li>
<li>如何迭代中进行重构和封装？每次都因为什么？</li>
<li>…</li>
</ol>
<br>

<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul>
<li><p>『解决』 <a href="https://blog.csdn.net/qq_33154343">愿编程不再乱码(含Qt)-根因深究</a></p>
</li>
<li><p>『解决』 <a href="https://blog.csdn.net/qq_33154343/article/details/123453541">Git Submodule 基本用法</a></p>
</li>
<li><p>『解决』从 LOG 分析调研，采用 Spdlog &#x2F; QDebug，以及对此两套的宏封装</p>
<ul>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/123457938">Log：日志选型调研『一』</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/123488323">Log：日志之 Spdlog 极简用法示范『二』</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/123489094">Log：日志之 Spdlog 核心构成『三』</a></li>
</ul>
</li>
<li><p>『解决』有很多，后抽空整理更多</p>
<ol>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/125932219">CMake 设置 Target 输出目录和后缀名</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/125928773">CMake 之 BUILD_SHARED_LIBS 和 CMAKE_BUILD_TYPE 用法教程</a></li>
</ol>
</li>
<li><p>『解决』 <a href="https://blog.csdn.net/qq_33154343/article/details/125775718">LPSTR&#x2F;LPCSTR&#x2F;LPTSTR&#x2F;HWND&#x2F;HANDLE&#x2F;HMODULE&#x2F;HINSTANCE 等含义和区别</a></p>
</li>
<li><p>『解决』 参考</p>
<ul>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/124639169">Qt 新弹窗不响应键盘按键，难道也是无焦点？</a> </li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/125879693">Windows 编程之 WINUSERAPI 和 WINAPI 区别</a></li>
</ul>
</li>
<li><p>『解决』还是 Qt Assistant 解围粗心， <a href="https://blog.csdn.net/qq_33154343/article/details/125775732">创建 QKeySequenceEdit() 后，显示方块■◆乱码</a></p>
</li>
<li><p>『解决』 <a href="https://blog.csdn.net/qq_33154343/article/details/123778207">Linux 中用 dh_make 将 Qt + CMake 项目打包为 deb 文件</a></p>
</li>
<li><p>『解决』构建的自动打包</p>
 <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303130023285.png" width="70%"/ loading="lazy">
</li>
<li><p>『解决』未完待续。。。</p>
</li>
</ul>
<br>

<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><ul>
<li><p>Qt &gt;&#x3D; 5.15.2</p>
</li>
<li><p>CMake &gt;&#x3D; 3.16</p>
</li>
<li><p>MSVC &gt;&#x3D; 2019 | MinGW &gt;&#x3D;  8.1.0 | GCC &gt;&#x3D; 9.4 | Clang &gt;&#x3D; 12.0</p>
<p>  备注: 这是已经成功编译的一些版本，在更低的版本未经过测试。</p>
</li>
</ul>
<br>

<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ul>
<li><p><strong>工具链:</strong> Windows 10 &amp; Qt 5.15.2 &amp; CMake 3.24.1 &amp; MSVC 2019 ( or MinGW 8.1.0)</p>
</li>
<li><p><strong>编译步骤:</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ******************** MSVC 2019 ********************</span>
<span class="token comment">#『Step1』</span>
<span class="token comment"># x86:</span>
<span class="token comment"># 添加 "C:\Qt\5.15.2\msvc2019\bin" 到 path 后，终端执行 echo %PATH% 使其立即生效</span>
<span class="token string">"C:\Program Files (x86)\Microsoft Visual Studio<span class="token entity" title="\201">\201</span>9\Professional\VC\Auxiliary\Build<span class="token entity" title="\v">\v</span>cvarsall.bat"</span> x86
cmake <span class="token parameter variable">-G</span> <span class="token string">"Visual Studio 16 2019"</span> <span class="token parameter variable">-A</span> Win32 <span class="token punctuation">..</span>
devenv Flipped.sln /Build <span class="token string">"Release|Win32"</span>

<span class="token comment"># x64:</span>
<span class="token comment"># 添加 "C:\Qt\5.15.2\msvc2019_64\bin" 到 path 后，终端执行 echo %PATH% 使其立即生效</span>
<span class="token string">"C:\Program Files (x86)\Microsoft Visual Studio<span class="token entity" title="\201">\201</span>9\Professional\VC\Auxiliary\Build<span class="token entity" title="\v">\v</span>cvarsall.bat"</span> x64
cmake <span class="token parameter variable">-G</span> <span class="token string">"Visual Studio 16 2019"</span> <span class="token parameter variable">-A</span> x64 <span class="token punctuation">..</span>
devenv Flipped.sln /Build <span class="token string">"Release|x64"</span>

<span class="token comment">#『Step2』</span>
Visual Studio <span class="token number">2019</span> <span class="token function">open</span> <span class="token variable"><span class="token variable">`</span>Flipped.sln<span class="token variable">`</span></span>

<span class="token comment">#『Step3』</span>
windeployqt  bin/Flipped.exe --no-translations

<span class="token comment"># ******************** MinGW 8.1.0 ********************</span>
QtCreator opens the <span class="token variable"><span class="token variable">`</span>CMakeLists.txt<span class="token variable">`</span></span> <span class="token function">file</span> <span class="token keyword">in</span> the root directory of the <span class="token builtin class-name">source</span> code<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<br>

<h3 id="MacOS-x2F-Linux"><a href="#MacOS-x2F-Linux" class="headerlink" title="MacOS &#x2F; Linux"></a>MacOS &#x2F; Linux</h3><ul>
<li><p><strong>工具链:</strong> </p>
<ul>
<li><strong>MacOS:</strong> MacOS 10.15 &amp; Qt 5.15.2 &amp; CMake 3.24 &amp; Clang 12.0</li>
<li><strong>Linux:</strong> Ubuntu 20.04 &amp; Qt 5.15.2 &amp; CMake 3.24 &amp; GCC 9.4</li>
</ul>
</li>
<li><p><strong>编译步骤:</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token parameter variable">--recursive</span> https://github.com/XMuli/Flipped.git
<span class="token builtin class-name">cd</span> Flipped
<span class="token function">mkdir</span> build <span class="token operator">&amp;</span> <span class="token builtin class-name">cd</span> build
cmake <span class="token punctuation">..</span>
<span class="token function">make</span> <span class="token parameter variable">-j16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<br>

<h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><p>构建各个平台后的包，附上另外一些实际运行图。<strong>Other</strong> 更多截图效果可 → 在此预览</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303121524707.jpg" width="100%"/ loading="lazy">

<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303121441470.jpg" width="100%"/ loading="lazy">

<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303121623966.png" width="100%"/ loading="lazy">



<br>

<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303121524281.jpg" width="100%"/ loading="lazy">

<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303121447407.jpg" width="100%"/ loading="lazy">

<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303121621557.png" width="100%"/ loading="lazy">

<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303121621671.png" width="100%"/ loading="lazy">



<p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202304081932040.png" width="50%"/ loading="lazy"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202304082010242.png" width="50%"/ loading="lazy"></p>
<p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202304081931040.png" width="50%"/ loading="lazy"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202304082010530.png" width="50%"/ loading="lazy"></p>
<p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202304081930048.png" width="50%"/ loading="lazy"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202304081932046.png" width="50%"/ loading="lazy"></p>
<p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303121515818.jpg" width="30%"/ loading="lazy"> <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303121522838.jpg" width="30%"/ loading="lazy"></p>
<br>

<h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><table>
<thead>
<tr>
<th><a href="https://github.com/XMuli"><img src="https://img.shields.io/badge/GitHub-XMuli-brightgreen" alt="alt text" loading="lazy"></a> : 我的主页</th>
<th><a href="https://xmuli.tech/"><img src="https://img.shields.io/badge/Blog-%E5%81%95%E8%87%A7%E7%9A%84%E5%B0%8F%E7%AB%99-ff69b4" alt="alt text" loading="lazy"></a> : 好奇我的小窝</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://sighttp.qq.com/authd?IDKEY=31f3ef7312b39e2c8dc822ae2f4c3b3118e1a6f31cc83373"><img src="https://img.shields.io/badge/QQ-XMuli-brightgreen" alt="alt text" loading="lazy"></a> : 直接和我聊天~</td>
<td><a href="https://blog.csdn.net/qq_33154343"><img src="https://img.shields.io/badge/Blog-%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F-ff69b4" alt="alt text" loading="lazy"></a> ：浏览量 100W+</td>
</tr>
</tbody></table>
<br>

<h2 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h2><p>若是帮助到了你，或者觉得有用，<font color=#FE7207  size=4 face="幼圆">可以点击该项目的的 <font color=#D0087E size=4 face="幼圆"><strong>⭐Star</strong> </font>和<font color=#D0087E size=4 face="幼圆"><strong>🍴 Fork</strong></font> 的两个图标，方便抬手之间，表示点个赞，手有余香，</font>其次才是一份冰的肥宅快乐水。 → <a href="https://github.com/XMuli/FlippedPackage">project →  flipped</a></p>
<br>

<details>
    <summary> <b>当然也可以赠与一杯冰阔落[捐赠/打赏  ← 点击展开二维码]</b></summary>
  <p> - 若是此项目帮助到了你，或者觉得有用，或是想帮助此项目的发展，你也能够邀请我喝一杯杯肥仔快乐水。 - </p>
  <pre><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202302282339037.png" width="80%"/ loading="lazy"></pre>
</details>
<br>

<h2 id="反馈-amp-贡献"><a href="#反馈-amp-贡献" class="headerlink" title="反馈 &amp; 贡献"></a>反馈 &amp; 贡献</h2><p>非常欢迎你的加入！对于此软件有任何缺陷、建议、功能想法、都可 <a href="https://github.com/XMuli/FlippedPackage/issues">提一个 Issue</a> ；或者帮助此项目的完善，提交一个 Pull Request。请遵循 <a href="http://contributor-covenant.org/version/1/3/0/">Contributor Covenant</a> 行为规范。</p>
<br>

<h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><p>→ <font color=#D0087E face="幼圆"> **离线安装包下载 <a href="https://github.com/XMuli/FlippedPackage/releases">Releases</a> ** </font></p>
<p>→ <font color=#D0087E face="幼圆"> <strong>反馈 BUG&#x2F;SUGGEST，用户社区等，和最新版本安装包获取，在QQ群:<a href="https://qm.qq.com/cgi-bin/qm/qr?k=jsD03QzMohGZm0TqYAFh3BvKOpCGlTcT&jump_from=webapi&authKey=DMUwiCQ6ta95PoH8JmtZ+Jz9y7Ozg3yinEsxmm92rNXZRVeMPD7NRgjU+dmUI8Xu">418103279</a></strong> </font></p>
<br>

<h2 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a>     欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录</p>
<p><a href="https://github.com/XMuli/ExCMake">ExCMake</a>           欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴这个系列的 <code>CMake</code> 学习，附学习由浅入深的目录</p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
        <category>学习 - C/C++ 序三 商业</category>
        <category>专栏 - 项目实战开发</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>项目作品集合</tag>
      </tags>
  </entry>
  <entry>
    <title>多文档界面MDI(Multi-document Interface)的实现，QMdiArea使用</title>
    <url>/posts/bf7cb4a7/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  了解 <strong>多文档界面MDI(Multi-document Interface)<strong>的实现，<code>QMdiArea</code>使用，书写一个简单地例子；然后写了一个小的</strong>Qt</strong>例子，用来实现和验证它的空间的一些属性和功能的用法。</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191218_220755_mark.png"/ loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><p><strong>编程环境：</strong>  <code>MacOS 10.14.6 (18G103)</code>   <strong>编程软件：</strong> <code>Qt 5.9.8</code>， <code>Qt Creator 4.8.2</code></p>
<br>

<h2 id="MDI-Multi-document-Interface-控件："><a href="#MDI-Multi-document-Interface-控件：" class="headerlink" title="MDI(Multi-document Interface)控件："></a>MDI(Multi-document Interface)控件：</h2><p><code>MDI(Multi-document Interface)</code>是传统的多文档界面应用程序，而Qt为此提供了支持；他们可以共享一个主窗口，以及菜单栏，工具栏等。而 <strong>设计一个MDI的应用程序就是需要在主窗口的工作去放一个QMdiArea控件作为子窗口的容器。</strong></p>
<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>这里放下一张运行的图片</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/2019-12-18%2022.19.10.gif"/ loading="lazy">

<br>

<h2 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h2><p>两个头文件的类如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">lass ExMDI <span class="token operator">:</span> <span class="token keyword">public</span> QWidget
<span class="token punctuation">&#123;</span>
    Q_OBJECT

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">ExMDI</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">ExMDI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">loadFromFile</span><span class="token punctuation">(</span>QString<span class="token operator">&amp;</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//打开文件</span>
    QString <span class="token function">currentFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//返回当前文件名</span>
    <span class="token keyword">bool</span> <span class="token function">isFileOpended</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//文件已经打开</span>

    <span class="token keyword">void</span> <span class="token function">setEditFont</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">textCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">textCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">textPaste</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">private</span><span class="token operator">:</span>
    Ui<span class="token double-colon punctuation">::</span>ExMDI <span class="token operator">*</span>ui<span class="token punctuation">;</span>

    QString m_currentFile<span class="token punctuation">;</span>  <span class="token comment">//当前文件</span>
    <span class="token keyword">bool</span>    m_fileOpened<span class="token punctuation">;</span>   <span class="token comment">//true 打开；false 未打开</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


lass ExMainWindow <span class="token operator">:</span> <span class="token keyword">public</span> QMainWindow
<span class="token punctuation">&#123;</span>
    Q_OBJECT

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">ExMainWindow</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">ExMainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> slots<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">on_actOpen_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//打开文档</span>
    <span class="token keyword">void</span> <span class="token function">on_actQuit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//退出程序</span>
    <span class="token keyword">void</span> <span class="token function">on_actNew_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//新建MDI的子窗口</span>
    <span class="token keyword">void</span> <span class="token function">on_actFont_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//设置字体</span>
    <span class="token keyword">void</span> <span class="token function">on_actCut_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//剪切文本</span>
    <span class="token keyword">void</span> <span class="token function">on_actCopy_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//复制文本</span>
    <span class="token keyword">void</span> <span class="token function">on_actPaste_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//粘贴文本</span>
    <span class="token keyword">void</span> <span class="token function">on_actView_triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//MDI显示： Table 和 子窗口页面显示</span>
    <span class="token keyword">void</span> <span class="token function">on_actCascade_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//级联显示</span>
    <span class="token keyword">void</span> <span class="token function">on_actTile_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//平铺显示</span>
    <span class="token keyword">void</span> <span class="token function">on_actClose_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//关闭所有子窗口</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">closeEvent</span><span class="token punctuation">(</span>QCloseEvent <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//主窗口关闭时关闭所有子窗口</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    Ui<span class="token double-colon punctuation">::</span>ExMainWindow <span class="token operator">*</span>ui<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>其对应的源文件：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExMDI.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExMDI.h"</span></span>

<span class="token class-name">ExMDI</span><span class="token double-colon punctuation">::</span><span class="token function">ExMDI</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>
    <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token double-colon punctuation">::</span>ExMDI<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token string">"多文档界面MDI (Multi-dociment Interface) 的介绍和使用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setAttribute</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>WA_DeleteOnClose<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//无论是否设置关闭时候删除；在MDI中关闭一个MDI子窗口都会删除子窗口对象</span>
    <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">setWindowIcon</span><span class="token punctuation">(</span><span class="token function">QIcon</span><span class="token punctuation">(</span><span class="token string">"/Users/yuanyi/picture/发布、头像、测试图片/icon.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">ExMDI</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">ExMDI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//打开文件</span>
<span class="token keyword">void</span> <span class="token class-name">ExMDI</span><span class="token double-colon punctuation">::</span><span class="token function">loadFromFile</span><span class="token punctuation">(</span>QString <span class="token operator">&amp;</span>fileName<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QFile <span class="token function">file</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//文件以读的方式读出</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token double-colon punctuation">::</span>ReadOnly <span class="token operator">|</span> QIODevice<span class="token double-colon punctuation">::</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        QTextStream <span class="token function">stream</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//以文本流方式读取文件</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">setPlainText</span><span class="token punctuation">(</span>stream<span class="token punctuation">.</span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        m_currentFile <span class="token operator">=</span> fileName<span class="token punctuation">;</span>
        QFileInfo <span class="token function">fileInfo</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//文件信息</span>
        <span class="token function">setWindowTitle</span><span class="token punctuation">(</span>fileInfo<span class="token punctuation">.</span><span class="token function">fileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_fileOpened <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

QString <span class="token class-name">ExMDI</span><span class="token double-colon punctuation">::</span><span class="token function">currentFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> m_currentFile<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">bool</span> <span class="token class-name">ExMDI</span><span class="token double-colon punctuation">::</span><span class="token function">isFileOpended</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> m_fileOpened<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExMDI</span><span class="token double-colon punctuation">::</span><span class="token function">setEditFont</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QFont font <span class="token operator">=</span> ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> ok<span class="token punctuation">;</span>
    font <span class="token operator">=</span> <span class="token class-name">QFontDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getFont</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ok<span class="token punctuation">,</span> font<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExMDI</span><span class="token double-colon punctuation">::</span><span class="token function">textCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExMDI</span><span class="token double-colon punctuation">::</span><span class="token function">textCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExMDI</span><span class="token double-colon punctuation">::</span><span class="token function">textPaste</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">paste</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExMainWindow.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExMainWindow.h"</span></span>

<span class="token class-name">ExMainWindow</span><span class="token double-colon punctuation">::</span><span class="token function">ExMainWindow</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>
    <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token double-colon punctuation">::</span>ExMainWindow<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCentralWidget</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>mdiArea<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setWindowState</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>WindowMaximized<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>toolBar<span class="token operator">-></span><span class="token function">setToolButtonStyle</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>ToolButtonTextUnderIcon<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">ExMainWindow</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">ExMainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExMainWindow</span><span class="token double-colon punctuation">::</span><span class="token function">closeEvent</span><span class="token punctuation">(</span>QCloseEvent <span class="token operator">*</span>e<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">closeAllSubWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//关闭所有子窗口</span>
    e<span class="token operator">-></span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExMainWindow</span><span class="token double-colon punctuation">::</span><span class="token function">on_actOpen_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">bool</span> needNew <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    ExMDI <span class="token operator">*</span>mdi <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">subWindowList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//如果有打开的主窗口，获取活动窗口</span>
        mdi <span class="token operator">=</span>  <span class="token punctuation">(</span>ExMDI <span class="token operator">*</span><span class="token punctuation">)</span>ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">activeSubWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        needNew <span class="token operator">=</span> mdi<span class="token operator">-></span><span class="token function">isFileOpended</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//文件已经打开，需要新建窗口</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        needNew <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    QString curPath <span class="token operator">=</span> <span class="token class-name">QDir</span><span class="token double-colon punctuation">::</span><span class="token function">currentPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString fileName <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getOpenFileName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"打开一个文件"</span><span class="token punctuation">,</span> curPath<span class="token punctuation">,</span> <span class="token string">"C程序文件(*.h *cpp);;文本文件(*.txt);;所有文件(*.*)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>needNew<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        mdi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ExMDI</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">addSubWindow</span><span class="token punctuation">(</span>mdi<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    mdi<span class="token operator">-></span><span class="token function">loadFromFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mdi<span class="token operator">-></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    ui<span class="token operator">-></span>actCopy<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>actCut<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>actPaste<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>actFont<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExMainWindow</span><span class="token double-colon punctuation">::</span><span class="token function">on_actQuit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExMainWindow</span><span class="token double-colon punctuation">::</span><span class="token function">on_actNew_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ExMDI <span class="token operator">*</span>mdi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ExMDI</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">addSubWindow</span><span class="token punctuation">(</span>mdi<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//添加一个子窗口MDI</span>
    mdi<span class="token operator">-></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    ui<span class="token operator">-></span>actCopy<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>actCut<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>actPaste<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>actFont<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExMainWindow</span><span class="token double-colon punctuation">::</span><span class="token function">on_actFont_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
     ExMDI<span class="token operator">*</span> mdi <span class="token operator">=</span> <span class="token punctuation">(</span>ExMDI <span class="token operator">*</span><span class="token punctuation">)</span>ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">activeSubWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     mdi<span class="token operator">-></span><span class="token function">setEditFont</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//设置编写的字体文档</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExMainWindow</span><span class="token double-colon punctuation">::</span><span class="token function">on_actCut_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ExMDI<span class="token operator">*</span> mdi <span class="token operator">=</span> <span class="token punctuation">(</span>ExMDI <span class="token operator">*</span><span class="token punctuation">)</span>ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">activeSubWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mdi<span class="token operator">-></span><span class="token function">textCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExMainWindow</span><span class="token double-colon punctuation">::</span><span class="token function">on_actCopy_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ExMDI<span class="token operator">*</span> mdi <span class="token operator">=</span> <span class="token punctuation">(</span>ExMDI <span class="token operator">*</span><span class="token punctuation">)</span>ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">activeSubWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mdi<span class="token operator">-></span><span class="token function">textCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExMainWindow</span><span class="token double-colon punctuation">::</span><span class="token function">on_actPaste_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ExMDI<span class="token operator">*</span> mdi <span class="token operator">=</span> <span class="token punctuation">(</span>ExMDI <span class="token operator">*</span><span class="token punctuation">)</span>ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">activeSubWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mdi<span class="token operator">-></span><span class="token function">textPaste</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExMainWindow</span><span class="token double-colon punctuation">::</span><span class="token function">on_actView_triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span>   <span class="token comment">//MDI 模式设置</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>checked<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//Tab多页显示模式</span>
        ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">setViewMode</span><span class="token punctuation">(</span>QMdiArea<span class="token double-colon punctuation">::</span>TabbedView<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">setTabsClosable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//页面可以关闭</span>
        ui<span class="token operator">-></span>actCascade<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>actTile<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">setViewMode</span><span class="token punctuation">(</span>QMdiArea<span class="token double-colon punctuation">::</span>SubWindowView<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//子窗口模式</span>
        ui<span class="token operator">-></span>actCascade<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>actTile<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExMainWindow</span><span class="token double-colon punctuation">::</span><span class="token function">on_actCascade_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">cascadeSubWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//窗口级联展开</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExMainWindow</span><span class="token double-colon punctuation">::</span><span class="token function">on_actTile_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">tileSubWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//平铺展开</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExMainWindow</span><span class="token double-colon punctuation">::</span><span class="token function">on_actClose_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">closeAllSubWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//关闭全部子窗口</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a> 【QtMDIEx】</p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>如何给上游Qt提交Bug反馈和贡献代码Patch？</title>
    <url>/posts/6c51a934/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　记录如何给上游的 QT 组织提 Bug （or Suggesstion），和给提交代码贡献 Patch（代码合并请求）的经验；给读者以参考；修改内容不重要，重要的熟悉如给 Qt 提交 Bug 反馈和 代码贡献 Patch；</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="向-Qt-提交反馈-Bug："><a href="#向-Qt-提交反馈-Bug：" class="headerlink" title="向 Qt 提交反馈 Bug："></a>向 Qt 提交反馈 Bug：</h3><p>向上游的 Qt 组织反馈你所发现的 bug，或者是你想提的建议 Suggesstion；</p>
<br>

<p><strong>步骤流程：</strong></p>
<h4 id="注册-Qt-账号："><a href="#注册-Qt-账号：" class="headerlink" title="注册 Qt 账号："></a>注册 Qt 账号：</h4><p> 登录 <a href="https://login.qt.io/register">login.qt.io</a> 网站，注册一个属于你的 Qt 账号；</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200707223151.png" width="50%" / loading="lazy">

<br>

<h4 id="提交-Bug-前准备："><a href="#提交-Bug-前准备：" class="headerlink" title="提交 Bug 前准备："></a>提交 Bug 前准备：</h4><p>登录 <a href="https://bugreports.qt.io/secure/Dashboard.jspa">bugreports.qt.io</a> ，先在下面链接处的 Bug 库里面查询一下， 你想要提交的 bug （or Suggesstion）是否已经被人提了，若是重复，则不必再提；</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200707224536.png" width="85%" / loading="lazy">

<br>

<h4 id="创建-Bug-单："><a href="#创建-Bug-单：" class="headerlink" title="创建 Bug 单："></a>创建 Bug 单：</h4><p>若是之前没有人填写你想提的这个 Bug， 则可以放心的开始创建你的 Bug 单号了，点击上面的 <code>新建</code> 按钮，然后按照页面的提交，进行填写，其中带有 * 的为必填项；其中通常 默认为 <code>Qt (QTBUG)</code> 和 <code>Bug</code> ，若是 Linux 上面的平台，则可以选择为 <code>Linux/x11</code> ; 在然后就是下面的详细描述：越详细越好， 最好可以在下面的附件可以带上你写的能够复现的实例程序最佳；都完成之后，就可以点击有下家的 <code>新建</code> 按钮<br> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200707232702.png" width="70%" / loading="lazy"></p>
<p>若是创建成功，则会在首页看到一个显示， 点击即可以看到这个 Bug 单号，注意它生成的一个 Bug 编号是很重要且唯一的；</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200707233144.png" width="70%" / loading="lazy">
<br>

<h4 id="查看创建的-Bug-单"><a href="#查看创建的-Bug-单" class="headerlink" title="查看创建的 Bug 单"></a>查看创建的 Bug 单</h4><p>点击 <a href="https://bugreports.qt.io/browse/QTBUG-85477">QTBUG-85477</a> 进去，可以查看刚创建好的 Bug 单；沟通得知该问题的属于第三方的问题，的需要在<a href="https://github.com/glennrp/libpng">上游</a>去修改（后面已在上游提交 pr）；<br> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200709010256.png" width="90%" / loading="lazy"></p>
<br>

<h4 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h4><p>可以修改该网站语言为中文；想不到吧！！！ 使用 Qt 的 Bug 反馈网站，居然是有语言这一栏的设置的 ，点击右上角的 <code>profile-Preferences- pen 图标</code> (<code>头像-个人信息- 参数配置-笔</code>)， 在弹出来的语言中选择 <code>中文（中国）</code>后，点击<code>更新</code>保存。</p>
<p>体验了一把，中文的翻译也不算很过关，可以勉强使用，随后使用 中文、English， 由你自己体验选择；还是推荐英文；</p>
<br>
<br>
<br>
<br>

<hr>
<br>
<br>
<br>
<br>

<h3 id="向-Qt-提交贡献-Code："><a href="#向-Qt-提交贡献-Code：" class="headerlink" title="向 Qt 提交贡献 Code："></a>向 Qt 提交贡献 Code：</h3><p>除了给 Qt 提交 Bug 或 Suggesstion，我们也可以依靠自己的动手能力，给 Qt 提交代码请求他们进行合并，从而帮助 Qt 的代码更加完善；</p>
<br>

<p><strong>提交步骤：</strong></p>
<h4 id="注册-Qt-账号：-1"><a href="#注册-Qt-账号：-1" class="headerlink" title="注册 Qt 账号："></a>注册 Qt 账号：</h4><p>注册一个 Qt（codereview） 的账号；</p>
<br>

<h4 id="登录-Code-Review："><a href="#登录-Code-Review：" class="headerlink" title="登录 Code Review："></a>登录 Code Review：</h4><p>登录 <a href="https://codereview.qt-project.org/dashboard/self">codereview.qt-project.org</a>  网站，这是 Qt 组织的官方“代码审核”平台（不同于 GitLab 和 GitHub），其主要功能是代码审查很是方便；</p>
<p>配置邮件：在 <code>Email</code> 中填写邮箱；</p>
<p>到个人信息中， 在 “Agreements-New Contributor Agreement” 中， 允许一个贡献协议。通常个人是提交<br> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200709005436.png" width="60%" / loading="lazy"></p>
<p><font color=#D0087E face="幼圆"><strong>注意：</strong>  邮箱是必填的，且要和后面提交的署名的邮箱是同一个邮箱；且若不签署此协议，是不能被 push 的， 也是不会被合并的。</font></p>
<br>

<h4 id="输入-ssh："><a href="#输入-ssh：" class="headerlink" title="输入 ssh："></a>输入 ssh：</h4><p>和 GitHub、 GitLab 这种相似，本机创建好自己的 git 账号后，在终端执行 <code>cat ~/.ssh/id_rsa.pub</code> 后将显示的公钥字符串，进行复制，点击网页的右上角的 <strong>“settings-SSHKeys-SSH keys”</strong> 页面，将其粘贴到里面，然后点击 <strong>“ADD NEW SSH KEY”</strong> 几可以创建成功</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200708001558.png" width="70%" / loading="lazy">

<p><font color=#D0087E face="幼圆"><strong>注意：</strong>  使用 commit 的时候，生成 git 的 user.name 必须和 user.email 中 @ 的前缀是一样的；且 <code>姓</code>和<code>名</code>必须是首字母大写，且 <code>姓</code>和<code>名</code>之间使用用空格隔开；否则可能是不被合并改代码的，或者修改的话也是很麻烦的； eg: <code>Xmuli Tech &lt;xmulitech@gmail.com&gt;</code></font><br><br></p>
<h4 id="下载仓库的代码"><a href="#下载仓库的代码" class="headerlink" title="下载仓库的代码"></a>下载仓库的代码</h4><p>点击主页的 <strong>“BROWSE-Repositiories”</strong>，然后在搜索栏 <strong>“Fileter：”</strong> 的右侧，输入你想要查找的仓库，eg：<code>qtbase</code>；<br> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200708000059.png" width="100%" / loading="lazy"></p>
<p>然后点击该仓库链接， 可以看到，一共提供了三种下载方式：你也可以使用如下任意一种方式下载；但是由于某种神秘的原因，直接下载可能会很慢（有 434.7 M， 2020-07-08），哪怕是使用 TZ 依旧耗时很久，请耐心等待</p>
<ul>
<li><p>**[方式一] ANONYMOUS HTTP **</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Clone with commit-msg hook</span>
<span class="token function">git</span> clone <span class="token string">"https://codereview.qt-project.org/qt/qtbase"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>cd <span class="token string">"qtbase"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> .git/hooks <span class="token operator">&amp;&amp;</span> <span class="token function">curl</span> <span class="token parameter variable">-Lo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">git</span> rev-parse --git-dir<span class="token variable">`</span></span>/hooks/commit-msg https://codereview.qt-project.org/tools/hooks/commit-msg<span class="token punctuation">;</span> <span class="token function">chmod</span> +x <span class="token variable"><span class="token variable">`</span><span class="token function">git</span> rev-parse --git-dir<span class="token variable">`</span></span>/hooks/commit-msg<span class="token punctuation">)</span>

<span class="token comment"># Clone with commit-msg hook</span>
<span class="token function">git</span> clone <span class="token string">"https://codereview.qt-project.org/qt/qtbase"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>
</li>
<li><p><strong>[方式二] HTTP</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Clone with commit-msg hook</span>
<span class="token function">git</span> clone <span class="token string">"https://xmuli@codereview.qt-project.org/a/qt/qtbase"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>cd <span class="token string">"qtbase"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> .git/hooks <span class="token operator">&amp;&amp;</span> <span class="token function">curl</span> <span class="token parameter variable">-Lo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">git</span> rev-parse --git-dir<span class="token variable">`</span></span>/hooks/commit-msg https://xmuli@codereview.qt-project.org/tools/hooks/commit-msg<span class="token punctuation">;</span> <span class="token function">chmod</span> +x <span class="token variable"><span class="token variable">`</span><span class="token function">git</span> rev-parse --git-dir<span class="token variable">`</span></span>/hooks/commit-msg<span class="token punctuation">)</span>

<span class="token comment"># Clone with commit-msg hook</span>
<span class="token function">git</span> clone <span class="token string">"https://xmuli@codereview.qt-project.org/a/qt/qtbase"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>
</li>
<li><p><strong>[方式三] SSH</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Clone with commit-msg hook</span>
<span class="token function">git</span> clone <span class="token string">"ssh://xmuli@codereview.qt-project.org:29418/qt/qtbase"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">scp</span> <span class="token parameter variable">-p</span> <span class="token parameter variable">-P</span> <span class="token number">29418</span> xmuli@codereview.qt-project.org:hooks/commit-msg <span class="token string">"qtbase/.git/hooks/"</span>

<span class="token comment"># Clone</span>
<span class="token function">git</span> clone <span class="token string">"ssh://xmuli@codereview.qt-project.org:29418/qt/qtbase"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br></li>
</ul>
<blockquote>
<p>&#x2F;&#x2F;附 qtbase[2020-07-08].rar 百度云盘备份<br>链接: <a href="https://pan.baidu.com/s/1gLPjqXL7vbRhp6oqGIeMlg">https://pan.baidu.com/s/1gLPjqXL7vbRhp6oqGIeMlg</a>  密码: knag</p>
</blockquote>
<br>

<h4 id="设置-git-hooks："><a href="#设置-git-hooks：" class="headerlink" title="设置 git hooks："></a>设置 git hooks：</h4><p>执行如下，配置的是 commit msg和commit hook，它能自动生成一个changeid，也就是将来标示你这个修改的id。后面若是需要修改的话，就使用 <code>git commit --amend</code> 来修改，避免 <code>Change-Id</code> 发生了改变，生成了一个新的提交；</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">gitdir</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> rev-parse --git-dir<span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token function">scp</span> <span class="token parameter variable">-P</span> <span class="token number">29418</span> codereview.qt-project.org:hooks/commit-msg <span class="token variable">$&#123;gitdir&#125;</span>/hooks/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>

<h4 id="修改代码和-commit："><a href="#修改代码和-commit：" class="headerlink" title="修改代码和 commit："></a>修改代码和 commit：</h4><blockquote>
<p>若是在 Linux 上，下载源码包之后，执行 <code>sudo apt build-dep qtbase5-dev</code> 安装编译依赖；源码切换到 <code>dev</code> 分支， 进行代码修改后，进行 commit 提交信息；</p>
</blockquote>
<p>在本地， 现在本地修改好代码，</p>
<p>注意的的是，Qt 的提交规范是很严格的：一开始一句简短的描述，然后一行空行，再然后就是详细的描述；如果提交的 commit 不符合规范的话，机器人🤖是会指出来错误的；一直到你提交正确为止；</p>
<br>

<h4 id="提交贡献："><a href="#提交贡献：" class="headerlink" title="提交贡献："></a>提交贡献：</h4><p>当代码修改通过之后，且能够成功编译之后，且 commit 信息也正确的就可以准备提交了；且一般每个贡献代码是需要在提交信息结束的时候，将附带的 Qt-Bug 编号给带上去；</p>
<p>也可以参考官方的提交模板：<a href="https://code.qt.io/cgit/qt/qt5.git/tree/.commit-template">.commit-template</a> </p>
<p>附上一个他人提交的例子 <a href="https://codereview.qt-project.org/c/qt/qtbase/+/306765">qtbase&#x2F;+&#x2F;306765</a> 作为参考，摘录如下：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">Fix handling of Suzhou numbering system

This only arises when the system locale tells us to use its zero as
our zero digit<span class="token punctuation">,</span> since no CLDR locale uses it by default. Adapt an
MS<span class="token punctuation">-</span>specific QLocale<span class="token punctuation">:</span><span class="token punctuation">:</span>system() test to use Suzhou numbering<span class="token punctuation">,</span> so as to
test this.

<span class="token key atrule">Fixes</span><span class="token punctuation">:</span> QTBUG<span class="token punctuation">-</span><span class="token number">85409</span>
<span class="token key atrule">Change-Id</span><span class="token punctuation">:</span> I343324bb563ee0e455dfe77d4825bf8c3082ca30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>若是第一次 commit， 执行 <code>git commit -a</code>，会显示你加上的信息和自动加上的 <code>Change-Id</code> 号作为本次记录：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200709003020.png" width="70%" / loading="lazy">



<p><font color=#D0087E face="幼圆"><strong>注意：</strong>  不按照此规范写 commit 信息，也是不会被合并的</font></p>
<br>

<h4 id="推送贡献-Patch："><a href="#推送贡献-Patch：" class="headerlink" title="推送贡献 Patch："></a>推送贡献 Patch：</h4><p>执行 <code>git push origin HEAD:refs/for/dev</code> 将修改的文件进行推送到 <code>gerrit</code> 上，进行代码审查，这里推送可能需要等待的时间比较长：</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200708_205601.png" width="70%" / loading="lazy">

<br>

<h4 id="添加审核"><a href="#添加审核" class="headerlink" title="添加审核:"></a>添加审核:</h4><p>查看本文件的修改者 <code>git log --pretty=oneline src/3rdparty/libpng/png.c</code> ，选取其中出现评率最高的人，添加即可；</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">f2ce5b9136882fb315cb524fd9037bc06bff7830 (HEAD <span class="token punctuation">-</span><span class="token punctuation">></span> dev) Add spaces around '/<span class="token important">*'</span> and '<span class="token important">*/'</span>
2e8005765d6513c4743a939aea97c68427f6ab2c Update bundled libpng to version 1.6.37
5d8b01468e8bd752dad090aaef4ccf3a83a58a0d Update bundled libpng to version 1.6.36
0d7c049e4407bf0db8d1eca1ea248c6d6b739c8c Update bundled libpng to version 1.6.35
b084837ffc34439710552cb6ed31054c60f6b2d4 Update bundled libpng to version 1.6.34
e51dbda0677d9ff4419c9dc70e6209fae194ee02 Update bundled libpng to version 1.6.32
9369eca108cc509ed651c0dbab6fa54de83727fc Update bundled libpng to version 1.6.28
714cb4020e12e078e8ba8c2c5493d138d515f46d Update bundled libpng to version 1.6.20
ad5c768fc8b93e22201fb557561b2edd4fcdc26b Update bundled libpng to version 1.6.19
68c137cc725ceadec68c455e0e3e365ecb00f2c1 Update bundled libpng to version 1.6.17
<span class="token key atrule">1fa1ce36288e3e537e9e4db1cfa42b338b5b7e58 Upgrading libpng</span><span class="token punctuation">:</span> Adding clean copy of libpng 1.5.10
38be0d13830efd2d98281c645c3a60afe05ffece Initial import from the monolithic Qt.
(END)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>添加完成之后，等待即可：<br> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200708212111.png" width="90%" / loading="lazy"></p>
<p><font color=#D0087E face="幼圆"><strong>注意：</strong>  和常规的 gitlab、 github 不同，若是不指定审查者，那么该修改一万年也不会有机会被合并进去；必须在网页 gerrit 上指定几个该 commit 的审查者</font></p>
<br>

<h4 id="合并结果："><a href="#合并结果：" class="headerlink" title="合并结果："></a>合并结果：</h4><p>若是没有问题，则会被批准进入仓库；或者按照指导意见来修改，符合标准之后，依旧可以被合并；或许因为某些原因可能不被合并；好运~~</p>
<br>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>本次重在熟悉流程，为后面的为 Qt 提交贡献 Patch 做准备；</p>
<p>本次提交 Bug 为 <a href="https://bugreports.qt.io/browse/QTBUG-85477">QTBUG-85477</a> 和 对应的修改 <a href="https://codereview.qt-project.org/c/qt/qtbase/+/307241">+307241</a> ；因为此修改实际为 Qt 的第三方库，需要从它的上游进行提交修改，而非此处的 qtbase 修改； 于是在对应的第三方的存储库 <a href="https://github.com/glennrp/libpng">glennrp&#x2F;libpng</a> 补上了这个提交 <a href="https://github.com/glennrp/libpng/pulls">#337</a></p>
<br>

<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul>
<li><p><a href="https://wiki.qt.io/Setting_up_Gerrit">Setting up Gerrit</a></p>
</li>
<li><p><a href="https://wiki.qt.io/Gerrit_Introduction">Gerrit_Introduction</a></p>
</li>
<li><p><a href="https://code.qt.io/cgit/qt/qt5.git/commit/.commit-template">qt-commit-template</a></p>
</li>
<li><p><a href="https://www.csslayer.info/wordpress/linux/qt-linux/contribute-patch-to-qt/">如何给 Qt 贡献 Patch</a></p>
</li>
<li><p><a href="https://bugreports.qt.io/browse/QTBUG-85477">QTBUG-85477</a> [本次实例]</p>
</li>
<li><p><a href="https://codereview.qt-project.org/c/qt/qtbase/+/307241">commit 307241</a> [本次实例]</p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>对 GNU/Linux 介绍、ArchLinux社区氛围、DDE移植Arch流程</title>
    <url>/posts/78cd25f3/</url>
    <content><![CDATA[<h1 id="前言简述："><a href="#前言简述：" class="headerlink" title="前言简述："></a>前言简述：</h1><p><strong>简述：</strong> 本文普及一些 <code>GNU / Linux</code> 的常见名词和背后的背后故事；简单介绍 <code>ArchLinux</code> 所处的地位和社区氛围，以及为备受程序员推崇的原因；和 <code>DDE</code> 是如何移植其他发行版（eg：Arch）上的。</p>
<p><strong>前半段</strong> 主要涉及是 GNU &#x2F; Linux 的历史，解释一些十分常见的但少有仔细思考缩写单词含义，和其背后的历史小故事，普及一些开源只是和理念，以及简单阐述为何很多人要选择开源活动？做这件事情的动机和意义是什么？以及能够收获到什么？</p>
<p><strong>中间半段</strong> 主要介绍 ArchLinux 这个具有特色的发行版以及其社区氛围；</p>
<p><strong>最后一段</strong> 主要介绍 DDE 是如何移植到 ArchLinux上的，并且举例两例子。</p>
<p>本文字数比较多，建议按照拆开的三段脉络来看，或可以只关注你感兴趣的一部分：</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200902121036.png" width="60%"/ loading="lazy">

<br>

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h1 id="对于-GNU-x2F-Linux-的一点理解："><a href="#对于-GNU-x2F-Linux-的一点理解：" class="headerlink" title="对于 GNU&#x2F;Linux 的一点理解："></a>对于 GNU&#x2F;Linux 的一点理解：</h1><h2 id="对于-GNU-x2F-Linux-的认知："><a href="#对于-GNU-x2F-Linux-的认知：" class="headerlink" title="对于 GNU&#x2F;Linux 的认知："></a>对于 GNU&#x2F;Linux 的认知：</h2><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200901100559.png" width="20%"/ loading="lazy">

<p>​		这个 <code>GNU / Linux</code> 一看很容易，二看会深思。这里附上个人看法，或续大家看法不一样，欢迎探讨思考。</p>
<p>先看对于下面的单词的理解「来自 GNU 官网介绍」：</p>
<p><strong>GNU工程：</strong> 是要开发<em>一个完全自由的类似Unix的系统</em> ：GNU （GNU’s Not Unix! 的首字母递归缩写—这是对Unix的技术思想致敬的一种方法，同 时表达GNU有所不同）。其基本目标和一贯目标是提供一个和Unix兼容的100% <a href="http://www.gnu.org/philosophy/free-sw.html">自由软件</a>的操作系统。</p>
<p><strong>GNU操作系统：</strong> 是一款使用 <a href="http://www.gnu.org/software/hurd/hurd.html">Hurd</a> 内核，且同时附带有很多自由软件包的<strong>操作系统</strong> 。但 Hurd 缺少一些重要功能，因此未被广泛使用； GNU 软件包包括以用户为导向的应用程序、实用程序、工具、应用库、甚至游戏，一个操作系统能够为其用户提供的所有程序。比较出名的有 C 编译器 gcc、文本编辑器、图形库等。<strong>其所有提供的软件都是自由软件。</strong></p>
<p><strong>Linux(内核)：</strong> 是由 Linus Torvalds 完成的 Linux <strong>系统内核</strong>。</p>
<p><strong>GNU&#x2F;Linux 操作系统：</strong> 等价于一个被改动的 GNU 系统(未使用 Hurd 内核) + Linux内核。</p>
<blockquote>
<p>现在最流行的 Linux 发行版，实际上是使用的是一个<strong>“被改动的 GNU 系统(未使用 Hurd 内核) + Linux内核“</strong> ，然鹅，由于许多用户的混淆，现在此发行版本被简称为 <strong>Linux 操作系统</strong> ，更简的称呼版本为 <strong>Linux</strong> ；但是其实名称应该是 <strong>GNU&#x2F;Linux 操作系统</strong>。</p>
</blockquote>
<br>

<h2 id="自由软件："><a href="#自由软件：" class="headerlink" title="自由软件："></a>自由软件：</h2><p><a href="http://www.gnu.org/philosophy/free-sw.html">自由软件</a>意味着<strong>用户可以自由地运行，拷贝，分发，学习，修改并改进该软件</strong>。  只和自由有关，和价格无关。“自由软件”尊重用户的自由，并且尊重整个社区。</p>
<p>实际上，自由软件的官方定义一直在微调，可以自行查看<a href="http://www.gnu.org/philosophy/free-sw.html#History">历史修改</a>；</p>
<blockquote>
<p><strong>如果一个软件是自由软件，那么它必须为用户提供以下四项基本自由：</strong></p>
</blockquote>
<ul>
<li>自由度0：无论用户出于何种目的，必须可以按照用户意愿，自由地运行该软件。</li>
<li>自由度1：用户可以自由地学习并修改该软件，以此来帮助用户完成用户自己的计算。作为前提，用户必须可以访问到该软件的源代码。</li>
<li>自由度2：用户可以自由地分发该软件的拷贝，这样就可以助人。</li>
<li>自由度3：用户可以自由地分发该软件修改后的拷贝。借此，用户可以把改进后的软件分享给整个社区令他人也从中受益。作为前提，用户必须可以访问到该软件的源代码。</li>
</ul>
<br>

<h2 id="自由与非自由软件的分类："><a href="#自由与非自由软件的分类：" class="headerlink" title="自由与非自由软件的分类："></a>自由与非自由软件的分类：</h2><p>自由软件就表示免费软件吗？可以不负责任的白嫖吗？使用它们应该付出什么代价不？ <strong>自由软件（Free Software）不等价于 免费软件（Freeware）；</strong> 但是通常来说，自由软件在使用的同时，一定会获取对应的源码，且大部分软件都是免费的，但是也能做到有偿使用。广泛的来说，这里的软件都是可以免费白嫖的，人们通常也不需要付出代价；对应使用这些软件的时候，这个软件的开发人员们也不会承担任何的责任（设想一下，一个上亿的合同签订，使用某开源软件 &#x2F; 自由软件来书写此文档，突然崩溃，照成合同签订延期，啊，，，那这，，，想要扯皮，，，难道谁能够保证自己软件不出 bug ？）</p>
<p><strong>自由软件：</strong> 简单理解，大部分都是免费软件，但是也可以有偿收费，但是必须提供源代码。</p>
<p><strong>非自由软件：</strong> 简单理解，该软件的使用、分发、或者修改，都是被禁止的，或者说需要获取授权许可才可以这些操作。</p>
<p><strong>开源软件：</strong> 通常被表示为自由软件一类软件，但实际上两者差别很大，如只有极少的开源软件不是自由软件。</p>
<p><strong>专有软件（私有软件）：</strong> 简单理解，是非自由软件的同义词，但是其中一些软件是被允许非商业性的修改和再分发。</p>
<p><strong>免费软件：</strong> 没有官方的明确定义，但它通常被用于指代那些允许再分发但禁止修改（并且其源代码不可获得）的软件包。其不等于自由软件。</p>
<p><strong>共享软件：</strong> 若是想要使用其软件的副本，只需支付少许的费用就可以获取副本使用许可，且大多数都是源码不可获取。</p>
<p><strong>私人软件：</strong> 为某一群指定用户开发的软件。用户保存和使用他们，且不会以源代码和二进制方式对公众发布。</p>
<p><strong>商业软件：</strong> 私人软件不等价与商业软件。大部分商业软件都是专有软件，但是也有商业化的自由软件，也有非商业化的专有软件。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200901132527.png" width="50%"/ loading="lazy">



<p>上面只是我们比较关心和经常看到的一些软件的说法和定义，实际上，还有很多其他种类的软件：公有领域软件、Copyleft 软件、非 copyleft 的自由软件、使用包容型许可证的软件、使用 GPL 许可的软件、GNU 操作系统、GNU 程序、GNU 软件、FSF 拥有版权的 GNU 软件等，关于他们详细的，可以参考 <a href="http://www.gnu.org/philosophy/categories.html">自由与非自由软件的分类</a>。</p>
<br>

<h2 id="GNU-x2F-Linux-个人感想："><a href="#GNU-x2F-Linux-个人感想：" class="headerlink" title="GNU &#x2F; Linux 个人感想："></a>GNU &#x2F; Linux 个人感想：</h2><p>对于前辈们从事于 GNU &#x2F; Linux 开发，为我们提供开放的源码，可以使得我们自由的、免费的和方便的学习软件编程、和可以了解 Linux 操作系统的构建们和运行原理。对于想要彻替代闭源软件的，感觉他们就是用爱发电，并且还一直发电了很多年，靠着自己的兴趣支撑，邀请着其他志同道合的开源者们，一起做着斗争，希望有一天，所有人所有方面和学科，都能够使用自由操作系统和自由软件。个人感觉这是一个崇高且仍重而道远的理想；<strong>他们有着自己的原则、想法、不为金钱为驱动力，只是去用实际行动，为了宣扬自己的理念和去实践开源文化和社区发展。做这样一件事，感觉他们纯粹且自由的人，是真正热爱生活和热爱生命、热爱贡献的、做着纯粹的兴趣的事情。</strong> 谁又不喜欢做一些自己想做的事情呢？何况其意义深远～～</p>
<br>

<hr>
<br>

<h1 id="对于-Arch-Linux-的一点理解："><a href="#对于-Arch-Linux-的一点理解：" class="headerlink" title="对于 Arch Linux 的一点理解："></a>对于 Arch Linux 的一点理解：</h1><h2 id="楔子："><a href="#楔子：" class="headerlink" title="楔子："></a>楔子：</h2><p>​		<strong>GNU &#x2F; Linux 发行版、由于开源理念、任何人都可以按照自己想法来修改</strong>，加上时间的积累，所以产生了诸多的发行版~；他们有着各自的理念，常见的一种表现形式为，各自为战，而在根本问题上，又能保持协调统一，基调来看，属于百花争鸣；</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200901170413.png" width="100%"/ loading="lazy">

<br>

<h2 id="ArchLinux-是什么？"><a href="#ArchLinux-是什么？" class="headerlink" title="ArchLinux 是什么？"></a>ArchLinux 是什么？</h2><p><code>ArchLinux</code> 是<strong>一款独立的 Linux 发行版</strong> ，既不是继承于 Debian 系，也不是继承于 Red Hat 系、也没有继承于Slackware 系。想不到吧？和我们比较熟悉的 Ubuntu、Fedora、CentOS、UOS、Deepin 没有上下游关系。（当听到有人问它是继承于哪一个？当时我很震惊，，，Arch，，，）</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200901151814.png" width="20%"/ loading="lazy">



<p>在下图来看，它是处于箭头所在位置，下方的的是它的下游：</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200901163234.png" width="90%"/ loading="lazy">



<br>

<h2 id="ArchLinux-历史："><a href="#ArchLinux-历史：" class="headerlink" title="ArchLinux 历史："></a>ArchLinux 历史：</h2><p><strong>早期：</strong> 加拿大程序员和吉他师 Judd Vinet 从 2001 年早期开始开发 Arch Linux，并在2002年3月11日正式发行0.1版。</p>
<p><strong>中期：</strong> <a href="https://wiki.archlinux.org/index.php/File:Archstats2002-2011.png">这个</a>图表见证了Arch Linux 社区的稳步扩大. 而且从早期开始，Arch 就树立起了 <a href="http://www.osnews.com/story/4827">开放、友好和社区互助的形象</a>。</p>
<p><strong>ArchWiki 的诞生：</strong> 2005年7月8日，用 MediaWiki 搭建的 ArchWiki <a href="https://wiki.archlinux.org/index.php/ArchWiki:About_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E6%97%A9%E6%9C%9F%E5%8E%86%E5%8F%B2">开始运行</a>。</p>
<p><strong>A. Griffin 时代：</strong> 2007下半年，Judd Vinet 退出了Arch的开发，并<a href="https://bbs.archlinux.org/viewtopic.php?id=38024">把统治权交给美国程序员 Aaron Griffin</a>, 也就是 Phrakture，目前他依然是 Arch 开发者。</p>
<p><strong>Arch 安装脚本：</strong> 2012 年 7 月的 Arch Linux 安装介质中 <a href="https://www.archlinux.org/news/install-media-20120715-released/">弃用了</a> 基于菜单的 <em>Arch 安装框架</em>(AIF)，改为使用<em>Arch 安装脚本</em> (<a href="https://www.archlinux.org/packages/?name=arch-install-scripts">arch-install-scripts</a>)。</p>
<p><strong>Systemd 时代：</strong> 2012 到 2013 年间 Arch 用 Systemd 替换了 System V init </p>
<p><strong>抛弃 i686 支持：</strong> 鉴于在开发者和社区中 i686 架构的使用程度逐渐式微，<a href="https://www.archlinux.org/news/the-end-of-i686-support/">i686支持已经于2017年11月底被抛弃</a> 。</p>
<p><strong>项目的领导角色和选举：</strong> 2020 年初，Arch 开始用新的流程选择未来的领袖，详情记载在 <a href="https://wiki.archlinux.org/index.php/DeveloperWiki:Project_Leader">DeveloperWiki:Project Leader</a>。Aaron Griffin 决定不再担任项目领导，Arch 通过选举方式正式确认 Levente Polyak 为新的领导，结果记录在 <a href="https://www.archlinux.org/news/the-future-of-the-arch-linux-project-leader/">这里</a>。</p>
<br>

<h2 id="ArchLinux-理念："><a href="#ArchLinux-理念：" class="headerlink" title="ArchLinux 理念："></a>ArchLinux 理念：</h2><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200902101549.png" width="60%"/ loading="lazy">

<p><strong>Keep It Simple, Stupid （保持简单，且一目了然）</strong>；</p>
<h3 id="简洁"><a href="#简洁" class="headerlink" title="简洁"></a>简洁</h3><p>Arch Linux 将简洁定义为：<strong>避免任何不必要的添加、修改和复杂增加</strong>。它提供的软件都来自原始开发者(<a href="https://en.wikipedia.org/wiki/Upstream_(software_development)">上游</a>)，仅进行和发行版(下游)相关的最小修改。</p>
<ul>
<li>不包含上游不愿意接受的补丁。绝大部分 Arch 下游补丁都已经被上游接受，下一个正式版本里会包含。</li>
<li>配置文件也是来自上游，仅包含发行版必须的调整，比如特殊的文件系统路径变动。Arch 不会在安装一个软件包后就自动启动服务。</li>
<li>软件包通常都和一个上游项目直接对应。仅在极少数情况下才会拆分软件包。</li>
<li>官方不支持图形化配置界面，建议用户使用命令行或文本编辑器修改设置。</li>
</ul>
<h3 id="现代"><a href="#现代" class="headerlink" title="现代"></a>现代</h3><p>Arch尽全力保持软件处于最新的稳定版本，只要不出现系统软件包破损，都尽量用最新版本。Arch采用<a href="https://en.wikipedia.org/wiki/Rolling_release">滚动升级</a>策略，安装之后可以持续升级。</p>
<p>Arch向<a href="https://wiki.archlinux.org/index.php/GNU_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">GNU</a>&#x2F;Linux用户提供了许多新特性，包括<a href="https://wiki.archlinux.org/index.php/Systemd_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">systemd</a>初始化系统、现代的<a href="https://wiki.archlinux.org/index.php/File_systems_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">文件系统</a>、LVM2&#x2F;EVMS、软件磁盘阵列（软RAID）、udev支持、initcpio（附带mkinitcpio）以及最新的内核。</p>
<h3 id="实用"><a href="#实用" class="headerlink" title="实用"></a>实用</h3><p>Arch 注重实用性，避免意识形态之争。最终的设计决策都是由开发者的共识决定。开发者依赖基于事实的技术分析和讨论，避免政治因素，不会被流行观点左右。</p>
<p>Arch Linux 的仓库中包含大量的软件包和编译脚本。用户可以按照需要进行自由选择。仓库中既提供了开源、自由的软件，也提供了闭源软件。<strong>实用性大于意识形态</strong>.</p>
<h3 id="以用户为中心"><a href="#以用户为中心" class="headerlink" title="以用户为中心"></a>以用户为中心</h3><p>许多 Linux 发行版都试图变得更“用户友好”，Arch Linux 则一直是，永远会是“以用户为中心”。此发行版是为了满足贡献者的需求，而不是为了吸引尽可能多的用户。Arch 适用于乐于自己动手的用户，他们愿意花时间阅读文档，解决自己的问题。</p>
<p>Arch 鼓励每一个用户 <a href="https://wiki.archlinux.org/index.php/Getting_involved_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">参与</a> 和贡献，报告和帮助修复 <a href="https://bugs.archlinux.org/">bugs</a>，提供软件包补丁和参加核心 <a href="https://projects.archlinux.org/">项目</a>：Arch 开发者都是志愿者，通过持续的贡献成为团队的一员。<em>Archers</em> 可以自行贡献软件包到 <a href="https://wiki.archlinux.org/index.php/Arch_User_Repository_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">Arch 用户仓库</a>, 提升 <a href="https://wiki.archlinux.org/index.php/Main_page_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">ArchWiki 文档质量</a>, 在 <a href="https://bbs.archlinux.org/">论坛</a>, <a href="https://mailman.archlinux.org/mailman/listinfo/">邮件列表</a>, <a href="https://wiki.archlinux.org/index.php/IRC_channels_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">IRC</a> 中给其它用户提供技术支持. Arch Linux 是全球很多用户的选择，已经有很多<a href="https://wiki.archlinux.org/index.php/International_communities">国际社区</a>提供帮助和文档翻译。</p>
<br>

<h2 id="ArchLinux-用户："><a href="#ArchLinux-用户：" class="headerlink" title="ArchLinux 用户："></a>ArchLinux 用户：</h2><p>​		由于各发行版的理念不一样，而意识决定行为，使得最终的产物和受到欢迎程度也大不相同；与商业版对应的社区版本、通常都会建立自己的 <strong>社区</strong>，会在普通用户、爱好者、贡献者和开发者之间，构建一个沟通桥梁。</p>
<p>​		对于各个社区版本的 Linux 来说；一种是面对普通小白用户的（大部分的 Debian系 发行版）；另外一种是面对有一定编程基础的爱好者（Red Hat系和一些其它包管理系）；两者通常会给出不一样水平层次反馈，更加惊喜的是，后者有时候还是直接帮助我们将 bug 修复好～，为发行版添砖加瓦。而这大多数是由与单纯的爱好和热情，没有利益所得，纯粹的用爱发电～；<strong>通常来说，Archlinux 的用户群体主要是有一定基础的编程的贡献者</strong>， 也有一部分被安利过来的尝鲜小白~</p>
<p>​		其中 <code>ArchLinux</code> 发行版，凭借优秀和独特的理念，吸引了很多的爱好者（且对贡献者极其友好）。因为其是完全由用户和社区来决定的发行版中，且整个系统极其精简、采用滚动更新， 这对于爱好开源文化的程序员来说， 是有着比较崇高的地位，且其有着<del>良好</del>极其优秀的和多语言的 <a href="https://wiki.archlinux.org/index.php/Arch_Linux">WiKi</a> 文档。通常其文章属于短小精悍，可以让我们更加自由的理解计算机底层的原理。</p>
<br>

<h2 id="ArchLinux-群组："><a href="#ArchLinux-群组：" class="headerlink" title="ArchLinux 群组："></a>ArchLinux 群组：</h2><p>ArchLinux 发行版，其走向完全又社区来确定，在用户群体中，挑选出受信任用户（TU），来进行一些帮助管理，和决定，对于有争议之处，就采取集体线上开会，然后投票来通过某一项事物的决定；社区的构成，部分由如下构成：</p>
<ul>
<li><p><a href="https://bbs.archlinux.org/">Arch Linux 官方论坛</a> ： 「官方、英文」论坛交流区域</p>
</li>
<li><p><a href="http://bbs.archlinuxcn.org/">Arch Linux 中文论坛</a> ： 「非官方、中文」论坛交流区域，不仅是新手之地，还可遇到十年多的老 Arch 热心用户帮</p>
</li>
<li><p><a href="irc://freenode/archlinux-cn">中文 IRC 频道 #archlinux-cn</a> ： 一个古老的全球性的匿名聊天室</p>
</li>
<li><p><a href="https://wiki.archlinux.org/">ArchLinux 的WiKi</a> ： Arch 的百科全书，通常更新及时，且支持常见语言版本，必备工具（<a href="https://wiki.archlinux.org/index.php/ArchWiki:About_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E6%97%A9%E6%9C%9F%E5%8E%86%E5%8F%B2">wiki介绍</a>）。</p>
</li>
<li><p><a href="https://aur.archlinux.org/">ArchLinux 的 Aur 仓库</a> ： AUR 包是用户自己产生的内容，然后上传包的仓库，其中极大的丰富国内一些常用 win 软件的移植，但记得使用它们造成的后果得自负，没有任何人需要为其负责~</p>
</li>
<li><p><a href="https://t.me/archlinuxcn_group">#archlinux-cn</a> ： Tg 的 Arch 群组，只聊 Arch 的问题和解决方案「中文」</p>
</li>
<li><p><a href="https://t.me/archlinuxcn">Arch Linux</a> ： Tg 的频道，跟进 Arch Linux 日常踩坑预警，翻译官方新闻， testing 测试预警等</p>
</li>
<li><p><a href="https://t.me/archlinuxcn_offtopic">#archlinux-cn-offtopic</a> ：Tg 的 Arch Linux 相关人员的日常讨论群</p>
</li>
<li><p><a href="https://fars.ee/~readme.html">其他更多群组</a> ： 其他更多群组，和交流群的指引</p>
</li>
</ul>
<br>

<h2 id="ArchLinux-社区文化："><a href="#ArchLinux-社区文化：" class="headerlink" title="ArchLinux 社区文化："></a>ArchLinux 社区文化：</h2><p>​		<strong>一开始就筛选精准用户</strong> ，从开始安装 <code>ArchLinux</code> 系统开始，步骤就比一些带有 <code>GUI</code> 程序安装器的软件要繁琐的多，且全程命令行安装（现在还必须有网络），当然，初次安装该系统，会让很多人感觉困难，在安装系统中，就可以过滤掉一些“伪用户”，从而确保后面留下的都是精准和有动手能力的群体用户。且 Arch 有自己的想法，其并不以吸引尽可能多的用户为目的，只是安安心心的做好自己的事情，凡事都自己动手，丰衣足食。</p>
<p>​		<strong>软件仓库是丰富且更新迅速的</strong>，且除了官方的 <code>community</code> 仓库，里面已经包含常用和已经检测过的软件报另外还有 AUR 仓库 <code>archlinuxcn</code>，都是用户可以自定义自己上传任何内容的软件包，且不用对其负任何责任。还有</p>
<p>​		<strong>各种管理包和工具等，都是尽可能最新的版本</strong>， </p>
<p>​		<strong>经常更新的 WiKi</strong>  帮助手册，和对应的多语言版本，通常也更新比较及时，当然，引文版本的永远是最新最全的；</p>
<p>​		<strong>良好的社区交流氛围、Archer 都懂技术的热心者</strong> ，无论是在哪里的社区交流~，都会很舒适和得到你想答案</p>
<p>​		<strong>Arch 发行版完全由社区用户群、UT 和开发者来决定其发展和走向，不会受到商业版本的干扰进程。</strong></p>
<p>​		<strong><code>ArchLinux</code> 发行版是为了满足贡献者的需求，而不是为了吸引尽可能多的用户。Arch 适用于乐于自己动手的用户，他们愿意花时间阅读文档，解决自己的问题。</strong></p>
<br>

<h1 id="DDE与Arch-的关系："><a href="#DDE与Arch-的关系：" class="headerlink" title="DDE与Arch 的关系："></a>DDE与Arch 的关系：</h1><h2 id="DDE-移植-Arch-流程："><a href="#DDE-移植-Arch-流程：" class="headerlink" title="DDE 移植 Arch 流程："></a>DDE 移植 Arch 流程：</h2><p>​		这里讲述一下 DDE 移植到 ArchLinux 的简单步骤，交代下背景，DDE 主要是在 UOS V20 + Qt 5.11.3 上开发出来的，而 Arch 上的 Qt 永远都是最新的，已经到 5.15.0 了，直接编译经常会遇到失败的情况，需要补充相应的头文件的等～</p>
<ol>
<li>在  <a href="https://github.com/linuxdeepin">github</a>  仓库中，选取所需要的仓库</li>
<li>选取其最新的 <a href="https://github.com/linuxdeepin/dtkwidget/tags">tag</a> 编号的代码，clone 到本地 ArchLinux 机器上面</li>
<li>在最新的环境中 Qt 5.15.x 中进行编译<ol>
<li>若没有问题，则进行 第 5 步骤</li>
<li>若有问题，则修改源码，直到编译通过；将修改部分的代码，以补丁 path 的形式提交到 github，等待合并进入 github 仓库，然后此部分被打补丁到下一个 tag 中</li>
</ol>
</li>
<li>找一个打包者，准备进行打包~</li>
<li>其编写 <a href="https://wiki.archlinux.org/index.php/PKGBUILD_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">PKGBUILD</a> 脚本 （包含 ArchLinux 在构建软件包时所需要的信息的 shell 脚本）</li>
<li>执行 <code>makepkg</code> ，生成 <code>*.pkg.tar.zst</code> 包，其可以被 <code>pacman -U 本地包</code> 直接进行安装 </li>
<li>进行测试，上面都没有问题之后，就推送到 ArchLinux 的 服务器上面，提供所有人下载</li>
</ol>
<br>

<h2 id="细节："><a href="#细节：" class="headerlink" title="细节："></a>细节：</h2><p>​		其中，比较耗费时间的地方就是，编写 PKGBUILD 脚本，和在 Arch 上面进行测试~；这里将该脚本描述一下，在本机中，可以复制 <code>/usr/share/pacman/PKGBUILD.proto</code> 作为<a href="https://git.archlinux.org/pacman.git/plain/proto/PKGBUILD.proto">副本</a>，重命名为 PKGBUILD 编写该脚本。</p>
<br>

<h2 id="附两个实例："><a href="#附两个实例：" class="headerlink" title="附两个实例："></a>附两个实例：</h2><p><strong>第一个：</strong></p>
<p>一个 DDE 仓库的自己的实际例子：<a href="https://github.com/archlinux/svntogit-community/blob/packages/deepin-qt5integration/trunk/PKGBUILD">deepin-qt5integration</a>：若是不理解，可以自行参看下一个带注释的例子</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Maintainer: Felix Yan &lt;felixonmars@archlinux.org></span>

<span class="token assign-left variable">pkgname</span><span class="token operator">=</span>deepin-qt5integration
<span class="token assign-left variable">pkgver</span><span class="token operator">=</span><span class="token number">5.1</span>.0.5
<span class="token assign-left variable">pkgrel</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token assign-left variable">pkgdesc</span><span class="token operator">=</span><span class="token string">'Qt platform theme integration plugins for DDE'</span>
<span class="token assign-left variable">arch</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'x86_64'</span><span class="token punctuation">)</span>
<span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token string">"https://github.com/linuxdeepin/qt5integration"</span>
<span class="token assign-left variable">license</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'GPL3'</span><span class="token punctuation">)</span>
<span class="token assign-left variable">depends</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'dtkwidget'</span> <span class="token string">'libqtxdg'</span> <span class="token string">'deepin-qt5platform-plugins'</span><span class="token punctuation">)</span>
<span class="token assign-left variable">makedepends</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'xcb-util-renderutil'</span> <span class="token string">'deepin-file-manager'</span><span class="token punctuation">)</span>
<span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'deepin'</span><span class="token punctuation">)</span>
<span class="token assign-left variable">source</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">$pkgname</span>-<span class="token variable">$pkgver</span>.tar.gz::https://github.com/linuxdeepin/qt5integration/archive/<span class="token variable">$pkgver</span>.tar.gz"</span><span class="token punctuation">)</span>
<span class="token assign-left variable">sha512sums</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'f161836d2429d232e5c20fbb99da584ad8cb46e418c5cf419b639fa53004c6aa67ab2596f63bbeee49d9dd9445e34ac73a03baa24320488577c5265d88412953'</span><span class="token punctuation">)</span>

<span class="token function-name function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token builtin class-name">cd</span> qt5integration-<span class="token variable">$pkgver</span>
  qmake-qt5 <span class="token assign-left variable">PREFIX</span><span class="token operator">=</span>/usr
  <span class="token function">make</span>
<span class="token punctuation">&#125;</span>

<span class="token function-name function">package</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token builtin class-name">cd</span> qt5integration-<span class="token variable">$pkgver</span>
  <span class="token function">make</span> <span class="token assign-left variable">INSTALL_ROOT</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$pkgdir</span>"</span> <span class="token function">install</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br>

<p><strong>第二个：</strong></p>
<p>​		此为个人实际项目的编写的 <a href="https://github.com/xmuli/chinessChess/blob/archlinux/PKGBUILD">PKGBUILD</a> 脚本例子，源码在 master 分支， 构建脚本在 archliux 分支，编译运行成功的结果在 <a href="https://github.com/xmuli/chinessChess/blob/archlinux/run_success.log">日志</a> 。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># This is an example PKGBUILD file. Use this as a start to creating your own,</span>
<span class="token comment"># and remove these comments. For more information, see 'man PKGBUILD'.</span>
<span class="token comment"># NOTE: Please fill out the license field for your package! If it is unknown,</span>
<span class="token comment"># then please put 'unknown'.</span>

<span class="token comment"># Maintainer: xmuli &lt;xmulitech@gmail.com>     # 包的维护者</span>
<span class="token assign-left variable">pkgname</span><span class="token operator">=</span>chinesschess                          <span class="token comment"># 包的名称（由小写字母 @ . _ + - 构成）</span>
<span class="token assign-left variable">_pkgname</span><span class="token operator">=</span>chinessChess                         <span class="token comment"># 自己添加的变量 （因 pkgname 要求全小写，而仓库源码中有大写）</span>
<span class="token assign-left variable">_pkgname2</span><span class="token operator">=</span>ChineseChess                        <span class="token comment"># 自己添加的变量 （最后项目生成的文件名）</span>
<span class="token assign-left variable">pkgver</span><span class="token operator">=</span><span class="token number">5.6</span>.0                                  <span class="token comment"># 包的版本号 （不可有连字符 -）</span>
<span class="token assign-left variable">pkgrel</span><span class="token operator">=</span><span class="token number">1</span>                                      <span class="token comment"># 包的发布号码</span>
<span class="token assign-left variable">epoch</span><span class="token operator">=</span>                                        <span class="token comment"># 用于强制升级软件包 （一般不允许使用）</span>
<span class="token assign-left variable">pkgdesc</span><span class="token operator">=</span><span class="token string">"Network battle game written in Qt (available on LAN)"</span>  <span class="token comment"># 软件包的详细描述</span>
<span class="token assign-left variable">arch</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'x86_64'</span><span class="token punctuation">)</span>                               <span class="token comment"># 包所能够生成并且使用的架构的序列</span>
<span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token string">"https://github.com/xmuli/chinessChess"</span>   <span class="token comment"># 包的官网</span>
<span class="token assign-left variable">license</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'GPL3'</span><span class="token punctuation">)</span>                              <span class="token comment"># 采用的许可证</span>
<span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                     <span class="token comment"># 软件包所在的包组</span>
<span class="token assign-left variable">depends</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token comment"># 软件包的生成和运行时，必须先行安装的软件列表</span>
<span class="token assign-left variable">makedepends</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token comment"># 仅在软件生成时，需要的软件包列表</span>
<span class="token assign-left variable">checkdepends</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                               <span class="token comment"># 运行测试组件时需要，而运行时不需要的包列表</span>
<span class="token assign-left variable">optdepends</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                 <span class="token comment"># 可选的软件包（可看作本软件的插件）</span>
<span class="token assign-left variable">provides</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                   <span class="token comment"># 说明当前包提供的功能 （若使用，则需加上替代版本号）</span>
<span class="token assign-left variable">conflicts</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                  <span class="token comment"># 与当前软件包发生冲突的包 与功能的列表</span>
<span class="token assign-left variable">replaces</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                   <span class="token comment"># 会因安装当前包而取代的过时的包的列表</span>
<span class="token assign-left variable">backup</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                     <span class="token comment"># 当包被升级或卸载时，应当备份的文件（的路径）序列</span>
<span class="token assign-left variable">options</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token comment"># 允许重载 makepkg 的部分 （在 /etc/makepkg.conf 中）</span>
<span class="token assign-left variable">install</span><span class="token operator">=</span>                                      <span class="token comment"># .install 脚本的名称 （值应和 pkgname 相同）</span>
<span class="token assign-left variable">changelog</span><span class="token operator">=</span>                                    <span class="token comment"># 软件包的更新日志的文件名</span>
<span class="token assign-left variable">source</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">$_pkgname</span>-<span class="token variable">$pkgver</span>::https://github.com/xmuli/<span class="token variable">$_pkgname</span>/archive/v<span class="token variable">$pkgver</span>.tar.gz"</span><span class="token punctuation">)</span>  <span class="token comment"># 源码的下载地址</span>
<span class="token assign-left variable">noextract</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                  <span class="token comment"># 在 source 中列出，但不应该在运行 makepkg 时被解包的文件列表</span>
<span class="token assign-left variable">md5sums</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'5abae73968ea0104e99b816bf0b720fe'</span><span class="token punctuation">)</span>  <span class="token comment"># 完整性校验值</span>
<span class="token assign-left variable">validpgpkeys</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                               <span class="token comment"># PGP 指纹列表</span>


<span class="token function-name function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                   <span class="token comment"># 准备</span>
	<span class="token builtin class-name">cd</span> <span class="token variable">$srcdir</span>
    <span class="token builtin class-name">echo</span> <span class="token variable">$srcdir</span>
<span class="token punctuation">&#125;</span>

<span class="token function-name function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                     <span class="token comment"># 构建</span>
	<span class="token builtin class-name">cd</span> <span class="token variable">$_pkgname</span>-<span class="token variable">$pkgver</span>
	<span class="token function">mkdir</span> bin
    <span class="token builtin class-name">cd</span> bin
    qmake <span class="token punctuation">..</span>
    <span class="token function">make</span> -j<span class="token variable"><span class="token variable">$(</span>nproc<span class="token variable">)</span></span> 
<span class="token punctuation">&#125;</span>

<span class="token function-name function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                     <span class="token comment"># 检查</span>
	<span class="token builtin class-name">cd</span> <span class="token variable">$_pkgname</span>-<span class="token variable">$pkgver</span>
<span class="token punctuation">&#125;</span>

<span class="token function-name function">package</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                   <span class="token comment"># 包</span>
	<span class="token builtin class-name">cd</span> <span class="token variable">$_pkgname</span>-<span class="token variable">$pkgver</span>
	<span class="token comment"># make install</span>
    <span class="token builtin class-name">cd</span> bin/
    ./<span class="token variable">$_pkgname2</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a><strong>参考：</strong></h1><ul>
<li><p><a href="http://www.gnu.org/gnu/about-gnu.html">关于GNU操作系统</a></p>
</li>
<li><p><a href="http://www.gnu.org/gnu/gnu-history.html">GNU系统概览</a></p>
</li>
<li><p><a href="http://www.gnu.org/gnu/linux-and-gnu.html">Linux和GNU系统</a></p>
</li>
<li><p><a href="http://www.gnu.org/philosophy/free-sw.html">什么是自由软件？</a></p>
</li>
<li><p><a href="http://www.gnu.org/philosophy/categories.html">自由与非自由软件的分类</a></p>
</li>
<li><p><a href="http://www.gnu.org/gnu/gnu-linux-faq.html">Richard Stallman之GNU&#x2F;Linux问答</a></p>
</li>
<li><p><a href="https://zh.wikipedia.org/wiki/Linux%E5%8F%91%E8%A1%8C%E7%89%88">WiKi Linux发行版</a></p>
</li>
<li><p><a href="https://zh.wikipedia.org/wiki/Linux%E5%8F%91%E8%A1%8C%E7%89%88%E6%AF%94%E8%BE%83">WiKi Linux发行版比较</a></p>
</li>
<li><p><a href="https://www.archlinux.org/">archlinux.org</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习 - Linux</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
        <tag>DDE</tag>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>小技巧：Design设计师里，无法拖拽action到toolbar里</title>
    <url>/posts/8dd195fe/</url>
    <content><![CDATA[<p><strong>简介：</strong>  在<strong>Qt</strong>的<strong>Design</strong>设计师里面，试图拖拽<strong>action</strong>到<strong>toolbar</strong>里面，却不管怎么移动都是一个红色○里面带个X：位禁止拖拽此处，无法拖拽成功。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​		<strong>详情：</strong>  见简介</p>
<br>

<p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p>
<p><strong>编程软件：</strong>   <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="知识分享："><a href="#知识分享：" class="headerlink" title="知识分享："></a>知识分享：</h2><p><strong>问题：</strong></p>
<p>试图拖拽<strong>action</strong>到<strong>toolbar</strong>里面，却不管怎么移动都是这个红色○里面带个X：禁止拖拽此处</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190831000617.jpg"/ loading="lazy">



<p>在Design设计师里面，显示QToolBar工具栏非常小，不能拖拽下面的action到这里，进行可视化的添加；</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190831000434.jpg"/ loading="lazy">



<p><strong>可行的方法：</strong></p>
<p>但是运行之后，想要得到的显示效果的一个方法（不算让我满意）；就是可以添加到QToolBar里面（这是使用代码添加方法）：<code>ui-&gt;mainToolBar-&gt;addAction(ui-&gt;actListInit);</code></p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190831001448.jpg"/ loading="lazy">



<h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><ul>
<li><font color=#D0087E size=4 face="幼圆"><strong>方法一：</strong></font> 仍然坚持暴力拖拽，屡次进行尝试，或许偶尔几次会成功</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190901193120.png"/ loading="lazy">



<ul>
<li><font color=#D0087E size=4 face="幼圆"><strong>方法二：</strong></font>先调整QToolBar的miniumSize的Height的大小，设置大一点，然后进行拖拽，会发现如此容易（下图红线中，是表示可以拖拽放在此处）</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190901193059.png"/ loading="lazy">

<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><ul>
<li>运行成功演示</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190831001314.jpg"/ loading="lazy">

<br>

<h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p>因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>小技巧：设置`QToolBox`的每一页page的使用单独的布局（`QTabWidget`同理）</title>
    <url>/posts/217543be/</url>
    <content><![CDATA[<p><strong>简介：</strong> 在使用QT的<strong>Design</strong>设计师的时候，当需要使用控件<code>QToolBox</code>时候，里面是有多页的时候，为每一页都设置成一个单独的布局方式。其中<code>QTabWidget</code>控件的方法一致。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​		<strong>详情：</strong>  见简介</p>
<br>

<p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p>
<p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p>
<br>

<h2 id="知识分享："><a href="#知识分享：" class="headerlink" title="知识分享："></a>知识分享：</h2><p><strong>小技巧：设置<code>QToolBox</code>的每一页page的使用单独的布局（<code>QTabWidget</code>同理）</strong></p>
<ul>
<li>1、首先选中QToolBox控件</li>
<li>2、再在Design设计师（右侧具体的某一page_xxx）里面，点击选中，打开此page</li>
<li>3、<font color=#D0087E size=4 face="幼圆"><strong>重要的一步：</strong></font> 先必须随意拖曳一个控件到这一page页里面（才能够进行下一步）</li>
<li>4、回到中间，鼠标右键单点击，选中 <code>Lay out</code>一栏， 里面选择其他具体的布局方式，如：<strong>Lay out in a Grid</strong></li>
<li>5、继续设置其他page页面， 同上1~4步骤循环</li>
</ul>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190901165542.png"/ loading="lazy">

<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190901165612.png"/ loading="lazy">

<br>



]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>小米AX6S刷OpenWrt和开启OpenClash，及刷回官网固件</title>
    <url>/posts/4d3a9f54/</url>
    <content><![CDATA[<p><strong>简  述:</strong> 闲暇，折腾下新购 小米AX6S，刷下 <code>OpenWrt</code>，初次接触记录下。以及开启 OpenClash + clash-rules 的进阶使用</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202212101934164.png" width="80%"/ loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>miwifi_rb03_firmware_3e872_1.0.54.bin   [官方 2022.08.24]<br>miwifi_rb03_firmware_stable_1.2.7.bin     [官方 2022.03] 可刷机固件，默认开启 telnet </p>
</blockquote>
<br>

<h2 id="刷成-OpenWrt"><a href="#刷成-OpenWrt" class="headerlink" title="刷成 OpenWrt"></a>刷成 OpenWrt</h2><ol>
<li>先刷开发版 <code>miwifi_rb03_firmware_stable_1.2.7.bin</code> ，默认已开启 Telnet 和 SSH</li>
<li>通过 SN 码计算自己密码，如 36418&#x2F;K1▇▇▇▇06，密码为 60be9bd0</li>
<li>连接路由器 <code>telnet 192.168.31.1</code> (输入 root&#x2F;60be9bd0)</li>
<li>依次执行命令，执行后无提示<ul>
<li>nvram set ssh_en&#x3D;1 &amp;&amp; nvram set uart_en&#x3D;1 &amp;&amp; nvram set boot_wait&#x3D;on &amp;&amp; nvram set bootdelay&#x3D;3 &amp;&amp; nvram set flag_try_sys1_failed&#x3D;0 &amp;&amp; nvram set flag_try_sys2_failed&#x3D;1</li>
<li>nvram set flag_boot_rootfs&#x3D;0 &amp;&amp; nvram set “boot_fw1&#x3D;run boot_rd_img;bootm”</li>
<li>nvram set flag_boot_success&#x3D;1 &amp;&amp; nvram commit &amp;&amp; &#x2F;etc&#x2F;init.d&#x2F;dropbear enable &amp;&amp; &#x2F;etc&#x2F;init.d&#x2F;dropbear start</li>
</ul>
</li>
<li>新开终端页，上传文件<code>scp .\ax6s-1120\factory.bin root@192.168.31.1:/tmp</code></li>
<li>用 ssh 链接路由器 <code>ssh root@192.168.31.1</code>；telnet 可以关掉，执行 <code>mtd -r write /tmp/factory.bin firmware</code> 刷机。路由器自动重启，默认IP 为 <code>192.168.6.1</code> 后，默认账号密码 <code>root/password</code> </li>
<li>输入 ip 进入 openwrt 系统；点击 <strong>“系统 - 备份&#x2F;升级”</strong> 的 <strong>“刷写新的固件”</strong> 选择 <code>ax6s-full.bin</code>  或 <code>ax6s-mini.bin</code> 进行刷写固件</li>
</ol>
<br>

<p><strong>注：</strong></p>
<ul>
<li><p>第二步骤通过 SN 码计算 root 密码：</p>
<ul>
<li>可在线网站 <a href="miwifi.dev/ssh">miwifi.dev&#x2F;ssh</a> </li>
<li>亦可 <a href="https://github.com/YangWang92/AX6S-unlock/blob/master/unlock_pwd.py">unlock_pwd.py</a>  脚本计算，<code>python .\unlock_pwd.py SN码</code></li>
</ul>
</li>
<li><p>此版本发现 <code>ax6s-full.bin</code> 实测重启后，WiFi 名称会被重置默认的 bug，而 <code>ax6s-mini.bin</code> 不会</p>
</li>
<li><p>本篇主要是刷<a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&tid=8187405">237176253 </a>大佬的固件，新手可参考<a href="https://www.right.com.cn/forum/thread-8216670-1-1.html">此贴</a></p>
</li>
</ul>
<br>

<h2 id="开启-OpenClash"><a href="#开启-OpenClash" class="headerlink" title="开启 OpenClash"></a>开启 OpenClash</h2><p> 简介：<a href="https://github.com/vernesong/OpenClash">OpenClash</a> ，其有开源内核 foss 和闭源内核 premuium 之分（CFW、OpenClash 都是后者内核），后者通常支持使用规则集 <a href="https://github.com/Loyalsoldier/clash-rules">clash-rules</a>。初次安装后通常直接运行会失败，LOG 如下，则需要自行安装内核</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2022</span>-12-12 <span class="token number">13</span>:26:54 【Dev】版本内核更新失败，请检查网络或稍后再试！
<span class="token number">2022</span>-12-12 <span class="token number">13</span>:26:52 【Dev】版本内核正在下载，如下载失败请尝试手动下载并上传<span class="token punctuation">..</span>.
<span class="token number">2022</span>-12-12 <span class="token number">13</span>:26:50 提示: 检测到内核文件不存在，准备开始下载<span class="token punctuation">..</span>.
<span class="token number">2022</span>-12-12 <span class="token number">13</span>:26:49 第二步: 组件运行前检查<span class="token punctuation">..</span>.
<span class="token number">2022</span>-12-12 <span class="token number">13</span>:26:49 第一步: 获取配置<span class="token punctuation">..</span>.
<span class="token number">2022</span>-12-12 <span class="token number">13</span>:26:49 OpenClash 开始启动<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc/openclash/core
<span class="token function">wget</span> https://github.com/vernesong/OpenClash/releases/download/Clash/clash-linux-armv8.tar.gz          <span class="token comment"># OpenWrt首页查看内核平台</span>
<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> clash-linux-armv8.tar.gz  <span class="token comment"># 解压为clash文件，tun内核需要下对应文件，后改名clash_tun</span>
<span class="token function">chmod</span> <span class="token number">777</span> clash
<span class="token function">chmod</span> <span class="token number">777</span> clash_tun
<span class="token comment"># 即可成功开启内核</span>
<span class="token comment"># 注意优化 dns、ipv6 等操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以下列出 Dev 和 TUN 内核下载地址。</p>
<p><strong>Dev 内核下载</strong>：<a href="https://github.com/vernesong/OpenClash/releases/tag/Clash">https://github.com/vernesong/OpenClash/releases/tag/Clash</a></p>
<p><strong>Tun 内核下载</strong>：<a href="https://github.com/vernesong/OpenClash/releases/tag/TUN-Premium">https://github.com/vernesong/OpenClash/releases/tag/TUN-Premium</a></p>
<p><strong>Tun 游戏内核</strong>：<a href="https://github.com/vernesong/OpenClash/releases/tag/TUN">https://github.com/vernesong/OpenClash/releases/tag/TUN</a></p>
<br>

<p><strong>使用进阶</strong></p>
<blockquote>
<p><a href="https://docs.cfw.lbyczf.com/contents/quickstart.html#%E5%90%AF%E5%8A%A8">官方 Wiki</a></p>
</blockquote>
<ol>
<li>使用默认的规则</li>
<li>支持使用规则集 <a href="https://github.com/Loyalsoldier/clash-rules">clash-rules</a>： 使用规则集进行更加详细的分流</li>
<li>使用 rule-provider、 proxy-provider 轻松实现自动更新节点、规则、机场订阅链接，目前觉得最好的一个<a href="https://www.youtube.com/watch?v=IVlnvBQXEgE">教程</a>：解决点击更新订阅，自定义的配置文件都被覆盖为默认 </li>
<li>过滤部分节点 ； <ul>
<li>显示指定节点<ul>
<li>在 <code>proxy-providers</code> 里面加入 <code>filter</code> （只能过滤，不能做排除）</li>
</ul>
</li>
<li>不显示部分节点<ul>
<li><a href="https://github.com/Fndroid/clash_for_windows_pkg/issues/2579#issuecomment-1010748750">#1 commands</a> </li>
<li><a href="https://github.com/Fndroid/clash_for_windows_pkg/issues/2579#issuecomment-1010759851">#2 订阅链接里过滤</a> ，但在 “主界面-Providers-Update All” 此链接，则会失败；</li>
<li>让提供商大佬后台屏蔽你指定的节点，来自大佬的热情</li>
</ul>
</li>
</ul>
</li>
</ol>
<br>

<h2 id="刷回官网固件"><a href="#刷回官网固件" class="headerlink" title="刷回官网固件"></a>刷回官网固件</h2><ol>
<li><p>下载 <a href="https://www.miwifi.com/miwifi_download.html">小米路由器修复工具</a> 后运行</p>
</li>
<li><p>笔记本网口和路由器 Lan 口网线连接，<u>确保处于同一个网段</u>，选中官网固件</p>
</li>
<li><p>选择 “以太网 -&gt; ip” 后，下一步，此时断电，按住重置按钮直至黄灯闪烁松开，等待几分钟</p>
</li>
<li><p>刷机成功</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202301021740158.png" width="60%"/ loading="lazy"></li>
</ol>
<br>

<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://www.right.com.cn/forum/forum.php?mod=forumdisplay&fid=171&filter=typeid&typeid=94">恩山 AX6S</a>，makr 后续其它固件</li>
<li><a href="https://github.com/lemoeo/AX6S">Redmi AX6S 解锁 SSH、安装 ShellClash、刷入 OpenWRT 教程</a></li>
</ul>
]]></content>
      <categories>
        <category>学习 - Linux</category>
        <category>学习 - 代理</category>
      </categories>
      <tags>
        <tag>OpenWrt</tag>
        <tag>路由器</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>小米路由器 R4A 刷原生 OpenWrt 后的风景</title>
    <url>/posts/880ce1ac/</url>
    <content><![CDATA[<p><strong>简  述:</strong> 继上篇 <a href="https://blog.csdn.net/qq_33154343/article/details/128268719">小米AX6S刷OpenWrt和开启OpenClash</a> 后，手痒难耐，决定把小米路由器4A千兆版(R4A)路由器 给刷个原生的 <code>OpenWrt</code>。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>miwifi_r4a_firmware_72d65_2.28.62.bin    [官方] 可刷机固件，可开启 telnet </p>
<p>openwrt-22.03.2-ramips-mt7621-xiaomi_mi-router-4a-gigabit-squashfs-sysupgrade.bin </p>
<p>openwrt-22.03.2-ramips-mt7621-xiaomi_mi-router-4a-gigabit-initramfs-kernel.bin</p>
</blockquote>
<p>squashfs-sysupgrade.bin 是我们要刷的版本，initramfs-kernel.bin 是类似于重启后就会镜像还原的版本；</p>
<p>通过 <a href="https://downloads.openwrt.org/releases/22.03.2/targets/ramips/mt7621/">openwrt.org</a> 刷官方原生 最新的 openwrt-22.03 固件；<a href="https://github.com/acecilia/OpenWRTInvasion">OpenWRTInvasion</a>  则利用漏洞进入小米路由器</p>
<br>

<p>💻  <code>win10 22H2</code> 📎  <code>小米路由器4A千兆版(R4A) </code> 📎 <code>虚拟机的 Ubuntu 20.04</code></p>
<br>

<h2 id="刷成原生-OpenWrt"><a href="#刷成原生-OpenWrt" class="headerlink" title="刷成原生 OpenWrt"></a>刷成原生 OpenWrt</h2><ol>
<li><p>先刷为 <code>2.28.62</code> 版本；此为经过验证可以刷机的版本</p>
</li>
<li><p>链接路由器，打开 <code>192.168.31.1</code> 登陆后，拷贝出链接的 stok 数，此时标签页不关闭</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202301021624889.png" width="100%"/ loading="lazy">
</li>
<li><p>主机 Win10 连接路由器 Wifi 后，虚拟机的 Ubuntu 20.04 网络设置为桥接，<code>ifconfig</code> 确保处于同一网段；</p>
</li>
<li><p>进入 OpenWRTInvasion 文件夹；作用为开启 telnet</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip3 <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt
python3 remote_command_execution_vulnerability.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>显示 <code>“done! Now you can connect to the router using several options: (user: root, password: root)”</code> 属成功，才可进行下一步</p>
</li>
<li><p>固件可通过提前上传到 <code>/tmp</code> 下，依次操作后刷机则成功</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">telnet <span class="token number">192.168</span>.31.1    （user: root, password: root）
<span class="token builtin class-name">cd</span> /tmp
mtd <span class="token parameter variable">-e</span> OS1 <span class="token parameter variable">-r</span> <span class="token function">write</span> openwrt-22.03.2-ramips-mt7621-xiaomi_mi
-router-4a-gigabit-initramfs-kernel.bin OS1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>刚刷好没有 WIFI 的，默认 IP 192.168.1.1， 账号 root，密码无；网线可进后台。</p>
</li>
<li><p>也可以先刷 initramfs-kernel.bin 后；</p>
</li>
</ol>
<br>

<p><strong>注：</strong></p>
<ul>
<li><p><strong>打开 <code>192.168.31.1</code> 的标签页也使用虚拟机 ubuntu 的浏览器打开</strong>获取 stok 数；之前 Win10 浏览器打开，执行命令，总提示 <code>Warning: the process has finished, but seems like ssh connection to the router is not working as expected.</code>；屡次  telnet 进不去；浪费光阴</p>
</li>
<li><p>OpenWRTInvasion，该脚本只能运行在 Linux、Mac 上</p>
</li>
<li><p>需要先刷为支持的版本，如 <code>2.28.62</code></p>
</li>
</ul>
<br>

<h2 id="原生-OpenWrt-基础操作"><a href="#原生-OpenWrt-基础操作" class="headerlink" title="原生 OpenWrt 基础操作"></a>原生 OpenWrt 基础操作</h2><h3 id="开启-WiFi"><a href="#开启-WiFi" class="headerlink" title="开启 WiFi"></a>开启 WiFi</h3><p>原生默认没开启 WiFi；还以为没成功，氪！</p>
<p>WIFI最好通过图形界面（LuCI）开启，相关设置在 Network（网络）&gt; Wireless（无线）里头。</p>
<p>选择启用之后，记得进入 Edit（编辑）&gt; Interface Configuration（接口配置）&gt; Wireless Security（无线安全）来设置密码。</p>
<p>WIFI名在 Interface Configuration（接口配置）&gt; General Setup（常规设置）&gt; ESSID 修改。</p>
<br>

<h3 id="opkg-换源"><a href="#opkg-换源" class="headerlink" title="opkg 换源"></a>opkg 换源</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/downloads.openwrt.org/mirrors.ustc.edu.cn\/openwrt/g'</span> /etc/opkg/distfeeds.conf
opkg update
opkg instll libustream-openssl ca-bundle ca-certificates<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>参考 <a href="https://mirrors.ustc.edu.cn/help/openwrt.html">https://mirrors.ustc.edu.cn/help/openwrt.html</a></strong></p>
<br>

<h3 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a>设置中文</h3><p>在 “system-Software” 搜索 <code>luci-i18n-base-zh-cn</code> 之前，先Update 下方可搜寻到</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202301021657195.png" width="100%"/ loading="lazy">

<br>

<h3 id="OpenClash-插件"><a href="#OpenClash-插件" class="headerlink" title="OpenClash 插件"></a>OpenClash 插件</h3><p>→ <a href="https://github.com/vernesong/OpenClash/releases">release</a> 下载 <code>luci-app-openclash_0.45.78-beta_all.ipk</code>后 ，执行 <code> opkg install /tmp/**.ipk</code>  安装；遇最后一行提示 <code> * opkg_install_cmd: Cannot install package luci-app-openclash.</code> 则需要按照 wiki 先安装所必须的依赖。</p>
<br>

<h4 id="8M-之殇，终结"><a href="#8M-之殇，终结" class="headerlink" title="8M 之殇，终结"></a>8M 之殇，终结</h4><p><font color=#ff0000>然，被提示拿捏的死死的；刷小米固件，会想起某帖说的 8M，也明白了；暴风哭泣。不说了，快跑，撤退~~</font></p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202301021803480.png" width="100%"/ loading="lazy">

<br>

<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><p><a href="https://github.com/acecilia/OpenWRTInvasion">OpenWRTInvasion</a></p>
</li>
<li><p><a href="https://openwrt.org/inbox/toh/xiaomi/xiaomi_mi_router_4a_gigabit_edition">https://openwrt.org/inbox/toh/xiaomi/xiaomi_mi_router_4a_gigabit_edition</a> 的 “Notes on firmware exploit procedure” 部分</p>
</li>
<li><p><a href="https://oscarcx.com/tech/openwrt-tutorial.html#%E5%BC%80%E5%90%AFWIFI">Openwrt从入门到放弃</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习 - Linux</category>
        <category>学习 - 代理</category>
      </categories>
      <tags>
        <tag>OpenWrt</tag>
        <tag>路由器</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>微软 SDK 导致的项目编译失败哦！</title>
    <url>/posts/38f2679b/</url>
    <content><![CDATA[<p><strong>简  述:</strong> 哇卡卡卡，这次又抓到了 <code>Microsoft</code> <code>win10</code> 的 🐛，这次还影响到了我写代码哦🙄。项目使用 <code>Release X86</code> 编译会成功，而切换到 <code>Release X64</code> 编译会失败。</p>
<blockquote>
<p>Error (active)	E0147	declaration is incompatible with “BOOLEAN _BitScanForward” (declared at line 2825 of “C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\um\winnt.h”)		C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\intrin0.inl.h	123</p>
<p>… </p>
<p>Error	C2007	#define syntax	C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\shared\minwindef.h	38	<br>Error	C2144	syntax error: ‘int’ should be preceded by ‘;’	C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\shared\minwindef.h	43	<br>Error	C4430	missing type specifier - int assumed. Note: C++ does not support default-int	C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\shared\minwindef.h	43	</p>
</blockquote>
<span id="more"></span>

<p>[TOC]</p>
<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>　　对于商业项目，素来用 <code>Release X86</code> 模式编译，需要调试就关闭优化，整个解决方案都是可以编译通过的。但这次需要编译一个 x64 的 dll，来调试；在本机 VS 2019 直接切换为 Release X64 ，报错如下！！！      💻  <code>win10 21H2</code> 📎 <code>Qt 5.12.11</code> 📎  <code>Visual Studio 2019</code> </p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202205121649010.png" width="100%"/ loading="lazy">

<br>

<p>　　JKS 上明明是有提供的 X64 的 dll，代码即使一行不改，你还报错这么多？你是认真的麽！！！ 大声哔哔。</p>
<br>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>　　看错都是从头的第一个开始看、开始解，但这次这个错看的很颓然！！！</p>
<p>于是开始 <strong>从最底部的错开始看（没错，你是重点🌈）</strong></p>
<ul>
<li>什么错来着，语法错误？？？ </li>
<li>还是微软的 <code>minwindef.h</code> 的问题？？？？你确定不是我们的问题？？？ （你相信自己代码写错的，还是相信 Microsoft 的代码写错了？？？）怀疑人生中🙄</li>
</ul>
<br>

<p>　　常见的基本设置都检查一遍后，（包含的头文件路径、库文件链接、C++ 17 及以上、Unicode 编码、优化关闭、多核编译开启），还是一直报这个错。问了一圈，大家都没有编译过 x64 的。 </p>
<p>。。。蛋疼中。。。</p>
<p>。。。继续蛋疼中。。。</p>
<p>。。。持续蛋疼中。。。</p>
<p>难道真的是 Microsoft 的错？？？，思来想去，再看看此文件，再结合 <a href="https://docs.microsoft.com/en-us/cpp/error-messages/compiler-errors-1/compiler-error-c2007?view=msvc-170">Compiler Error C2007</a> ，目光又投投向了 <code>minwindef.h</code> 文件。</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202205121705712.png" width="40%"/ loading="lazy">

<br>

<p>　　好吧？此刻我觉得里的文件的概率为 30%，但认为可能是你的错却是 10% 的概率；去控制中心找到 <code>Microsoft Visual Stdio Installer</code> 单独升级了一下 sdk （选择了一个最新的 win10，非 win11）；然后重新编译一下，一把过，显示成功了。🤦‍♂️🚀,狂喜</p>
<br>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>　　<strong>最后的解决方案是将　SDK 由 10.0.19041.0 提升到了 10.0.20348.0。呵~</strong></p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202205121732843.png" width="50%"/ loading="lazy">

<br>

<p>　　事后，bc 比较下两个文件，实锤了，且错的很明显和粗糙，这下不是猜测了，晚上可以睡个安心觉了。终究还是 Microsoft 提供的库有错。</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202205131457931.png" width="85%"/ loading="lazy">

<br>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　　最大的收获，是本次心路历程，觉得不可一世的　Microsoft SDK 不可能出错，只可能是我们的代码写的有问题。但这次破除了心里的这种“封建迷信”，亲身体验过，才知道没有什么不可能，这种感觉很奇妙。广泛点说这也算是第三次遇到微软的错误了吧<sup>[1]</sup>，只是前两次都没有这么明显和直接。</p>
<br>

<h2 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> </p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
<br>

<hr>
<p><sup>[1]</sup>  注释，指代：</p>
<ul>
<li>第一次 <a href="https://blog.csdn.net/qq_33154343/article/details/116244656">win10的20H2使用VS2019，拖曳窗口会崩溃</a>; </li>
<li>第二次 <a href="https://blog.csdn.net/qq_33154343/article/details/123508220">一个微软自带的 notepad 所导致的问题</a></li>
</ul>
]]></content>
      <categories>
        <category>学习 - C/C++ 序二 经验</category>
        <category>学习 - Windows</category>
      </categories>
      <tags>
        <tag>Visual Studio</tag>
        <tag>调试</tag>
      </tags>
  </entry>
  <entry>
    <title>愿编程不再乱码(含Qt)-根因深究</title>
    <url>/posts/c0862e62/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　本篇重点讲述如下：</p>
<ol>
<li>乱码知识所涉及的大量知识点</li>
<li>MinGW&#x2F;MSVC 对于 <code>&quot;中文123&quot;</code> 的 <strong>ANSI 字符串</strong>的字符串的默认编码理解</li>
<li>MSVC 中一些强制转换为 GBK&#x2F;UTF-8 的大坑说明</li>
<li>使用代码片对上面理论的验证</li>
<li>完成心愿：以一种优雅的方式在 MSVC 上使用 UTF-8 和 Qt 跨平台不乱码；同样源码亦可使用 WinGW 编译不乱码</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/D2398C0216260B6C9109633018677015.png" width="30%"/ loading="lazy">

<p>​	<strong>本文仅适合想要深究和学习乱码的原因、以及了解编码等知识的读者</strong> ，最后理解透彻均后，欲自行解决做手中实际的乱码问题；若你仅想找到一两行代码，临时解决当前所囧境，本文可能不适合你。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="编程环境"><a href="#编程环境" class="headerlink" title="编程环境"></a>编程环境</h2><p>　　本文的所有代码测试环境，均为 <strong>💻：</strong>  <code>win10 21H1</code>  📎  <code>Visual Studio 2017</code> 📎 <code>Qt Creator 4.15.0</code> </p>
<br>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​	编程早晚皆会遇乱码，经常一些遇到”拿来主义”，经过 C + V，不假思索看效果，或行或不行。忽觉，不应如此，细一缕分析之，看其缘由，解惑之，记载于此。</p>
<p>​	</p>
<p>​	emmm，若是没遇到过乱码，建议可直接关闭本文；顺便我由衷想说一句：</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/5020AFF3B8B11646230518EED2E06DEA.png" width="20%"/ loading="lazy">

<br>

<h2 id="基础共识"><a href="#基础共识" class="headerlink" title="基础共识"></a>基础共识</h2><p>​	在讲解编程乱码之前，先假定读者和我已有基本的 <font color=#FF0000 face="STFangsong"><strong>“字符，字节，字符串和编码”</strong></font> 理解共识，若是理解不够详细，可自行前往<a href="http://www.regexlab.com/zh/encoding.htm">字符，字节和编码</a>达成共识。</p>
<p>但其中一部分依旧强调一遍：</p>
<ol>
<li><strong>ANSI 编码</strong> 表示本地化的一种编码，不同国家、地区的其编码方式不同，且之间互相不兼容。也被称之为 <strong>多字节编码</strong> ：每个字符使用一个字节或多个字节（并非是固定的 2 字节）。</li>
<li><strong>字符</strong> 是一个抽象的符号，人们达成的一约定共识。如看到 ‘$’, ‘￥’ 即知其含义。</li>
<li><strong>字节</strong> 是计算机中的一段存储空间，是一个 8 位的二进制数。</li>
<li><font color=#D0087E><strong>ANSI 字符串</strong></font> 是形如 <code>&quot;中文123&quot;</code> 这种格式的多个字符，其共占 7 字节，共 5 个字符。</li>
</ol>
<br>

<h2 id="乱码种类"><a href="#乱码种类" class="headerlink" title="乱码种类"></a>乱码种类</h2><p>​	在这里，我将乱码可以分为两类，或许其“称呼”不够准确（不必纠结），但倘若读者由其文字自行理解这两种的差异，和我达成共识了, 即为目的达到了<del>（是语言的局限性？？）</del>。</p>
<p><font color=#FF0000><strong>⓵式</strong></font> <strong>文件读取形式的乱码：</strong> A 软件编写了一个 test.txt 文件，里面包含中英文和符号。然后在本机使用 B 软件直接打开，发现乱码了；亦或是将此文件，发送另外一个外国的网友，然后同样使用 A 软件打开，却发现也乱码了。（此处 “发现乱码了” 含义为人看不懂，出现方块符号、或者古生僻汉字、菱形?等）</p>
<p><font color=#FF0000><strong>⓶式</strong></font> <strong>含编程形式的乱码：</strong> 在 IDE 中，输出一个 “ANSI 字符串” 或者将其保存到字符串对象 string 、QString 等中，再终端输出，发现也乱码了。</p>
<br>

<p>​	其中<font color=#FF0000><strong>⓵式</strong></font>的非常容易解决，其仅和<strong>“源码字符集”</strong> 有关，最常见的解决方式为换一个编码格式解析即可（过于简单不再讨论）。而<font color=#FF0000><strong>⓶式</strong></font>的则和<strong>“执行字符集”</strong> 相关，比较复杂、涉及的知识点也比较多，也是工程师常遇到却难以解决、也是余文的篇幅内容。其差异见图示:</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/Encoding2.svg" width="60%"/ loading="lazy">

<br>

<h2 id="分析两种乱码"><a href="#分析两种乱码" class="headerlink" title="分析两种乱码"></a>分析两种乱码</h2><p>​	对于<font color=#FF0000><strong>⓶式</strong></font>的乱码，一共涉及到如下环节（按顺序），如果有一个环节出现了问题，则会造成最终的终端打印出现乱码。</p>
<blockquote>
<p>以文本 “我是汉字奇” 为例：</p>
</blockquote>
<ol>
<li>确定本机的字符编码</li>
<li>在 .cpp 中， 写入 <code>我是汉字奇</code> 的<em>“ANSI字符串”</em>时，按下保存时，选择的编码格式为？</li>
<li>将此<em>“ANSI字符串”</em>当参数，传递给 QString 时候，其字符编码为？</li>
<li>IDE 编译 .cpp 时候，其执行字符集为？将其拷贝到内存中时候为？</li>
<li>输出到终端的时候，终端的字符集为？</li>
</ol>
<br>

<p><strong>补充说明（巨坑）：</strong></p>
<ul>
<li><p>MSVC 的编码字符集和执行字符集都默认为 GBK；而 QtCretor 编码字符集和执行字符集都默认为 UTF-8。</p>
</li>
<li><p>MSVC 执行编译时候，发现近仅只能够将 “UFT-8 带 BOM” 格式的文件正确识别。而不带 BOM 的 UTF-8 实际也是被识别为 GBK 格式。</p>
</li>
<li><p>MSVC 在编译时，无论 .cpp 文件源码字符集是 <code>UTF-8</code>、<code>UTF-8 BOM</code>、<code>GBK</code> 中的哪一种；只要没有声明为执行码字符集为 UFT-8，则最终在内存中，都会被<strong>强制转换 GBK</strong> 处理；若一旦声明，则也会被<strong>强制转换为 UTF-8 格式</strong> 。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 若想声明执行字符集为 UFT-8，添加如下</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">execution_character_set</span><span class="token punctuation">(</span></span><span class="token string">"utf-8"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>若测试的字符串 <code>&quot;xxxxxxx&quot;</code> 为偶数，恰好会有“错错得对”巧合；故特地选择 <code>我是汉字奇</code> 这奇数个的中文来测试</p>
</li>
<li><p>win10 终端默认的编码是 GBK，有时候还是很坑</p>
</li>
<li><p><strong>字符串二进制的表示形式不需要编译，直接拷贝到执行程序的二进制中。</strong></p>
</li>
</ul>
<br>

<h2 id="涉及的知识点"><a href="#涉及的知识点" class="headerlink" title="涉及的知识点"></a>涉及的知识点</h2><p>​	由上面的分析可以，牵涉的部分知识点大致包含如下；</p>
<ol>
<li>源码字符集 和 执行字符集</li>
<li>字符编码 ANSI，GBK，UTF-8，UTF-16，Latin-1</li>
<li>统一码带 BOM 和不带区别？</li>
<li>代码页，本地编码，ANSI 编码</li>
<li>MinGW&#x2F;MSVC 中默认的编码</li>
<li>MSVC 的特殊情况（见分析的补充说明）</li>
<li>Qt&#x2F;C++ 编码转换使用 </li>
<li>QString、QByteArrary、QChar、string、char *、char []、char</li>
</ol>
<p>下面逐一解释其内容，内容较多、望君耐心。谁让历史的积累和包袱有这么多呢？已将关联不大部分，一笔带过。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_2484(20210407-004402).JPG" width="20%"/ loading="lazy">

<br>

<h3 id="源码字符集-和-执行字符集"><a href="#源码字符集-和-执行字符集" class="headerlink" title="源码字符集 和 执行字符集"></a>源码字符集 和 执行字符集</h3><table>
<thead>
<tr>
<th>名称</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>源码字符集(the source character set)</td>
<td>源码文件是使用何种编码保存的</td>
</tr>
<tr>
<td>执行字符集(the execution character set)</td>
<td>可执行程序内保存的是何种编码(程序执行时内存中字符串编码)</td>
</tr>
</tbody></table>
<p>C++98 的问题： <strong>既没有规定源码字符集，也没有规定执行字符集</strong>。 可参见<a href="https://www.cnblogs.com/victor-ma/articles/3836243.html">【转】源码字符集(the source character set) 与 执行字符集(the execution character set)</a>。</p>
<br>

<h3 id="字符集-x2F-编码-x2F-ASCII-x2F-ANSI-x2F-UNICODE"><a href="#字符集-x2F-编码-x2F-ASCII-x2F-ANSI-x2F-UNICODE" class="headerlink" title="字符集&#x2F;编码&#x2F;ASCII&#x2F;ANSI&#x2F;UNICODE"></a>字符集&#x2F;编码&#x2F;ASCII&#x2F;ANSI&#x2F;UNICODE</h3><blockquote>
<p>按照惯例，人们认为<strong>字符集</strong> 和<strong>字符编码</strong> 是同义词，因为使用同样的标准来定义提供什么字符并且这些字符如何编码到一系列的代码单元（通常一个字符一个单元）。由于历史的原因，MIME和使用这种编码的系统使用术语<strong>字符集</strong> 来表示用于将一组字符编码成一系列八位字节数据的整个系统。</p>
</blockquote>
<p><strong>字符集（即 字符编码）：</strong> 被收纳进入标准的 字符和符号的集合。</p>
<p><strong>编码：</strong> 规定“字符集”中具体的某一字符存储的方式（字节数、哪些字节）。</p>
<p>但通常所说的 “字符集” 、 “编码” 与 “GB2312, GBK, JIS, Big5”  常有混用，应结合上下文理解到底说的哪一个含义。如 notepad++ 中集中常见的编码；</p>
 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210921005259.png" width="30%"/ loading="lazy">

<p>其分类为如下</p>
<table>
<thead>
<tr>
<th align="left">分类</th>
<th>编码标准</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单字节字符编码</td>
<td>ISO-8859-1，ASCII</td>
</tr>
<tr>
<td align="left">ANSI 编码（多字节）</td>
<td>GB2312(简体中文)，BIG5(繁体中文)，Shift_JIS(日本)</td>
</tr>
<tr>
<td align="left">UNICODE 编码</td>
<td>UTF-8，UTF-8-BOM，UTF-16（UCS-2 Big、UCS-2 Little）</td>
</tr>
</tbody></table>
<br>

<p><strong>ASCII</strong> ：只支持基本的拉丁字符的字符编码</p>
<p><strong>ISO&#x2F;IEC 8859</strong> ：在 ASCII 基础上加上一些扩展字符，是 15 种字符集。<font color=#FF0000 ><strong>Latin-1</strong></font> 是其中之一。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210718191313.png" width="100%"/ loading="lazy">

<br>

<p>​	不论是 ASCII 的 7 位的编码，还是后期演化出来的 ISO&#x2F;IEC 8859 的 8 位的编码，都还是用单个字节就可以表示一个字符，叫做<strong>单字节编码</strong>。各种单字节编码之间的关系，可以用下面图表来解释：</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210718202242.png" width="70%"/ loading="lazy">

<br>

<p><strong>Unicode</strong> ：只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。它的实现方式有如下：</p>
<ul>
<li><strong>UTF-8</strong> 是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。</li>
<li><strong>UTF-16</strong> 用二个字节存储一个字符。</li>
<li><strong>UTF32</strong> 用四个字节存储一个字符。</li>
</ul>
<br>

<h3 id="大端和小端（字节序）"><a href="#大端和小端（字节序）" class="headerlink" title="大端和小端（字节序）"></a>大端和小端（字节序）</h3><p>​	<strong>大端(Big Endian)</strong> 认为第一个字节是最高位字节（按照从低地址到高地址的顺序存放数据的高位字节到低位字节）；</p>
<p>​	<strong>小端（Little Endian）</strong> 则相反，它认为第一个字节是最低位字节（按照从低地址到高地址的顺序存放据的低位字节到高位字节）。</p>
<br>

<p><strong>例子：</strong> 如 0x1234abcd 写入到以 0x0000 开始的内存中，则 Little endian 和 Big endian 模式的存放结果如下：<br>地址            0x0000    0x0001    0x0002    0x0003<br>big-endian      0x12      0x34      0xab      0xcd<br>little-endian   0xcd      0xab      0x34      0x12</p>
 <br>

<h3 id="UTF-8-带-BOM-与不带区别"><a href="#UTF-8-带-BOM-与不带区别" class="headerlink" title="UTF-8 带 BOM 与不带区别"></a>UTF-8 带 BOM 与不带区别</h3><p>BOM 就是一个标记，用于放在数据最开始的几个预定的特殊符号，<strong>并无特殊的含义</strong>。研究一通，最后发现就是本段第一行话。南墙在 <a href="https://www.cnblogs.com/flyingeagle/articles/9825302.html">UTF-8与UTF-8 BOM</a> &amp;&amp; <a href="http://www.crifan.com/files/doc/docbook/char_encoding/release/html/char_encoding.html">关于UTF-8的BOM：“EF BB BF”</a>。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">BOM Encoding
EF BB BF UTF-8
FE FF UTF-16 <span class="token punctuation">(</span>big-endian<span class="token punctuation">)</span>
FF FE UTF-16 <span class="token punctuation">(</span>little-endian<span class="token punctuation">)</span>
00 00 FE FF UTF-32 <span class="token punctuation">(</span>big-endian<span class="token punctuation">)</span>
FF FE 00 00 UTF-32 <span class="token punctuation">(</span>little-endian<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

 <br>

<h3 id="代码页，本地编码，ANSI编码"><a href="#代码页，本地编码，ANSI编码" class="headerlink" title="代码页，本地编码，ANSI编码"></a>代码页，本地编码，ANSI编码</h3><p>简单理解：仅在 Windows 系统中才有代码页面，在终端 <code>chcp</code> 可查看。一个代码页的数字，对应这一个字符编码。而 ANSI编码 就是使用的本机器默认的字符编码，本机的简体中文中为 GB2312 。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210921012137.png" width="50%"/ loading="lazy">

<br>

<p><strong>本地编码</strong> ：当前Windows中的二进制的值，用何种编码去解析，然后显示出对应的该编码中的字符。通常是指 ANSI 编码。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210718200015.png" width="80%"/ loading="lazy">

<br>

<p><strong>ANSI 编码</strong> ：使用2个字节（通常使用 0x80~0xFF 范围的2个字节来表示1个字符）来代表一个字符的各种汉字延伸编码方式。不同的国家和地区制定了不同的标准，由此产生了 GB2312, BIG5, JIS 等各自的编码标准。但是不同 ANSI 编码之间互不兼容，当信息在国际间交流时，无法将属于两种语言的文字，存储在同一段 ANSI 编码的文本中。</p>
<ul>
<li>简体中文系统：ANSI 编码代表 GB2312 编码</li>
<li>繁体中文系统：ANSI 编码代表 BIG 编码</li>
<li>日文操作系统：ANSI 编码代表 JIS 编码</li>
</ul>
 <br>

<h3 id="MinGW-x2F-MSVC-中默认的编码"><a href="#MinGW-x2F-MSVC-中默认的编码" class="headerlink" title="MinGW&#x2F;MSVC 中默认的编码"></a>MinGW&#x2F;MSVC 中默认的编码</h3><p>​	这个里面属实有大坑，如下。</p>
<ul>
<li><p>MSVC 的编码字符集和执行字符集都默认为 GBK；而 QtCretor 编码字符集和执行字符集都默认为 UTF-8。</p>
</li>
<li><p>MSVC 执行编译时候，发现近仅只能够将 “UFT-8 带 BOM” 格式的文件正确识别。而不带 BOM 的 UTF-8 实际也是被识别为 GBK 格式。</p>
</li>
<li><p>MSVC 在编译时，无论 .cpp 文件源码字符集是 <code>UTF-8</code>、<code>UTF-8 BOM</code>、<code>GBK</code> 中的哪一种；只要没有声明为执行码字符集为 UFT-8，则最终在内存中，都会被<strong>强制转换 GBK</strong> 处理；若一旦声明，则也都会被<strong>强制转换为 UTF-8 格式</strong> 。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 若想声明执行字符集为 UFT-8，添加如下
<span class="token comment">#pragma execution_character_set("utf-8")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>若测试的字符串 <code>&quot;xxxxxxx&quot;</code> 为偶数，恰好会有“错错得对”巧合；故特地选择 <code>我是汉字奇</code> 这奇数个的中文来测试</p>
</li>
<li><p>win10 终端默认的编码是 GBK，有时候还是很坑</p>
</li>
<li><p><strong>字符串二进制的表示形式不需要编译，直接拷贝到执行程序的二进制中。</strong></p>
</li>
</ul>
 <br>

<hr>
<h2 id="C-x2F-Qt-中字符串和编码"><a href="#C-x2F-Qt-中字符串和编码" class="headerlink" title="C++&#x2F;Qt 中字符串和编码"></a>C++&#x2F;Qt 中字符串和编码</h2><p>​	开发者自然重点关于 Qt 和 C++ 的字符串，以及涉及到的有关函数，以及里面内部的存储方式。</p>
<h3 id="QString"><a href="#QString" class="headerlink" title="QString"></a>QString</h3><blockquote>
<p>QString stores a string of 16-bit <a href="https://doc.qt.io/qt-5/qchar.html">QChar</a>s, where each <a href="https://doc.qt.io/qt-5/qchar.html">QChar</a> corresponds to one UTF-16 code unit. (Unicode characters with code values above 65535 are stored using surrogate pairs, i.e., two consecutive <a href="https://doc.qt.io/qt-5/qchar.html">QChar</a>s.)</p>
</blockquote>
<p>文档解释很清楚：QString 内部是以 16 位的 QChar 来存储（Unicode 的一种，但不是 utf-8）。</p>
<br>

<h3 id="QByteArray"><a href="#QByteArray" class="headerlink" title="QByteArray"></a>QByteArray</h3><blockquote>
<p>QByteArray can be used to store both raw bytes (including ‘\0’s) and traditional 8-bit ‘\0’-terminated strings. Using QByteArray is much more convenient than using <code>const char *</code>.</p>
</blockquote>
<p>QByteArray 既可以用来存储原始的字节，包括<code>&#39;\0&#39;</code>，也可以用来存储传统的 8-bit 的以<code>&#39;\0&#39;</code>结尾的字符串。使用QByteArray比使用普通的const char* 更方便。</p>
<br>

<h3 id="QChar"><a href="#QChar" class="headerlink" title="QChar"></a>QChar</h3><blockquote>
<p>In Qt, Unicode characters are 16-bit entities without any markup or structure. This class represents such an entity. It is lightweight, so it can be used everywhere. Most compilers treat it like an <code>unsigned short</code>.</p>
</blockquote>
<p><font color=#D0087E><strong>在 Qt 中，Unicode 字符是没有任何标记或结构的 16 位实体。</strong></font> 这个类代表了这样一个实体。它是轻量级的，所以它可以被到处使用。大多数编译器把它当作一个 unsigned short。</p>
<br>

<table>
<thead>
<tr>
<th>转入函数</th>
<th>转出函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>fromLocal8Bit</td>
<td>toLocal8Bit</td>
<td>与操作系统及本地化语言相关，Linux 一般是 UTF-8 字符串，Windows 一般是 ANSI 多字节编码字符串。</td>
</tr>
<tr>
<td>fromUtf8</td>
<td>toUtf8</td>
<td>与 UTF-8 编码的字符串相互转换。</td>
</tr>
<tr>
<td>fromUtf16</td>
<td>utf16 和 unicode</td>
<td>与 UTF-16（UCS2）编码的字符串互相转换，utf16 函数与 unicode 函数功能一样， 注意没有 to 前缀，因为 QString 运行时的内码就是 UTF-16，字符的双字节采用主机字节序。</td>
</tr>
<tr>
<td>fromUcs4</td>
<td>toUcs4</td>
<td>与 UTF-32（UCS4）编码的字符串互相转换，一个字符用四个字节编码，占空间多，应用较少。</td>
</tr>
<tr>
<td>fromStdString</td>
<td>toStdString</td>
<td>与 std::string 对象互相转换，因为 C++11 规定标准字符串 std::string 使用 UTF-8 编码，这对函数功能与上面 **Utf8 转码函数相同。</td>
</tr>
<tr>
<td>fromStdWString</td>
<td>toStdWString</td>
<td>与 std::wstring 对象相互转换，在 Linux 系统里宽字符是四字节的 UTF-32，在 Windows 系统里宽字符是两字节的 UTF-16。因为不同平台有歧义，不建议使用。</td>
</tr>
<tr>
<td>fromCFString fromNSString</td>
<td>toCFString toNSString</td>
<td>仅存在于苹果 Mac OS X 和 iOS 系统。</td>
</tr>
</tbody></table>
<p>QTextCodec：仅支持在非 Unicode 格式和 Unicode 之间进行转换。不能不同的非 Unicode 之间直接转换（如： Shift_JIS 和 GBK 之间不可直接转换、必须使用 Unicode 中转一次）</p>
<br>

<hr>
<h3 id="C-使用的字符串"><a href="#C-使用的字符串" class="headerlink" title="C++ 使用的字符串"></a>C++ 使用的字符串</h3><p>​	在 C++ 中，以前通常使用 char 表示单字节的字符，使用 wchar_t 表示宽字符，对国际码提供一定程度的支持。 char * 字符串有专门的封装类 std::string 来处理，标准输入输出流是 std::cin 和 std::cout 。对于 wchar_t * 字符串，其封装类是 std::wstring，标准输入输出流是 wcin 和 wcout。</p>
<p>​	虽然规定了宽字符，但是没有明确一个宽字符是占用几个字节，Windows 系统里的宽字符是两个字节，就是 UTF-16；而 Unix&#x2F;Linux 系统里为了更全面的国际码支持，其宽字符是四个字节，即 UTF-32 编码。这为程序的跨平台带来一定的混乱，除了 Windows 程序开发常用 wchar_t* 字符串表示 UTF-16 ，其他情况下 wchar_t* 都用得比较少。</p>
<p>​	MFC 一般用自家的 TCHAR 和 CString 类支持国际化，当没有定义 _UNICODE 宏时，TCHAR &#x3D; char，当定义了 _UNICODE宏 时，TCHAR &#x3D; wchar_t，CString 内部也是类似的。<a href="http://c.biancheng.net/qt/">Qt</a> 则用 QChar 和 QString 类（内部恒定为 UTF-16），一般的图形开发库都用自家的字符串类库。</p>
<p>在新标准 C++11 中，对国际码的支持做了明确的规定：</p>
<ul>
<li>char * 对应 UTF-8 编码字符串（代码表示如 u8”多种文字”），封装类为 std::string；</li>
<li>新增 char16_t * 对应 UTF-16 编码字符串（代码表示如 u”多种文字”），封装类为 std::u16string ；</li>
<li>新增 char32_t * 对应 UTF-32 编码字符串（代码表示如 U”多种文字”），封装类为 std::u32string 。</li>
</ul>
<p>因为 Qt 有封装好的 QString，所以不太需要这些新增的字符串格式。</p>
<br>

<h3 id="char"><a href="#char" class="headerlink" title="char *"></a>char *</h3><ol>
<li>如果是“窄字符&#x2F;字符串”(以char为单位)，那么不同的编译器可能不一样。以 VC++ 为例，它是由系统代码页决定的，比如在中文 windows 系统下就采用 GBK 编码。（算是 <font color=#FF0000><strong>⓶式</strong></font>的乱码的最开始原因）</li>
<li>如果字符&#x2F;字符串前有指定编码方式，那没什么好说的了，就采用指定的编码方式，如下：</li>
</ol>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span><span class="token operator">*</span> s1 <span class="token operator">=</span> u8<span class="token string">"hello"</span><span class="token punctuation">;</span>     <span class="token comment">//窄字符串，utf-8编码 (C++11)</span>
<span class="token keyword">wchar_t</span><span class="token operator">*</span> s2 <span class="token operator">=</span>  L<span class="token string">"hello"</span><span class="token punctuation">;</span>  <span class="token comment">//宽字符串，utf-16编码</span>
<span class="token keyword">char16_t</span><span class="token operator">*</span> s3 <span class="token operator">=</span>  u<span class="token string">"hello"</span><span class="token punctuation">;</span> <span class="token comment">//宽字符串，utf-16编码 (C++11)</span>
<span class="token keyword">char32_t</span><span class="token operator">*</span> s4 <span class="token operator">=</span>  U<span class="token string">"hello"</span><span class="token punctuation">;</span> <span class="token comment">//utf-32编码 (C++11)</span>

<span class="token comment">//'\x12' : \x后面接2个16进制数字，可表示一个窄字符char，多个\x连起来可表示一个utf-8字符，如"\xE4\xBD\xA0"</span>
<span class="token comment">//L'\u1234' : \u后面接4个16进制数字，可表示一个utf-16宽字符</span>
<span class="token comment">//U'\U12345678' : \U后面接8个16进制数字，可表示一个Utf-32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="char-1"><a href="#char-1" class="headerlink" title="char []"></a>char []</h3><p>通常情况下和可以 <code>char []</code> 和 <code>char *</code> 进行混用，一个为形参，另一个为实参。</p>
<p>不同点为，详细可见 <a href="https://blog.csdn.net/u012611878/article/details/78291036">【C&#x2F;C++】对char* 和 char[]区别的一些理解</a>：</p>
<ol>
<li>char*是变量，值可以改变， char[]是常量，值不能改变。</li>
<li>char[]对应的内存区域总是可写，char*指向的区域有时可写，有时只读</li>
<li>char * 和char[]的初始化操作有着根本区别（指向常量区和赋值变量的栈区）</li>
</ol>
<br>

<h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><blockquote>
<p>typedef basic_string<char> string;</p>
<p>String class</p>
<p>Strings are objects that represent sequences of characters.</p>
<p>The standard <code>string</code> class provides support for such objects with an interface similar to that of a <a href="https://www.cplusplus.com/stl">standard container</a> of bytes, but adding features specifically designed to operate with strings of single-byte characters.</p>
<p>The <code>string</code> class is an instantiation of the <a href="https://www.cplusplus.com/basic_string">basic_string</a> class template that uses <code>char</code> (i.e., bytes) as its <em>character type</em>, with its default <a href="https://www.cplusplus.com/char_traits">char_traits</a> and <a href="https://www.cplusplus.com/allocator">allocator</a> types (see <a href="https://www.cplusplus.com/basic_string">basic_string</a> for more info on the template).</p>
<p>Note that this class handles bytes independently of the encoding used: If used to handle sequences of multi-byte or variable-length characters (such as UTF-8), all members of this class (such as <a href="https://www.cplusplus.com/string::length">length</a> or <a href="https://www.cplusplus.com/string::size">size</a>), as well as its iterators, will still operate in terms of bytes (not actual encoded characters).</p>
</blockquote>
<p>字符串类是 basic_string 类模板的实例，它使用 char（即字节）作为其字符类型，并具有默认的char_traits 和分配器类型（关于模板的更多信息请参见 basic_string ）。</p>
<p>请注意，该类处理字节的方式与使用的编码无关。如果用于处理多字节或可变长度的字符序列（如 UTF-8），这个类的所有成员（如 length 或 size ），以及它的迭代器，仍将以字节为单位进行操作（而不是实际编码的字符）。</p>
<p>see: <a href="https://www.cplusplus.com/reference/string/string"> https://www.cplusplus.com/reference/string/string</a></p>
<br>

<h3 id="char-2"><a href="#char-2" class="headerlink" title="char"></a>char</h3><p><strong>char</strong> - 能在目标系统上最有效地处理的字符表示的类型（拥有与 signed char 或 unsigned char 之一相同的表示和对齐，但始终是独立的类型）。<a href="https://zh.cppreference.com/w/cpp/string/multibyte">多字节字符串</a>用此类型表示编码单元。对于每个范围 [0, 255] 中的 unsigned char 类型值，将该值转换成 char 再转换回 unsigned char 产生原值。 (C++11 起) char 的符号性取决于编译器和目标平台： ARM 和 PowerPC 的默认设置常为无符号，而 x86 与 x64 的默认设置常为有符号。</p>
<p><strong>wchar_t</strong> - 宽字符表示的类型（见<a href="https://zh.cppreference.com/w/cpp/string/wide">宽字符串</a>）。要求大到足以表示任何受支持的字符编码位点（支持 Unicode 的系统上为 32 位。值得注意的例外是 Windows，其中 wchar_t 为 16 位并保有 UTF-16 编码单元）。它与上述整数类型之一具有相同的大小、符号性和对齐，但它是独立的类型。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210927150126.png" width="80%"/ loading="lazy">



<p>see: <a href="https://en.cppreference.com/w/cpp/language/types">https://en.cppreference.com/w/cpp/language/types</a></p>
<br>

<hr>
<h2 id="代码验证"><a href="#代码验证" class="headerlink" title="代码验证"></a>代码验证</h2><p>光说不练可不行，故自行验证上面理论的代码片如下；</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token comment">//#pragma execution_character_set("utf-8")</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> cc <span class="token operator">=</span> <span class="token string">"\xce\xd2\xca\xc7\xba\xba\xd7\xd6\xc6\xe6"</span><span class="token punctuation">;</span>  <span class="token comment">// GBK</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> cc1 <span class="token operator">=</span> <span class="token string">"\xe6\x88\x91\xe6\x98\xaf\xe6\xb1\x89\xe5\xad\x97\xe5\xa5\x87"</span><span class="token punctuation">;</span> <span class="token comment">// UTF-8</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> cc2 <span class="token operator">=</span> <span class="token string">"我是汉字奇"</span><span class="token punctuation">;</span>    <span class="token comment">// 是 10 或 15 字节，但一定是 5 个字符</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"cout    ==>  cc:   "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>cc <span class="token operator">&lt;&lt;</span> <span class="token string">"    "</span> <span class="token operator">&lt;&lt;</span> cc <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"cout    ==>  cc1:  "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>cc1 <span class="token operator">&lt;&lt;</span> <span class="token string">"    "</span> <span class="token operator">&lt;&lt;</span> cc1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"cout    ==>  cc2:  "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>cc2 <span class="token operator">&lt;&lt;</span> <span class="token string">"    "</span> <span class="token operator">&lt;&lt;</span> cc2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"qDebug  ==>  cc:  "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>cc <span class="token operator">&lt;&lt;</span> <span class="token string">"  "</span> <span class="token operator">&lt;&lt;</span> cc<span class="token punctuation">;</span>
    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"qDebug  ==>  cc1: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>cc1 <span class="token operator">&lt;&lt;</span> <span class="token string">"  "</span> <span class="token operator">&lt;&lt;</span> cc1<span class="token punctuation">;</span>
    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"qDebug  ==>  cc2: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>cc2 <span class="token operator">&lt;&lt;</span> <span class="token string">"  "</span> <span class="token operator">&lt;&lt;</span> cc2<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​	将上面代码分别在 VS2017 和 QtCreator 中验证；（取消）注释<code>//#pragma execution_character_set(&quot;utf-8&quot;)</code> 来验证；最后测试的验证结果如图 <a href="https://kdocs.cn/l/slqOBPQmfajc">https://kdocs.cn/l/slqOBPQmfajc</a>。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210927162018.png" width="90%"/ loading="lazy">

<br>

<h2 id="优雅在-Win-上使用-UTF-8-Qt-跨平台"><a href="#优雅在-Win-上使用-UTF-8-Qt-跨平台" class="headerlink" title="优雅在 Win 上使用 UTF-8 + Qt 跨平台"></a>优雅在 Win 上使用 UTF-8 + Qt 跨平台</h2><p>​	最初的愿望和其简单，只不过是想使用一套代码，既可以使用 MSVC + Qt + UTF-8 编译运行不乱码；也可以在 Linux + gcc + UTF-8 也不乱码。</p>
<p>​	综上的解决方案为同运行一下即可：</p>
<ol>
<li><p>在 CMakeLists.txt 中添加如下代码</p>
<pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># 此处配合 VMSVC 的 UTF8-BOM 插件，达到跨平台</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_CXX_COMPILER_ID</span><span class="token punctuation">&#125;</span></span>"</span> <span class="token operator">STREQUAL</span> <span class="token string">"Clang"</span><span class="token punctuation">)</span>
  <span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">"---using Clang---"</span><span class="token punctuation">)</span>
<span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_CXX_COMPILER_ID</span><span class="token punctuation">&#125;</span></span>"</span> <span class="token operator">STREQUAL</span> <span class="token string">"GNU"</span><span class="token punctuation">)</span>
  <span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">"---using GCC---"</span><span class="token punctuation">)</span>
<span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_CXX_COMPILER_ID</span><span class="token punctuation">&#125;</span></span>"</span> <span class="token operator">STREQUAL</span> <span class="token string">"Intel"</span><span class="token punctuation">)</span>
  <span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">"---using Intel C++---"</span><span class="token punctuation">)</span>
<span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_CXX_COMPILER_ID</span><span class="token punctuation">&#125;</span></span>"</span> <span class="token operator">STREQUAL</span> <span class="token string">"MSVC"</span><span class="token punctuation">)</span>
	<span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">"---sing Visual Studio C++---"</span><span class="token punctuation">)</span>
	<span class="token keyword">add_compile_options</span><span class="token punctuation">(</span><span class="token string">"$&lt;$&lt;C_COMPILER_ID:MSVC>:/utf-8>"</span><span class="token punctuation">)</span>
	<span class="token keyword">add_compile_options</span><span class="token punctuation">(</span><span class="token string">"$&lt;$&lt;CXX_COMPILER_ID:MSVC>:/utf-8>"</span><span class="token punctuation">)</span>
<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>Visual Studio 中开发时候，所有 .h .cpp 文件都使用 <code>UTF-8-BOM</code> 格式，可以安装 <code>ForceUTF8（withBOM）</code> 扩展</p>
</li>
</ol>
<p>​	感觉这样子使用 utf-8 跨平台清爽了很多。 对于网上的添加 <code>//#pragma execution_character_set(&quot;utf-8&quot;)</code> 方式，则需要在每一个 .h&#x2F;.cpp 中都加上这几行，相比之下只用在 cmake 中添加两行，则是优雅了很多。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#if _MSC_VER >= 1600 </span>
	<span class="token comment">#pragma execution_character_set("utf-8") </span>
<span class="token comment">#endif</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​	关于使用 Visual Studio、Qt Crator 中容易出现的字符乱码问题；一般可重如下三个方面入手：⑴文件编码、⑵代码编码、⑶输出结果显示的编码。我们只要以此来检查这三部分，就可以找到乱码的原因，结合上面的每一个知识点的理解，即可更正。<strong>毕竟乱码的问题是由编码和解码方式不对引起的</strong>。</p>
<p>​	希望本篇能够协助读者彻底理解乱码原因后，最后均能可自行解决自己平台所对应的实际乱码问题，最终授人以渔。最后，若没啥疑问和问题的话？那我就要去准备喝汤了~~</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/DD42DD73D9D89EB12D560D3A1C2D1102.png" width="25%"/ loading="lazy">

<br>

<p>回顾本文一些重点 key：</p>
<ul>
<li>形如 <code>&quot;中文123&quot;</code> 这种格式的 <strong>ANSI 字符串</strong>，其在不同编码下所占字节和字符个数？</li>
<li>不同系统（默认的编码）对 <code>&quot;中文123&quot;</code> 字符串是如何处理的？</li>
<li>MSVC 的一些大坑、以及强制转换 GBK&#x2F;UTF-8</li>
<li>终端的编码是否会影响输出效果？</li>
</ul>
<br>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://shouce.jb51.net/notepad_book/reference.html#ref.old_rec_npp">shouce.jb51.net</a>  或 <a href="https://www.crifan.com/files/doc/docbook/rec_soft_npp/release/html/rec_soft_npp.html">crifan.com</a> </li>
<li><a href="https://www.cnblogs.com/lsgxeva/p/12161743.html">Qt开发中文显示乱码</a></li>
<li><a href="https://link.jianshu.com/?t=http://blog.csdn.net/brave_heart_lxl/article/details/7186631">qt中文乱码问题</a></li>
<li><a href="https://link.jianshu.com/?t=http://blog.csdn.net/dbzhang800/article/details/7540905">QString乱谈(2)</a></li>
<li><a href="https://www.pianshen.com/article/4432655164/">QT、VS（二）——VS控制台程序显示中文为乱码的问题解决办法</a></li>
<li><a href="https://blog.csdn.net/libaineu2004/article/details/19245205">彻底解决Qt中文乱码以及汉字编码的问题(UTF-8&#x2F;GBK)</a></li>
<li><a href="https://blog.csdn.net/a10929/article/details/78235793">源文件字符集，编译器内部字符集，执行字符集，控制台乱码问题，Qt中文问题</a></li>
</ul>
]]></content>
      <categories>
        <category>学习 - Windows</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>Visual Studio</tag>
        <tag>乱码</tag>
      </tags>
  </entry>
  <entry>
    <title>收到来信，甚是开心良久💌</title>
    <url>/posts/b9c83f62/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码生日 "MMdd"" data-whm="若是无聊，扫一下底部二维码，是可以请我喝一杯冰可乐哒？">
  <script id="hbeData" type="hbeData" data-hmacdigest="7eae75781a2dbd647fb85319580cfdfe63d78d55d56661958bb74e2be4bcc7b0"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">书信一封，待卿亲启~ （点击可阅）</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活 - 闲暇的趣闻</category>
      </categories>
      <tags>
        <tag>信笺</tag>
      </tags>
  </entry>
  <entry>
    <title>Sunny Screenshot 具有截图 &amp; 钉图的跨平台软件，亦支持“OCR”和“图片翻译”功能</title>
    <url>/posts/b3f369b5/</url>
    <content><![CDATA[<p><strong>简  述:</strong>  仅纯粹 C++ 开发了一款 Sunny 截图软件，原生应用；支持 <strong>“截图 &amp; 钉图”、”图片翻译”、”OCR提取文字”</strong> 等功能，多套皮肤和 Win10 的亚克力效果（类透明磨砂），简洁整体设计的窗口， </p>
<p>支持跨平台：已验证可运行在的系统  ヾ(≧▽≦*)o；</p>
<p><strong>官网：</strong> <a href="https://sunny.xmuli.tech/">https://sunny.xmuli.tech</a></p>
<p>支持跨平台：已验证可运行在的系统 ヾ(≧▽≦*)o，详见官网文档</p>
<p>① Windows 7 &#x2F; 8 &#x2F; 10 &#x2F; 11</p>
<p>② MacOS： 10 &#x2F; 11 &#x2F; 12 &#x2F; 13 &#x2F; 14</p>
<p>③ Linux：Debian 12，Ubuntu 20.04 &#x2F; 22.04 &#x2F; 24.04，Deepin&#x2F;UOS V20-23, openkylin 1.0.x，等</p>
<p>现已上架 Microsoft Store 和 Linux  多个应用商城，撒花🎊🎊🎊🎉🎉🎉；</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402231450384.gif" width="100%"/ loading="lazy">



<p>开发完之后一直也没有宣传过，寂静的在的一隅仓库呆着着； 直到连续几天发现涌入大量流量，Star 也随之猛长；蛤？着什么情况，我啥也没干了。问了下新人，才知 Sunny 已被很多大佬和知名软件网站给翻牌子了，属实意外惊喜╰(<em>°▽°</em>)╯。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>Sunny 截图是使用纯 C++ 开发的一款简洁且漂亮的 “截图&amp;拼图” 的软件工具，亦支持图片翻译和OCR 等功能；支持 Windows，MacOS，Linux 平台。</p>
<p>本项目从 2023 年起，至少会持续开发和维护十年，再更久的事情，那就彼时再说~；可以放心使用，因为我自身也在使用；</p>
<h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p>**官网: ** <a href="https://sunny.xmuli.tech/">https://sunny.xmuli.tech</a>   |   <strong>作者：</strong> <a href="https://github.com/XMuli">偕臧</a></p>
<p><a href="https://github.com/XMuli/SunnyPages">GitHub</a>   |   <a href="https://gitee.com/XMuli/SunnyPages">Gitee</a>   |   <a href="https://github.com/XMuli/SunnyPages/releases">Releases</a>   |   <a href="https://github.com/XMuli/SunnyPages/issues">Issues</a>   |   App Store : Microsoft Store &#x2F; Deepin Store &#x2F; UOS Store &#x2F; Spark Store &#x2F; </p>
<p>反馈 Bug, 提出建议或者想法，任何帮助改进，亦可加入交流群：<img src="https://img.shields.io/badge/QQ_Groups-418103279-brightgreen" alt="alt text" loading="lazy"></p>
<h2 id="功能特色"><a href="#功能特色" class="headerlink" title="功能特色"></a>功能特色</h2><ul>
<li><strong>特色功能</strong><ul>
<li>截图 &amp; 钉图</li>
<li>图片翻译（中&#x2F;英&#x2F;日&#x2F;韩&#x2F;俄&#x2F;等）</li>
<li>OCR 提取文字</li>
<li>窗口属性</li>
<li>自动检测</li>
<li>代码签名</li>
</ul>
</li>
<li><strong>样式功能</strong><ul>
<li>亚克力的透明磨砂</li>
<li>自定义的活动色</li>
<li>自定义”边框 &amp; 十字线”的宽度</li>
<li>绘画工具栏支持：垂直 &amp; 水平</li>
<li>钉图窗口的阴影效果</li>
<li>钉图透明度</li>
<li>多种系统风格</li>
</ul>
</li>
<li><strong>其它功能</strong><ul>
<li>自定义尺寸和位置截图、延时截图、窗口检测截图</li>
<li>翻译和提取文字的 API，支持用私人 key</li>
<li>手动保存 &amp; 快捷保存 &amp; 自动保存</li>
<li>自动拷贝到剪切板</li>
<li>调整字体及大小</li>
<li>快捷键自定义</li>
<li>国际化翻译</li>
<li>开源库鸣谢</li>
</ul>
</li>
<li><strong>跨平台移植</strong><ul>
<li>Windows 7 &#x2F; 8 &#x2F; 10 &#x2F; 11+</li>
<li>Ubuntu 20.04 &#x2F; 22.04+</li>
<li>Deepin &#x2F; UOS V20.9 - 23+</li>
<li>openkylin V1.0.1+</li>
</ul>
</li>
<li><strong>App Store 已上架</strong><ul>
<li>Microsoft Store                     微软商店</li>
<li>Deepin &#x2F; UOS Store              深度社区 &#x2F; 统信商店</li>
<li>Spark Store                            星火商店</li>
<li>openkylin Store (Ongoing)   麒麟商店</li>
</ul>
</li>
</ul>
<br>

<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/135487951">分享如何拥有一份私人的『开源代码签名证书』</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/136334975">Sunny截图上架Microsoft Store及Linux商店流程的指北</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/136373241">嘿嘿！开发了一款 Sunny 截图 &amp; 钉图，亦支持“屏幕识图”和“OCR”的软件</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/130053230">基于 QT 开发 FLIPPED ：简易且漂亮的跨平台截图贴图软件</a></li>
<li>更多教程 → <a href="https://github.com/XMuli/QtExamples">QtExamples</a></li>
</ul>
<br>

<h2 id="演示效果"><a href="#演示效果" class="headerlink" title="演示效果"></a>演示效果</h2><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><p><a href="https://www.bilibili.com/video/BV1c4421c7Hy"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192034134.png" width="100"/ loading="lazy"></a>  👉 <a href="https://www.bilibili.com/video/BV1c4421c7Hy">Sunny 截图是一款简洁且漂亮的截图的软件工具，亦支持【图片翻译】和【OCR】</a></p>
<video width="100%" height="100%" controls autoplay loop>
  <source src="snapshot/Sunny-introduce.mp4" type="video/mp4">
  Sunny-introduce.mp4  XMuli Sunny Screenshot 截图 软件 跨平台 简洁 漂亮
</video>

<br>

<h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><h4 id="Windows-10-x2F-11"><a href="#Windows-10-x2F-11" class="headerlink" title="Windows 10&#x2F;11+"></a>Windows 10&#x2F;11+</h4><p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312272301064.png" width="48%"/ loading="lazy">  <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312272303776.png" width="48%"/ loading="lazy"></p>
<h4 id="MacOS-10-15-13"><a href="#MacOS-10-15-13" class="headerlink" title="MacOS 10.15~13+"></a>MacOS 10.15~13+</h4><p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202403010038655.jpg" width="48%"/ loading="lazy">  <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202403010037565.jpg" width="48%"/ loading="lazy"></p>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><ul>
<li><p><strong>Ubuntu 22.04</strong></p>
<p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312272304154.png" width="45%"/ loading="lazy">  <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312272305584.png" width="45%"/ loading="lazy"></p>
</li>
<li><p>Deepin V20.9 &#x2F; UOS</p>
<p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312272305050.jpg" width="45%"/ loading="lazy"> <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312272305129.jpg" width="45%"/ loading="lazy"></p>
</li>
<li><p><strong>openkylin V1.0.1</strong></p>
<p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192238634.png" width="45%"/ loading="lazy">  <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192238459.png" width="45%"/ loading="lazy"></p>
</li>
</ul>
<br>

<h2 id="代码签名证书"><a href="#代码签名证书" class="headerlink" title="代码签名证书"></a>代码签名证书</h2><blockquote>
<p>极力推荐从 GirHub <a href="https://github.com/XMuli/SunnyPages/releases">Release</a> 下载，更新最快最稳定。下载文件后，文件右键属性校验其唯一性，确保文件没被篡改；</p>
</blockquote>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402010109545.png" width="800"/ loading="lazy">



<h2 id="键盘快捷键"><a href="#键盘快捷键" class="headerlink" title="键盘快捷键"></a>键盘快捷键</h2><table>
<thead>
<tr>
<th>Keys</th>
<th>Description</th>
<th>Mode</th>
</tr>
</thead>
<tbody><tr>
<td><kbd>F6</kbd></td>
<td>窗口激活截图图</td>
<td>全局</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd> + <kbd>F6</kbd></td>
<td>仅延时截图</td>
<td>全局</td>
</tr>
<tr>
<td><kbd>Shift</kbd> + <kbd>F6</kbd></td>
<td>自定义截图（起点位置 + 截图区域 + 延迟时间）</td>
<td>全局</td>
</tr>
<tr>
<td>🐱‍🐉</td>
<td></td>
<td></td>
</tr>
<tr>
<td><kbd>Esc</kbd></td>
<td>退出截图</td>
<td>本地</td>
</tr>
<tr>
<td><kbd>Tab</kbd></td>
<td>切换挡位，检测的子窗口矩形的深度</td>
<td>本地</td>
</tr>
<tr>
<td><kbd>`</kbd> &#x2F; <kbd>~</kbd></td>
<td>显示捕捉窗口的属性信息 （Path&#x2F;Size&#x2F;PID&#x2F;HWnd …）</td>
<td>本地</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>S</kbd></td>
<td>快捷键快速保存到到指定的路径</td>
<td>本地</td>
</tr>
<tr>
<td><kbd>←</kbd>, <kbd>↓</kbd>, <kbd>↑</kbd>, <kbd>→</kbd> ( <kbd>A</kbd>, <kbd>S</kbd>, <kbd>W</kbd>, <kbd>D</kbd> )</td>
<td>移动选中区域 1px</td>
<td>本地</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd> + <kbd>←</kbd>, <kbd>↓</kbd>, <kbd>↑</kbd>, <kbd>→</kbd></td>
<td>外扩选中区域 10 px</td>
<td>本地</td>
</tr>
<tr>
<td><kbd>Shift</kbd> + <kbd>←</kbd>, <kbd>↓</kbd>, <kbd>↑</kbd>, <kbd>→</kbd></td>
<td>内缩选中区域 10 px</td>
<td>本地</td>
</tr>
</tbody></table>
<h2 id="应用商店下载"><a href="#应用商店下载" class="headerlink" title="应用商店下载"></a>应用商店下载</h2><h3 id="Microsoft-Store"><a href="#Microsoft-Store" class="headerlink" title="Microsoft Store"></a>Microsoft Store</h3><p>在 Window 10&#x2F;11+ 系统，也在微软商店直接下载</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402231450384.gif" width="80%"/ loading="lazy">

<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202403010108405.gif" width="80%"/ loading="lazy">

<br>

<h3 id="Deepin-x2F-UOS-Store"><a href="#Deepin-x2F-UOS-Store" class="headerlink" title="Deepin &#x2F; UOS Store"></a>Deepin &#x2F; UOS Store</h3><p>深度社区、 统信操作系统商店中，已可直接下载</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402190016686.png" width="80%"/ loading="lazy">

<h3 id="Spark-Store"><a href="#Spark-Store" class="headerlink" title="Spark Store"></a>Spark Store</h3><p>以及三方的星火商店，也可直接下载</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202403010053091.png" width="80%"/ loading="lazy">

<br>

<h2 id="截图作品系列"><a href="#截图作品系列" class="headerlink" title="截图作品系列"></a>截图作品系列</h2><p>很久之前就想些一个软件截图的软件，目前一共写如下三个层级的难度作品，提供大家参考</p>
<ul>
<li><strong>Ⅰ. 新手之作 ShotX</strong><ul>
<li>项目地址：<a href="https://github.com/XMuli/ShotX">ShotX</a>   |   <a href="https://gitee.com/XMuli/ShotX">镜像</a></li>
<li>功       能：①基本的截图功能，复制和保存，②右键托盘及菜单，③支持 Window，MacOS，Linux，④攥写 Github-Action 的 CI&#x2F;CD 自动脚本 .yml；实现自动打包和发布，⑤更多见 README 和 源码</li>
<li>描        述：新手级的截图，适合初学 Qt&#x2F;C++ 入门者</li>
</ul>
</li>
<li><strong>Ⅱ. 高级之作 FLIPPED</strong><ul>
<li>官       网：<a href="https://flipped.xmuli.tech/">flipped.xmuli.tech</a></li>
<li>项目地址：<a href="https://github.com/XMuli/FlippedPages">FLIPPED</a>  |  <a href="https://gitee.com/XMuli/FlippedPages">镜像</a></li>
<li>功       能：①贴图和钉图，②多屏截图，延时截图，自定义截图，③智能检测窗口矩形（Windows &amp; Linux），④矩形、椭圆、箭头、画笔、马赛克、文本、序号，⑤撤销、重做（多级）、保存、取消、拷贝到剪切板，⑥截图框样式三套，且主题色提供自定义；屏幕十字线样式自定义，⑦国际化：英文、简体中文、繁体中文；字体和字号自定义，⑧支持设置窗口，托盘，截图区域之间的流畅切换，⑨更多见 README 和 源码</li>
<li>描        述：高级难度，适合已学习 Qt&#x2F;C++ 数年经验进阶，需同类型软件的代码借鉴，但可探索中独立写一个大的软件。出发于隐私安全，无任何联网功能。</li>
</ul>
</li>
<li><strong>Ⅲ. 商业级别的成熟之作 Sunny (推荐)</strong><ul>
<li>官       网：<a href="https://sunny.xmuli.tech/">sunny.xmuli.tech</a></li>
<li>项目地址：<a href="https://github.com/XMuli/sunnypages">Sunny</a>  |  <a href="https://gitee.com/XMuli/SunnyPages">镜像</a></li>
<li>功       能：是 FLIPPED 作品的超集合，常见截图功能都都包含。还包含额外的功能：① “图片翻译” (中&#x2F;英&#x2F;日&#x2F;韩&#x2F;俄等)，和”OCR 提取文字”，也支持用户私人token 的额度使用 ，② .iss 脚本和 CMake 来提供便携版，安装版，③ 绘画工具栏的亚克力效果，且支持跨平台（毛玻璃效果），④编辑文本支持富文本，同一个注释可采用多个字体和颜色等（暂未遇到其它同类软件也能做到），⑤全新的 UI&#x2F;UE 设计交互，“设置窗口” 无任何缝隙拼接感，颜值达到简约美观，⑥优化截屏完成后的内存释放；⑦国际化翻译更方便，⑧CMake 重写拆分为 EXE + DLL 隔离，⑨进行代码签名，方便下载校验和防篡改，⑩成功上架 Window 的微软商店，Linux 的 深度&#x2F;统信商店，以及三方的星火商店等；麒麟商店也在上架待审核</li>
<li>描        述：基于前两个的项目经验和不足，直接重写了一套新的框架和UI界面；目前个人从代码功能和产品体验来说，已经达到 工程代码整洁、规范、稳定和健壮性，优秀的解耦机制，漂亮简约得 UI &#x2F; UX 设计，可以随时应对变化的实际需求，很久之内都无需重构了。定位为 漂亮和简洁，功能实用为主。</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">项目</th>
<th align="center">描述</th>
<th align="center">开发经验</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ShotX</td>
<td align="center">功能极简的截图工具</td>
<td align="center">简易，新手级的截图，适合初学 Qt&#x2F;C++ 入门</td>
</tr>
<tr>
<td align="center">FLIPPED</td>
<td align="center">简洁且漂亮，功能完整的截图软件；隐私安全，无任何联网功能</td>
<td align="center">高级难度，属 Qt&#x2F;C++ 数年经验的进阶作品，在借鉴同类作品的代码时，可于探索中独立完成的一个大的软件</td>
</tr>
<tr>
<td align="center">Sunny</td>
<td align="center">一款简洁且漂亮的截图的软件工具。亦支持图片翻译和OCR；已上架微软商店，深度&#x2F;统信商店，及三方的星火商店等</td>
<td align="center">专业级作品，适合已多年沉浸研究 Qt&#x2F;C++ 经验，随心所欲写任意所需功能，<strong>属于商业级的成熟作品，是本截图系列的最高水准之作</strong></td>
</tr>
</tbody></table>
<blockquote>
<p><strong>注：</strong> ShotX，FLIPPED，Sunny 这三款均支持跨平台 Windows &#x2F; MacOS &#x2F; Linux。</p>
<p><strong>笔记：</strong> Sunny  &#x3D;  FLIPPED的功能重构 + 代码重构 + UI重构 + 网络功能（图片翻译+OCR）+ 上架应用商店 + 后续新功能；而 ShotX 是最早的练手探索</p>
</blockquote>
<h2 id="如何开发一款截图软件呢？"><a href="#如何开发一款截图软件呢？" class="headerlink" title="如何开发一款截图软件呢？"></a>如何开发一款截图软件呢？</h2><p>在写和发布的后的期间，也遇到很多私聊请教 、 邮件沟通某个功能实现？反馈 Bug 和给出使用心得和建议；都给答疑了，但想来可写为一整篇，中间遇到的困难点都写出来，公开出来提供后来者参考。</p>
<p><strong>编译环境</strong></p>
<p>　　💻 <code>MacOS 13 </code> 📎 <code>Qt 5.15.2</code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p>
<p>　　💻 <code>Ubuntu 22.04</code> 📎<code>Deepin 20.9-23+</code> 📎 <code>Qt 5.15.2</code> 📎 <code>gcc/g++ 9.0</code>  📎 <code>gdb8.0</code></p>
<p>　　💻  <code>win10 22H2</code> 📎 <code>Qt 5.15.2</code> 📎  <code>Visual Studio 2022</code> 📎 <code>C++17</code></p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402281723559.png" width="70%"/ loading="lazy">



<h3 id="【整体思路】"><a href="#【整体思路】" class="headerlink" title="【整体思路】"></a>【整体思路】</h3><ul>
<li><strong>基础窗口：</strong> 创建一个 QWidget 窗口，去掉标题栏后，全屏且置顶，捕获此刻多屏幕状态保存为 QPixamp，然后绘画在 QWidget 最底层，再绘画一层透明黑色作为遮罩</li>
<li><strong>绘画工具栏：</strong> 作为是一个单独的子窗口，包含两个一级和二级的绘画工具栏，控制二级的显隐</li>
<li><strong>鼠标光标：</strong> 将 QWidget 放于虚拟桌面的左上角；相对坐标和绝对坐标的转换</li>
<li><strong>功能思路：</strong> 时刻判断当前所处模式：Wait &#x2F; Select &#x2F; Move &#x2F; Draw &#x2F; Stretch 标记；根据模式标记，对鼠标的 Press &#x2F; Move &#x2F; Release 事件进行对应的操作；重点是鼠标放下和松开时的 QPoint<ul>
<li>捕获模式：智能窗口 &#x2F; 全屏截图 &#x2F; 延时截图 &#x2F; 自定义截图 等</li>
<li>绘画模式则细分：一级绘画栏和二级绘画栏（愈加精确的参数）</li>
<li>拉伸可为：拉伸已绘图形 &#x2F; 选中框 &#x2F; … ，操作是可见区域的任意一个图案</li>
<li>移动同上</li>
</ul>
</li>
<li><strong>钉图功能：</strong> 独立的窗口，将图片绘画在最底层，且需要重绘缩小一圈，为毛玻璃的彩虹灯预留位置</li>
<li><strong>杂项但重要：</strong> 国际化，不重启切换语言字体，编译，打包，CI &#x2F;CD，热键，窗口尺寸遍历，显示窗口详细信息及大小，代码签名证书，上架应用商店；太多了，单独成篇写在下面</li>
</ul>
<h3 id="【如何购买代码签名】"><a href="#【如何购买代码签名】" class="headerlink" title="【如何购买代码签名】"></a>【如何购买代码签名】</h3><ul>
<li><p>『问题』写的 EXE 如何进行代码签名？如何购买代码签名，怎么买最便宜？EV &#x2F; Standard &#x2F; Open Source Signing Certificates 的区别是什么？</p>
<p>详细解答这些问题 《<a href="https://xmuli.blog.csdn.net/article/details/135487951">分享如何拥有一份私人的『开源代码签名证书』</a>》，并且指导最后如何签名。</p>
<br></li>
</ul>
<h3 id="【如何上架应用商城】"><a href="#【如何上架应用商城】" class="headerlink" title="【如何上架应用商城】"></a>【如何上架应用商城】</h3><ul>
<li><p>『问题』如何上架到微软的 Microsoft Store？如何上架 Linux 的深度&#x2F;统信&#x2F;麒麟商城，以及如三方的星火商店呢？</p>
<p>篇幅太长，单写了一篇，包含详细上架 Windows Store， Deepin&#x2F;UOS Store, 三方 星火商店等。</p>
<p>👉 《<a href="https://blog.csdn.net/qq_33154343/article/details/136334975">Sunny截图上架Microsoft Store及Linux商店流程的指北</a>》</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192349047.jpg" width="300"/ loading="lazy">

<p><strong>Note：</strong></p>
<p>个人作品上架微软商店的流程很折磨，最后上架成功后也是拨开云雾；</p>
<p>若是文章对你有价值，亦可帮我积累Sunny的微软信誉，或者在深度商店的好评，甚至感谢🙇‍ ； </p>
<p><font color=#D0087E size=5 face="STFangsong">Windows 用户推荐的下载 </font> 👉   <a href="https://github.com/XMuli/SunnyPages/releases/download/v1.3/Sunny_setup_msvc_1.3.0_x64.exe">Sunny_setup_msvc_1.3.0_x64.exe</a>  </p>
<br></li>
</ul>
<h3 id="【打包发布-Windows-x2F-MacOS-x2F-Linux-上】"><a href="#【打包发布-Windows-x2F-MacOS-x2F-Linux-上】" class="headerlink" title="【打包发布 Windows &#x2F; MacOS &#x2F; Linux 上】"></a>【打包发布 Windows &#x2F; MacOS &#x2F; Linux 上】</h3><p>介绍多种平台和格式：①Windows：绿色便携版和安装包 <code>.exe</code> ②MacOS：<code>.app</code> 和 <code>.img</code> ③Linux: 绿色版、 <code>.deb</code> 和 <code>.AppImage</code> </p>
<ul>
<li><p>『问题』Windows 如何构建打包为 .exe 文件？如何生成构绿色版和安装版？</p>
<p>《<a href="https://blog.csdn.net/qq_33154343/article/details/96448388">QT 项目在 Windows 平台上面发布成可执行程序</a>》</p>
</li>
<li><p>『问题』MacOS 如何构建打包为 .dmg 文件？</p>
<p>《<a href="https://xmuli.blog.csdn.net/article/details/96448938#comments">QT 项目在 MacOS 平台上面发布成可执行程序</a>》</p>
</li>
<li><p>『问题』Linux 如何构建打包为 .deb 文件、如何打包为通用的 .AppImage 格式？</p>
<ul>
<li><p>Linux下又多种打包 <code>.deb</code> 打包方法：</p>
<ul>
<li><p>〖方法一〗通过 ldd.sh + Sunny.sh 两个脚本打包依赖，参考《<a href="https://blog.csdn.net/qq_33154343/article/details/96448621">QT 项目在 Linux 平台上面发布成可执行程序</a>》</p>
</li>
<li><p>〖方法二〗通过 <code>dh_make</code> + <code>dpkg-buildpackage</code> 命令《<a href="https://blog.csdn.net/qq_33154343/article/details/123778207">Linux 中用 dh_make 将 Qt + CMake 项目打包为 deb 文件</a>》</p>
</li>
<li><p>〖方法三，最推荐〗通过 CMake 的 <code>cpack</code> 命令，那样就不需要填写 debian 文件夹下的 control 等文件，直接拷贝相关资源文件过去。 CMakeLists.txt 底部加上 CPack 的相关代码，核心如下：</p>
<pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># CPACK: General Settings</span>
<span class="token keyword">set</span> <span class="token punctuation">(</span>CPACK_GENERATOR <span class="token string">"TBZ2"</span><span class="token punctuation">)</span>
<span class="token keyword">set</span> <span class="token punctuation">(</span>CPACK_PACKAGE_NAME <span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">project_name</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span>
<span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token variable">CPACK_PACKAGE_VERSION</span> <span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">project_version</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span>
<span class="token keyword">set</span> <span class="token punctuation">(</span>CPACK_PACKAGE_VENDOR <span class="token string">"https://github.com/XMuli"</span><span class="token punctuation">)</span>
<span class="token keyword">set</span> <span class="token punctuation">(</span>CPACK_PACKAGE_DESCRIPTION_SUMMARY <span class="token string">"Simple and beautiful screenshot software tool for Windows, MacOS and Linux"</span><span class="token punctuation">)</span>
<span class="token keyword">set</span> <span class="token punctuation">(</span>CPACK_PACKAGE_FILE_NAME <span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">CPACK_PACKAGE_NAME</span><span class="token punctuation">&#125;</span></span>-<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">CPACK_PACKAGE_VERSION</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span>
<span class="token keyword">set</span> <span class="token punctuation">(</span>CPACK_PACKAGE_CONTACT <span class="token string">"https://sunny.xmuli.tech"</span><span class="token punctuation">)</span>
<span class="token comment"># 设置Debian软件包的依赖关系</span>
<span class="token keyword">set</span> <span class="token punctuation">(</span>CPACK_DEBIAN_PACKAGE_DEPENDS <span class="token string">"libqt5x11extras5, libqt5svg5"</span><span class="token punctuation">)</span>
<span class="token keyword">set</span> <span class="token punctuation">(</span>CPACK_SYSTEM_NAME <span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_SYSTEM_NAME</span><span class="token punctuation">&#125;</span></span>-<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_SYSTEM_PROCESSOR</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span>
<span class="token keyword">set</span> <span class="token punctuation">(</span>CPACK_DEBIAN_PACKAGE_SHILIBDEPS <span class="token boolean">ON</span><span class="token punctuation">)</span>

<span class="token keyword">include</span><span class="token punctuation">(</span>CPack<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p>Linux下有多种打包  <code>.AppImage</code>  打包方法</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#【方式四】使用 linuxdeployqt 方式打包，在 Ubuntu 22.04 打包，不可以使用 -----------------------------</span>
<span class="token comment">####linuxdeployqt-continuous-x86_64.AppImage 方案可在 Ubuntu 22.04 上面不可行####</span>
$ <span class="token punctuation">..</span>/linuxdeployqt-continuous-x86_64.AppImage Sunny <span class="token parameter variable">-appimage</span>
$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span>  libfuse2

但是由于过于作者的固执坚守旧的版本，所以无法使用，理由和可能的解决如下：
https://github.com/probonopd/linuxdeployqt/issues/340<span class="token comment">#issuecomment-932712016</span>
即：使用linuxdeploy和linuxdeploy-plugin-qt

<span class="token comment">#####linuxdeploy-x86_64.AppImage + linuxdeploy-plugin-qt-x86_64.AppImage 下面方案可行#####</span>
https://github.com/BearKidsTeam/thplayer/blob/master/.github/workflows/linux.yml<span class="token comment">#L54</span>

$ <span class="token function">sudo</span> <span class="token function">apt</span> update
$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qtbase5-dev qtmultimedia5-dev libqt5multimedia5-plugins
$ <span class="token function">sudo</span> add-apt-repository universe
$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libfuse2

$ <span class="token function">wget</span> https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
$ <span class="token function">wget</span> https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
$ <span class="token function">chmod</span> +x linuxdeploy*.AppImage

$ <span class="token function">mkdir</span> build <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> build
$ cmake <span class="token punctuation">..</span>
$ cmake <span class="token parameter variable">--build</span> <span class="token builtin class-name">.</span> -j<span class="token variable"><span class="token variable">$(</span>nproc<span class="token variable">)</span></span>
$ <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>

$ <span class="token punctuation">..</span>/linuxdeploy-x86_64.AppImage <span class="token parameter variable">--appdir</span> AppDir <span class="token parameter variable">-e</span> bin/Sunny <span class="token parameter variable">-d</span> bin/resources/cpack/tech.xmuli.sunny.desktop <span class="token parameter variable">-i</span> bin/resources/logo/logo.svg --icon-filename tech.xmuli.sunny <span class="token parameter variable">-p</span> qt <span class="token parameter variable">-o</span> appimage

$  ./linuxdeploy-x86_64.AppImage <span class="token parameter variable">--appdir</span> AppDir <span class="token parameter variable">-e</span> build/thplayer <span class="token parameter variable">-d</span> assets/thplayer.desktop <span class="token parameter variable">-i</span> assets/thplayer.svg --icon-filename thplayer <span class="token parameter variable">-p</span> qt <span class="token parameter variable">-o</span> appimage
$ <span class="token function">mv</span> TouHou_Player*.AppImage thplayer-linux.AppImage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p>『问题』如何书写 .yml 的脚本，通过 GitHub 的Action 资源，自动打包构建生成 Release 呢？</p>
<p>通过写三个系统的 .yml 脚本，路径必须是 <code>.github/workflows</code> ，随着时间的流逝⌛，想要持续构建对应的云系统和 Kit 也必须更新，文档和版本参见 <a href="https://github.com/actions/runner-images/tree/main/images">images</a> ，直接往 .yml  修改；这是一个实际可跑的脚本 <a href="https://github.com/XMuli/ChineseChess/tree/master/.github/workflows">*.yml</a>  都是可以编译成功的，失败可能是额度时间不够了，如某次成功的示例，可看到头像是 GitHub 的头像发布的 <a href="https://github.com/XMuli/ChineseChess/releases/tag/v6.1">Release-v6.1</a> ；</p>
<br></li>
</ul>
<h3 id="【UI-x2F-UX-设计的效果】"><a href="#【UI-x2F-UX-设计的效果】" class="headerlink" title="【UI &#x2F; UX 设计的效果】"></a>【UI &#x2F; UX 设计的效果】</h3><ul>
<li><p>『问题』截图的一级二级的菜单工具栏，如何实现 Windows7 的透明磨砂 &#x2F;  Windows 的亚克力的效果，且能够支持 Windows &#x2F; Linux &#x2F; MacOS？</p>
<p>单纯实现亚克力效果不难，难在Linux和 MacOS 上也能实现这个效果？这是当时的一些探索和经验，总结了四种方法放置于 <a href="https://github.com/XMuli/AcrylicWindow">GitHub - AcrylicWindow</a></p>
</li>
<li><p>『问题』如何实现一个完美的无边框窗口跨平台，且还要占用低，没有瑕疵BUG，还能白嫖？</p>
<p>也折腾过，难度也很大，后来发现对于截图，费力可以实现，但是没必要，成本太大；结论：这样现成的没有，目前效果和跨平台都最佳的方案是<a href="https://github.com/wangwenx190/framelesshelper">framelesshelper</a>， 有时放弃也是一种解决方案。</p>
</li>
<li><p>『问题』如何实现国际化多语言的切换？尤其是未使用 Qt Designer 来创建 .ui 文件，遇到无 <code>ui-&gt;retranslateUi(this)</code> 函数？不重启软件便可以切换语言</p>
<p>对于有有 .ui 的部分，可以通过 《<a href="https://xmuli.blog.csdn.net/article/details/114439385">Qt 项目(CMake)设置国际化支持</a>》来解决。对于存手写的控件实现的，且大致实现的思路是：</p>
<p>下拉框中切换语言时，发射信号 → 全局单例 → 信号和槽函 → 到主窗口的槽函数，在里面进行重新加载语言，所有相关的控件的默认文本，都写在这个函数里面，便可以不重启软件，直接实现语言切换成功</p>
</li>
</ul>
<br>

<h3 id="【用户体验细节】"><a href="#【用户体验细节】" class="headerlink" title="【用户体验细节】"></a>【用户体验细节】</h3><ul>
<li><p>『问题』是否需要管理员权限才能运行？</p>
<p>全程不会弹 UAC 弹窗，不需要管理员权限就可以使用所有功能，也不会中途提权，仅普通用户权限即可，包括导向安装，静默安装，使用卸载；</p>
</li>
<li><p>『问题』Windows 和 Linux 支持一次截多个屏幕，MacOS 仅只能截图单个屏幕，如何实现呢？</p>
<p>MacOS 除了系统自带的截图支持外，至今没有任何一个三方软件可以做到这点，包括大厂等某企鹅的截图的，无解。根原是属于此苹果接口没公开，至少没人能够发现。</p>
</li>
<li><p>『问题』如何确保 MacOS 上的效果和 Window上面保持外观的一致？</p>
<p>一个难点是再 MacOS 上也要和再 Windows 的效果保持一致，于是对不同风格进行对比，但 Fusion 又会倒是 Setting 窗口非原生的样式，但好在十分接近；选取一个平衡点。另外还手绘画了一个二十多个自定义或者复杂控件。</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402291521977.gif" width="70%"/ loading="lazy"></li>
</ul>
<br>

<h3 id="【看不见的优化】"><a href="#【看不见的优化】" class="headerlink" title="【看不见的优化】"></a>【看不见的优化】</h3><ul>
<li><p>『问题』如何解决使用 ESC 取消截图后的内存泄露问题？QPointer 、智能指针、还是单例？</p>
<p>也花了大力气来探究，在完成一次截图之后，内存的占用会在合适时机自动释放出来；这是定位在消耗内存的变量；开发环境显示器为 4K 27 寸 + 3K笔记本双屏；</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402261748498.png" width="100%"/ loading="lazy">
</li>
<li><p>『问题』对于使用单例模式不止一处时，有序需要多个单例用来传递或者保存数值时候，重复写很容易</p>
<p>可采用<a href="https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern">奇异递归模板</a>的方式，然后添加一个宏展开为友元类；多个单例都只用写一份，而前提是需要对 《<a href="https://blog.csdn.net/qq_33154343/article/details/128367884">C++ 类的六个特殊成员函数</a>》 很熟悉，才能理解，属于优雅的一种实现。</p>
</li>
<li><p>『问题』日志和崩溃生成 DUMP 记录？</p>
<p>日志可以通过配置文件修改，若是遇到传说的崩溃，亦会自动生成 .dmp 和 崩溃原因；</p>
<p>转储文件存放： <code>C:/Users/用户名/AppData/Local/XMuli/Sunny/cache/Sunny_Dumps/dump_2024_02_29_11_31_30_714.dmp</code> </p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402291131796.png" width="60%"/ loading="lazy">

<p>实现方法可通过 WIN API 来实现</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_MSC_VER</span></span>
<span class="token function">SetUnhandledExceptionFilter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>LPTOP_LEVEL_EXCEPTION_FILTER<span class="token punctuation">)</span>ApplicationCrashHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注冊异常捕获函数</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>额，你没接触过 DUMP，完全不会对其进行解剖分析？也简单写了一个使用 WinDbg 进行入门</p>
<p>《<a href="https://xmuli.blog.csdn.net/article/details/123563647">WinDbg：入门分析 dmp 文件『一』</a>》、《<a href="https://xmuli.blog.csdn.net/article/details/123563753">WinDbg：调试之附加进程生成 dmp『二』</a>》</p>
</li>
<li><p>『问题』希望单例运行EXE，确保全局唯一性？</p>
<p>可以通过共享内存QSharedMemory 和系统信号量 QSystemSemaphore，双重保证程序在一台终端上，仅会运行一个；</p>
<p>也能杜绝很罕见的一种情况，即使上次程序崩溃之后，但仍有残留的僵死进程，被误判当前没有启动。严谨（中指推一下眼镜）</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QString uniqueKey <span class="token operator">=</span> <span class="token string">"SunnyUniqueKey"</span><span class="token punctuation">;</span> <span class="token comment">// 使用唯一的标识符来创建共享内存和系统信号量</span>
QSharedMemory sharedMemory<span class="token punctuation">;</span>
sharedMemory<span class="token punctuation">.</span><span class="token function">setKey</span><span class="token punctuation">(</span>uniqueKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 尝试附加到现有的共享内存并分离</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>sharedMemory<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    sharedMemory<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 尝试创建共享内存，如果已经存在，表示已经有一个实例在运行, 判断是为了确保在同一台计算机上只能运行一个相同实例的程序。</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sharedMemory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"There is already an instance of the application running (by QSharedMemory)!"</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 创建系统信号量, 再尝试获取系统信号量，如果已经被其他实例持有，程序就退出, 判断是为了确保在多个进程同时启动时，只有一个进程能够继续执行。QSystemSemaphore用于创建系统信号量，如果系统信号量已经被其他实例持有（比如由于上一次程序异常退出导致信号量未被释放），则acquire函数会返回false，</span>
QSystemSemaphore <span class="token function">systemSemaphore</span><span class="token punctuation">(</span>uniqueKey<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> QSystemSemaphore<span class="token double-colon punctuation">::</span>Open<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>systemSemaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"There is already an instance of the application running (by QSystemSemaphore)!"</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// ...程序其它逻辑</span>

<span class="token comment">// 释放系统信号量</span>
systemSemaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<br>

<h3 id="【Qt-x2F-C-编码问题】"><a href="#【Qt-x2F-C-编码问题】" class="headerlink" title="【Qt &#x2F; C++ 编码问题】"></a>【Qt &#x2F; C++ 编码问题】</h3><ul>
<li><p>『问题』截图项目运行直接置顶显示后，按下按键后，窗口无任何响应，需额外点击一下才能开始截图？</p>
<p>分析和解决方案《<a href="https://blog.csdn.net/qq_33154343/article/details/124639169">Qt新弹窗不响应键盘按键，难道也是无焦点？</a>》</p>
</li>
<li><p>『问题』热键输入框控件，输入后显示的方块 ■◆ 乱码？</p>
<p>分析和解决方案《<a href="https://blog.csdn.net/qq_33154343/article/details/125775732">创建 QKeySequenceEdit() 后，显示方块■◆乱码</a>》，还是多看下 Qt Assistant 解围粗心。</p>
</li>
<li><p>『问题』使用 VS2022 和 QtCreator 如何调试 Qt 5.15 的源代码？</p>
<p>解决方案为《<a href="https://blog.csdn.net/qq_33154343/article/details/131491715">VS2022 And QtCreator10 调试 Qt 源码教程</a>》、《<a href="https://blog.csdn.net/qq_33154343/article/details/120339797">VS2017调试Qt源码</a>》</p>
</li>
<li><p>『问题』截图会有很多个属性的校验和“且”的属性使用？</p>
<p>虽简单，但移除标志位容易忘却，这里简单列举一下《<a href="https://blog.csdn.net/qq_33154343/article/details/126322317">C++ 标志位使用：校验、添加、删除</a>》</p>
</li>
<li><p>『问题』Qt Creator 报警告⚠ Misleading indentation； statement is not part of the previous ‘if‘</p>
<p>那日强迫症，且需要删除空格才能解决，属实比较稀少；记录下解决方案 《<a href="https://blog.csdn.net/qq_33154343/article/details/126215870">Misleading indentation； statement is not part of the previous ‘if‘</a>》</p>
</li>
<li><p>『问题』重构此版时候，也会大量使用 Lambda 表达式</p>
<p>展开讲解一下，若未接触过，属会用会看即可《<a href="https://blog.csdn.net/qq_33154343/article/details/125775706">Lambda 表达式详解</a>》</p>
</li>
<li><p>『问题』Visual Studio 断点偶遇进不去相关函数？</p>
<p>Release实际也是可以调试的，新手容易不知晓，知晓的亦可能会翻车，值得记录下；属于 Release &#x2F; Release with Debug Info &#x2F; Debug 的差异《<a href="https://blog.csdn.net/qq_33154343/article/details/124482152">Visual Studio 断点调试之箭头偏移进错函数，捉虫记</a>》</p>
</li>
<li><p>『问题』源码不能外发的情况下，如何进行调试？ </p>
<p>详细示例《<a href="https://blog.csdn.net/qq_33154343/article/details/123855765">Visual Studio 2019 进行远程调试</a>》</p>
</li>
</ul>
<br>

<h3 id="【项目杂项】"><a href="#【项目杂项】" class="headerlink" title="【项目杂项】"></a>【项目杂项】</h3><ul>
<li><p>『问题』 Sunny 截图在在不同系统、编译器上开发、使用不同的 Kit Tools 上面如何解决乱码问题？且有时调试窗口乱码？还有 ANSI，UTF8，UTF8-BOM 采用哪种？</p>
<p>参考《 <a href="https://blog.csdn.net/qq_33154343/article/details/120661967">愿编程不再乱码(含Qt)-根因深究</a>》，以及 <a href="https://github.com/XMuli/QtExamples">QtExamples</a> 的 “「第 6 章」 QT &#x2F; IDE 乱码根因和解决”</p>
</li>
<li><p>『问题』 遇到需要使用的开源三方库，如何优雅的使用 Git 管理，确保拉取三方库即最新，又不会打乱本仓库的历史线？</p>
<p>开源三方库引入，想要优雅，基本 <code>git submodule</code>  或  <code>git treemodule</code>  命令之间二选一；推荐前者，理由为 《<a href="https://blog.csdn.net/qq_33154343/article/details/123453541">git submodule 基本用法</a>》</p>
</li>
<li><p>『问题』 如何选用 LOG 日志库？自己简单封装一套，还是选用开源库？便于后面定位和分析</p>
<p>比较犹豫和纠结的一个问题，两种都试过；现总结为：项目初期使用自带的 QDebug 即，不够用再写一个类，和宏封装一套，满足需求即可，勿跑偏，功能才是重点。最后期可以选用三方库引入：</p>
<p>一点经验参考 《<a href="https://blog.csdn.net/qq_33154343/article/details/123457938">Log：日志选型调研『一』</a>》、《<a href="https://xmuli.blog.csdn.net/article/details/123488323">Log：日志之 Spdlog 极简用法示范『二』</a>》、《<a href="https://xmuli.blog.csdn.net/article/details/123489094">Log：日志之 Spdlog 核心构成『三』</a>》</p>
</li>
<li><p>『问题』CMake 管理跨平台项目，生各平台的 IDE 的解决方案？以及 Window 上自带一些基础宏的数据类型含义？</p>
<p>现在已经幸福多了，ChatGPT 横空出世，已经可以解答了，故介绍一些高频或者重点宏，自己结合去搜🔍</p>
<p>CMake 的重要宏：《<a href="https://blog.csdn.net/qq_33154343/article/details/125932219">CMake 设置 Target 输出目录和后缀名</a>》、《<a href="https://blog.csdn.net/qq_33154343/article/details/125928773">CMake 之 BUILD_SHARED_LIBS 和 CMAKE_BUILD_TYPE 用法教程</a>》</p>
<p>Windows 的重要宏：《<a href="https://blog.csdn.net/qq_33154343/article/details/125775718">LPSTR&#x2F;LPCSTR&#x2F;LPTSTR&#x2F;HWND&#x2F;HANDLE&#x2F;HMODULE&#x2F;HINSTANCE 等含义和区别</a>》</p>
</li>
</ul>
<br>

<ul>
<li>【编译遇坑】【杂谈经验总结】等有空再更</li>
</ul>
<br>

<h2 id="番外：意外之喜"><a href="#番外：意外之喜" class="headerlink" title="番外：意外之喜"></a>番外：意外之喜</h2><p><strong>分享一下喜悦</strong></p>
<p>在 v1.3 发布的那天晚上，记得 downloads 是 900+ 的样子；发布完了就去睡觉了。</p>
<p>第二天早上一看下载量就是 1k， 1.1k；中午再看一眼就是 1.2k；晚上再看就是 1.3k；</p>
<p>第三天是 1.4k，</p>
<p>第四天是 1.5k，</p>
<p>… …哈哈哈哈哈哈哈哈哈， 放假回家过年了，也没怎么看</p>
<p>约大大前天回来一看，嗯，还是 1.5k，大家玩的开心愉快</p>
<p>大前天到了 1.6k</p>
<p>前天到了 1.7k</p>
<p>昨天号到了 1.7k</p>
<p>今天的到了 1.8k , 纪念打卡（–写这篇时）<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402221425548.png" width="140"/ loading="lazy"></p>
 <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402221515404.jpeg" width="360"/ loading="lazy">

<p>在写过的所有软件中，总的下载量虽然不是最大的，但短时间增速率长是最快的 ヾ(≧▽≦*)o。</p>
<br>

<h2 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a>  欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！</p>
]]></content>
      <categories>
        <category>学习 - Linux</category>
        <category>学习 - MacOS</category>
        <category>学习 - Windows</category>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
        <category>学习 - C/C++ 序三 商业</category>
        <category>专栏 - 项目实战开发</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>跨平台开发</tag>
        <tag>项目作品集合</tag>
        <tag>个人能力提升</tag>
      </tags>
  </entry>
  <entry>
    <title>有些快乐是真的快乐吗？</title>
    <url>/posts/ce29b8ce/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　 比如有些快乐是真的快乐吗？真的是我心底所渴望的快乐吗？还只是单单的，我觉得我做了这件事，所以我应该会感觉快乐？？？</p>
<span id="more"></span>

<p>​		<strong>二十多岁的困惑有很多： 比如有些快乐是真的快乐吗？真的是我心底所渴望的快乐吗？</strong> 还只是单单的，我觉得我做了这件事，所以我应该会感觉快乐？？？</p>
<p>​		在<a href="https://xmuli.blog.csdn.net/article/details/104735123">上一篇</a>中，简单的陈述了一下想法。这篇就换一个话题：有些快乐是真的快乐吗？是一时的快感？还是一瞬间的快乐？还是你内心长期渴望之后的，得到之后的快乐？</p>
<br>

<p>​		<strong>在购物方面；购买的东西一定是当下自己所需要的吗？以及购买后，它真的有带给我们纯正的快乐吗？</strong></p>
<p>​		在网线和 WiFi 连接了世界之后，获取信息变得异常容易；在各个 App 割据流量土地；各自沦为为孤岛的现在；启动 App 之后，看到的就是 <strong>大数据 + 算法</strong> 带来的 <strong>商业推荐；</strong>但这通常不是我们所希望看到的，<strong>在 “大量信息流 + 复杂优惠券 + 人为制造榜单 + 明星效应 + 网红带货”</strong> 一轮轮的轰炸我们的大脑，当浏览信息麻木的时候，点击购买只是一瞬间的冲动（而不是深思熟虑的和真的所需的购买）。</p>
<p>​		（也并非是说，只有有所需要才会去购买行为）：买东西可以带来的快乐有很多，有服务期间的享受、品牌价值的认可、工匠精湛的技艺的认可、生活所需的痛点解决、单纯消费的快乐等。。。<strong>重要的是基于自己的钱包决定购买。</strong>（以后有空再展开说）</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/IMG_216622.JPG" width="15%"/ loading="lazy">

<br>

<p>​		<strong>在日常生活上，对你厌恶的人进行的使绊子，时候真的会有如释重负，酣畅淋漓的快乐吗？这又是真的心灵的快乐吗？</strong> </p>
<p>​		和大学的室友（或者工作合租的），因长时间的琐碎摩擦，而产生的隔阂，又或者他人的一些不良嗜好自己无法容忍，使得彼此之间产生厌恶；故而打击报复，暗处使袢子，图一个快意恩仇的快感。</p>
<p>​		<strong>这种行为很难的评判，</strong> <strong>没有对错之分，人生数十载，你的人生你决定，所带的后后果都是自己承担；不管你愿不愿意。</strong>（世界的规则已经被先前的人给制定了）。但他人不悦你，他会转身就忘记了，可你却一直暗暗记于心，时刻提醒自己，自我生气，用他人的惩罚来伤害自己的身体？？？岂不是很亏？？？你可以暂时性的忘记，期间努力提升自己，当你能力提升了起来，个人境界也会改变了，到时候你会有更多的选择，慷慨大度忘记当初小事；或是解决旧事后忘记恩仇；或是和平谈起一笑泯恩仇；都由你选择。</p>
<img src='https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/IMG_2138.JPG' width="15%" / loading="lazy">

<br>

<p>​		<strong>在恋爱感情方面，无论你是有了 1 ：1、还是 1：n、还是 n : n 的情感；这些情愫都已经产生，它们带给你的是已经发生过的快乐？只是这种快乐，是真假难辨的快乐？</strong> </p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_213226.png" width="25%"/ loading="lazy">

<br>

<p>​		对于这个。毕竟男人都是大猪蹄子；配上 呵呵， 女人。 谈到这个，毕竟就是剪不断，理还乱的一种感情。 如果你是一个单身狗，那么恭喜，你暂时处于安全区，但是你若是想要来到浅水区游玩，或者不慎跌落深水区，那都是没有遗憾的。毕竟有些事情，自己不去尝试一把，你都不知道它对你到底是天天的糖果🍬，还是砒霜☠️️。<strong>不过能够看到这里的，我想都是男的都是纯情坚定的痴心男，女的都是柔情似水的仙女。</strong></p>
<p>​		如果在交往比较短时间后，就发生了闭月羞花的事情？嗯、？？？这种事情本生就没有谁有资格评判什么！只要你能够对你做的决定负责，能够承担后果就好（很多时候后果并不可怕，也并非是什么不可承受之重）。</p>
<p>​		<strong>唯一需要判断的就是，你是感受到的是你侬我侬的快乐？还是被守护的快乐？还是有人值得你守护的快乐？还是单纯的希望希望有人陪伴你的快乐？还是你的 pua 实践成功的快乐？还是单纯的寻求但时间的快感的快乐？弄清楚自己心底到底是需要那种快乐？不去骗自己本心就好。</strong> 对于某些。。。，请给老实的宅男宅女们，留一块自留地，不要再破坏这个感情市场了。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_213213.png" width="25%"/ loading="lazy">

<br>

<p>​		在这个方面去做自己，爱自己，去探寻自己心底的真正快乐，去试探着这片恋爱区域，它可能带给你惊喜和甜美的，也有可能是未知。</p>
]]></content>
      <categories>
        <category>生活 - 闲暇的趣闻</category>
      </categories>
      <tags>
        <tag>偶然乐趣</tag>
      </tags>
  </entry>
  <entry>
    <title>标准对话框之文件、颜色、字体、保存、消息、输入等对话框使用</title>
    <url>/posts/da2c7d6d/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  使用<strong>自定义对话框</strong>和<strong>标准对话框</strong>： <code>QFileDialog</code> <code>QInputDialog</code> and <code>QMessageDialog</code>等的使用：文件、颜色、字体、保存、消息、输入等对话框使用</p>
<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="标准对话框："><a href="#标准对话框：" class="headerlink" title="标准对话框："></a>标准对话框：</h2><p>下面列举一些，常用的系统提供的标准对话框，<strong>下面都是静态函数</strong>：</p>
<h3 id="QFileDialog-文件对话框："><a href="#QFileDialog-文件对话框：" class="headerlink" title="QFileDialog 文件对话框："></a>QFileDialog 文件对话框：</h3><table>
<thead>
<tr>
<th align="left">常用静态函数</th>
<th align="left">函数功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">QString getOpenFileName()</td>
<td align="left">选择打开一个文件</td>
</tr>
<tr>
<td align="left">QStringList getOpenFileNames()</td>
<td align="left">选择打开<strong>多</strong>个文件</td>
</tr>
<tr>
<td align="left">QString getSaveFileName()</td>
<td align="left">选择保存一个文件</td>
</tr>
<tr>
<td align="left">QString getExistingDirectory()</td>
<td align="left">选择<strong>一个已有的</strong>目录</td>
</tr>
<tr>
<td align="left">QUrl getOpenFileUrl()</td>
<td align="left">选择打开一个文件，可选择远程网络文件</td>
</tr>
</tbody></table>
<p>选择已有的目录，通常可以使还是用<code>QDir::currentPath()</code> 来获取当前应用程序的目录</p>
<br>

<h3 id="QColorDialog-颜色对话框"><a href="#QColorDialog-颜色对话框" class="headerlink" title="QColorDialog  颜色对话框:"></a>QColorDialog  颜色对话框:</h3><table>
<thead>
<tr>
<th>常用静态函数</th>
<th>函数功能</th>
</tr>
</thead>
<tbody><tr>
<td>QColor gstColor()</td>
<td>选择颜色</td>
</tr>
</tbody></table>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191014000417.png"/ loading="lazy">

<br>

<h3 id="QFontDialog-字体对话框"><a href="#QFontDialog-字体对话框" class="headerlink" title="QFontDialog  字体对话框:"></a>QFontDialog  字体对话框:</h3><table>
<thead>
<tr>
<th>常用静态函数</th>
<th>函数功能</th>
</tr>
</thead>
<tbody><tr>
<td>QString get Text()</td>
<td>输入单行文字</td>
</tr>
</tbody></table>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191014000534.png"/ loading="lazy">

<br>

<h3 id="QInputDialog-输入对话框"><a href="#QInputDialog-输入对话框" class="headerlink" title="QInputDialog    输入对话框:"></a>QInputDialog    输入对话框:</h3><table>
<thead>
<tr>
<th>常用静态函数</th>
<th>函数功能</th>
</tr>
</thead>
<tbody><tr>
<td>QString get Text()</td>
<td>输入单行文字</td>
</tr>
<tr>
<td>int getInt()</td>
<td>输入整数</td>
</tr>
<tr>
<td>double getDouble()</td>
<td>输入浮点数</td>
</tr>
<tr>
<td>Qsring getltem()</td>
<td>从一个下拉列表框中选择输入</td>
</tr>
<tr>
<td>QString getMultiLine Text()</td>
<td>输入多行字符串</td>
</tr>
</tbody></table>
<br>

<h3 id="QMessageBox-消息对话框"><a href="#QMessageBox-消息对话框" class="headerlink" title="QMessageBox  消息对话框:"></a>QMessageBox  消息对话框:</h3><table>
<thead>
<tr>
<th>常用静态函数</th>
<th>函数功能</th>
</tr>
</thead>
<tbody><tr>
<td>StandardButon information()</td>
<td>信息提示对话框</td>
</tr>
<tr>
<td>StandardButton question()</td>
<td>询问并获取是否确认的对话框</td>
</tr>
<tr>
<td>StandardButton warning()</td>
<td>警告信息提示对话框</td>
</tr>
<tr>
<td>StandardButton critical()</td>
<td>错误信息提示对话框</td>
</tr>
<tr>
<td>void about()</td>
<td>设置自定义信息的关于对话框</td>
</tr>
<tr>
<td>void aboutQt()</td>
<td>关于Qt的对话框</td>
</tr>
</tbody></table>
<p>其在代码中的效果如如下：</p>
<p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191013162112.png"/ loading="lazy"> 和</p>
<p>和 Qt 的</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191013162203.png"/ loading="lazy">

<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>写了一个小的项目来演示这几种标准对话框，编译环境如下：</p>
<p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p>
<p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p>
<p>上一个最终的运行效果图：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191013164633.gif"/ loading="lazy">

<br>

<h2 id="核心源码："><a href="#核心源码：" class="headerlink" title="核心源码："></a>核心源码：</h2><p>因为运用比较简单， 所以就只是没有单据列举来说明：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//标准文件对话框QFileDialog+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnOpenFile_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString path <span class="token operator">=</span> <span class="token class-name">QDir</span><span class="token double-colon punctuation">::</span><span class="token function">currentPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//获取应用程序当前目录</span>
    QString fileter <span class="token operator">=</span> <span class="token string">"文本文件(*.txt);;图片文件(*.jpg *.gif);;所有文件(*.*)"</span><span class="token punctuation">;</span>

    QString fileNmae <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getOpenFileName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择一个文件"</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> fileter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> fileNmae<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>fileNmae<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnOpenFiles_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString path <span class="token operator">=</span> <span class="token class-name">QDir</span><span class="token double-colon punctuation">::</span><span class="token function">currentPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//获取应用程序当前目录</span>
    QString fileter <span class="token operator">=</span> <span class="token string">"文本文件(*.txt);;图片文件(*.jpg *.gif);;所有文件(*.*)"</span><span class="token punctuation">;</span>

    QStringList fileNmaeList <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getOpenFileNames</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择多个文件"</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> fileter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fileNmaeList<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>fileNmaeList<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnExistingDir_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString currPath <span class="token operator">=</span> <span class="token class-name">QCoreApplication</span><span class="token double-colon punctuation">::</span><span class="token function">applicationDirPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取应用程序当前目录</span>
    QString path <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getExistingDirectory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择一个目录【非文件】"</span><span class="token punctuation">,</span> currPath<span class="token punctuation">,</span> QFileDialog<span class="token double-colon punctuation">::</span>ShowDirsOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//最后一个参数，表示只显示路径</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnGetColor_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QPalette pal <span class="token operator">=</span> ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">palette</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//获取条调色板</span>
    QColor initColor <span class="token operator">=</span> pal<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span>QPalette<span class="token double-colon punctuation">::</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QColor color <span class="token operator">=</span> <span class="token class-name">QColorDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getColor</span><span class="token punctuation">(</span>initColor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择颜色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token comment">//因为没有.isEmpty(),故而使用.isValid()来判断</span>
        pal<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>QPalette<span class="token double-colon punctuation">::</span>Text<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">setPalette</span><span class="token punctuation">(</span>pal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnGetFont_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QFont initFont <span class="token operator">=</span> ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    QFont font <span class="token operator">=</span> <span class="token class-name">QFontDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getFont</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ok<span class="token punctuation">,</span> initFont<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnSaveFile_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString path <span class="token operator">=</span> <span class="token class-name">QDir</span><span class="token double-colon punctuation">::</span><span class="token function">currentPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//获取应用程序当前目录</span>
    QString fileter <span class="token operator">=</span> <span class="token string">"头文件(*.h);;源文件(*.cpp);;所有文件(*.*)"</span><span class="token punctuation">;</span>
    QString fileNmae <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getSaveFileName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"保存文件"</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> fileter<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileNmae<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>fileNmae<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//标准消息对话框+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnQuestion_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QMessageBox<span class="token double-colon punctuation">::</span>StandardButton ret <span class="token operator">=</span> <span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">question</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"问题消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"question对话框的内容"</span><span class="token punctuation">,</span>  QMessageBox<span class="token double-colon punctuation">::</span>Yes <span class="token operator">|</span> QMessageBox<span class="token double-colon punctuation">::</span>No <span class="token operator">|</span> QMessageBox<span class="token double-colon punctuation">::</span>Close<span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>NoButton<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> QMessageBox<span class="token double-colon punctuation">::</span>Yes<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"QMessageBox::yes 按钮被选中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">case</span> QMessageBox<span class="token double-colon punctuation">::</span>No<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"QMessageBox::No 按钮被选中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">case</span> QMessageBox<span class="token double-colon punctuation">::</span>Close<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"QMessageBox::Close 按钮被选中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"这是 switch 的default 的选项"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnInformation_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"信息消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"information对话框的内容"</span><span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>Ok<span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>NoButton<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnWarning_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"警告消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"warning对话框的内容"</span><span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>Ok<span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>NoButton<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnCritical_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">critical</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"危机消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"critical对话框的内容"</span><span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>Ok<span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>NoButton<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnAbout_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">about</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"关于消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"abou 作者: 投我以木李，报之以琼玖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnAboutQt_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">aboutQt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"关于Qt消息对话框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//标准输入对话框QInputDialog+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnGetString_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    QString text <span class="token operator">=</span> <span class="token class-name">QInputDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"输入文字对话框"</span><span class="token punctuation">,</span> <span class="token string">"请输入一个字符串"</span><span class="token punctuation">,</span> QLineEdit<span class="token double-colon punctuation">::</span>Normal<span class="token punctuation">,</span> <span class="token string">"默认输入的字符串"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>text<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnGetItem_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QStringList list<span class="token punctuation">;</span>
    list<span class="token operator">&lt;&lt;</span><span class="token string">"2019-10-02"</span><span class="token operator">&lt;&lt;</span><span class="token string">"04:28"</span><span class="token operator">&lt;&lt;</span><span class="token string">"在武汉的卧室"</span><span class="token operator">&lt;&lt;</span><span class="token string">"敲代码"</span><span class="token operator">&lt;&lt;</span><span class="token string">"这会没有困意"</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> editable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token comment">//ComboBox是否可编辑</span>
    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    QString text <span class="token operator">=</span> <span class="token class-name">QInputDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"输入item对话框"</span><span class="token punctuation">,</span> <span class="token string">"请选择一个item"</span><span class="token punctuation">,</span> list<span class="token punctuation">,</span> index<span class="token punctuation">,</span> editable<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>text<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnInt_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> stepVal <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pointSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token class-name">QInputDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"输入整数对话框"</span><span class="token punctuation">,</span> <span class="token string">"请输入一个整数改变字体大小"</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max<span class="token punctuation">,</span> stepVal<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        QFont font <span class="token operator">=</span> ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        font<span class="token punctuation">.</span><span class="token function">setPointSize</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"字体大小已经被设置为:"</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">number</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnDouble_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                 <span class="token comment">//小数点的位数</span>
    <span class="token keyword">double</span> val <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> ret <span class="token operator">=</span> <span class="token class-name">QInputDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"输入浮点数对话框"</span><span class="token punctuation">,</span> <span class="token string">"请输入一个整数改变字体大小"</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max<span class="token punctuation">,</span> val<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span>
        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"浮点数大小为:"</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">number</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token char">'f'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a> 【QtQDialogEx】</p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>根据给定(任意)的QString文本, 获取其矩形大小</title>
    <url>/posts/618ad839/</url>
    <content><![CDATA[<p><strong>简介：</strong>  再进行空间的重绘时候，绘画进度条<code>QProgressBar</code>，需要在中间显示（可以根据opt-&gt;）进度的百分比文字，且刻度为文字中间的时候，需要左右两侧有着不一样的颜色（左边白色，右边黑色），即：进度条到达的位置文字百分比为白色显示。根据给定(任意)的<code>QString</code>文本, 获取其最小矩形。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="需求背景："><a href="#需求背景：" class="headerlink" title="需求背景："></a>需求背景：</h2><p>绘画进度条，需要在中间显示进度的百分比文字，且刻度为文字中间的时候，需要左右两侧有着不一样的颜色（左边白色，右边黑色），即：进度条到达的位置文字百分比为白色显示。</p>
<p><strong>希望达到的预期效果如下：</strong></p>
<p>静态图：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191008224313.png" width="80%"/ loading="lazy">



<p>动图<strong>注意中间文字和百分比的颜色变化</strong>（因为gif帧数，故实连续渐变色际参考上图）：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191008231012.gif" width="80%"/ loading="lazy">

<br>

<p>源码没修改之前：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">const</span> QStyleOptionProgressBar <span class="token operator">*</span>progBar <span class="token operator">=</span>  <span class="token generic-function"><span class="token function">qstyleoption_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">const</span> QStyleOptionProgressBar <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            QRect rect <span class="token operator">=</span> progBar<span class="token operator">-></span>rect<span class="token punctuation">;</span>
            rect<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            rect<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.57</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            rect<span class="token punctuation">.</span><span class="token function">moveCenter</span><span class="token punctuation">(</span>progBar<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">double</span> val <span class="token operator">=</span> progBar<span class="token operator">-></span>progress <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>progBar<span class="token operator">-></span>maximum <span class="token operator">-</span> progBar<span class="token operator">-></span>minimum<span class="token punctuation">)</span><span class="token punctuation">;</span>
            p<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span><span class="token function">getColor</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> DPalette<span class="token double-colon punctuation">::</span>HighlightedText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            QString str <span class="token operator">=</span> <span class="token string">"已经下载"</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">number</span><span class="token punctuation">(</span>val <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token char">'f'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token operator">+</span> <span class="token string">"%(点击暂停)"</span><span class="token punctuation">;</span>
            p<span class="token operator">-></span><span class="token function">drawText</span><span class="token punctuation">(</span>rect<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>AlignCenter<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>

            p<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>
            p<span class="token operator">-></span><span class="token function">setBrush</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>NoBrush<span class="token punctuation">)</span><span class="token punctuation">;</span>
            p<span class="token operator">-></span><span class="token function">drawRect</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>效果缺陷如图：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191008223907.png" width="80%"/ loading="lazy">

<br>

<h2 id="根据QString文本获取其矩形fontMetrics："><a href="#根据QString文本获取其矩形fontMetrics：" class="headerlink" title="根据QString文本获取其矩形fontMetrics："></a>根据QString文本获取其矩形fontMetrics：</h2><p>修改之后代码:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> val <span class="token operator">=</span> progBar<span class="token operator">-></span>progress <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>progBar<span class="token operator">-></span>maximum <span class="token operator">-</span> progBar<span class="token operator">-></span>minimum<span class="token punctuation">)</span><span class="token punctuation">;</span> 
QString strPercent <span class="token operator">=</span> <span class="token class-name">QString</span><span class="token double-colon punctuation">::</span><span class="token function">number</span><span class="token punctuation">(</span>val <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token char">'f'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">;</span>               
QString str <span class="token operator">=</span> <span class="token string">"已下载"</span> <span class="token operator">+</span> strPercent <span class="token operator">+</span> <span class="token string">"(点击暂停)"</span><span class="token punctuation">;</span>                                  
QSize size <span class="token operator">=</span> progBar<span class="token operator">-></span>fontMetrics<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>TextSingleLine<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>              
QRect <span class="token function">rect</span><span class="token punctuation">(</span>progBar<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">topLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    
rect<span class="token punctuation">.</span><span class="token function">moveCenter</span><span class="token punctuation">(</span>progBar<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>根据给定(任意)的QString, 获取其矩形大小，其效果如下：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191008224525.jpg" width="80%"/ loading="lazy">

<br>

<h2 id="设置画笔渐变色-文字渐变色-："><a href="#设置画笔渐变色-文字渐变色-：" class="headerlink" title="设置画笔渐变色(文字渐变色)："></a>设置画笔渐变色(文字渐变色)：</h2><p>文字有渐变的需求(画笔采用渐变色)：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QPointF <span class="token function">pointStart</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rect<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              
QPointF <span class="token function">pointEnd</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rect<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               
QLinearGradient <span class="token function">linear</span><span class="token punctuation">(</span>pointStart<span class="token punctuation">,</span> pointEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    
linear<span class="token punctuation">.</span><span class="token function">setColorAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">getColor</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> DPalette<span class="token double-colon punctuation">::</span>HighlightedText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  
linear<span class="token punctuation">.</span><span class="token function">setColorAt</span><span class="token punctuation">(</span>division<span class="token punctuation">,</span> <span class="token function">getColor</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> DPalette<span class="token double-colon punctuation">::</span>HighlightedText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           
linear<span class="token punctuation">.</span><span class="token function">setColorAt</span><span class="token punctuation">(</span>division <span class="token operator">+</span> <span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token function">getColor</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> DPalette<span class="token double-colon punctuation">::</span>ButtonText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         
linear<span class="token punctuation">.</span><span class="token function">setColorAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">getColor</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> DPalette<span class="token double-colon punctuation">::</span>ButtonText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       
linear<span class="token punctuation">.</span><span class="token function">setSpread</span><span class="token punctuation">(</span>QGradient<span class="token double-colon punctuation">::</span>PadSpread<span class="token punctuation">)</span><span class="token punctuation">;</span>                                          
p<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span><span class="token function">QPen</span><span class="token punctuation">(</span><span class="token function">QBrush</span><span class="token punctuation">(</span>linear<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//设置画笔渐变 【重点】</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="设置画刷渐变色-图案渐变色-："><a href="#设置画刷渐变色-图案渐变色-：" class="headerlink" title="设置画刷渐变色(图案渐变色)："></a>设置画刷渐变色(图案渐变色)：</h2><p>图片有渐变的需求(画刷采用渐变色)：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//顺变 此处贡献出, 渐变配色方案:</span>

QPointF <span class="token function">pointStart</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rect<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
QPointF <span class="token function">pointEnd</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rect<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
QLinearGradient <span class="token function">linear</span><span class="token punctuation">(</span>pointStart<span class="token punctuation">,</span> pointEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
linear<span class="token punctuation">.</span><span class="token function">setColorAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">QColor</span><span class="token punctuation">(</span><span class="token string">"#ff6e7f"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
linear<span class="token punctuation">.</span><span class="token function">setColorAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">QColor</span><span class="token punctuation">(</span><span class="token string">"#bfe9ff"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
linear<span class="token punctuation">.</span><span class="token function">setSpread</span><span class="token punctuation">(</span>QGradient<span class="token double-colon punctuation">::</span>PadSpread<span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token operator">-></span><span class="token function">setBrush</span><span class="token punctuation">(</span>linear<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//设置画刷渐变 【重点】</span>
p<span class="token operator">-></span><span class="token function">drawPath</span><span class="token punctuation">(</span>inter<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="QFontMetrics-boundingRect-获取文本的矩形位置："><a href="#QFontMetrics-boundingRect-获取文本的矩形位置：" class="headerlink" title="QFontMetrics::boundingRect()获取文本的矩形位置："></a>QFontMetrics::boundingRect()获取文本的矩形位置：</h2><p>相当于计算 （没修改的源码） 中的2-5行 的计算rect  的一种快捷方法：</p>
<blockquote>
<p>&#x2F;&#x2F;获取字符窜的最小矩形,和其在指定矩形的相对位置QFontMetrics::boundingRect()</p>
</blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> QStyleOptionProgressBar <span class="token operator">*</span>progBar <span class="token operator">=</span>  <span class="token generic-function"><span class="token function">qstyleoption_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">const</span> QStyleOptionProgressBar <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> val <span class="token operator">=</span> progBar<span class="token operator">-></span>progress <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>progBar<span class="token operator">-></span>maximum <span class="token operator">-</span> progBar<span class="token operator">-></span>minimum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> drawWidth <span class="token operator">=</span> val <span class="token operator">*</span> opt<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//此rect矩形大小是通过文本得到最小的矩形; 其位置是相对于progBar->rect的</span>
QRect rect <span class="token operator">=</span> progBar<span class="token operator">-></span>fontMetrics<span class="token punctuation">.</span><span class="token function">boundingRect</span><span class="token punctuation">(</span>progBar<span class="token operator">-></span>rect<span class="token punctuation">,</span> progBar<span class="token operator">-></span>textAlignment<span class="token punctuation">,</span> progBar<span class="token operator">-></span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>效果如图：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191008224956.jpg" width="80%"/ loading="lazy">]]></content>
      <categories>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>二十岁的所困惑所思考</title>
    <url>/posts/4105a4b6/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　 楔子，二十岁的所困惑所思考</p>
<span id="more"></span>

<p>​		<strong>二十而立，三十不惑</strong> 是一个很多的新人，尤其思维意识刚觉醒的人，在恰好年轻的年龄，在追寻自我意识和钱财的独立的理想阶段标志语。实际过程中却是二十多岁有很多困惑，在探寻解惑的过程。</p>
<p>​		但很多的博客、书籍和身边人的教导，都只说了那个阶段的会有什么样子的享受，只说需要努力，但却没有说这个奋斗过程中的你，会遇到的那些意识上的困惑？以及怎么自我走出困惑。<strong>所以我分享一下关于编程技术和生活的方方面面的分享，可以互相作为参考借鉴，让你们在迈出自己的下一步前，会有自己的不犹豫，不后悔的选择。</strong></p>
<br>

<p>​		 一个此阶段的自己的幼稚思想，困惑，认识自我，探寻自己真正所喜好，屡次摸石头尝试的探索，希望可以将有用的方法归纳出来，让复制某一方面成为通用；最终达到每个人得到自己答案后，可以对很多事情不困惑，从而做出决定。也带有自己的不坍塌的三观和强大自信心，感受生活的世界美好。</p>
<br>

<p>​		随时间延续，社会意识变化，二十多的大学生和毕业生新人，在经历中学的分数学习，大学的放松学习；一直到最近两年才有时间，来思考和感悟学习之外的事情。也才开始慢慢有了自己意识，思考自己前行的路。开始时候，是单独奋斗，成长中陪伴的更多是许许多多的困惑，或者一些普遍认知无意义的，现在想也没有用的的问题？或者一些遥远的终极问题：</p>
<p>​		 我是谁？我要干什么？我要到哪里去？<strong>但正是这些问题，衍射出来的一些贴近我们每个人的更加具体的问题。</strong> 我是一个什么样的人？我想要成为什么样的人？我向往的生活是什么样的？我要做哪些努力和舍弃？我若是真的实现了我所向往的的生活，我是真的开心吗？这种开心是可持续性的发自你内心的开心？还是仅仅我做了这件事情以后，我本应该感到的开心？</p>
<br>

<p>​		这些许许多的问题，都只有每个人在经历过社会的毒打才能在能够得到具体答案。而我所做的分享，就是对一些技术、生活、社会和为人的思考和感悟。其中的相似经历的好的解决方法，用来被复制，运用到美好的生活中。</p>
<br>

<p>​		<del>第一篇公众号作</del> 为引出来问题的楔子：二十岁中会遇到哪些困惑？后面的再详细介绍实际生活所遇，以点破面的，讲述这个生活于魔幻现实世界抽象后的一些原理，怎么应对它们就取决自己的 “志” 和 “道” 。最后，这里让我遇见一群志同道合的你们，开心。</p>
]]></content>
      <categories>
        <category>生活 - 闲暇的趣闻</category>
      </categories>
      <tags>
        <tag>偶然乐趣</tag>
      </tags>
  </entry>
  <entry>
    <title>滑动条QSlider和QAbstractSlider的介绍和用法</title>
    <url>/posts/66c92eaf/</url>
    <content><![CDATA[<p><strong>简介：</strong> 滑动条<code>QSlider</code>的介绍和用法，其通过滑动来设置数值，也可以用于数值的输入。以及他们的基类<code>QAbstractSlider</code>的众多属性的详细讲解</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p>
<p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p>
<br>

<h2 id="系列博文："><a href="#系列博文：" class="headerlink" title="系列博文："></a>系列博文：</h2><p><strong>比较紧密的关联博文参考：</strong></p>
<ul>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/100944831">滑动条<code>QSlider</code>和<code>QAbstractSlider</code>的介绍和用法</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/101003081"><code>QSlider</code>、<code>QScrollBar</code>、<code>QProgressBar</code>控件的联动</a></li>
<li><a href="https://blog.csdn.net/qq_33154343/article/details/101003115">仪表盘<code>QSlider</code>的讲解和使用</a></li>
</ul>
<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190915000559.gif"/ loading="lazy">

<br>

<h2 id="滑动条QSlider："><a href="#滑动条QSlider：" class="headerlink" title="滑动条QSlider："></a>滑动条QSlider：</h2><p><code>QSlider</code>、<code>QScrollBar</code>和<code>Qdial</code>3个组件都从<code>QAbstractSlider</code>继承而来，有一些共有的属性。<br><strong>QSlider</strong>是滑动的标尺型组件，滑动标尺上的一个滑块可以改变值。<br>基类<strong>QAbstractSlider</strong>的主要属性包括以下几种。</p>
<ul>
<li><p><code>minimum</code>、<code>maximum</code>：设置输入范围的最小值和最大值，例如，用红、绿、蓝配色时，每<br>  种基色的大小范围是0~255，所以设置<strong>minimum</strong>为0，<strong>maximum</strong>为255。</p>
</li>
<li><p><code>singlestep</code>:单步长，拖动标尺上的滑块，或按下左&#x2F;右光标键时的最小变化数值。</p>
</li>
<li><p><code>pageStep</code>:在<strong>Slider</strong>上输入焦点，按<strong>PgUp</strong>或<strong>PgDn</strong>键时变化的数值。</p>
</li>
<li><p><code>value</code>：组件的当前值，拖动滑块时自动改变此值，并限定在<strong>minimum</strong>和<strong>maximum</strong>定义的<br>  范围之内。</p>
</li>
<li><p><code>sliderPosition</code>:滑块的位置，若<strong>tracking</strong>属性设置为true，<strong>sliderPosition</strong>就等于value。</p>
</li>
<li><p><strong><code>tracking</code>：sliderPosition</strong>是否等同于<strong>value</strong>，如果<strong>tracking</strong>&#x3D;true，改变value时也同时改变<br>  sliderPosition。</p>
</li>
<li><p><code>orientation</code>: <strong>Slider</strong>的方向，可以设置为水平或垂直。方向参数是Qt的枚举类型enum</p>
</li>
<li><p><code>Qt：Orientation</code>，取值包括以下两种。  </p>
<table>
<thead>
<tr>
<th align="center">枚举</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Qt::Horizontal</td>
<td align="center">水平方向</td>
</tr>
<tr>
<td align="center">Qt::Vertical</td>
<td align="center">垂直方向</td>
</tr>
</tbody></table>
</li>
<li><p><code>invertedAppearance</code>:显示方式是否反向，<strong>invertedAppearance</strong>&#x3D;false时，水平的Slider由左向右数值增大，否则反过来。</p>
</li>
<li><p><code>invertedControls</code>：反向按键控制，若<strong>invertedControls</strong>&#x3D;true，则按下<strong>PgUp</strong>或<strong>PgDn</strong>按键时调整数值的反向相反。</p>
</li>
<li><p><strong>属于QSlider的专有属性有两个，如下。</strong></p>
</li>
<li><p><code>tickPosition</code>:标尺刻度的显示位置，使用枚举类型<strong>QSlider:TickPosition</strong>，取值包括以下6种</p>
<table>
<thead>
<tr>
<th align="center">枚举</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">QSlider::NoTicks</td>
<td align="center">不显示刻度</td>
</tr>
<tr>
<td align="center">QSlider::TicksBothSides</td>
<td align="center">标尺两侧都显示刻度</td>
</tr>
<tr>
<td align="center">QSlider::TicksAbove</td>
<td align="center">标尺上方显示刻度</td>
</tr>
<tr>
<td align="center">QSlider::TicksBelow</td>
<td align="center">标尺下方显示刻度</td>
</tr>
<tr>
<td align="center">QSlider::TicksLeft</td>
<td align="center">标尺左侧显示刻度</td>
</tr>
<tr>
<td align="center">QSlider::TicksRight</td>
<td align="center">标尺右侧显示刻度</td>
</tr>
</tbody></table>
</li>
<li><p><code>ticklnterval</code>：标尺刻度的间隔值，若设置为0，会在<strong>singleStep</strong>和<strong>pageStep</strong>之间自动选择。</p>
</li>
</ul>
<br>

<h2 id="部分源码："><a href="#部分源码：" class="headerlink" title="部分源码："></a>部分源码：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//设置QSlider的最大值为255  (默认范围为0~100)</span>
ui<span class="token operator">-></span>sliderRed<span class="token operator">-></span><span class="token function">setMaximum</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ui<span class="token operator">-></span>sliderGreen<span class="token operator">-></span><span class="token function">setMaximum</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ui<span class="token operator">-></span>sliderBlue<span class="token operator">-></span><span class="token function">setMaximum</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ui<span class="token operator">-></span>sliderAlpha<span class="token operator">-></span><span class="token function">setMaximum</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//初始化QTextEdit的颜色 (否则默认就是白灰色)</span>
QColor color<span class="token punctuation">;</span>
color<span class="token punctuation">.</span><span class="token function">setRgb</span><span class="token punctuation">(</span><span class="token number">145</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">251</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
QPalette palette <span class="token operator">=</span> ui<span class="token operator">-></span>textColour<span class="token operator">-></span><span class="token function">palette</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
palette<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>QPalette<span class="token double-colon punctuation">::</span>Base<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>
ui<span class="token operator">-></span>textColour<span class="token operator">-></span><span class="token function">setPalette</span><span class="token punctuation">(</span>palette<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//连接信号与槽，多个信号，对应一个槽函数</span>
<span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>sliderRed<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSetClolor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>sliderGreen<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSetClolor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>sliderBlue<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSetClolor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>sliderAlpha<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSetClolor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>

<span class="token keyword">int</span> nRed <span class="token operator">=</span> ui<span class="token operator">-></span>sliderRed<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//获取红绿蓝(RGB)的Slider的数值</span>
<span class="token keyword">int</span> nGreen <span class="token operator">=</span> ui<span class="token operator">-></span>sliderGreen<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> nBlue <span class="token operator">=</span> ui<span class="token operator">-></span>sliderBlue<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> nAlpha <span class="token operator">=</span> ui<span class="token operator">-></span>sliderAlpha<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

QColor color<span class="token punctuation">;</span>
color<span class="token punctuation">.</span><span class="token function">setRgb</span><span class="token punctuation">(</span>nRed<span class="token punctuation">,</span> nGreen<span class="token punctuation">,</span> nBlue<span class="token punctuation">,</span> nAlpha<span class="token punctuation">)</span><span class="token punctuation">;</span>
QPalette palette <span class="token operator">=</span> ui<span class="token operator">-></span>textColour<span class="token operator">-></span><span class="token function">palette</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//获取textColour控件的所有颜色值(调色板)</span>
palette<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>QPalette<span class="token double-colon punctuation">::</span>Base<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置textColou的某一角色(即控件)的颜色</span>
ui<span class="token operator">-></span>textColour<span class="token operator">-></span><span class="token function">setPalette</span><span class="token punctuation">(</span>palette<span class="token punctuation">)</span><span class="token punctuation">;</span>

ui<span class="token operator">-></span>labRgbVal<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"RGB(%1, %2, %3, %4)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>nRed<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>nGreen<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>nBlue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>nAlpha<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//时刻显示RGBa的具体值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/touwoyimuli/QtExamples">https://github.com/touwoyimuli/QtExamples</a> 【QtQSliderEx】</p>
<br>


]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>理解 C++ 中的头文件和源文件的作用</title>
    <url>/posts/5b0c8f0e/</url>
    <content><![CDATA[<p><strong>简介：</strong>  理解 <strong>C++</strong> 中的<strong>头文件</strong>和<strong>源文件</strong>的作用；一篇深度好文，值得多看看</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​		<strong>详情：</strong>  见简介</p>
<br>

<h2 id="一、C-编译模式："><a href="#一、C-编译模式：" class="headerlink" title="一、C++ 编译模式："></a>一、C++ 编译模式：</h2><p>通常，在一个 C++ 程序中，只包含两类文件—— .cpp 文件和 .h 文件。其中，.cpp 文件被称作 C++ 源文件，里面放的都是 C++ 的源代码；而 .h 文件则被称作 C++ 头文件，里面放的也是 C++ 的源代码。</p>
<p>C++ 语言支持”分别编译”（separatecompilation）。也就是说，一个程序所有的内容，可以分成不同的部分分别放在不同的 .cpp 文件里。.cpp 文件里的东西都是相对独立的，在编译（compile）时不需要与其他文件互通，只需要在编译成目标文件后再与其他的目标文件做一次链接（link）就行了。比如，在文件 a.cpp 中定义了一个全局函数 “void a(){}”，而在文件 b.cpp 中需要调用这个函数。即使这样，文件 a.cpp 和文件 b.cpp 并不需要相互知道对方的存在，而是可以分别地对它们进行编译，编译成目标文件之后再链接，整个程序就可以运行了。</p>
<p>这是怎么实现的呢？从写程序的角度来讲，很简单。在文件 b.cpp 中，在调用 “void a()” 函数之前，先声明一下这个函数 “voida();”，就可以了。这是因为编译器在编译 b.cpp 的时候会生成一个符号表（symbol table），像 “void a()” 这样的看不到定义的符号，就会被存放在这个表中。再进行链接的时候，编译器就会在别的目标文件中去寻找这个符号的定义。一旦找到了，程序也就可以顺利地生成了。</p>
<p>注意这里提到了两个概念，一个是”定义”，一个是”声明”。简单地说，”定义”就是把一个符号完完整整地描述出来：它是变量还是函数，返回什么类型，需要什么参数等等。而”声明”则只是声明这个符号的存在，即告诉编译器，这个符号是在其他文件中定义的，我这里先用着，你链接的时候再到别的地方去找找看它到底是什么吧。定义的时候要按 C++ 语法完整地定义一个符号（变量或者函数），而声明的时候就只需要写出这个符号的原型了。需要注意的是，一个符号，在整个程序中可以被声明多次，但却要且仅要被定义一次。试想，如果一个符号出现了两种不同的定义，编译器该听谁的？</p>
<p>这种机制给 C++ 程序员们带来了很多好处，同时也引出了一种编写程序的方法。考虑一下，如果有一个很常用的函数 “void f() {}”，在整个程序中的许多 .cpp 文件中都会被调用，那么，我们就只需要在一个文件中定义这个函数，而在其他的文件中声明这个函数就可以了。一个函数还好对付，声明起来也就一句话。但是，如果函数多了，比如是一大堆的数学函数，有好几百个，那怎么办？能保证每个程序员都可以完完全全地把所有函数的形式都准确地记下来并写出来吗？</p>
<br>

<h2 id="二、什么是头文件："><a href="#二、什么是头文件：" class="headerlink" title="二、什么是头文件："></a>二、什么是头文件：</h2><p>很显然，答案是不可能。但是有一个很简单地办法，可以帮助程序员们省去记住那么多函数原型的麻烦：我们可以把那几百个函数的声明语句全都先写好，放在一个文件里，等到程序员需要它们的时候，就把这些东西全部 copy 进他的源代码中。</p>
<p>这个方法固然可行，但还是太麻烦，而且还显得很笨拙。于是，头文件便可以发挥它的作用了。所谓的头文件，其实它的内容跟 .cpp 文件中的内容是一样的，都是 C++ 的源代码。但头文件不用被编译。我们把所有的函数声明全部放进一个头文件中，当某一个 .cpp 源文件需要它们时，它们就可以通过一个宏命令 “#include” 包含进这个 .cpp 文件中，从而把它们的内容合并到 .cpp 文件中去。当 .cpp 文件被编译时，这些被包含进去的 .h 文件的作用便发挥了。</p>
<p>举一个例子吧，假设所有的数学函数只有两个：f1 和 f2，那么我们把它们的定义放在 math.cpp 里：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* math.cpp */</span>
<span class="token keyword">double</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//do something here....</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">double</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//do something here...</span>
    <span class="token keyword">return</span> a <span class="token operator">*</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/* end of math.cpp */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>并把”这些”函数的声明放在一个头文件 math.h 中：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* math.h */</span>
<span class="token keyword">double</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* end of math.h */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>在另一个文件main.cpp中，我要调用这两个函数，那么就只需要把头文件包含进来：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* main.cpp */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"math.h"</span></span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> number1 <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> number2 <span class="token operator">=</span> <span class="token function">f2</span><span class="token punctuation">(</span>number1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/* end of main.cpp */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样，便是一个完整的程序了。需要注意的是，.h 文件不用写在编译器的命令之后，但它必须要在编译器找得到的地方（比如跟 main.cpp 在一个目录下）main.cpp 和 math.cpp 都可以分别通过编译，生成 main.o 和 math.o，然后再把这两个目标文件进行链接，程序就可以运行了。</p>
<br>

<h2 id="三、-include"><a href="#三、-include" class="headerlink" title="三、#include:"></a>三、#include:</h2><p><font color=#D0087E size=4 face="幼圆">#include 是一个来自 C 语言的宏命令，它在编译器进行编译之前，即在预编译的时候就会起作用。#include 的作用是把它后面所写的那个文件的内容，完完整整地、一字不改地包含到当前的文件中来</font>。值得一提的是，它本身是没有其它任何作用与副功能的，它的作用就是把每一个它出现的地方，替换成它后面所写的那个文件的内容。简单的文本替换，别无其他。因此，main.cpp 文件中的第一句（#include”math.h”），在编译之前就会被替换成 math.h 文件的内容。即在编译过程将要开始的时候，main.cpp 的内容已经发生了改变：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* ~main.cpp */</span>
<span class="token keyword">double</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> number1 <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> number2 <span class="token operator">=</span> <span class="token function">f2</span><span class="token punctuation">(</span>number1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/* end of ~main.cpp */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>不多不少，刚刚好。同理可知，如果我们除了 main.cpp 以外，还有其他的很多 .cpp 文件也用到了 f1 和 f2 函数的话，那么它们也通通只需要在使用这两个函数前写上一句 #include “math.h” 就行了。</p>
<br>

<h2 id="四、头文件中应该写什么"><a href="#四、头文件中应该写什么" class="headerlink" title="四、头文件中应该写什么:"></a>四、头文件中应该写什么:</h2><p>通过上面的讨论，我们可以了解到，<font color=#D0087E size=4 face="幼圆">头文件的作用就是被其他的 .cpp 包含进去的。它们本身并不参与编译，但实际上，它们的内容却在多个 .cpp 文件中得到了编译。</font>通过”定义只能有一次”的规则，我们很容易可以得出，头文件中应该只放变量和函数的声明，而不能放它们的定义。因为一个头文件的内容实际上是会被引入到多个不同的 .cpp 文件中的，并且它们都会被编译。放声明当然没事，如果放了定义，那么也就相当于在多个文件中出现了对于一个符号（变量或函数）的定义，纵然这些定义都是相同的，但对于编译器来说，这样做不合法。</p>
<p>所以，应该记住的一点就是，.h头文件中，只能存在变量或者函数的声明，而不要放定义。即，只能在头文件中写形如：<code>extern int a;</code> 和 <code>void f();</code> 的句子。这些才是声明。如果写上 <code>int a;</code>或者 <code>void f() &#123;&#125;</code> 这样的句子，那么一旦这个头文件被两个或两个以上的 .cpp 文件包含的话，编译器会立马报错。（关于 <code>extern</code>，前面有讨论过，这里不再讨论定义跟声明的区别了。）</p>
<p>但是，这个规则是有三个例外的:</p>
<ul>
<li><font color=#D0087E size=4 face="幼圆">一，<strong>头文件中可以写 const 对象的定义。因为全局的 const 对象默认是没有 extern 的声明的，所以它只在当前文件中有效。</strong></font>把这样的对象写进头文件中，即使它被包含到其他多个 .cpp 文件中，这个对象也都只在包含它的那个文件中有效，对其他文件来说是不可见的，所以便不会导致多重定义。同时，因为这些 .cpp 文件中的该对象都是从一个头文件中包含进去的，这样也就保证了这些 .cpp 文件中的这个 const 对象的值是相同的，可谓一举两得。<font color=#D0087E size=4 face="幼圆"><strong>同理，static 对象的定义也可以放进头文件。</strong></font></li>
<li>二，头文件中可以写内联函数（inline）的定义。因为inline函数是需要编译器在遇到它的地方根据它的定义把它内联展开的，而并非是普通函数那样可以先声明再链接的（内联函数不会链接），所以编译器就需要在编译时看到内联函数的完整定义才行。如果内联函数像普通函数一样只能定义一次的话，这事儿就难办了。因为在一个文件中还好，我可以把内联函数的定义写在最开始，这样可以保证后面使用的时候都可以见到定义；但是，如果我在其他的文件中还使用到了这个函数那怎么办呢？这几乎没什么太好的解决办法，因此 <strong>C++ 规定，内联函数可以在程序中定义多次，</strong>只要内联函数在一个 .cpp 文件中只出现一次，并且在所有的 .cpp 文件中，这个内联函数的定义是一样的，就能通过编译。那么显然，把内联函数的定义放进一个头文件中是非常明智的做法。</li>
<li>三，头文件中可以写类（class）的定义。因为在程序中创建一个类的对象时，编译器只有在这个类的定义完全可见的情况下，才能知道这个类的对象应该如何布局，所以，关于类的定义的要求，跟内联函数是基本一样的。所以把类的定义放进头文件，在使用到这个类的 .cpp 文件中去包含这个头文件，是一个很好的做法。在这里，值得一提的是，类的定义中包含着数据成员和函数成员。数据成员是要等到具体的对象被创建时才会被定义（分配空间），但函数成员却是需要在一开始就被定义的，这也就是我们通常所说的类的实现。一般，我们的做法是，把类的定义放在头文件中，而把函数成员的实现代码放在一个 .cpp 文件中。这是可以的，也是很好的办法。不过，还有另一种办法。那就是直接把函数成员的实现代码也写进类定义里面。<strong>在 C++ 的类中，如果函数成员在类的定义体中被定义，那么编译器会视这个函数为内联的。因此，把函数成员的定义写进类定义体，一起放进头文件中，是合法的。</strong>注意一下，<strong>如果把函数成员的定义写在类定义的头文件中，而没有写进类定义中，这是不合法的，因为这个函数成员此时就不是内联的了。一旦头文件被两个或两个以上的 .cpp 文件包含，这个函数成员就被重定义了。</strong></li>
</ul>
<br>

<h2 id="五、头文件中的保护措施"><a href="#五、头文件中的保护措施" class="headerlink" title="五、头文件中的保护措施:"></a>五、头文件中的保护措施:</h2><p>考虑一下，如果头文件中只包含声明语句的话，它被同一个 .cpp 文件包含再多次都没问题——因为声明语句的出现是不受限制的。然而，上面讨论到的头文件中的三个例外也是头文件很常用的一个用处。那么，一旦一个头文件中出现了上面三个例外中的任何一个，它再被一个 .cpp 包含多次的话，问题就大了。因为这三个例外中的语法元素虽然”可以定义在多个源文件中”，但是”在一个源文件中只能出现一次”。设想一下，如果 a.h 中含有类 A 的定义，b.h 中含有类 B 的定义，由于类B的定义依赖了类 A，所以 b.h 中也 #include了a.h。现在有一个源文件，它同时用到了类A和类B，于是程序员在这个源文件中既把 a.h 包含进来了，也把 b.h 包含进来了。这时，问题就来了：类A的定义在这个源文件中出现了两次！于是整个程序就不能通过编译了。你也许会认为这是程序员的失误——他应该知道 b.h 包含了 a.h ——但事实上他不应该知道。</p>
<p>使用 “#define” 配合条件编译可以很好地解决这个问题。在一个头文件中，通过 #define 定义一个名字，并且通过条件编译 #ifndef…#endif 使得编译器可以根据这个名字是否被定义，再决定要不要继续编译该头文中后续的内容。这个方法虽然简单，但是写头文件时一定记得写进去。</p>
<br>

<h2 id="C-头文件和源文件的区别"><a href="#C-头文件和源文件的区别" class="headerlink" title="C++ 头文件和源文件的区别:"></a>C++ 头文件和源文件的区别:</h2><h3 id="一、源文件如何根据-include-来关联头文件"><a href="#一、源文件如何根据-include-来关联头文件" class="headerlink" title="一、源文件如何根据 #include 来关联头文件"></a>一、源文件如何根据 #include 来关联头文件</h3><ul>
<li>1、系统自带的头文件用尖括号括起来，这样编译器会在系统文件目录下查找。</li>
<li>2、用户自定义的文件用双引号括起来，编译器首先会在用户目录下查找，然后在到 C++ 安装目录（比如 VC 中可以指定和修改库文件查找路径，Unix 和 Linux 中可以通过环境变量来设定）中查找，最后在系统文件中查找。</li>
</ul>
<p>#include “xxx.h”（我一直以为 “” 和 &lt;&gt; 没什么区别，但是 tinyxml.h 是非系统下的都文件，所以要用 “”）</p>
<h3 id="二、头文件如何来关联源文件"><a href="#二、头文件如何来关联源文件" class="headerlink" title="二、头文件如何来关联源文件"></a>二、头文件如何来关联源文件</h3><p>这个问题实际上是说，已知头文件 “a.h” 声明了一系列函数，”b.cpp” 中实现了这些函数，那么如果我想在 “c.cpp” 中使用 “a.h” 中声明的这些在 “b.cpp”中实现的函数，通常都是在 “c.cpp” 中使用 #include “a.h”，那么 c.cpp 是怎样找到 b.cpp 中的实现呢？</p>
<p><font color=#D0087E size=4 face="幼圆">其实 .cpp 和 .h 文件名称没有任何直接关系，很多编译器都可以接受其他扩展名。比如偶现在看到偶们公司的源代码，.cpp 文件由 .cc 文件替代了。</font></p>
<p>在 Turbo C 中，采用命令行方式进行编译，命令行参数为文件的名称，默认的是 .cpp 和 .h，但是也可以自定义为 .xxx 等等。</p>
<p>谭浩强老师的《C 程序设计》一书中提到，编译器预处理时，要对 #include 命令进行”文件包含处理”：将 file2.c 的全部内容复制到 #include “file2.c” 处。这也正说明了，为什么<font color=#D0087E size=4 face="幼圆">很多编译器并不 care 到底这个文件的后缀名是什么—-因为 #include 预处理就是完成了一个”复制并插入代码”的工作。</font></p>
<p><strong>编译的时候，并不会去找 b.cpp 文件中的函数实现，只有在 link 的时候才进行这个工作</strong>。我们在 b.cpp 或 c.cpp 中用 #include “a.h” 实际上是引入相关声明，使得编译可以通过，程序并不关心实现是在哪里，是怎么实现的。源文件编译后成生了目标文件（.o 或 .obj 文件），目标文件中，这些函数和变量就视作一个个符号。在 link 的时候，需要在 makefile 里面说明需要连接哪个 .o 或 .obj 文件（在这里是 b.cpp 生成的 .o 或 .obj 文件），此时，连接器会去这个 .o 或 .obj 文件中找在 b.cpp 中实现的函数，再把他们 build 到 makefile 中指定的那个可以执行文件中。</p>
<p>在 Unix下，甚至可以不在源文件中包括头文件，只需要在 makefile 中指名即可（不过这样大大降低了程序可读性，是个不好的习惯哦^_^）。在 VC 中，一帮情况下不需要自己写 makefile，只需要将需要的文件都包括在 project中，VC 会自动帮你把 makefile 写好。</p>
<p>通常，C++ 编译器会在每个 .o 或 .obj 文件中都去找一下所需要的符号，而不是只在某个文件中找或者说找到一个就不找了。因此，如果在几个不同文件中实现了同一个函数，或者定义了同一个全局变量，链接的时候就会提示 “redefined”。</p>
<h3 id="综上所诉"><a href="#综上所诉" class="headerlink" title="综上所诉:"></a>综上所诉:</h3><p><strong>.h文件中能包含：</strong></p>
<ul>
<li>类成员数据的声明，但不能赋值</li>
<li>类静态数据成员的定义和赋值，但不建议，只是个声明就好。</li>
<li>类的成员函数的声明</li>
<li>非类成员函数的声明</li>
<li>常数的定义：如：constint a&#x3D;5;</li>
<li>静态函数的定义</li>
<li>类的内联函数的定义</li>
</ul>
<p><strong>不能包含：</strong></p>
<ul>
<li>1． 所有非静态变量（不是类的数据成员）的声明</li>
<li>2。 默认命名空间声明不要放在头文件，using namespace std;等应放在.cpp中，在 .h 文件中使用 std::string</li>
</ul>
<br>

<p><strong>转载原文：</strong><a href="https://www.runoob.com/w3cnote/cpp-header.html">理解 C++ 中的头文件和源文件的作用</a></p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序一 技法</category>
        <category>学习 - 底层兼架构</category>
      </categories>
      <tags>
        <tag>原理</tag>
      </tags>
  </entry>
  <entry>
    <title>由于找不到VCRUNTIME140D.dll，无法继续执行代码</title>
    <url>/posts/bcdc71c/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　记录一个新建空项目，在MSVC2017 中， <strong>Debug编译成功，运行失败；但 Release编译和运行均成功</strong> 的场景解决；毕竟不能够调试很痛苦。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>　　</p>
<p>　　初，写的 CMake 项目转换为 VS 2017 解决方案，打开 .sln 后，**在 Debug 模式下编译成功，运行失败且报错；但 Release 下编译和运行成功。困惑一月有余。 **💻 为  <code>win10 21H1</code>  📎  <code>Visual Studio 2017</code> </p>
<p>​		昨，忽然想在 VS 2017 创建一个空的 C++ 程序，发现同样情况。那就是 VS 的锅了。坑坑坑！！！</p>
<br>

<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>  　　在 debug 编译成功后，运行失败则会报错如下：<code>由于找不到 VCRUNTIME140D.dll，无法继续执行代码。重新安装程序可能会解决此问题。</code></p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2022/Snipaste_2022-01-07_00-49-14.png" width="50%"/ loading="lazy">

<br>

<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>依次尝试过以下解决方案，<font color=#FF0000>最终是第二步和第三步解决的。</font></p>
<ul>
<li><p>下载 <code>VCRUNTIME140D.dll</code> 拷贝到 <code>C:\Windows\System32</code> 、 <code>C:\Windows\SysWOW64</code> 后，虽然不再报此错，但是报其他错，且无有效提示信息。 遂删除拷贝的 .dll 作罢。</p>
</li>
<li><p>尝试网上最多解决教程为下载 <a href="https://www.microsoft.com/en-US/download/details.aspx?id=48145">Visual C++ Redistributable for Visual Studio 2015</a>，<strong>当 x86 和 x64 都安装</strong> 后，依旧无效；再后来想到难道是支持到 VS 2015，而我是 VS 2017，遂卸载旧的，下载更新的版本重新安装，依旧无效。事后在暴雨中哭泣。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2022/20220109181257.png" width="100%"/ loading="lazy">

<br>

<p>PS：Redistributable 实际是支持到 2015-2019 的，理论是完全没问题的。后来还是改为下载一个更新的 2015-2022 都支持的</p>
<ul>
<li><a href="https://www.microsoft.com/zh-CN/download/details.aspx?id=48145">Visual C++ Redistributable for Visual Studio 2015</a>：Microsoft Visual C++ 2015-2019 Redistributable </li>
<li><a href="https://docs.microsoft.com/zh-cn/cpp/windows/latest-supported-vc-redist?view=msvc-170"> Redistributable 2015-2022</a>：Microsoft Visual C++ 2015-2022 Redistributable</li>
</ul>
</li>
<li><p>控制面板打开 <code>Visual Studio Installer</code> 右键修复；选择修改，在界面默认只选择 “使用 C++ 的桌面开发” 和 “使用 C++ 的 Linux 开发” 的两个默认的勾，不额外勾选其它，一切皆默认即可。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2022/20220109180600.png" width="80%"/ loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2022/20220109180643.png" width="80%"/ loading="lazy">

<br>

<p>点击右下 “关闭” 后返回上一层，在 “更多-修复-确定” 等待重置环境即可。当成功之后，重启电脑，发现此问题被解决。</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2022/20220109181000.png" width="70%"/ loading="lazy">

<br>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　这会事后，搜了下会存放的路径，放一个运行没问题的环境图提供后来者对照参考。<strong>当基本确定是 MSVC 的环境问题后，试试 VS 的修复重新安装。或许会有惊喜，可能是一个很挫但是有效的方案。</strong></p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2022/20220109182316.png" width="100%"/ loading="lazy">



<p>　　</p>
]]></content>
      <categories>
        <category>学习 - Windows</category>
      </categories>
      <tags>
        <tag>Visual Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>目录树组件QTreeWidget和停靠区域组件QDockWidget的用法</title>
    <url>/posts/9e077eb6/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  目录树组件<code>QTreeWidget</code>和停靠区域组件<code>QDockWidget</code>的和<code>QScrollArea</code>用法；然后写的一个小的相册查看器例子</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-08_18-38-19_mark.png"/ loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="QTreeWidget组件："><a href="#QTreeWidget组件：" class="headerlink" title="QTreeWidget组件："></a>QTreeWidget组件：</h2><p><code>QTreeWidget</code>是 <strong>目录树组件</strong> 控件，用来创建和管理树形结构的类的</p>
<br>

<h2 id="QDockWidget组件："><a href="#QDockWidget组件：" class="headerlink" title="QDockWidget组件："></a>QDockWidget组件：</h2><p><code>QDockWidget</code>是可以在<code>QMainWindow</code>窗口停靠，或者在桌面最上层浮动的界面组件；在本文里面的例子里面，将<code>QTreeWidget</code>控件存放在<code>QDockWidget</code>上面，设置其可以在主窗口的左或右侧，也是可以浮动的，还可以浮动；还可以设置其为隐藏&#x2F;显示不显示窗体的效果</p>
<h3 id="allowedAreas属性，设置允许停靠区域"><a href="#allowedAreas属性，设置允许停靠区域" class="headerlink" title="allowedAreas属性，设置允许停靠区域"></a><strong>allowedAreas</strong>属性，设置允许停靠区域</h3><p>使用setAllowedAreas()设置允许停靠区域（上下左右的区域）</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-08_21-58-56_mark.png"/ loading="lazy">



<h3 id="feat属性，设置停靠区组件的特性"><a href="#feat属性，设置停靠区组件的特性" class="headerlink" title="feat属性，设置停靠区组件的特性"></a><strong>feat</strong>属性，设置停靠区组件的特性</h3><p>由<code>setFeatures()</code>函数来设置停靠区域组件的特性，其参数是如下的枚举类型的组合值的使用</p>
<table>
<thead>
<tr>
<th>Constant</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>QDockWidget::DockWidgetClosable</td>
<td>停靠区域可关闭</td>
</tr>
<tr>
<td>QDockWidget::DockWidgetMovable</td>
<td>停靠区域可移动</td>
</tr>
<tr>
<td>QDockWidget::DockWidgetFloatable</td>
<td>停靠区域可浮动</td>
</tr>
<tr>
<td>QDockWidget::DockWidgetVerticalTitleBar</td>
<td>在停靠区域左侧显示垂直标题栏</td>
</tr>
<tr>
<td>QDockWidget::AllDockWidgetFeatures</td>
<td>使用以上所有特征</td>
</tr>
<tr>
<td>QDockWidget::NoDockWidgetFeatures</td>
<td>不能停靠，移动和关闭</td>
</tr>
</tbody></table>
<br>

<h2 id="QScrollArea组件："><a href="#QScrollArea组件：" class="headerlink" title="QScrollArea组件："></a>QScrollArea组件：</h2><p><code>QScrollArea</code>是一个<strong>自动滚区域组件</strong>的控件，可以用来实现有比较长的显示内容。</p>
<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>这种<code>gif</code>录制了一下午（N多次，就是没有特别满意，要么太大要么不清晰），但是<code>gif</code>好像录制的并不算太好，录制这张图，但是总是体积太大或者不清晰，在<code>mac</code>上面暂时没有找到比较好的录制和压缩<strong>gif</strong>的软件来代替<code>win10</code>上面的(<strong>ScreenGif</strong>  + <strong>FSREsizer</strong> + <strong>FSCapture</strong>)这三个软件，有合适的话，可以知道的可以留言推荐一下，合适和录gif工具也在尝试中；</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/2019-12-08-17.27.31.gif"/ loading="lazy">

<br>

<h2 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h2><p><strong>编程环境：</strong>  <code>MacOS 10.14.6 (18G103)</code>   <strong>编程软件：</strong> <code>Qt 5.9.8</code>， <code>Qt Creator 4.8.2</code>;</p>
<p>在**.h**头文件里面，实现非部分代码：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXQTREEWIDGET_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXQTREEWIDGET_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMainWindow></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QLabel></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QTreeWidgetItem></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QFileDialog></span></span>

<span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span>
<span class="token keyword">class</span> <span class="token class-name">ExQTreeWidget</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">ExQTreeWidget</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span>
<span class="token punctuation">&#123;</span>
    Q_OBJECT

<span class="token keyword">public</span><span class="token operator">:</span>

    <span class="token keyword">enum</span> <span class="token class-name">treeItemType</span> <span class="token punctuation">&#123;</span>         <span class="token comment">//枚举，节点类型</span>
        itemRoot<span class="token punctuation">,</span>
        itemFile<span class="token punctuation">,</span>
        itemImage
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">enum</span> <span class="token class-name">treeColNum</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//目录树列表的编号</span>
        colItem <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        colItemType <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">explicit</span> <span class="token function">ExQTreeWidget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">ExQTreeWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">initTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token comment">//初始化根节点（唯一）</span>
    <span class="token keyword">void</span> <span class="token function">addFolderItem</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>parItem<span class="token punctuation">,</span> QString dirName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//添加目录</span>
    <span class="token keyword">void</span> <span class="token function">addImageItem</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>parItem<span class="token punctuation">,</span> QString fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//添加图片文件</span>
    QString <span class="token function">getFinalFolderName</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>pathName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//从完整的路径里面，获取最后的文件夹名称</span>
    <span class="token keyword">void</span> <span class="token function">changeItemCaption</span><span class="token punctuation">(</span>QTreeWidgetItem<span class="token operator">*</span> parItem<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//遍历item下面的所有节点</span>
    <span class="token keyword">void</span> <span class="token function">displayImage</span><span class="token punctuation">(</span>QTreeWidgetItem<span class="token operator">*</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//显示当前item的图片（默认以适配高度）</span>

<span class="token keyword">private</span> slots<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">on_actAddFolder_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">//增加文件夹</span>
    <span class="token keyword">void</span> <span class="token function">on_actAddFile_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment">//添加图片文件</span>
    <span class="token keyword">void</span> <span class="token function">on_actDeleFile_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">//删除节点</span>
    <span class="token keyword">void</span> <span class="token function">on_actScanItems_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">//遍历所有的顶层节点(本处只有一个root顶层节点)</span>
    <span class="token keyword">void</span> <span class="token function">on_actAdaptiveHeight_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//图片自动适应高度</span>
    <span class="token keyword">void</span> <span class="token function">on_actAdaptiveWidth_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">//图片自动适应宽度</span>
    <span class="token keyword">void</span> <span class="token function">on_actAmplification_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">//放大</span>
    <span class="token keyword">void</span> <span class="token function">on_actShrink_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment">//缩小</span>
    <span class="token keyword">void</span> <span class="token function">on_actZoomRealSize_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">//还原</span>
    <span class="token keyword">void</span> <span class="token function">on_actDockFloating_triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span> check<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//设置Dock窗口是否浮动</span>
    <span class="token keyword">void</span> <span class="token function">on_actDockVisible_triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//设置Dock窗口是否隐藏不显示</span>
    <span class="token keyword">void</span> <span class="token function">on_actQiut_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment">//退出</span>
    <span class="token keyword">void</span> <span class="token function">on_treeFiles_currentItemChanged</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>current<span class="token punctuation">,</span> QTreeWidgetItem <span class="token operator">*</span>previous<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//当前节点变化的时候，自动加载当前图片</span>
    <span class="token keyword">void</span> <span class="token function">on_dockWidget_visibilityChanged</span><span class="token punctuation">(</span><span class="token keyword">bool</span> visible<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//单击DockWidget组件的标题栏的关闭按钮时候，会隐藏在停靠区域，并且发射信号visibilityChanged;  停靠区域可见性变化</span>
    <span class="token keyword">void</span> <span class="token function">on_dockWidget_topLevelChanged</span><span class="token punctuation">(</span><span class="token keyword">bool</span> topLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//当拖动DockWidget组件，使其浮动或者停靠时候，会发射信号topLevelChanged;  更新其Action的状态</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    Ui<span class="token double-colon punctuation">::</span>ExQTreeWidget <span class="token operator">*</span>ui<span class="token punctuation">;</span>

    QLabel <span class="token operator">*</span>m_labFlie<span class="token punctuation">;</span>      <span class="token comment">//状态栏显示当前文件路径</span>
    QPixmap m_curPixmap<span class="token punctuation">;</span>    <span class="token comment">//显示当前文件图片</span>
    <span class="token keyword">float</span>   m_ratio<span class="token punctuation">;</span>        <span class="token comment">//图片缩放比例</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXQTREEWIDGET_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对应的**.cpp**文件：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExQTreeWidget.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExQTreeWidget.h"</span></span>

<span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">ExQTreeWidget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>
    <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token double-colon punctuation">::</span>ExQTreeWidget<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"QTreeWidget和QDockWidget的讲解和使用"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">setCentralWidget</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>scrollArea<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//设置scrollArea为中心控件</span>
    <span class="token function">initTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_labFlie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"当前文件的路径:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labFlie<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">ExQTreeWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="token comment">//初始化根节点（只能够有唯一）</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">initTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//准备工作</span>
    ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString dataStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    QIcon icon<span class="token punctuation">;</span>
    icon<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/image/Image001.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//创建唯一root的节点</span>
    QTreeWidgetItem<span class="token operator">*</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>treeItemType<span class="token double-colon punctuation">::</span>itemRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token operator">-></span><span class="token function">setIcon</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> icon<span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"相簿"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItemType<span class="token punctuation">,</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"treeItemType"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsAutoTristate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token operator">-></span><span class="token function">setData</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>UserRole<span class="token punctuation">,</span> <span class="token function">QVariant</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//添加顶层节点</span>
    ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">addTopLevelItem</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//添加目录节点</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">addFolderItem</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>parItem<span class="token punctuation">,</span> QString dirName<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QIcon icon<span class="token punctuation">;</span>
    icon<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/image/Image006.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//添加一个新的节点</span>
    QTreeWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>treeItemType<span class="token double-colon punctuation">::</span>itemFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString folderName <span class="token operator">=</span> <span class="token function">getFinalFolderName</span><span class="token punctuation">(</span>dirName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setIcon</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> icon<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> folderName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItemType<span class="token punctuation">,</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"treeItemType"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsAutoTristate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setData</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>UserRole<span class="token punctuation">,</span> <span class="token function">QVariant</span><span class="token punctuation">(</span>dirName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//添加子节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parItem<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> treeItemType<span class="token double-colon punctuation">::</span>itemFile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">//若是文件节点</span>
        parItem<span class="token operator">-></span><span class="token function">addChild</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parItem<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> treeItemType<span class="token double-colon punctuation">::</span>itemRoot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//若是唯一root节点</span>
        QTreeWidgetItem <span class="token operator">*</span>root <span class="token operator">=</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">topLevelItem</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        root<span class="token operator">-></span><span class="token function">addChild</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//添加图片节点</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">addImageItem</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>parItem<span class="token punctuation">,</span> QString fileName<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parItem <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    QIcon icon<span class="token punctuation">;</span>
    icon<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/image/Image014.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//添加一个新的节点</span>
    QTreeWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>treeItemType<span class="token double-colon punctuation">::</span>itemImage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString folderName <span class="token operator">=</span> <span class="token function">getFinalFolderName</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setIcon</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> icon<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> folderName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItemType<span class="token punctuation">,</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"treeItemType"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token double-colon punctuation">::</span>ItemIsAutoTristate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">setData</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>UserRole<span class="token punctuation">,</span> <span class="token function">QVariant</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//添加子节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parItem<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> treeItemType<span class="token double-colon punctuation">::</span>itemFile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">//若是文件节点</span>
        parItem<span class="token operator">-></span><span class="token function">addChild</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parItem<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> treeItemType<span class="token double-colon punctuation">::</span>itemRoot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//若是唯一root节点</span>
        QTreeWidgetItem <span class="token operator">*</span>root <span class="token operator">=</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">topLevelItem</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        root<span class="token operator">-></span><span class="token function">addChild</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//从完整的路径里面，获取最后的文件夹名称</span>
QString <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">getFinalFolderName</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>pathName<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString path <span class="token operator">=</span> pathName<span class="token punctuation">;</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> pathName<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> pathName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString str <span class="token operator">=</span> pathName<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span>cnt <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> str<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//遍历传进来的父节点下的所有子节点；每遍历过该节点，就在其节点的信息加一个#</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">changeItemCaption</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>parItem<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString str <span class="token operator">=</span> <span class="token string">"# "</span> <span class="token operator">+</span> parItem<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    parItem<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>parItem<span class="token operator">-></span><span class="token function">childCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parItem<span class="token operator">-></span><span class="token function">childCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">changeItemCaption</span><span class="token punctuation">(</span>parItem<span class="token operator">-></span><span class="token function">child</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//回调，调用自己</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//显示当前item的图片（默认以适配高度）</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">displayImage</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>item<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString fileName <span class="token operator">=</span> item<span class="token operator">-></span><span class="token function">data</span><span class="token punctuation">(</span>treeColNum<span class="token double-colon punctuation">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token double-colon punctuation">::</span>UserRole<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_labFlie<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_curPixmap<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token comment">//从文件载入图片</span>
    <span class="token function">on_actAdaptiveHeight_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">//自动适应高度显示</span>

    ui<span class="token operator">-></span>actAmplification<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>actShrink<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>actZoomRealSize<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>actAdaptiveHeight<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>actAdaptiveWidth<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="token comment">//增加文件夹</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actAddFolder_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString path <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getExistingDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//选择目录</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> path<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        QTreeWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">currentItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//获取当前节点</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>
            <span class="token function">addFolderItem</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//添加图片</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actAddFile_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QStringList list <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getOpenFileNames</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择多个将要加载的图片"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"Images(*.jpg, *.png, *.*)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//选择目录</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        QTreeWidgetItem<span class="token operator">*</span> parItem <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        QTreeWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">currentItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//获取当前节点</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> treeItemType<span class="token double-colon punctuation">::</span>itemImage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">//获得父节点</span>
            parItem <span class="token operator">=</span> item<span class="token operator">-></span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            parItem <span class="token operator">=</span> item<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            QString strName <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//获得文件名称</span>
            <span class="token function">addImageItem</span><span class="token punctuation">(</span>parItem<span class="token punctuation">,</span> strName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//添加图片文件到文件节点</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//删除节点</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actDeleFile_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QTreeWidgetItem<span class="token operator">*</span> parItem <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    QTreeWidgetItem<span class="token operator">*</span> currItem <span class="token operator">=</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">currentItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>currItem<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> treeItemType<span class="token double-colon punctuation">::</span>itemRoot<span class="token punctuation">)</span>
        parItem <span class="token operator">=</span> currItem<span class="token operator">-></span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment">//只能够由其父节点删除</span>
<span class="token comment">//    else</span>
<span class="token comment">//        ui->treeFiles->takeTopLevelItem(0);                      //删除顶层节点使用这个</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>currItem <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> parItem <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    parItem<span class="token operator">-></span><span class="token function">removeChild</span><span class="token punctuation">(</span>currItem<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">//移除没有从内存中删除，所以delete删除</span>
    <span class="token keyword">delete</span> currItem<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//遍历所有的顶层节点(本处只有一个root顶层节点)</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actScanItems_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">topLevelItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        QTreeWidgetItem<span class="token operator">*</span> currItem <span class="token operator">=</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">topLevelItem</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//顶层item</span>
        <span class="token function">changeItemCaption</span><span class="token punctuation">(</span>currItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//图片自动适应高度</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actAdaptiveHeight_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> height <span class="token operator">=</span> ui<span class="token operator">-></span>scrollArea<span class="token operator">-></span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//得到scrollArea的高度</span>
    <span class="token keyword">int</span> realHeight <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//原始图片的实际高度</span>
    m_ratio <span class="token operator">=</span> height <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> realHeight<span class="token punctuation">;</span>                          <span class="token comment">//当前显示比例，必须转换为浮点数</span>

    QPixmap pixmap <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">scaledToHeight</span><span class="token punctuation">(</span>height <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//图片缩放到指定高度</span>
    ui<span class="token operator">-></span>labDisplay<span class="token operator">-></span><span class="token function">setPixmap</span><span class="token punctuation">(</span>pixmap<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">//设置Label的PixMap</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//图片自动适应宽度</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actAdaptiveWidth_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> width <span class="token operator">=</span> ui<span class="token operator">-></span>scrollArea<span class="token operator">-></span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> realWidth <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_ratio <span class="token operator">=</span> width <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> realWidth<span class="token punctuation">;</span>

    QPixmap pixmap <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">scaledToHeight</span><span class="token punctuation">(</span>width <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>labDisplay<span class="token operator">-></span><span class="token function">setPixmap</span><span class="token punctuation">(</span>pixmap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//当前节点变化的时候，自动加载当前图片</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_treeFiles_currentItemChanged</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>current<span class="token punctuation">,</span> QTreeWidgetItem <span class="token operator">*</span>previous<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> previous <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">displayImage</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//放大</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actAmplification_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_ratio <span class="token operator">*=</span> <span class="token number">1.2</span><span class="token punctuation">;</span>                                             <span class="token comment">//在当前比例基础上乘以0.8</span>
    <span class="token keyword">int</span> height <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> m_ratio<span class="token punctuation">;</span>                <span class="token comment">// 显示宽度</span>
    <span class="token keyword">int</span> widht <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> m_ratio<span class="token punctuation">;</span>                  <span class="token comment">// 显示宽度</span>

    QPixmap pix <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">scaled</span><span class="token punctuation">(</span>widht<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//图片缩放到指定高度和宽度，保持长宽比例</span>
    ui<span class="token operator">-></span>labDisplay<span class="token operator">-></span><span class="token function">setPixmap</span><span class="token punctuation">(</span>pix<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//缩小</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actShrink_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_ratio <span class="token operator">*=</span> <span class="token number">0.8</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> height <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> m_ratio<span class="token punctuation">;</span>
    <span class="token keyword">int</span> widht <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> m_ratio<span class="token punctuation">;</span>

    QPixmap pix <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">scaled</span><span class="token punctuation">(</span>widht<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>labDisplay<span class="token operator">-></span><span class="token function">setPixmap</span><span class="token punctuation">(</span>pix<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//还原</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actZoomRealSize_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_ratio <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> height <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> widht <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    QPixmap pix <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">scaled</span><span class="token punctuation">(</span>widht<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ui<span class="token operator">-></span>labDisplay<span class="token operator">-></span><span class="token function">setPixmap</span><span class="token punctuation">(</span>pix<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//设置Dock窗口是否浮动</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actDockFloating_triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span> check<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>dockWidget<span class="token operator">-></span><span class="token function">setFloating</span><span class="token punctuation">(</span>check<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//设置Dock窗口是否隐藏不显示</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actDockVisible_triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>dockWidget<span class="token operator">-></span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token operator">!</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//退出</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_actQiut_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//单击DockWidget组件的标题栏的关闭按钮时候，会隐藏在停靠区域，并且发射信号visibilityChanged;  停靠区域可见性变化</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_dockWidget_visibilityChanged</span><span class="token punctuation">(</span><span class="token keyword">bool</span> visible<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>actDockVisible<span class="token operator">-></span><span class="token function">setChecked</span><span class="token punctuation">(</span>visible<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//当拖动DockWidget组件，使其浮动或者停靠时候，会发射信号topLevelChanged;  更新其Action的状态</span>
<span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token double-colon punctuation">::</span><span class="token function">on_dockWidget_topLevelChanged</span><span class="token punctuation">(</span><span class="token keyword">bool</span> topLevel<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span>actDockFloating<span class="token operator">-></span><span class="token function">setChecked</span><span class="token punctuation">(</span>topLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a>【QtQTreeWidgetEx】</p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>眠` 忆卿</title>
    <url>/posts/231ad227/</url>
    <content><![CDATA[<span id="more"></span>

<center>
    <div class="heti heti--poetry">
        <h3>眠`   忆卿
            <br>
            <span class="heti-meta heti-small">[今]
                <abbr title="https://github.com/XMuli">偕臧</abbr></span>
        </h2>
        <br>
        <p class="heti-verse heti-x-large">睡前依未眠，思绪乱飞
            <span class="heti-hang">。</span>
            <br>忽忆起你貌，唇笑甚甜
            <span class="heti-hang">。</span>
            <br>走马花灯起，相识几载
            <span class="heti-hang">。</span>
            <br>欣欣然偕游，友摄你我
            <span class="heti-hang">。</span>
            <br>班忙有偷闲，两地互往
            <span class="heti-hang">。</span>
            <br>挽手共赏景，吃喝同乐
            <span class="heti-hang">。</span>
            <br>夜深窃私语，互倾思念
            <span class="heti-hang">。</span>
            <br>互送车站离，许些牵挂
            <span class="heti-hang">。</span>
            <br>一瞬过数载，皆多愉悦
            <span class="heti-hang">。</span>
            <br>偶愤不言我，我亦不悦
            <span class="heti-hang">。</span>
            <br>吾心常牵挂，愿倾听之
            <span class="heti-hang">。</span>
            <br>或一时无解，与卿分忧
            <span class="heti-hang">。</span>
            <br>眼落几滴泪，湿了枕席
            <span class="heti-hang">。</span>
            <br>然非感苦楚，皆为甜忆
            <span class="heti-hang">。</span>
            <br>感邂逅相遇，与子偕臧
            <span class="heti-hang">。</span>
            <br>愿携手余生，请多指教
            <span class="heti-hang">。</span>
            <br>悲情一声叹，一觉梦醒
            <span class="heti-hang">。</span>
            <br></p>
    </div>
</center>
<br>

<br>

<div align=center>
    <img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202205031537136.jpg" width="35%"/ loading="lazy">
</div>



<br>

<blockquote>
<p>二零二二，一月，于帝都</p>
</blockquote>
<br>
]]></content>
      <categories>
        <category>生活 - 闲暇的趣闻</category>
      </categories>
      <tags>
        <tag>人间烟火</tag>
      </tags>
  </entry>
  <entry>
    <title>短时间如何清晰阐述你的需求、观点和目的?</title>
    <url>/posts/ac78579e/</url>
    <content><![CDATA[<p>　　<strong>简  述：</strong>　遇到 “茶壶里面煮饺子” 就不是一件开心的事情了；<strong>虽然说，敲代码专心享受的一件快乐的事情，但是与人沟通交流更加重要，经常遇到需要在很短的时间里面，将自己的想法和观点清晰的告诉 她&#x2F;他 人。</strong> </p>
<p>今年过年那一周，付费去专门学习了一下基本的沟通交流，有所改善。觉着很是有效，后整理为笔记，与诸君共享。关于 <font color=#FF0000  size=4 face="幼圆"><strong>高效表达 &#x3D; 定主题 + 搭架子 + 填素材</strong> </font></p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

 <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200420_234913.png" width="100%"/ loading="lazy">

<br>

<h3 id="1-定主题，明目的，让人秒懂你的想法"><a href="#1-定主题，明目的，让人秒懂你的想法" class="headerlink" title="1.定主题，明目的，让人秒懂你的想法"></a>1.定主题，明目的，让人秒懂你的想法</h3><ul>
<li><p><strong>首句添加一个工作核心的重点围绕</strong></p>
</li>
<li><ol>
<li>什么是正真的的主题？</li>
</ol>
<ul>
<li>让老板知道我来是干嘛的</li>
</ul>
</li>
<li><ol start="2">
<li>如何明确的表达目的?</li>
</ol>
<ul>
<li>将要汇报的对象是谁（站在对方的角度思考，他所关心的是什么？具有针对性）</li>
<li>谁在听我说话？我想达成的效果是？</li>
</ul>
</li>
</ul>
<br>

<h3 id="2-3-种经典框架，快速整理表达思路"><a href="#2-3-种经典框架，快速整理表达思路" class="headerlink" title="2. 3 种经典框架，快速整理表达思路"></a>2. 3 种经典框架，快速整理表达思路</h3><ul>
<li><ol>
<li>时间轴结构</li>
</ol>
<ul>
<li>首先-然后-最后（项目的发生顺序）</li>
<li>压力环境下，思路没有打开的时候使用</li>
</ul>
</li>
<li><ol start="2">
<li>解决问题结构</li>
</ol>
<ul>
<li>问题</li>
<li>原因</li>
<li><strong>解决方案</strong></li>
</ul>
</li>
<li><ol start="3">
<li>FAB 结构 <strong>(属性-优势-利益)</strong></li>
</ol>
<ul>
<li>基本情况 + 过人之处 + 可提供的帮助</li>
<li>要<strong>清楚听众</strong>是谁</li>
</ul>
</li>
</ul>
<br>

<h3 id="3-2-种素材，让你发言更具有说服力"><a href="#3-2-种素材，让你发言更具有说服力" class="headerlink" title="3. 2 种素材，让你发言更具有说服力"></a>3. 2 种素材，让你发言更具有说服力</h3><ul>
<li><strong>数据</strong> (数据本生没有意义，我才是意义的缔造者)<ul>
<li>数据要筛选 （对取有利于目的而言）</li>
<li>数据要解释 （数据换算，有冲击力）</li>
</ul>
</li>
<li><strong>故事</strong><ul>
<li><strong>冲突</strong></li>
<li>行动</li>
<li>结局</li>
</ul>
</li>
</ul>
<br>

<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="4-临时汇报，让你的发言更具有说服力？"><a href="#4-临时汇报，让你的发言更具有说服力？" class="headerlink" title="4. 临时汇报，让你的发言更具有说服力？"></a>4. 临时汇报，让你的发言更具有说服力？</h4><ul>
<li><strong>汇报进度</strong> （也是工作职责之一）<ul>
<li>得让老板具有掌控感，不能像等外卖一样感到焦虑（关键节点，也可主动出击谈谈，让其看到自己积极的一面）</li>
</ul>
</li>
<li><strong>汇报成果</strong> （高光时刻）<ul>
<li><strong>使用关键数据和故事（可加图表）</strong></li>
<li>对无能的细节不感兴趣</li>
</ul>
</li>
<li><strong>汇报困难</strong> （职场非学校，老板不是老师，我也不是被考评的学生）<ul>
<li><strong>问题 - 原因 - 解决方案选项 - 利弊分析</strong></li>
<li>千万不要带着问题汇报，正确的方式是带着解决方案去汇报</li>
</ul>
</li>
<li>你得随时关注老板的反应，并且及时调整汇报节奏（不耐烦就赶紧说结论重点）</li>
<li>关注老板的风格，有利于更高效的沟通 (简单直接。关注结果，细致认真，关注细节）</li>
<li>汇报是影响老板的机会，而非应付老板的差事</li>
</ul>
<br>

<h4 id="5-回应质疑：遭遇突然提问，怎么回答才能滴水不漏？"><a href="#5-回应质疑：遭遇突然提问，怎么回答才能滴水不漏？" class="headerlink" title="5. 回应质疑：遭遇突然提问，怎么回答才能滴水不漏？"></a>5. 回应质疑：遭遇突然提问，怎么回答才能滴水不漏？</h4><ul>
<li><strong>认可对方的提问</strong><ul>
<li><strong>认可提问者</strong> (最常见)</li>
<li>认可事实</li>
<li>认可感受</li>
</ul>
</li>
<li><strong>澄清对方的问题</strong> （进一步确认对方的问题）<ul>
<li>你能重复一遍吗？或者更确定吗？</li>
<li>能否举个例？具体说明一下问题？</li>
</ul>
</li>
<li>确保对方得到尊重 + 进一步确认问题 + 赢得思考时间，提升回答质量</li>
</ul>
<br>

<h4 id="6、会议发言：跨团队沟通，怎么让对方接受我的方案？"><a href="#6、会议发言：跨团队沟通，怎么让对方接受我的方案？" class="headerlink" title="6、会议发言：跨团队沟通，怎么让对方接受我的方案？"></a>6、会议发言：跨团队沟通，怎么让对方接受我的方案？</h4><ul>
<li>提前和“刺头”沟通，进行推进，再开会</li>
<li><strong>原因</strong><ul>
<li>各部门的优先级不一样</li>
<li>各方的理解存在偏差</li>
<li>（填表格在数据部和销售部，重要性不一样，后者业绩和时间更重要）</li>
</ul>
</li>
<li><strong>解决</strong><ul>
<li>解决问题结构 （换起对方的关注） + 属性优势利益 （需要做出什么）</li>
<li><strong>「认可」+ 为什么 + 做什么 + 有什么好处 + 马上行动</strong>（容易的部分先让团队进入状态，也称临门一脚）</li>
<li>原则：谁痛谁负责，谁痛谁解决（他人没有足够的动力）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>生活 - 闲暇的趣闻</category>
      </categories>
  </entry>
  <entry>
    <title>第一次开车车</title>
    <url>/posts/cfc539c3/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　第一次开车车上路</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p>​		年前拿到了拖延了三年多的驾照，最近有空试着上了一下路。刚开始找了一个五年老司机在副驾知道指导下</p>
<br>

<p>第一天：我柑橘已经开得好快了，已经到 40 Km&#x2F;h 了，对着副驾五年老司机说</p>
<p>第二天：路上，暗想，怎么 70Km&#x2F;h 这么慢</p>
<p>第三天：上高速了，偶尔有最高 110Km&#x2F;h，但不知为何副驾多年老湿机要右手紧紧握住把手</p>
<p>第四天：贴了人生中第一张违停罚单，客服还说能够此处能停的！害，</p>
<br>

<p>​		路上听到最多的一句话就是小团团：看看我的大宝贝，你又走错路了!</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210315230711.png" width="25%"/ loading="lazy">]]></content>
      <categories>
        <category>生活 - 闲暇的趣闻</category>
      </categories>
  </entry>
  <entry>
    <title>简洁且易用的ChatGPT&amp;AI的桌面应用程序ThinkyMate</title>
    <url>/posts/bc2d9c9d/</url>
    <content><![CDATA[<p><strong>简  述:</strong>  开发了一个简洁且易用的 ChatGPT &amp; AI 的桌面应用程序 ThinkyMate；<strong>跨平台，无需登录或注册即可使用。</strong> 已经内置博主的账号 Key，用户也可以自己的私人 API-KEY  → 不需登录。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><div align="center">
  <p>
      <h1>
      <a href="https://thinkymate.xmuli.tech">
          <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312180312618.png" width="60%" alt="ThinkyMate"/ loading="lazy">
      </a>
    </h1>
    <br/>
    <h4>Simple and easy to use desktop application for ChatGPT & AI</h4>
    <h4>简洁且易用的 ChatGPT & AI 的桌面应用程序</h4>
    <h4>簡潔且易用的 ChatGPT & AI 的桌面應用程序</h4>
  </p>
</div>
<div align="center">
  <p align="right"><br><a href="https://thinkymate.xmuli.tech/">English</a> | <a href="https://github.com/XMuli/ThinkyMatePages/blob/master/docs/index.zh_CN.md">简体中文</a></p>
</div>

<iframe width="760" height="427" src="https://www.youtube.com/embed/rRWHK_HzL88?si=cs2IBMO_XF_I6LRV" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

<h2 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h2><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312180314212.png" width="100%"/ loading="lazy">

<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312180319043.png" width="100%"/ loading="lazy">

<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312260051579.gif" width="100%"/ loading="lazy">

<h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><table>
<thead>
<tr>
<th>Title</th>
<th>URL</th>
</tr>
</thead>
<tbody><tr>
<td>Site</td>
<td><a href="https://thinkymate.xmuli.tech/">thinkymate.xmuli.tech</a></td>
</tr>
<tr>
<td>Guide</td>
<td><a href="https://github.com/XMuli/ThinkyMatePages/wiki">wiki</a></td>
</tr>
</tbody></table>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://github.com/XMuli/ThinkyMatePages/releases"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312292223219.png" width="210"/ loading="lazy"></a>    <a href="https://apps.microsoft.com/home"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312292157810.svg" width="200"/ loading="lazy"></a>    <a href="https://gitee.com/XMuli/ThinkyMatePages/releases"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312292217355.svg" width="200"/ loading="lazy"></a></p>
<h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><p><a href="https://www.youtube.com/watch?v=rRWHK_HzL88"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312292229454.jpg" width="200"/ loading="lazy"></a>    <a href="https://www.bilibili.com/video/BV12a4y1z7CA"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312292229105.png" width="200"/ loading="lazy"></a></p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p><strong>用于 ChatGPT 和 AI 的简单易用的桌面应用程序！</strong> 🎉🎉🎉🎊🎊🎊🎊</p>
<p><strong>ChatGPT和AI：</strong></p>
<ul>
<li>无需注册和登录任何账户即可使用</li>
<li><strong>无需登录</strong> 即可使用 ChatGPT 和 SparkDesk 聊天和语音的所有功能。</li>
<li>支持 ChatGPT 和 SparkDesk AI 模型</li>
<li>支持场景上下文与记录记忆</li>
<li>支持使用私人 API KEY 使用相关功能。</li>
<li>支持气泡模式和纯文本模式</li>
<li>支持显示模式切换：流式（打字机）+常规响应</li>
<li>支持更换主题： MacOS、Ubuntu、Windows、暗黑模式</li>
<li>API 密钥采用 AES_256 + CBC 算法加密，密码框输入</li>
<li>跨平台支持（Windows、MacOS、Linux 操作系统）</li>
<li>更多值得探索和发现的功能</li>
</ul>
<p><strong>语音：</strong></p>
<ul>
<li><p>支持文本到语音（TTS）和文本到语音（TTS）功能 </p>
</li>
<li><p>支持硬件耳机联动扩展</p>
</li>
<li><p>支持自动智能措辞和转换，更流畅自然</p>
</li>
<li><p>支持修改语速和替换语音库</p>
</li>
</ul>
<h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><ol>
<li><a href="https://github.com/XMuli/ThinkyMatePages/releases">下载</a> 软件包并安装</li>
<li>Tray Mail 上下文菜单，打开高级设置</li>
<li>输入 API KEY 以启用相应功能（可选）；请重启软件以确保其生效。<ul>
<li>输入 OpenAI 密钥以使用 ChatGPT 功能和语音转文字功能</li>
<li>输入讯飞密钥，使用火花桌面功能</li>
<li>输入白度密钥使用文本转语音功能</li>
</ul>
</li>
<li>输入语音或文本，享受 ChatGPT 功能！</li>
<li>更多预览图片请参阅 <a href="https://github.com/XMuli/ThinkyMatePages/tree/master/docs/snapshoot">这里</a></li>
</ol>
<h2 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h2><p>　　💻 <code>MacOS 13 </code>+ 📎 <code>Qt 5.15</code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p>
<p>　　💻 <code>Ubuntu 22.04</code> 📎<code>Deepin 20.9-23+</code> 📎 <code>Qt 5.15.2</code> 📎 <code>gcc/g++ 9.0</code>  📎 <code>gdb8.0</code></p>
<p>　　💻  <code>win10 22H2</code> 📎 <code>Qt 5.15.2</code> 📎  <code>Visual Studio 2022</code> 📎 <code>C++17</code></p>
<h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><p>如果对您有帮助，或者觉得有用，<strong>您可以点击该仓库的⭐ Star 🍴 Fork 两个图标，方便抬手之间，说点赞的手，</strong> 手留余香；其次可以我喝一杯冰的快乐水。 </p>
<h2 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h2><p>如何反馈？非常欢迎您加入我们！您可以 <a href="https://github.com/XMuli/ThinkyMatePages/issues">提一个反馈</a> ;提出任何错误、建议、功能设想，或帮助改进本软件。</p>
<h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p><a href="mailto:&#x78;&#109;&#117;&#x6c;&#x69;&#x74;&#101;&#99;&#x68;&#64;&#x67;&#109;&#x61;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;">&#x78;&#109;&#117;&#x6c;&#x69;&#x74;&#101;&#99;&#x68;&#64;&#x67;&#109;&#x61;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a> | <a href="https://thinkymate.xmuli.tech/">https://thinkymate.xmuli.tech</a></p>
<br>

<h2 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> 欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序二 经验</category>
        <category>学习 - Windows</category>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
        <category>专栏 - 项目实战开发</category>
        <category>学习 - AIGC</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>ChatGPT</tag>
        <tag>跨平台开发</tag>
        <tag>工程经验</tag>
        <tag>项目作品集合</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义和标准对话框的用法</title>
    <url>/posts/f3962578/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  了解自定义风格控件样式，书写一个简单地例子；然后写了一个小的<strong>Qt</strong>例子，用来实现和验证它的空间的一些属性和功能的用法。且主要是讲解一些模态和给非模态的知识讲解，本篇比较推荐直接看本例只有知识行的源码，会更加简洁和清晰。</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191216_201058_mark.png"/ loading="lazy">

<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><p><strong>编程环境：</strong>  <code>MacOS 10.14.6 (18G103)</code>   <strong>编程软件：</strong> <code>Qt 5.9.8</code>， <code>Qt Creator 4.8.2</code></p>
<br>

<h2 id="模态-x2F-非模态对话框："><a href="#模态-x2F-非模态对话框：" class="headerlink" title="模态&#x2F;非模态对话框："></a>模态&#x2F;非模态对话框：</h2><h3 id="模态对话框："><a href="#模态对话框：" class="headerlink" title="模态对话框："></a>模态对话框：</h3><p>必须关闭此对话框才可以返回主窗口操作；</p>
<p>使用方式：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="非模态对话框："><a href="#非模态对话框：" class="headerlink" title="非模态对话框："></a>非模态对话框：</h3><p>关闭（单机关闭按钮或者关闭对话框）后只是隐藏（缺省的），并不算删除对象（并没有从内存中删除），下载再调用时候，只是打开已经创建的对话框对象。使用方式：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>

<h2 id="窗口中的事件："><a href="#窗口中的事件：" class="headerlink" title="窗口中的事件："></a>窗口中的事件：</h2><p><font color=#FE7207 size=4 face="幼圆"> <strong>在对话框和主窗口之间互相操作的关键是要有对方的指针，方才能够传递参数兵并且调用对方函数。</strong> </font></p>
<p>事件(event)是由窗口系统产生的由某些触发的特殊函数，例如鼠标操作，键盘操作的一些事件，还比如说有窗口的显示，关闭，绘画等相关事件。从QWidget继承的窗口部件常用的时间函数有如下几种：</p>
<ul>
<li><strong>closeEvent（）</strong>                      窗口关闭时候触发的事件；此时可以加入操作：询问是否关闭窗口</li>
<li><strong>ShowEvent（）</strong>                     窗口显示的时候触发的事件</li>
<li><strong>paintEvent （）</strong>                    窗口绘画的事件，</li>
<li><strong>mouseMoveEvent（）</strong>        鼠标移动事件</li>
<li><strong>mousePressEvent（）</strong>        鼠标按下事件</li>
<li><strong>mouseReleaseEvent（）</strong>    鼠标释放事件</li>
<li><strong>keyPressEvent（）</strong>              键盘按下事件</li>
<li><strong>keyReleaseEvent（）</strong>          键盘释放事件</li>
</ul>
<br>

<h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191216_201205.gif"/ loading="lazy">

<br>

<h2 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h2><p>因为其中使用到了上面的模态和非模态知识，以及窗口之中的一些事件消息，加上这个例子一看代码就明白了，比我单独话费笔墨来写介绍，有点废话的感觉，所以，本篇更加推荐大家直接看源码即可。</p>
<p>其中核心部分的源码，重点和一些难点以及需要注意的一些地方，贴出来如下</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191216_203214_mark.png"/ loading="lazy">

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">ExCustomMainWin</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span>
<span class="token punctuation">&#123;</span>
    Q_OBJECT
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">ExCustomMainWin</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">ExCustomMainWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">setACellText</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">,</span> QString text<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//定位到单元格，并设置字符串</span>
    <span class="token keyword">void</span> <span class="token function">setActLocateEnable</span><span class="token punctuation">(</span><span class="token keyword">bool</span> enable<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//设置actLocatee的enabled属性</span>
    <span class="token keyword">void</span> <span class="token function">setDlgLocateNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">//将ExDlgLocate指针设置为NULL</span>

<span class="token keyword">private</span> slots<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">on_actSetHeader_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">on_actSetSize_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">on_actLocate_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">on_currentChanged</span><span class="token punctuation">(</span><span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>current<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>previous<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    Ui<span class="token double-colon punctuation">::</span>ExCustomMainWin <span class="token operator">*</span>ui<span class="token punctuation">;</span>

    QStandardItemModel <span class="token operator">*</span>m_model<span class="token punctuation">;</span>                        <span class="token comment">//数据模型</span>
    QItemSelectionModel <span class="token operator">*</span>m_seleModel<span class="token punctuation">;</span>                   <span class="token comment">//item选择模型</span>
    ExDlgSetHeaders <span class="token operator">*</span>m_dlgSetHeaders<span class="token punctuation">;</span>
    ExDlgLocate <span class="token operator">*</span>m_dlglocate<span class="token punctuation">;</span>
    QLabel  <span class="token operator">*</span>m_labCellPos<span class="token punctuation">;</span>                              <span class="token comment">//当前单元格行列号</span>
    QLabel  <span class="token operator">*</span>m_labCellText<span class="token punctuation">;</span>                             <span class="token comment">//当前单元格内容</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>



<span class="token keyword">class</span> <span class="token class-name">ExDlgLocate</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QDialog</span></span>
<span class="token punctuation">&#123;</span>
    Q_OBJECT

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">ExDlgLocate</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">ExDlgLocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">setSpinRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowCount<span class="token punctuation">,</span> <span class="token keyword">int</span> colCount<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//设置spin的设定(最大)值</span>
    <span class="token keyword">void</span> <span class="token function">setSpinValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowNo<span class="token punctuation">,</span> <span class="token keyword">int</span> colNo<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//设置spin的初始值</span>

<span class="token keyword">private</span> slots<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">on_btnSetText_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">on_btnClose_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    Ui<span class="token double-colon punctuation">::</span>ExDlgLocate <span class="token operator">*</span>ui<span class="token punctuation">;</span>

    <span class="token comment">// QWidget interface</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">closeEvent</span><span class="token punctuation">(</span>QCloseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>  <span class="token comment">//窗口关闭事件，关闭时释放本窗口</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">showEvent</span><span class="token punctuation">(</span>QShowEvent <span class="token operator">*</span>event<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>    <span class="token comment">//窗口显示事件</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>



<span class="token keyword">class</span> <span class="token class-name">ExDlgSetHeaders</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QDialog</span></span>
<span class="token punctuation">&#123;</span>
    Q_OBJECT

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">ExDlgSetHeaders</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">ExDlgSetHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">setHeaderList</span><span class="token punctuation">(</span>QStringList<span class="token operator">&amp;</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList <span class="token function">headerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    Ui<span class="token double-colon punctuation">::</span>ExDlgSetHeaders <span class="token operator">*</span>ui<span class="token punctuation">;</span>

    QStringListModel <span class="token operator">*</span>m_model<span class="token punctuation">;</span>          <span class="token comment">//管理字符串列表数据</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>



<span class="token keyword">class</span> <span class="token class-name">ExDlgSize</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QDialog</span></span>
<span class="token punctuation">&#123;</span>
    Q_OBJECT

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">ExDlgSize</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">ExDlgSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token function">getRowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">getColCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">setRowCol</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    Ui<span class="token double-colon punctuation">::</span>ExDlgSize <span class="token operator">*</span>ui<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a>【QtCustomDialogEx】</p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>获取当前模块 EXE / DLL 的版本号信息</title>
    <url>/posts/f7b60695/</url>
    <content><![CDATA[<p><strong>简  述:</strong>  获取 <code>windows</code> 下当前代码模块的 <code>dll</code> 的版本号信息；或者指定路径下的 <code>exe</code> &#x2F; <code>dll</code> 的版本号。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p>　　<strong>💻：</strong>  <code>win10 21H2</code> 📎  <code>Visual Studio 2019</code> </p>
<br>

<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>　　使用 <code>GetFileVersionInfoSize</code>、<code>GetFileVersionInfo</code>、<code>VerQueryValue</code> 三个函数来获取版本信息。通过参考其它思路，后整合手写一份自己所需要的代码，<strong>不过这方式缺陷是获取的为当前 exe 的安装路径，需要是已知，手动传入此参数。</strong> </p>
<ul>
<li><a href="https://blog.csdn.net/zb774095236/article/details/100886114">获取EXE版本信息 GetFileVersionInfo</a></li>
<li><a href="https://blog.csdn.net/divmedia/article/details/6906690">如何使用API函数GetFileVersionInfo，获得版本信息</a></li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tchar.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>lib<span class="token punctuation">,</span> </span><span class="token string">"version.lib"</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token comment">// 获取当前项目的版本号</span>
<span class="token keyword">inline</span> std<span class="token double-colon punctuation">::</span>string <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	std<span class="token double-colon punctuation">::</span>string ret<span class="token punctuation">;</span>

	<span class="token comment">// 获取程序的自身路径</span>
	TCHAR productPath<span class="token punctuation">[</span>MAX_PATH<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetModuleFileName</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">,</span> productPath<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>productPath<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> ret<span class="token punctuation">;</span>

	<span class="token comment">// 能否获取版本号</span>
	<span class="token keyword">uint32_t</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	size <span class="token operator">=</span> <span class="token function">GetFileVersionInfoSize</span><span class="token punctuation">(</span>productPath<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> ret<span class="token punctuation">;</span>

	<span class="token comment">// 加载版本信息</span>
	BYTE<span class="token operator">*</span> pData <span class="token operator">=</span> <span class="token keyword">new</span> BYTE<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">GetFileVersionInfo</span><span class="token punctuation">(</span>productPath<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token punctuation">(</span>LPVOID<span class="token punctuation">)</span>pData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">//TRACE("GetFileVersionInfo failed with error %d\n", GetLastError());</span>
		<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// 获取产品名和版本</span>
	LPVOID lpBuffer<span class="token punctuation">;</span>
	UINT uLength<span class="token punctuation">;</span>
	DWORD dwVerMS<span class="token punctuation">;</span>
	DWORD dwVerLS<span class="token punctuation">;</span>

	<span class="token comment">// "040904b0" 是对应 rc 中语言的 ID</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">VerQueryValue</span><span class="token punctuation">(</span><span class="token punctuation">(</span>LPVOID<span class="token punctuation">)</span>pData<span class="token punctuation">,</span> <span class="token function">_T</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>lpBuffer<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uLength<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		dwVerMS <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>VS_FIXEDFILEINFO<span class="token operator">*</span><span class="token punctuation">)</span>lpBuffer<span class="token punctuation">)</span><span class="token operator">-></span>dwProductVersionMS<span class="token punctuation">;</span>
		dwVerLS <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>VS_FIXEDFILEINFO<span class="token operator">*</span><span class="token punctuation">)</span>lpBuffer<span class="token punctuation">)</span><span class="token operator">-></span>dwProductVersionLS<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">//TRACE("Can't obtain ProductName and ProductVersion from resources\n");</span>
		<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token double-colon punctuation">::</span><span class="token function">VerQueryValue</span><span class="token punctuation">(</span><span class="token punctuation">(</span>LPCVOID<span class="token punctuation">)</span>pData<span class="token punctuation">,</span> <span class="token function">_T</span><span class="token punctuation">(</span><span class="token string">"\\StringFileInfo\\040904b0\\ProductName"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>lpBuffer<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uLength<span class="token punctuation">)</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"================>"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>LPCTSTR<span class="token punctuation">)</span>lpBuffer <span class="token operator">&lt;&lt;</span> <span class="token string">"   "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>uLength <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>


	ret <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>dwVerMS <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>dwVerMS <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span>
		<span class="token operator">+</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>dwVerLS <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>dwVerLS <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p>　　关于最后打印本版信息两行代码，进行位运算可见下图，最后打印为 <code>10.1.0.2001</code>，基础知识遗忘可回顾 <a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E6%93%8D%E4%BD%9C">位操作</a> 。</p>
<img src="https://cdn.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202203181421074.png" width="100%"/ loading="lazy">

<br>

<h2 id="方法二『荐』"><a href="#方法二『荐』" class="headerlink" title="方法二『荐』"></a>方法二『荐』</h2><p>　　考虑到安装程序时可能为自定义安装路径，那么路径就未知了；方式一就不可用了。</p>
<p>　　此时采用 <code>VirtualQuery(GetSelfModuleHandle, &amp;mbi, sizeof(mbi))</code> 则可以很确保获取当前代码运行的 <code>dll</code> 的相关句柄，然后进而获取期路径、模块名等信息；故而更推荐此方法；最后可添加 <code>_WIN32</code> 宏判断确保仅在 windows 下运行。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//-------------------------.h 声明--------------------------</span>
<span class="token comment">// 获取当前调用 dll 版本号</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>
<span class="token keyword">inline</span> std<span class="token double-colon punctuation">::</span>once_flag g_dllFlag<span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">LogGetModVer</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>wstring<span class="token operator">&amp;</span> sv<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>wstring<span class="token operator">&amp;</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">//-------------------------.cpp 定义--------------------------</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>
<span class="token keyword">inline</span> HMODULE <span class="token function">GetSelfModuleHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 获取自身模块句柄</span>
<span class="token punctuation">&#123;</span>
	MEMORY_BASIC_INFORMATION mbi<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token double-colon punctuation">::</span><span class="token function">VirtualQuery</span><span class="token punctuation">(</span>GetSelfModuleHandle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mbi<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>mbi<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>HMODULE<span class="token punctuation">)</span>mbi<span class="token punctuation">.</span>AllocationBase <span class="token operator">:</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 取当前函数的函数地址，用地址找模块</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">bool</span> <span class="token function">LogGetModVer</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>wstring<span class="token operator">&amp;</span> sv<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>wstring<span class="token operator">&amp;</span> error<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">wchar_t</span> DllDir<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	HMODULE hModule <span class="token operator">=</span> <span class="token function">GetSelfModuleHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>hModule <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		error <span class="token operator">=</span> L<span class="token string">"GetSelfModuleHandle() failed! Not found self module handle."</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

    <span class="token comment">// 获取模块名称和路径</span>
	<span class="token function">GetModuleFileName</span><span class="token punctuation">(</span>hModule<span class="token punctuation">,</span> DllDir<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>wstring <span class="token function">sFilePath</span><span class="token punctuation">(</span>DllDir<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>sFilePath<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		error <span class="token operator">=</span> L<span class="token string">"sFilePath is empty."</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// dllPtr = 加载的 dll 模块指针</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">nullptr</span> <span class="token operator">!=</span> dllPtr<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dllPtr<span class="token operator">-></span><span class="token function">OpenFile</span><span class="token punctuation">(</span>sFilePath<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			error <span class="token operator">=</span> L<span class="token string">"dllPtr open failed."</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
        
        <span class="token comment">// 通过自己封装的 dllPtr 类型来获取当前具体版本</span>
	<span class="token punctuation">&#125;</span>

	error <span class="token operator">=</span> L<span class="token string">"__GetModVer faild."</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">//-------------------------调用示例--------------------------</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>
		std<span class="token double-colon punctuation">::</span><span class="token function">call_once</span><span class="token punctuation">(</span>g_dllFlag<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 背景可能是多线程下，仅运行一次即可</span>
			std<span class="token double-colon punctuation">::</span>wstring sv<span class="token punctuation">;</span>
			std<span class="token double-colon punctuation">::</span>wstring error<span class="token punctuation">;</span>

			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">LogGetModVer</span><span class="token punctuation">(</span>sv<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				std<span class="token double-colon punctuation">::</span>wstring sVer<span class="token punctuation">;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sv<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					sVer <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">wstring</span><span class="token punctuation">(</span>L<span class="token string">"模块版本号: "</span><span class="token punctuation">)</span> <span class="token operator">+</span> sv<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
					sVer <span class="token operator">=</span> error<span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
                
                <span class="token comment">// ... sVer 输出到日志</span>
			<span class="token punctuation">&#125;</span>

		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> </p>
<p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>
]]></content>
      <categories>
        <category>学习 - C/C++ 序二 经验</category>
        <category>学习 - Windows</category>
      </categories>
      <tags>
        <tag>工程经验</tag>
        <tag>Windows 编程</tag>
      </tags>
  </entry>
  <entry>
    <title>讲解自定义和标准对话框的使用，以及多窗口之间的交互解决</title>
    <url>/posts/7211e855/</url>
    <content><![CDATA[<p><strong>简  述：</strong>  写一个自定义和标准对话框的使用；还有关于模态对话框和非模态对话框的区别；以及多个<code>Dialog</code>对象之间，如何传递数据；</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="对话框的生存期："><a href="#对话框的生存期：" class="headerlink" title="对话框的生存期："></a>对话框的生存期：</h2><p>对话框的生存期是指它从创建到删除的存续区间。</p>
<br>

<h2 id="模态对话框："><a href="#模态对话框：" class="headerlink" title="模态对话框："></a>模态对话框：</h2><p>对话框是以<strong>模态</strong>（<strong>Modal</strong>)方式显示的，即用<code>QDialog:exec()</code>函数显示。模态显示的对话框不允许鼠标再去单击其他窗口，直到对话框退出。</p>
<p><strong>模态方式显示：</strong>必须关闭此对话框才可以返回主窗口操作</p>
<br>

<h2 id="非模态对话框"><a href="#非模态对话框" class="headerlink" title="非模态对话框:"></a>非模态对话框:</h2><p>使用<code>QDialog::show()</code>，则能以<strong>非模态</strong>（<strong>Modeless</strong>)方式显示对话框。非模态显示的对话框在显示后继续运行主程序，还可以在主窗口上操作，主窗口和非模态对话框之间可以交互控制，典型的例子是文字编辑软件里的“查找&#x2F;替换”对话框。</p>
<br>

<h2 id="运行环境如下："><a href="#运行环境如下：" class="headerlink" title="运行环境如下："></a>运行环境如下：</h2><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p>
<p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p>
<p>写了一个小的例子，源码见下面，上一个最终的运行效果图：</p>
<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191008001023.gif"/ loading="lazy">

<br>

<h2 id="窗口之间的交互："><a href="#窗口之间的交互：" class="headerlink" title="窗口之间的交互："></a>窗口之间的交互：</h2><p>这里提供两个思路：</p>
<blockquote>
<p>如本例子设计的<strong>ExDlgLocate</strong>和<strong>ExCustomMainWin</strong>之间的交互，均是<strong>有着对方对象的指针</strong></p>
</blockquote>
<p>在<code>ExDlgLocate</code>类里面函数实现， <code>ExCustomMainWin* parWind = (ExCustomMainWin*)parentWidget()</code>：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//设置文字</span>
<span class="token keyword">void</span> <span class="token class-name">ExDlgLocate</span><span class="token double-colon punctuation">::</span><span class="token function">on_btnSetText_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> row <span class="token operator">=</span> ui<span class="token operator">-></span>spinBoxRow<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token comment">//定位到单元格，并且设置字符串</span>
    <span class="token keyword">int</span> col <span class="token operator">=</span> ui<span class="token operator">-></span>spinBoxCol<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    ExCustomMainWin<span class="token operator">*</span> parWind <span class="token operator">=</span> <span class="token punctuation">(</span>ExCustomMainWin<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">parentWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//向具体的item中填写字符串</span>
    parWind<span class="token operator">-></span><span class="token function">setACellText</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ui<span class="token operator">-></span>checkBoxRow<span class="token operator">-></span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        ui<span class="token operator">-></span>spinBoxRow<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> ui<span class="token operator">-></span>spinBoxRow<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ui<span class="token operator">-></span>checkBoxCol<span class="token operator">-></span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        ui<span class="token operator">-></span>spinBoxCol<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> ui<span class="token operator">-></span>spinBoxCol<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>同样的， 在<code>ExCustomMainWin</code>类里面，也可以找到</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">ExCustomMainWin</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span>
<span class="token punctuation">&#123;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    QStandardItemModel <span class="token operator">*</span>m_model<span class="token punctuation">;</span>                        <span class="token comment">//数据模型</span>
    QItemSelectionModel <span class="token operator">*</span>m_seleModel<span class="token punctuation">;</span>                   <span class="token comment">//item选择模型</span>
    ExDlgSetHeaders <span class="token operator">*</span>m_dlgSetHeaders<span class="token punctuation">;</span>
    ExDlgLocate <span class="token operator">*</span>m_dlglocate<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>另外一个思路：</p>
<blockquote>
<p>利用Qt优秀的信号与槽机制</p>
</blockquote>
<p>无需再在<code>ExCustomMainWin</code>类里面，保持<code>ExDlgLocate</code>对话框的指针。而是在ExCustomMainWin和ExDlgLocate的类里面，定义一些信号和槽来使用<code>connect</code>代替实现。</p>
]]></content>
      <categories>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
  </entry>
  <entry>
    <title>读《如何阅读一本书》</title>
    <url>/posts/ed9cd36e/</url>
    <content><![CDATA[<p><strong>简  述:</strong>　<u>本书写于一百年前</u>，但其内容实用性至今不减，初看亢奋、惊叹和感慨，收获极颇丰。</p>
<p>此文是我读《如何阅读一本书》后的内容概略，共读了好几遍，初看惊叹和感慨，收获颇丰。解决了早期不知如何看书、和提升阅读理解力的窘迫困境。记文于此，建议有同困惑者自行通读一遍全书。  </p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202212021804294.png" width="50%"/ loading="lazy">



<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/">偕臧的小站</a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p>悔恨到现在才读到此书，只叹未曾早读到此书；庆幸现在才读到此书，得以结合自己多年读书经历，与之参照，体会之深刻，从而发出前半句的感叹。</p>
 <br>

<h4 id="1-基础阅读"><a href="#1-基础阅读" class="headerlink" title="1. 基础阅读"></a><font color=#008000>1. 基础阅读</font></h4><ul>
<li>阅读前准备阶段：视、听、发音能力、基础智力和注意力等（幼稚园阶段）</li>
<li>认字：有初级的读写能力（约一年级）</li>
<li>字汇的增长及对课文的运用：读懂标记、图片、简单表格等（约四年级）</li>
<li>“成熟”的阅读者：能看懂所有读物，但却不知道更进一步（预上高中课程）</li>
</ul>
<br/>

<h4 id="2-检视阅读"><a href="#2-检视阅读" class="headerlink" title="2. 检视阅读"></a><font color=#008000>2. 检视阅读</font></h4><h5 id="有系统性的略读或粗度"><a href="#有系统性的略读或粗度" class="headerlink" title="有系统性的略读或粗度"></a>有系统性的略读或粗度</h5><p>​	(1) 想看书名页，后有序就先看序</p>
<p>​	(2) 研究目录页</p>
<p>​	(3) 若有索引，也检阅一番</p>
<p>​	(4) 书的衣包，看下出版社介绍</p>
<p>​	(5) 看完目录后的模糊印象中，开始挑几个看起来跟主题息息相关的重要篇章来看。通常在篇章开头结尾的摘要是总结，不可错过</p>
<p>​	(6) 随意翻翻，念个一两个段，有时候连续读几页，但不要太多。书的最后两三页通常是总结，少数还有后记都不可忽略。用此方法将全书过一遍，随意寻找主要论点的讯号，留意主题的基本脉络。  </p>
<br/>

<h5 id="粗浅的阅读"><a href="#粗浅的阅读" class="headerlink" title="粗浅的阅读"></a>粗浅的阅读</h5><p>​	先完整的（囫囵吞枣）的读一遍，不纠结于细节。  </p>
<br/>

<h4 id="3-分析阅读"><a href="#3-分析阅读" class="headerlink" title="3. 分析阅读"></a><font color=#008000>3. 分析阅读</font></h4><h5 id="找出一本书在谈论什么规则"><a href="#找出一本书在谈论什么规则" class="headerlink" title="找出一本书在谈论什么规则"></a>找出一本书在谈论什么规则</h5><p>​	(1) 依照书的种类和主题来分</p>
<p>​	(2) 用最简短的句子（一小段文字）概述整本书的内容</p>
<p>​	(3) 按照顺序和关系，列举出书的主要部分。将全书的大纲列举出来后，再列举各自部分的大纲也一一列举出来（书必有瑕疵，故大纲不必全而美，亦不必自行添加补充篇章）。</p>
<p>​	(4) 找出作者要问的问题，或作者想要解决的问题  </p>
<br/>

<h5 id="诠释一本书的内容规则"><a href="#诠释一本书的内容规则" class="headerlink" title="诠释一本书的内容规则"></a>诠释一本书的内容规则</h5><p>​	(5) 诠释作者的关键字，和他达成共识</p>
<p>​	(6) 由最重要的句子，抓住作者的主旨</p>
<p>​	(7) 知道作者的论述是什么，从内容中找出相关句子，在重新架构出来</p>
<p>​	(8) 哪些是作者已解决的问题？哪些是未解决的？未解决中的问题，那些事作者也无法解决的  </p>
<br/>

<h5 id="评论一本书的内容规则"><a href="#评论一本书的内容规则" class="headerlink" title="评论一本书的内容规则"></a>评论一本书的内容规则</h5><p>​	A. 智慧礼节的一般规则</p>
<p>​	(9) 没懂之前不轻易评论（完成大纲架构、也能诠释全书）</p>
<p>​	(10) 不增强强好辩，非辩不可</p>
<p>​	(11) 尊重知识和个人观点不同，在评论之前，要有理论基础作为支撑  </p>
<br/>

<p>​	B. 批评观点和特别标准 </p>
<p>​	(12) 证明作者的知识不足</p>
<p>​	(13) 证明作者的知识错误</p>
<p>​	(14) 证明作者的逻辑推导错误</p>
<p>​	(15) 证明作者的分析和理由不完备（前提是至少同意作者的部分观点）  </p>
<br/>

<h4 id="4-主题阅读"><a href="#4-主题阅读" class="headerlink" title="4. 主题阅读"></a><font color=#008000>4. 主题阅读</font></h4><h5 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h5><p>​	(1) 针对要研究的主题，设计一份实验性的书目。可参考图书馆目录，专家建议和书的数目索引</p>
<p>​	(2) 流浪数目上的所有书，确定和主旨相关的，划掉无用的  </p>
<br/>

<h5 id="阅读所收集的所有书"><a href="#阅读所收集的所有书" class="headerlink" title="阅读所收集的所有书"></a>阅读所收集的所有书</h5><p>​	(1) 从选定的有关书籍中，找出最相关的章节</p>
<p>​	(2) 根据主题自己创建一套中立的词汇，引领作者达成共识；通常大部分作者的都可以用这套词汇来诠释</p>
<p>​	(3) 创建一个中立的主旨，列出一连串的问题；大多数或者对此做出过回答</p>
<p>​	(4) 界定主要和次要议题；将作者针对各个问题的不同意见整理陈列在各个议题旁边。</p>
<p>​	(5) 分析和讨论。问题和议题按照和主题相关成都排列，且有共通性的议题放靠前。</p>
<br/>

<hr>
<p><strong>生命和心智成长</strong></p>
<p>​		身体成长有上限，心智成长无上限。但心智如同肌肉，如果不常用便会萎缩。  </p>
<br/>

<p>​		从感兴趣的书籍开始读；主要目标是读的好而非读的广。  </p>
<br/>

<p>​		读一本书，若觉得有道理，就应该按照书中道理去做，否则就是白读了。  </p>
<br/>

<p>​		阅读的目的：为获取资讯而读；亦或为增进理解力而读。</p>
<p>​		阅读的种类：他人指导型的学习；和自我发现型的学习（仅依靠自己和书本）。</p>
<p>​		思考只是主动阅读的一部分。阅读的艺术包括了所有的自我发现型的学习的技巧：敏锐的观察、灵敏可靠的记忆、想象的空间、训练有素的分析、省思的能力。  </p>
<br/>

<p><strong>阅读的速度</strong></p>
<p>​		阅读的速度应该是依照读物的性质和复杂程度，使用不同的速度来阅读。无论读的快或读的慢，都不能丢掉对其掌握的程度和是否能理解。  </p>
<br/>

<p><strong>主动阅读的基础：一个阅读者要提出的四个基本问题</strong></p>
<p>​	<strong>⑴ 整体来说，这本书到底在谈什么？</strong> 你一定要想办法找出这本书的主题，作者如何一次发展这个主题，如何逐步从核心问题分解出从属的关键议题来。</p>
<p>​	<strong>⑵ 作者细部说了什么，怎么说的？</strong> 你一定要想办法找出主要的想法、声明和论点。这些组合成作者想要传达的特殊讯息。</p>
<p>​	<strong>⑶ 这本书书说的有道理吗？是全部有道理，还是部分有道理。</strong> 只有先回答前个两问题，才能回答此问题。只有了解整本书书的什么，且有责任为本书做自己的判断。光是知道作者的想法是不够的。</p>
<p>​	<strong>⑷ 这本书跟你有什么关系？</strong> 如果这本书给你资讯，一定要问问这些资讯有什么意义。为什么这位作者认为知道这件事很重要？你真的有必要去了解吗？如果不仅提供了资讯，还提供了启发你，那么就更要必要找出其他相关的、更深的含义或建议，以获得更多的启示。  </p>
<br/>

<p>​		这四个问题是阅读的基本规则（绝不可忘记的）。这也是有自我要求的阅读者，和无自我要求的读者的之间，有天壤之别的原因。后则者提不出问题，也得不到答案。  </p>
<br/>

<p>​		人们在读一本好书的时候会打瞌睡，并不是他们不想努力，而是因为他们不知道如何努力。</p>
]]></content>
      <categories>
        <category>生活 - 阅读</category>
      </categories>
      <tags>
        <tag>学习方法</tag>
      </tags>
  </entry>
  <entry>
    <title>读《找对英语学习方法的第一本书》</title>
    <url>/posts/9aed2e7b/</url>
    <content><![CDATA[<p><strong>简  述:</strong> <u>此书写于二十年前</u>，结合我自身情况参照，有了一种理论指导，可在众多学习方法中有效抉择，亦能在不同阶段更换不同策略。本文为读后的一个简要归纳和札记。</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202212021803026.png" width="50%"/ loading="lazy">



<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/">偕臧的小站</a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h4 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h4><p>趁闲暇，花了五天给看完了；感比较久，然统计共 12 h 即可阅完；虽累亦甚至愉悦。</p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303080119027.png" width="50%"/ loading="lazy">

<br>

<h4 id="简要"><a href="#简要" class="headerlink" title="简要"></a>简要</h4><p><strong>本书重点探讨成年人学习英文的方法和策略。</strong>对于自学英语，其指明了一些常见的误区，和对近百年来出现过的主流方法进行了归纳，依据 Rod Ellis 《二语习得概论》 理论和进百年得时间验证进行定论。当然，本书本书直接点题，没有一个通用通杀的方法，但又一个通用的自然逻辑顺序可以作为参考，目前在亲身验证中，也在寻找出一条适合自己的道路。</p>
<br>

<h4 id="第一章：爱之愈深、误之愈切"><a href="#第一章：爱之愈深、误之愈切" class="headerlink" title="第一章：爱之愈深、误之愈切"></a><font color=#008000>第一章：爱之愈深、误之愈切</font></h4><p><strong>介绍学习外语中常见的误区。</strong></p>
<ul>
<li>仅听标准发音，会错而不自知；需多听各种带口音的发音，感受其中差异从而自动纠正</li>
<li>外语环境<ul>
<li>出国待两年，就会了：住外国房东家、华人街、加拿大小班纯外教、</li>
<li>实际生活场景：购物交流、在家听英语广播</li>
</ul>
</li>
<li>早期学习英语不应开口，有一个较长的“沉默期”，过早开口英语能力会石化在一个较低水平</li>
<li>洋泾浜口语（英语加当地语混杂后的不规范的简化语）：类似中式英语、景点商贩英口语</li>
<li>汉语是最容易学，会听会说不会写汉字的文盲。</li>
<li>英语角多和低水平同学交流，不容易犯同样的错误，心理轻松，容易说长句、表达更佳流畅</li>
<li>常见的词组不属俚语，要掌握；但不需刻意学习俚语，其属于文化风俗、文化库。</li>
<li>实际应用能力不是靠背诵“固定搭配”来提高的。eg：“Excuse me” 已被点名回答，则不必再说表示此表示插话。注意使用的场景</li>
<li>不可有意识的记住连读原理并尝试理性的应用它，刻意的连读会适得其反。掌握听和说的连读，是一个自然的过程。</li>
</ul>
<br>

<p><strong>总结：</strong> 不同人的语言学习阶段，最佳学习环境是不同的。对初学者来说，自然外语环境的效果最差，不必寻求。有计划、有步骤的、自己从基础单词听力开始学习。</p>
<p>初学者有效方式之一：通过图画、实物、肢体语言开始学习与其对应的单个英文单词发音</p>
<p>中级学习者：适合多媒体和计算机辅助语言，重点学习听力，后由浅入深的阅读</p>
<p>高级学习者：自然外语环境比较明显，英文电影、合适的英文材料更佳。</p>
<br>

<h4 id="第二章：我思故我“说”"><a href="#第二章：我思故我“说”" class="headerlink" title="第二章：我思故我“说”"></a><font color=#008000>第二章：我思故我“说”</font></h4><p><strong>简单介绍一些科学原理，和记单词重在读音、语法不重要的观点。成人需要英语思维方可做到“听”、“说”反应迅速。</strong></p>
<ul>
<li><p>哑巴英语</p>
</li>
<li><p>外语思维：直接建立外语词汇本身和思维直接连接，还关联相关“外语词汇”以及其慨念与思维概念的直接连接</p>
</li>
<li><p>对于高频词汇和句子，尽可能使用外语思维。低频仅占交流中 10% 的的抽象词汇和特殊用法，不必强要外语思维；二八原则，不必耗费大量时间和精力</p>
</li>
<li><p>外语的阅读和写作，正确也是用外语思维；但思考或写作前期构思，可使用一定母语思维。</p>
</li>
<li><p>“语法-翻译法”教学是不可取的，有明显弊端，属于落后的老古董保守派。</p>
</li>
<li><p><strong>单词</strong>：获得多为表现得形式，从而建立词汇意义在大脑得长久印象</p>
<ul>
<li>单词分级<ul>
<li>2000 个最高频单词，使用率 90%；（英文报纸使用率 80%，略低一点）</li>
<li>5000 个次高频单词，使用率 98%；（包含前 2000，报纸同理稍低）； </li>
<li>7000 个普通高频单词，使用率 99%；（包含前 5000，报纸同理稍低）</li>
<li>7000-30000，出现频率为最后得 1% 以内</li>
</ul>
</li>
<li>不靠字典读懂小说，现象是每 10 行生出一个生词（每行 10 词）；5000 加上 570 学院词汇表[p105]，留学看英文教科书不再吃力。</li>
<li>要求不同<ul>
<li>第一层：基础 200 单词，量虽少，使用率最高</li>
<li>第二层：2000 单词，对话中最常用 1000 个单词涵盖普通对话 94% 的词汇，阅读中出现概率为 74%。“通用词汇表(General Sercice List)” 于 1953 年提出，但至今依旧可用，覆盖阅读中 90%，简单对话 95%。词组最好在实际用到它们的文中或者句子掌握，死记硬背效果差。</li>
<li>第三层：5000 单词达到 98%，建立单词的“声音思维”，一听立刻反应形象或概念而非翻译。至此阶段足以够用。其中大多具体的单词可用具体实物、图像、动作表示来学习；少数为抽象单词。<strong>可借助日常生活中见到的实物建立思维。</strong></li>
<li>第四层：5000 以上单词，不必苛求完全达到英语思维。通过中文解释学会不会有很大负面影响，阅读更没有问题，听力也仅才 2% 机会。此部分反过来，采取先背诵，在实践中发现和了解真实应用的方式，在做到真正掌握。</li>
</ul>
</li>
<li>学习按照小时计算，而不能用天数。最好设定任务期限，算准时间，提前报名</li>
<li>英语中为数不多的 180 个不规则动词才是使用频率最高的，达到 70%。大多有小规律可循，生活中最常用 20 个动词全部是不规律，但是极度高频使用，反而是容易掌握的。</li>
</ul>
</li>
<li><p><strong>讲语法</strong></p>
<ul>
<li><p>语法知识的多少和交流的流利程度和正确程度之间，没有丝毫关系。语法知识不能不能帮助形成英语思维，反而是在捣乱。</p>
</li>
<li><p>对语法的真正掌握，是有特定的自然次序的（拉森-弗里曼习得次序）。无论成年人是否学习语法知识，最后都是按照这个顺序掌握的</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">1. 进行时 ing
2. in
3. on
4. 复数
5. 不规则动词中的过去形式
6. 所有格 ’s
7. is, am, are
8. 冠词
9. 规则东西的过去式开始出现-ed
10. 规则第三人称单数-s
11. 不规则第三人称单数-es<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>语法价值的含义：</p>
<ul>
<li>首先关注句子含义而非句子结构。反面例子：阅读速度慢，是由于目光在含义价值低的词汇上停留时间明显过长</li>
<li>掌握语法规律过程中，应该从语法现象的”正确单词之间的搭配“入手，从而建立正确连接，达到自动、迅速、不假思索的语法应用能力</li>
<li>语法知识总结和介绍<ol>
<li>第一阶段，零起点在人们后期阶段，了解一点语法还是有用处，”只需知其然，不必知其所以然“就好。方法是重点介绍引文的语法结构，以及和中文语法中不同的指出，使得不感觉奇怪即可。</li>
<li>第二阶段，接触和学习相当外语后，有一定听力和阅读基础，准备说和写作之前。方法是学生有意识的“注意到”语法变化的具体形式，原则依旧是“只需知其然，不必知其所以然”就好。前提一直是正确有效的输入。</li>
<li>第三阶段，语法学习的高级阶段。重点不是普通意义上的语法规则，不再是固定搭配，时态变化，动词变化和语序等基础语法，而是在语言表达的高级层面进行完善，最主要是学习正规的英文写作，如商务写作。这种语法提高的核心是“避免歧义”。</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li><p>论记忆：成人的记忆力远比儿童好</p>
</li>
<li><p>对于学习英文来说，应该完全放弃英文字，只学习英语声音。将注意力集中到声音上，真正按照学习语言的因该的自然顺序去掌握外语（“先听说后读写”）。</p>
</li>
<li><p>要做到流利的识别英文字，最重要的前提是这些单词的”发音”都已经清晰的在大脑中形成，然后通过各种认知手段去识别文字。</p>
</li>
<li><p>学习外语的成年人，国际英标一定要学，总共才是四十几个。</p>
</li>
</ul>
<br>

<h4 id="第三章：探寻最佳方法之路"><a href="#第三章：探寻最佳方法之路" class="headerlink" title="第三章：探寻最佳方法之路"></a><font color=#008000>第三章：探寻最佳方法之路</font></h4><p><strong>详细介绍百年来学习英文主流方法历史，通过理论支撑和时间验证来阐述各自利弊和实用性。</strong></p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202212060156228.svg" width="100%"/ loading="lazy">

<br>

<h4 id="第四章：理通法自明"><a href="#第四章：理通法自明" class="headerlink" title="第四章：理通法自明"></a><font color=#008000>第四章：理通法自明</font></h4><p>不存在某一个统一、的具体的“学习方法”，根据学习者自身情况、不同阶段、科学的制定不同的学习策略。</p>
<p>本章也是前三章的提炼，也是最无用的一章，一切所需要的都需要自己去前三章寻找。</p>
<p>仍将学习过程分为四个阶段，具体阶段也提供一些操作方法。</p>
<ul>
<li><strong>三种学习类型</strong><ol>
<li>视觉类型（Visual Learner），占据 70%</li>
<li>听觉类型（Auditory Learner），占据 20%</li>
<li>运动类型（kinesthetic Learner），占据 10%</li>
</ol>
</li>
<li><strong>外语学习四个阶段</strong><ol>
<li>入门期（Early Stage）<ul>
<li>主要锁定基础单词，以名词为主（先学），动词为辅助（后学）；只学单词，不学句子；只练习听力。</li>
<li>实践方法：生活场景联想</li>
<li>结束标志：约 3 个月，1000 单词 + 短语</li>
</ul>
</li>
<li>提高期（Upping the Ante）<ul>
<li>通过听力，建立外语思维，关键是提供适当的“可理解输入”</li>
<li>实践方法：古恩的序列法</li>
<li>结束标志：约 6 个月，2000~4000单词，能听懂生活对话，可独自出国旅游；但依旧大量听不懂原版电影。</li>
</ul>
</li>
<li>增长期（Getting Serious）<ul>
<li>学习重点依旧听力，增加阅读，可以少量针对性的说英语。</li>
<li>实践方法：词汇量突击，采用快速背单词</li>
<li>结束标志：一年多，每天至少一小时。英文环境和工作学习无困难，英文电影理解大部分。</li>
</ul>
</li>
<li>高级期（Scaling Everest）<ul>
<li>重点是补习语法（消除语言中歧义则种等），锻炼英文写作 &#x2F; 商务写作；以及纠正口音。突破“满足于现状”的心理障碍。</li>
<li>实践方法：没有方法，已经是 Life Style</li>
<li>结束标志：约 5%的陈年人能达到此“接近母语水平”</li>
</ul>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>生活 - 阅读</category>
      </categories>
      <tags>
        <tag>学习方法</tag>
      </tags>
  </entry>
  <entry>
    <title>输出乱码原因：古文码、口字码、符号码、问号码、棍拷码</title>
    <url>/posts/aca7e7a0/</url>
    <content><![CDATA[<p><strong>简介：</strong>  打印时候乱码原因：古文码、口字码、符号码、问号码、棍拷码</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<p><strong>一个图解释乱码原因</strong></p>
<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202504192329668.png" width="100%"/ loading="lazy">
]]></content>
      <categories>
        <category>学习 - C/C++ 序一 技法</category>
        <category>学习 - 底层兼架构</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>字符集</tag>
      </tags>
  </entry>
  <entry>
    <title>重绘的QStyle中sizeFromContents()没有被调用</title>
    <url>/posts/e4408abd/</url>
    <content><![CDATA[<p><strong>简介：</strong>  在自定义重绘<code>QStyle</code>的时候，继承于<code>class ExCustomStyle : public QCommonStyle</code>的类，在重写虚函数<code>sizeFromContents()</code>时候，却发现并没有被调用。在此处记录一个**”硬核深坑”sizeFromContents()没有被调用**。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​		<strong>详情：</strong>  见简介</p>
<br>

<p><strong>编程环境：</strong>  <code>deepin 15.11 x64 专业版 </code>    <strong>Kernel：</strong> <code>x86_64 Linux 4.15.0-30deepin-generic</code></p>
<p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p>
<br>

<h2 id="系列博文："><a href="#系列博文：" class="headerlink" title="系列博文："></a>系列博文：</h2><ul>
<li><a href="https://touwoyimuli.github.io/2019/09/04/QStyle%E8%87%AA%E5%AE%9A%E4%B9%89%E9%87%8D%E7%BB%98QSlider%E6%8E%A7%E4%BB%B6/"><code>QStyle</code>自定义重绘<code>QSlider</code>控件</a> </li>
<li><a href="https://touwoyimuli.github.io/2019/09/09/QStyle%E4%B9%8BPenStyle%E7%9A%84CustomDashLine%E4%BD%BF%E7%94%A8/">QStyle之PenStyle的CustomDashLine使用</a> 【更新：更加精准的绘画滑槽】</li>
<li><a href="https://touwoyimuli.github.io/2019/09/17/%E9%87%8D%E7%BB%98%E7%9A%84QStyle%E4%B8%ADsizeFromContents()%E6%B2%A1%E6%9C%89%E8%A2%AB%E8%B0%83%E7%94%A8/">重绘的QStyle中sizeFromContents()没有被调用</a></li>
<li><a href="https://touwoyimuli.github.io/2019/09/17/QStyle%E8%87%AA%E5%AE%9A%E4%B9%89%E9%87%8D%E7%BB%98QSlider%E6%8E%A7%E4%BB%B6%E4%BA%8C/">QStyle自定义重绘QSlider控件二</a>（重要）</li>
</ul>
<br>

<h2 id="错误起因："><a href="#错误起因：" class="headerlink" title="错误起因："></a>错误起因：</h2><p>在自定义<strong>QStyle</strong>的<strong>CustomStyle</strong>的**.h&#x2F;.cpp**中,有重写如下一些函数等虚函数的时候：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QSize <span class="token function">sizeFromContents</span><span class="token punctuation">(</span>QStyle<span class="token double-colon punctuation">::</span>ContentsType ct<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> <span class="token keyword">const</span> QSize <span class="token operator">&amp;</span>contentsSize<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>widget <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">drawControl</span><span class="token punctuation">(</span>QStyle<span class="token double-colon punctuation">::</span>ControlElement element<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span>
                     <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>但是<strong>项目自带的例子</strong>(QWidget+多个布局+控件)被成功运行,而<strong>自己创建的Qwidge</strong>t上面添加的QSlider却唯独没有运行sizeFromContents()函数?</p>
<p><strong>【预期期待现象：】</strong>灰色矩形的宽度应该是和滑块矩形的宽度是一样大的。</p>
<p><strong>【疑惑不解：】</strong>为什么重写的代码后运行,有的QWidget运行drawControl()和sizeFromContents(); 而有的（另一个QWidget）drawControl()，没有运行sizeFromContents()????    <strong>真的是想的挠头挠头头好几个小时后，都想的不出来原因</strong>???无果， 请教大佬之后。</p>
<br>

<h2 id="解决原因："><a href="#解决原因：" class="headerlink" title="解决原因："></a>解决原因：</h2><p>自己创建的<strong>QWidget</strong>中,多个<strong>Slider</strong>是没有添加进布局,而是直接制指定父对象为<strong>WQidget</strong>,且调用<code>resize(300, 40);</code>指定<strong>Slider</strong>的大小.而Qt源码思路就是,那我就不调用<code>sizeFromContents()</code>函数了.caocaocao 哦~  破案了~～　真的是他妈的坑．<font color=#D0087E size=4 face="幼圆"><strong>总结：只有控件添加到布局里面，才会触发该函数sizeFromContents（）</strong></font></p>
<br>

<h2 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h2><ul>
<li><strong>在main()中的测试代码：</strong></li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//不显示的代码</span>
<span class="token class-name">QApplication</span><span class="token double-colon punctuation">::</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token string">"CustomStyle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

QWidget wTemp<span class="token punctuation">;</span>
wTemp<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

QSlider <span class="token operator">*</span>slider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Widget</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//水平无刻度的QSlider</span>
slider<span class="token operator">-></span><span class="token function">setOrientation</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>Horizontal<span class="token punctuation">)</span><span class="token punctuation">;</span>
slider<span class="token operator">-></span><span class="token function">setTickPosition</span><span class="token punctuation">(</span>QSlider<span class="token double-colon punctuation">::</span>NoTicks<span class="token punctuation">)</span><span class="token punctuation">;</span>
slider<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
slider<span class="token operator">-></span><span class="token function">setTickInterval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

wTemp<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190917214120.png"/ loading="lazy">



<ul>
<li>修改之后，可以会执行**sizeFromContents()**函数：</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">会显示的代码
<span class="token class-name">QApplication</span><span class="token double-colon punctuation">::</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token string">"CustomStyle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

QWidget wTemp<span class="token punctuation">;</span>
wTemp<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

QHBoxLayout <span class="token operator">*</span>layout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QHBoxLayout</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>

QSlider <span class="token operator">*</span>slider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Widget</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//水平无刻度的QSlider</span>
slider<span class="token operator">-></span><span class="token function">setOrientation</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>Horizontal<span class="token punctuation">)</span><span class="token punctuation">;</span>
slider<span class="token operator">-></span><span class="token function">setTickPosition</span><span class="token punctuation">(</span>QSlider<span class="token double-colon punctuation">::</span>NoTicks<span class="token punctuation">)</span><span class="token punctuation">;</span>
slider<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
slider<span class="token operator">-></span><span class="token function">setTickInterval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

layout<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>slider<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">//Slider添加到布局里面</span>

wTemp<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190917214045.png"/ loading="lazy">

<br>





]]></content>
      <categories>
        <category>学习 - C/C++ 序一 技法</category>
        <category>专栏 - QtExamples系列</category>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>QStyle</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云服务器 nginx 上部署 SSL 证书实现 https 访问</title>
    <url>/posts/70a6b02f/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　上一篇在远程服务器上部署了 <code>Hexo</code> 之后，这是其后续一篇，设置部署 <code>https</code> 证书（<code>SSL</code>），记录申请证书、配置相关 <code>nginx</code> 服务，其远程服务器为 <code>Ubuntu 20.04</code>。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>自己的阿里云主机相关环境：</p>
<ul>
<li><code>Ubuntu 20.04 focal </code>  </li>
<li><code>Kernel: x86_64 Linux 5.4.0-47-generic</code></li>
<li><code>nginx version: nginx/1.18.0 (Ubuntu)</code></li>
</ul>
<br>

<h2 id="申请-SSL"><a href="#申请-SSL" class="headerlink" title="申请 SSL"></a>申请 SSL</h2><p>​	一年前，在阿里云申请过一次免费的 ssl ：<a href="https://blog.csdn.net/qq_33154343/article/details/104727225">刚买的域名怎么绑定自己博客？再白嫖一年的SSL，使用https访问博客</a> ，但是每次最长时间仅一年，顿感入口隐藏只深；</p>
<p>​	现在再次需要申请阿里云免费 ssl，发现入口比之前更深了，方法也比之前复杂多了；<del>是互相在比下限嘛</del> 。</p>
<br>

<p>登录阿里云，左侧选择 <strong>“SSL 证书-证书资源包”</strong> 里面购买免费的 ssl 证书资源包，一年最多 20 个，每个时间依旧一年；</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210223_174815.png" width="90%"/ loading="lazy">



<p>​	点击证书申请，在 <strong>“状态”</strong> 一栏	按照如下步骤，依次填写对应的，其中设置解析记录选择自动即可：</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210223210828.png" width="100%"/ loading="lazy">



<p>当到最后一步骤（此时 <strong>“状态”</strong>  一栏也会变成“已签发”）。</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210223202950.png" width="25%"/ loading="lazy">

<p>​	点击下载对应的 nginx 的证书，下载后解压会得到两个文件 <code>5222721_ifmet.cn.key</code> 和 <code>5222721_ifmet.cn.pem</code> 文件；</p>
<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210223_174830.png" width="60%"/ loading="lazy">

<br>

<h2 id="部署-SSL"><a href="#部署-SSL" class="headerlink" title="部署 SSL"></a>部署 SSL</h2><h3 id="上传证书"><a href="#上传证书" class="headerlink" title="上传证书"></a>上传证书</h3><p>​	通过 scp 将上面证书的的两个文件上传到远程服务器的家目录下；然后登陆到远程服务器，<font color=#FF0000  size=4 face="幼圆">将证书文件移动到 <code>/usr/share/nginx/cert</code> 路径下，注意不是 <code>/etc/nginx/nginx.conf</code> 路径</font>；直接 scp 到此目标路径下，会报权限拒绝，故此周转一下。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> 5222721_ifmet.cn.* xmuli@20.21.1.11:~/  <span class="token comment"># 上传文件</span>
登陆到远程服务器，创建好 cert/文件夹
<span class="token function">sudo</span> <span class="token function">mv</span> 5222721_ifmet.cn.* /usr/share/nginx/cert/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h3><p>修改 nginx 配置文件，修改之前先记得备份</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> /etc/nginx/sites-available/default /etc/nginx/sites-available/default.backup
<span class="token function">sudo</span> <span class="token function">vim</span> /etc/nginx/sites-available/default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>找到如下地方，</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Default server configuration</span>
server <span class="token punctuation">&#123;</span>
	listen <span class="token number">80</span> default_server<span class="token punctuation">;</span>
	listen <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:80 default_server<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>将其修改为：将原先的一个 server 拆分为两个 server；<code>listen 80</code> 表示 http 协议，访问会 return ；强制改为跳转为 https: 协议访问（<code>listen 443</code>）；不然就会可同时访问 http 和 https 两个，而默认浏览器输入 <code>ifmet.cn</code> 顶级域名，默认是选择 http 这个，会有警告小锁提示。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Default server configuration</span>
server <span class="token punctuation">&#123;</span>
        listen <span class="token number">80</span> default_server<span class="token punctuation">;</span>
        listen <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:80 default_server<span class="token punctuation">;</span>


        server_name ifmet.cn www.ifmet.cn<span class="token punctuation">;</span>
        <span class="token builtin class-name">return</span> <span class="token number">301</span> https://<span class="token variable">$server_name</span><span class="token variable">$request_uri</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

server <span class="token punctuation">&#123;</span>

        <span class="token comment"># SSL configuration</span>
        <span class="token comment">#</span>
        listen <span class="token number">443</span> ssl default_server<span class="token punctuation">;</span>
        listen <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:443 ssl default_server<span class="token punctuation">;</span>

        ssl_certificate      /usr/share/nginx/cert/5222721_ifmet.cn.pem<span class="token punctuation">;</span>
        ssl_certificate_key  /usr/share/nginx/cert/5222721_ifmet.cn.key<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="检测配置-nginx-成功"><a href="#检测配置-nginx-成功" class="headerlink" title="检测配置 nginx 成功"></a>检测配置 nginx 成功</h3><p>执行命令，检测配置 nginx 知否正确，</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> nginx <span class="token parameter variable">-t</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>配置成功也会输出如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx: the configuration <span class="token function">file</span> /etc/nginx/nginx.conf syntax is ok
nginx: configuration <span class="token function">file</span> /etc/nginx/nginx.conf <span class="token builtin class-name">test</span> is successful<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<br>

<p>重启服务器后（也可重启服务器），</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>

<h3 id="访问成功"><a href="#访问成功" class="headerlink" title="访问成功"></a>访问成功</h3><p>再次在 <code>chrome</code> 中输入域名；即可看到安装的小锁，开启 https 访问成功。</p>
<br>

<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>若是遇到中途遇到页面访问报错如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">400</span> Bad Request
The plain HTTP request was sent to HTTPS port
nginx/1.18.0 <span class="token punctuation">(</span>Ubuntu<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>则通常是将配置下面两行的时候，多加了一行 <code>ssl on;</code>，将其删掉、或注释掉、或者改写为  <code>ssl off;</code> 即可</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssl on<span class="token punctuation">;</span>
ssl_certificate      /usr/share/nginx/cert/5222721_ifmet.cn.pem<span class="token punctuation">;</span>
ssl_certificate_key  /usr/share/nginx/cert/5222721_ifmet.cn.key<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.csdn.net/mangrandi/article/details/80427863">阿里云+Ubuntu+nginx+https的证书申请与配置</a> </li>
<li><a href="https://blog.csdn.net/henryhu712/article/details/85217371">Ubuntu 下配置 Nginx 服务器的 SSL 证书</a> </li>
<li><a href="https://blog.csdn.net/palmer_kai/article/details/89668053">nginx 配置 http, https可以同时访问（报错： The plain HTTP request was sent to HTTPS port）</a></li>
</ul>
]]></content>
      <categories>
        <category>学习 - Linux</category>
        <category>学习 - Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>阿里云服务器部署 Hexo 博客</title>
    <url>/posts/5490ca44/</url>
    <content><![CDATA[<p>​		<strong>简  述：</strong> 在阿里云服务器 <code>Ubuntu 20.04</code> 上部署 <code>Hexo</code> 博客。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>



<br>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​		初，将 <code>hexo</code> 部署在 <code>GitHub</code>，因访问较慢；不久，改成 <code>hexo</code> 部署在 <code>GitHub + Coding</code> 双线程解析，实测 <code>coding</code> 是韩国的服务器，访问加速不明显（现在好像升级了，没继续了解）；数月后，今改成 <code>阿里云 + GitHub</code> 解析国内外访问，用上我心爱的小服务器（偕臧自家用，豆腐店）。</p>
<br>

<h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><h3 id="连接远程服务器"><a href="#连接远程服务器" class="headerlink" title="连接远程服务器"></a>连接远程服务器</h3><p>​		阿里云购买 <strong>“轻量应用服务器”</strong> ，安装 <code>Ubuntu 20.04</code>；面板左侧点击 <strong>“服务器运维-远程连接”</strong> ，设置 root 密码后重启电脑生效，在本机使用 <code>ssh + root@20.21.01.11</code> 登录 （此假设我购买的阿里云服务器公网<code>IP</code> 为 <code>20.21.01.11</code>，寓意新年）。</p>
<br>

<h3 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h3><p>创建新用户 <code>xmuli</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adduser xmuli
<span class="token function">chmod</span> <span class="token number">740</span> /etc/sudoers
<span class="token function">vim</span> /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>找到如下 <code>root    ALL=(ALL:ALL) ALL</code> 后，在其下面添加一行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xmuli   <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL:ALL<span class="token punctuation">)</span> ALL  <span class="token comment"># xmuli 替换为自己用户名</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>获取 <code>root</code> 权限</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> xmuli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>

<h3 id="切换新用户"><a href="#切换新用户" class="headerlink" title="切换新用户"></a>切换新用户</h3><p>切换为新建的用户后（<strong>后面都是此用户和其 <code>~</code> 目录下工作</strong> ），安装一些常用软件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> xmuli
<span class="token builtin class-name">cd</span> ~
<span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">vim</span> <span class="token function">git</span> <span class="token function">htop</span> screenfetch <span class="token function">curl</span> <span class="token function">wget</span> <span class="token comment"># zsh 暂没安装</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="配置-SSH"><a href="#配置-SSH" class="headerlink" title="配置 SSH"></a>配置 <code>SSH</code></h3><p>创建 <code>~/.ssh</code> 和 <code>authorized_keys</code> 文件，赋予权限</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> ~/.ssh
<span class="token function">vim</span> ~/.ssh/authorized_keys  <span class="token comment"># authorized_keys 名字不能变</span>
<span class="token function">chmod</span> <span class="token number">600</span> ~/.ssh/authorized_keys 
<span class="token function">chmod</span> <span class="token number">700</span> ~/.ssh/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后切回本机，将 <code>cat ~/.ssh/id_rsa.pub</code> 的结果复制到 远程服务器的<code>~/.ssh/authorized_keys</code>里面；在本地测试，验证 <code>ssh</code> 无密码登录</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-v</span> xmuli@20.21.01.11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br>

<h3 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 <code>Git</code></h3><p>创建 <code>Git</code> 裸库 <code>blog.git</code>，和工作目录 <code>blog</code>（存放解析后 <code>html</code> 文件）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~
<span class="token function">mkdir</span> blog
<span class="token function">git</span> init <span class="token parameter variable">--bare</span> blog.git
<span class="token function">vim</span> blog.git/hooks/post-receive  <span class="token comment"># 创建新文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>里面 <code>post-receive</code> 添加 <code>hook</code> 钩子，</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#！/bin/sh</span>
<span class="token function">git</span> --work-tree<span class="token operator">=</span>/home/xmuli/blog --git-dir<span class="token operator">=</span>/home/xmuli/blog.git checkout <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>添加运行权限</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x blog.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<p>若执行 <code>git clone xmuli@20.21.01.11:/home/xmuli/blog.git</code> 可下载云服务器该 git 仓库</p>
<br>

<h3 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 <code>nginx</code></h3><p>安装  <code>nginx</code> 和修改对应配置文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span>
<span class="token function">sudo</span> <span class="token function">vim</span> /etc/nginx/sites-available/default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>找到</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># include snippets/snakeoil.conf;</span>

root /var/www/html<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>替换为</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># include snippets/snakeoil.conf;</span>

root /home/xmuli/blog<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>执行 <code>service nginx status</code>  查看 nginx 状态，其默认状态是运行中（服务开始了） + 开机自启 （<strong>若是没有，需要执行此状态</strong> ）；命令可参考 <a href="https://juejin.cn/post/6844904000769245191">【译】你必需知道的10个 Nginx 常用命令</a> 。</p>
<p>若此刻直接访问云服务器的公网 IP 会显示 nginx 欢迎界面，因为此时 <code>/home/xmuli/blog</code> 文件夹为空，没有任何 html 文件。</p>
<br>

<h2 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置:"></a>本地配置:</h2><h3 id="创建-hexo-文件夹"><a href="#创建-hexo-文件夹" class="headerlink" title="创建 hexo 文件夹"></a>创建 <code>hexo</code> 文件夹</h3><p>本地创建一个测试的 <code>hexoBlog</code> 的博客文件夹，用来最小化验证部署正确。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~
hexo init hexoBlog                       <span class="token comment"># 创建和初始化 hexoBlog 文件夹</span>
cnpm <span class="token function">install</span>                             <span class="token comment"># 安装插件</span>
cnpm <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span>    <span class="token comment"># hexo d 部署插件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>修改 <code>hexoBlog</code> 根目录下的配置文件 <code>_config.yml</code> ，末尾修改为</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Deployment</span>
<span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span>
deploy:
  type: <span class="token function">git</span>
  repo: xmuli@20.21.01.11:/home/xmuli/blog.git
  branch: master                           
  message: <span class="token string">'站点更新:&#123;&#123;now("YYYY-MM-DD HH:mm:ss")&#125;&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="部署到远程服务器"><a href="#部署到远程服务器" class="headerlink" title="部署到远程服务器"></a>部署到远程服务器</h3><p>在本机中 <code>~/hexoBlog</code> 路径下，执行部署</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean   <span class="token comment"># 清理</span>
hexo g       <span class="token comment"># 生成 html 文件</span>
hexo s       <span class="token comment"># 在本机浏览器预览效果</span>
hexo d       <span class="token comment"># 部署，会自动将生成的 html 文件， push 到阿里云服务器的 /home/xmuli/blog 文件夹中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后<strong>重启阿里云服务器后，浏览器输入服务器公网 <code>IP</code></strong> ，即可网页看到解析后的部署网页 “Hello World”。</p>
<p>最后替换为自己的真实博客文件夹的 <code>_config.yml</code> 文件末尾处替换为如上，重新执行 <code>hexo d</code> 部署即可成功；可以生成一个快照哦~，以防万一</p>
<br>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://zhengyujie.github.io/2019/08/17/%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/">Hexo博客部署到阿里云服务器</a> </li>
<li><a href="https://www.jianshu.com/p/e1ccd49b4e5d">Hexo部署在阿里云服务器上</a> </li>
<li><a href="http://blog.zhangkexuan.cn/2020/10/25/hexo-aliyun/#%E5%88%9D%E5%A7%8B%E5%8C%96git%E4%BB%93%E5%BA%93%EF%BC%8C%E4%BD%9C%E4%B8%BAhexo%E9%83%A8%E7%BD%B2-deploy-%E7%9A%84%E8%BF%9C%E7%AB%AFgit%E4%BB%93%E5%BA%93">hexo搭建在阿里云服务器上(Ubuntu 20.04)</a></li>
</ul>
]]></content>
      <categories>
        <category>学习 - Linux</category>
        <category>学习 - Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>高分屏、分辨率、DPI、PPI，及 Qt 处理高分屏</title>
    <url>/posts/359aeda5/</url>
    <content><![CDATA[<p><strong>简  述：</strong>　高分屏、<code>DPI</code>、<code>PPI</code>、屏幕分辨率的一些基本知识，以及使用 <code>Qt</code> 处理高分屏的一些方法集合归纳。</p>
<span id="more"></span>

<p>[TOC]</p>
<br>

<blockquote>
<p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p>
</blockquote>
<br>

<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p><strong>英寸：</strong> inch，复数：inches；缩写为in或″，或 <strong>英吋</strong>，简作 <strong>吋</strong>。1 英寸（inch） &#x3D; 2.54 厘米（cm）&#x3D; 25.4 毫米（mm）。</p>
<p><strong>像素：</strong> pixel 或 pel，为影像显示的基本单位，可看作一个点或方块（不是距离单位）。每个像素有自己的RGB值，单位面积的像素越多，则表示其分辨率越高。</p>
<p><strong>PPI:</strong>   每英寸的像素个数（此处一英寸为对角线长度、且说的是像素密度）。由 <strong>分辨率</strong> 中X或Y轴的数字除以该轴的长度(英寸)，可得该轴的像素每英寸密度。</p>
<p><strong>DPI：</strong> 每英寸的点个数（此处一英寸为对角线长度、且说的是打印点密度）。</p>
<br>

<blockquote>
<p>PPI 通常使用于计算机屏幕，DPI 通常使用于打印机；但是这两者之间通常被混用，需要在具体的上下文去理解其含义。</p>
</blockquote>
<hr>
<br>

<p><strong>屏幕尺寸：</strong> 指的是一个电子设备的屏幕对角线的长度。</p>
<p><strong>分辨率：</strong> 是指宽度上和高度上最多能显示的物理像素点个数（说的是块屏幕的像素尺寸）。</p>
<p><strong>点距：</strong> 像素与像素之间的距离，点距和屏幕尺寸决定了分辨率大小</p>
<p><strong>设备像素(又称为物理像素)：</strong> 指设备能控制显示的最小物理单位，意指显示器上一个个的点。从屏幕在工厂生产出的那天起，它上面设备像素点就固定不变了，和屏幕尺寸大小有关，单位 pt。</p>
<p><strong>设备独立像素(也叫密度无关像素或逻辑像素)：</strong> 可以认为是计算机坐标系统中得一个点，这个点代表一个可以由程序使用的虚拟像素(比如: css像素)，这个点是没有固定大小的，越小越清晰，然后由相关系统转换为物理像素。</p>
<p><strong>css像素(也叫虚拟像素)：</strong> 指的是 CSS 样式代码中使用的逻辑像素，在 CSS 规范中，长度单位可以分为两类，绝对(absolute)单位以及相对(relative)单位。px 是一个相对单位，相对的是设备像素(device pixel)。</p>
<p><strong>设备像素比（devicePixelRatio）：</strong> 设备像素比 &#x3D; 设备像素 &#x2F; 设备独立像素。(在Retina屏的iphone上，DPR为2，1个css像素相当于2个物理像素)</p>
<ul>
<li>普通密度桌面显示屏的 devicePixelRatio&#x3D;1</li>
<li>高密度桌面显示屏(Mac Retina)的 devicePixelRatio&#x3D;2</li>
<li>主流手机显示屏的 devicePixelRatio&#x3D;2或3</li>
</ul>
<hr>
<br>

<p><strong>视网膜显示屏  &#x3D;&#x3D;  Retina显示屏</strong></p>
<p><strong>高PPI(硬件) + HiDPI渲染(软件) &#x3D; 更细腻的显示效果(retina)</strong></p>
<br>

<h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p>提供几种解决方案，若有更好的欢迎补充</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 2022-06-18 高分屏适配的许多尝试:</span>
<span class="token comment">//【方案一】 Qt 5.14+, 解决 1.5会缩放到2倍，不过显示会有问题，比如按钮之间时不时会有虚线。</span>
<span class="token function">qputenv</span><span class="token punctuation">(</span><span class="token string">"QT_ENABLE_HIGHDPI_SCALING"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">QGuiApplication</span><span class="token double-colon punctuation">::</span><span class="token function">setHighDpiScaleFactorRoundingPolicy</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>HighDpiScaleFactorRoundingPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//【方案二】 Qt5.12 替代方案</span>
<span class="token function">qputenv</span><span class="token punctuation">(</span><span class="token string">"QT_AUTO_SCREEN_SCALE_FACTOR"</span><span class="token punctuation">,</span> <span class="token string">"1.5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 【方案三】 Qt5.12 替代方案</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>QT_VERSION <span class="token operator">>=</span> <span class="token function">QT_VERSION_CHECK</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
    <span class="token function">qputenv</span><span class="token punctuation">(</span><span class="token string">"QT_SCALE_FACTOR"</span><span class="token punctuation">,</span> <span class="token string">"1.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局缩放因子 https://blog.csdn.net/u014410266/article/details/107488789</span>
    <span class="token class-name">QApplication</span><span class="token double-colon punctuation">::</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>AA_EnableHighDpiScaling<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">//【方案四】 使用 windows 自带的</span>
exe 统计目录下使用 qt<span class="token punctuation">.</span>conf 文件

<span class="token comment">// 三种方案 https://blog.csdn.net/hanjiang08/article/details/124653265</span>
<span class="token comment">// https://blog.csdn.net/qq_18260845/article/details/103861201</span>
<span class="token comment">// https://blog.csdn.net/feiyangqingyun/article/details/124860909</span>
    
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span><span class="token expression"><span class="token punctuation">(</span>QT_VERSION <span class="token operator">></span> <span class="token function">QT_VERSION_CHECK</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token comment">//    QGuiApplication::setAttribute(Qt::AA_EnableHighDpiScaling);  // 2K、4K 2@ 倍；获取的分辨率 4K 下实际为 /2 后。 此行需在 QApplication a(argc,argv);前面</span>
<span class="token comment">//    QCoreApplication::setAttribute(Qt::AA_UseHighDpiPixmaps);    // 控制图片缩放质量，svg 的图片不会模糊在 4K 上。   此行无需在 QApplication a(argc,argv);前面</span>
    qApp<span class="token operator">-></span><span class="token function">setAttribute</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>AA_UseHighDpiPixmaps<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 若上面一行没有生效，但是此行可以生效</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="物理-DPI-和-逻辑-DPI"><a href="#物理-DPI-和-逻辑-DPI" class="headerlink" title="物理 DPI 和 逻辑 DPI"></a>物理 DPI 和 逻辑 DPI</h3><blockquote>
<p>A note on logical vs physical dots per inch: physical DPI is based on the actual physical pixel sizes when available, and is useful for print preview and other cases where it’s desirable to know the exact physical dimensions of screen displayed contents.</p>
<p>Logical dots per inch are used to convert font and user interface elements from point sizes to pixel sizes, and might be different from the physical dots per inch. The logical dots per inch are sometimes user-settable in the desktop environment’s settings panel, to let the user globally control UI and font sizes in different applications.</p>
<p><strong>source：<a href="https://doc.qt.io/qt-5/qscreen.html">https://doc.qt.io/qt-5/qscreen.html</a></strong></p>
</blockquote>
<p>物理 DPI：基于实际的物理像素尺寸</p>
<p>逻辑 DPI：将字体和用户界面元素从点大小转换为像素大小。可在系统中由用户手动更改（如开启 150% 缩放）。</p>
<p>由测试可知，在”设置-显示”中，调节”显示器分辨率”，会改变获取的 Physical DPI 数值；而调节”缩放比”，会改变 Logical DPI 数值。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">------------------------------------------
4K<span class="token punctuation">(</span><span class="token number">3480</span>*2160<span class="token punctuation">)</span> <span class="token number">150</span>% 缩放比
------------------------------------------
devicePixelRatio: <span class="token number">1</span> physicalSize: QSizeF<span class="token punctuation">(</span><span class="token number">600</span>, <span class="token number">340</span><span class="token punctuation">)</span>   refreshRate: <span class="token number">59</span>  size: QSize<span class="token punctuation">(</span><span class="token number">3840</span>, <span class="token number">2160</span><span class="token punctuation">)</span> Scale: <span class="token number">1.5</span>
Physical DPI: <span class="token number">161.962</span>   DPIX: <span class="token number">162.56</span>   DPIY: <span class="token number">161.365</span>
 Logical DPI: <span class="token number">144</span>   DPIX: <span class="token number">144</span>   DPIY: <span class="token number">144</span>

------------------------------------------
4K<span class="token punctuation">(</span><span class="token number">1920</span>*1080<span class="token punctuation">)</span> <span class="token number">150</span>% 缩放比
------------------------------------------
devicePixelRatio: <span class="token number">1</span> physicalSize: QSizeF<span class="token punctuation">(</span><span class="token number">600</span>, <span class="token number">340</span><span class="token punctuation">)</span>   refreshRate: <span class="token number">59</span> size: QSize<span class="token punctuation">(</span><span class="token number">1920</span>, <span class="token number">1080</span><span class="token punctuation">)</span>  Scale: <span class="token number">1.5</span>
Physical DPI: <span class="token number">80.9812</span>   DPIX: <span class="token number">81.28</span>   DPIY: <span class="token number">80.6824</span>
 Logical DPI: <span class="token number">144</span>   DPIX: <span class="token number">144</span>   DPIY: <span class="token number">144</span>
 
------------------------------------------
4K<span class="token punctuation">(</span><span class="token number">1920</span>*1080<span class="token punctuation">)</span> <span class="token number">100</span>% 缩放比
------------------------------------------
devicePixelRatio: <span class="token number">1</span> physicalSize: QSizeF<span class="token punctuation">(</span><span class="token number">600</span>, <span class="token number">340</span><span class="token punctuation">)</span>   refreshRate: <span class="token number">59</span> size: QSize<span class="token punctuation">(</span><span class="token number">1920</span>, <span class="token number">1080</span><span class="token punctuation">)</span>  Scale: <span class="token number">1</span>  
Physical DPI: <span class="token number">80.9812</span>   DPIX: <span class="token number">81.28</span>   DPIY: <span class="token number">80.6824</span>
 Logical DPI: <span class="token number">96</span>   DPIX: <span class="token number">96</span>   DPIY: <span class="token number">96</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul>
<li><p><a href="https://blog.csdn.net/lxj362343/article/details/108338706">Qt 字体字号和字体像素关系</a> 推荐</p>
</li>
<li><p>——————————-其它资料—————————</p>
</li>
<li><p><a href="https://www.zhihu.com/question/40506180/answer/164301075">逻辑分辨率和物理分辨率到底是什么呀？ - PeterZ的回答 - 知乎</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/swarmbees/p/12004594.html">Qt之高DPI显示器(一) - 解决方案整理</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/5cf1f9be264b">分辨率，PPi,DPI,DPR,物理像素，逻辑像素区别</a></p>
</li>
<li><p><a href="https://juejin.im/entry/6844903520081018894">前端不止：Retina屏幕下两倍图</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/20684620">有关retina和HiDPI那点事</a></p>
</li>
<li><p><a href="https://www.zhihu.com/question/20515881/answer/54799111">对于 Retina Display 有哪些误解？ - mysqto的回答 - 知乎</a></p>
</li>
<li><p><a href="https://blog.csdn.net/hyongilfmmm/article/details/83233589">Qt 2D绘图(5)：绘制图像基础</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_40925722/article/details/88373436">C++ Qt 高分屏处理心得_超哥的博客-CSDN博客</a></p>
</li>
<li><p><a href="https://blog.csdn.net/u014597198/article/details/86149979">(52条消息)Qt on Mac 开发之 Qt在Retina屏幕上的那些问题_沙师弟专栏-CSDN博客</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_42132304/article/details/104667560">QT控件字体根据系统缩放比例(DPI)自适应_weixin_42132304的博客-CSDN博客</a></p>
</li>
<li><p><a href="https://doc.qt.io/qt-5/highdpi.html">高DPI显示| Qt 5.15</a></p>
</li>
<li><p><a href="https://fantab01.com/articles/%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%E3%80%81%E9%80%BB%E8%BE%91%E5%83%8F%E7%B4%A0%E4%B8%8Eppi%E3%80%81dpi/">物理像素、逻辑像素与PPI、DPI – fantab01的博客</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习 - Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
</search>
